
c:/Users/percy/Documents/Particle/LPOD_V2-0-0/target/6.1.0/argon/LPOD_V2-0-0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002b44  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6b60  000b6b60  00006b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000074  2003e610  000b6b84  0000e610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000178  2003e684  2003e684  0001e684  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b6bf8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b6bfc  000b6bfc  00016bfc  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b6c02  000b6c02  00016c02  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b6c26  000b6c26  00016c26  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0017dc36  00000000  00000000  00016c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00012bd1  00000000  00000000  00194860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0005ca4f  00000000  00000000  001a7431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002e40  00000000  00000000  00203e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000e560  00000000  00000000  00206cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037a5b  00000000  00000000  00215220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00045929  00000000  00000000  0024cc7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001c2652  00000000  00000000  002925a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008978  00000000  00000000  00454bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f002 f9ad 	bl	b63b0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f002 f9cf 	bl	b6400 <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e610 	.word	0x2003e610
   b406c:	000b6b84 	.word	0x000b6b84
   b4070:	2003e684 	.word	0x2003e684
   b4074:	2003e684 	.word	0x2003e684
   b4078:	2003e7fc 	.word	0x2003e7fc

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f001 fcd3 	bl	b5a2c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b6b3c 	.word	0x000b6b3c
   b40a0:	000b6b60 	.word	0x000b6b60

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b848 	b.w	b4138 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f853 	bl	b4154 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f001 bc73 	b.w	b599c <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 bac5 	b.w	b4644 <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 bac3 	b.w	b4644 <malloc>

000b40be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40be:	f000 bac9 	b.w	b4654 <free>
	...

000b40c4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40c4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40c6:	4a03      	ldr	r2, [pc, #12]	; (b40d4 <__cxa_pure_virtual+0x10>)
   b40c8:	4903      	ldr	r1, [pc, #12]	; (b40d8 <__cxa_pure_virtual+0x14>)
   b40ca:	200c      	movs	r0, #12
   b40cc:	f000 f9f6 	bl	b44bc <panic_>
  while (1);
   b40d0:	e7fe      	b.n	b40d0 <__cxa_pure_virtual+0xc>
   b40d2:	bf00      	nop
   b40d4:	000b433d 	.word	0x000b433d
   b40d8:	000b66f4 	.word	0x000b66f4

000b40dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40dc:	7800      	ldrb	r0, [r0, #0]
   b40de:	fab0 f080 	clz	r0, r0
   b40e2:	0940      	lsrs	r0, r0, #5
   b40e4:	4770      	bx	lr

000b40e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40e6:	2301      	movs	r3, #1
   b40e8:	7003      	strb	r3, [r0, #0]
   b40ea:	4770      	bx	lr

000b40ec <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40ec:	4770      	bx	lr
	...

000b40f0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b40f0:	4b0a      	ldr	r3, [pc, #40]	; (b411c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b40f2:	b510      	push	{r4, lr}
   b40f4:	4604      	mov	r4, r0
   b40f6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b40f8:	f000 fdd8 	bl	b4cac <_ZN5spark10LogManager8instanceEv>
   b40fc:	4621      	mov	r1, r4
   b40fe:	f001 f822 	bl	b5146 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4102:	f001 fd9f 	bl	b5c44 <_Z16_fetch_usbserialv>
   b4106:	f001 fd91 	bl	b5c2c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b410a:	4620      	mov	r0, r4
   b410c:	4b04      	ldr	r3, [pc, #16]	; (b4120 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b410e:	f840 3b04 	str.w	r3, [r0], #4
   b4112:	f000 fea1 	bl	b4e58 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4116:	4620      	mov	r0, r4
   b4118:	bd10      	pop	{r4, pc}
   b411a:	bf00      	nop
   b411c:	000b672c 	.word	0x000b672c
   b4120:	000b6714 	.word	0x000b6714

000b4124 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4124:	b510      	push	{r4, lr}
   b4126:	4604      	mov	r4, r0
    }
   b4128:	f7ff ffe2 	bl	b40f0 <_ZN5spark16SerialLogHandlerD1Ev>
   b412c:	4620      	mov	r0, r4
   b412e:	2124      	movs	r1, #36	; 0x24
   b4130:	f7ff ffc5 	bl	b40be <_ZdlPvj>
   b4134:	4620      	mov	r0, r4
   b4136:	bd10      	pop	{r4, pc}

000b4138 <setup>:
// Show system, cloud connectivity, and application logs over USB
// View logs with CLI using 'particle serial monitor --follow'
SerialLogHandler logHandler(LOG_LEVEL_INFO);

// setup() runs once, when the device is first turned on
void setup() {
   b4138:	b508      	push	{r3, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(const spark::NetworkClass& network = spark::Network) {
        spark_set_connection_property(SPARK_CLOUD_BIND_NETWORK_INTERFACE, static_cast<network_interface_t>(network), nullptr, nullptr);
   b413a:	4905      	ldr	r1, [pc, #20]	; (b4150 <setup+0x18>)
   b413c:	2300      	movs	r3, #0
   b413e:	461a      	mov	r2, r3
   b4140:	6849      	ldr	r1, [r1, #4]
   b4142:	2006      	movs	r0, #6
   b4144:	f000 fa6e 	bl	b4624 <spark_set_connection_property>
  // Put initialization like pinMode and begin functions here

  Particle.connect();
}
   b4148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
   b414c:	f000 ba62 	b.w	b4614 <spark_cloud_flag_connect>
   b4150:	2003e744 	.word	0x2003e744

000b4154 <loop>:

  // Example: Publish event to cloud every 10 seconds. Uncomment the next 3 lines to try it!
  // Log.info("Sending Hello World to the cloud!");
  // Particle.publish("Hello world!");
  // delay( 10 * 1000 ); // milliseconds and blocking - see docs for more info!
}
   b4154:	4770      	bx	lr

000b4156 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4156:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4158:	e9d0 5300 	ldrd	r5, r3, [r0]
   b415c:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b415e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4160:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4164:	42ae      	cmp	r6, r5
   b4166:	d004      	beq.n	b4172 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4168:	4628      	mov	r0, r5
   b416a:	f000 fb13 	bl	b4794 <_ZN6StringD1Ev>
   b416e:	3514      	adds	r5, #20
   b4170:	e7f8      	b.n	b4164 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4172:	6820      	ldr	r0, [r4, #0]
   b4174:	f000 fa6e 	bl	b4654 <free>
    AllocatorT::free(data_);
}
   b4178:	4620      	mov	r0, r4
   b417a:	bd70      	pop	{r4, r5, r6, pc}

000b417c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b417c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b417e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4180:	4604      	mov	r4, r0
   b4182:	460d      	mov	r5, r1
   b4184:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4186:	d916      	bls.n	b41b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4188:	4290      	cmp	r0, r2
   b418a:	d215      	bcs.n	b41b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b418c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4190:	1a75      	subs	r5, r6, r1
   b4192:	f1a1 0714 	sub.w	r7, r1, #20
   b4196:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4198:	42b7      	cmp	r7, r6
   b419a:	d01c      	beq.n	b41d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b419c:	b12c      	cbz	r4, b41aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b419e:	4631      	mov	r1, r6
   b41a0:	4620      	mov	r0, r4
   b41a2:	f000 fb60 	bl	b4866 <_ZN6StringC1EOS_>
   b41a6:	7c33      	ldrb	r3, [r6, #16]
   b41a8:	7423      	strb	r3, [r4, #16]
   b41aa:	4630      	mov	r0, r6
   b41ac:	f000 faf2 	bl	b4794 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b41b0:	3e14      	subs	r6, #20
   b41b2:	3c14      	subs	r4, #20
   b41b4:	e7f0      	b.n	b4198 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b41b6:	d00e      	beq.n	b41d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b41b8:	42b5      	cmp	r5, r6
   b41ba:	d00c      	beq.n	b41d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b41bc:	b12c      	cbz	r4, b41ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b41be:	4629      	mov	r1, r5
   b41c0:	4620      	mov	r0, r4
   b41c2:	f000 fb50 	bl	b4866 <_ZN6StringC1EOS_>
   b41c6:	7c2b      	ldrb	r3, [r5, #16]
   b41c8:	7423      	strb	r3, [r4, #16]
   b41ca:	4628      	mov	r0, r5
   b41cc:	f000 fae2 	bl	b4794 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b41d0:	3514      	adds	r5, #20
   b41d2:	3414      	adds	r4, #20
   b41d4:	e7f0      	b.n	b41b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b41d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b41d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b41d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b41dc:	2300      	movs	r3, #0
   b41de:	e9c0 3300 	strd	r3, r3, [r0]
   b41e2:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b41e4:	684f      	ldr	r7, [r1, #4]
   b41e6:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b41e8:	4604      	mov	r4, r0
   b41ea:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b41ec:	dd23      	ble.n	b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b41ee:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b41f2:	fb08 f007 	mul.w	r0, r8, r7
   b41f6:	f000 fa25 	bl	b4644 <malloc>
            if (!d) {
   b41fa:	4605      	mov	r5, r0
   b41fc:	b1d8      	cbz	r0, b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b41fe:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4202:	fb08 1202 	mla	r2, r8, r2, r1
   b4206:	f7ff ffb9 	bl	b417c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b420a:	6820      	ldr	r0, [r4, #0]
   b420c:	f000 fa22 	bl	b4654 <free>
        data_ = d;
   b4210:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4212:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4214:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4218:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b421c:	45b8      	cmp	r8, r7
   b421e:	d008      	beq.n	b4232 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4220:	4639      	mov	r1, r7
   b4222:	4628      	mov	r0, r5
   b4224:	f000 fb39 	bl	b489a <_ZN6StringC1ERKS_>
   b4228:	7c3b      	ldrb	r3, [r7, #16]
   b422a:	742b      	strb	r3, [r5, #16]
   b422c:	3714      	adds	r7, #20
   b422e:	3514      	adds	r5, #20
   b4230:	e7f4      	b.n	b421c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4232:	6873      	ldr	r3, [r6, #4]
   b4234:	6063      	str	r3, [r4, #4]
}
   b4236:	4620      	mov	r0, r4
   b4238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b423c <_GLOBAL__sub_I_SystemMode>:
   b423c:	b570      	push	{r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);
   b423e:	2100      	movs	r1, #0
}
   b4240:	b08c      	sub	sp, #48	; 0x30
SYSTEM_THREAD(ENABLED);
   b4242:	2001      	movs	r0, #1
   b4244:	f000 f95a 	bl	b44fc <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4248:	4b21      	ldr	r3, [pc, #132]	; (b42d0 <_GLOBAL__sub_I_SystemMode+0x94>)
    SleepResult() {}
   b424a:	4a22      	ldr	r2, [pc, #136]	; (b42d4 <_GLOBAL__sub_I_SystemMode+0x98>)
   b424c:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b424e:	2400      	movs	r4, #0
   b4250:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4254:	2002      	movs	r0, #2
   b4256:	f000 f949 	bl	b44ec <set_system_mode>
        capacity_(0) {
   b425a:	e9cd 4400 	strd	r4, r4, [sp]
   b425e:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4260:	f001 fcf0 	bl	b5c44 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4264:	4c1c      	ldr	r4, [pc, #112]	; (b42d8 <_GLOBAL__sub_I_SystemMode+0x9c>)
   b4266:	4605      	mov	r5, r0
   b4268:	4669      	mov	r1, sp
   b426a:	a803      	add	r0, sp, #12
   b426c:	f7ff ffb4 	bl	b41d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4270:	4626      	mov	r6, r4

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   b4272:	a903      	add	r1, sp, #12
   b4274:	a806      	add	r0, sp, #24
   b4276:	f7ff ffaf 	bl	b41d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b427a:	4b18      	ldr	r3, [pc, #96]	; (b42dc <_GLOBAL__sub_I_SystemMode+0xa0>)
   b427c:	f846 3b04 	str.w	r3, [r6], #4
   b4280:	a906      	add	r1, sp, #24
   b4282:	a809      	add	r0, sp, #36	; 0x24
   b4284:	f7ff ffa8 	bl	b41d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4288:	aa09      	add	r2, sp, #36	; 0x24
   b428a:	211e      	movs	r1, #30
   b428c:	4630      	mov	r0, r6
   b428e:	f001 f83d 	bl	b530c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4292:	a809      	add	r0, sp, #36	; 0x24
   b4294:	f7ff ff5f 	bl	b4156 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4298:	a806      	add	r0, sp, #24
   b429a:	f7ff ff5c 	bl	b4156 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b429e:	4b10      	ldr	r3, [pc, #64]	; (b42e0 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b42a0:	6023      	str	r3, [r4, #0]
   b42a2:	6225      	str	r5, [r4, #32]
   b42a4:	a803      	add	r0, sp, #12
   b42a6:	f7ff ff56 	bl	b4156 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b42aa:	4b0e      	ldr	r3, [pc, #56]	; (b42e4 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b42ac:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b42ae:	f001 fcc9 	bl	b5c44 <_Z16_fetch_usbserialv>
   b42b2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b42b6:	f001 fcb5 	bl	b5c24 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b42ba:	f000 fcf7 	bl	b4cac <_ZN5spark10LogManager8instanceEv>
   b42be:	4621      	mov	r1, r4
   b42c0:	f000 fefa 	bl	b50b8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   b42c4:	4668      	mov	r0, sp
   b42c6:	f7ff ff46 	bl	b4156 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   b42ca:	b00c      	add	sp, #48	; 0x30
   b42cc:	bd70      	pop	{r4, r5, r6, pc}
   b42ce:	bf00      	nop
   b42d0:	2003e684 	.word	0x2003e684
   b42d4:	ffff0000 	.word	0xffff0000
   b42d8:	2003e690 	.word	0x2003e690
   b42dc:	000b6714 	.word	0x000b6714
   b42e0:	000b6818 	.word	0x000b6818
   b42e4:	000b672c 	.word	0x000b672c

000b42e8 <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b42e8:	b513      	push	{r0, r1, r4, lr}
   b42ea:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b42ec:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b42ee:	b159      	cbz	r1, b4308 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b42f0:	9101      	str	r1, [sp, #4]
   b42f2:	f7ff fe9d 	bl	b4030 <strlen>
   b42f6:	6823      	ldr	r3, [r4, #0]
   b42f8:	9901      	ldr	r1, [sp, #4]
   b42fa:	68db      	ldr	r3, [r3, #12]
   b42fc:	4602      	mov	r2, r0
   b42fe:	4620      	mov	r0, r4
    }
   b4300:	b002      	add	sp, #8
   b4302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4306:	4718      	bx	r3
    }
   b4308:	b002      	add	sp, #8
   b430a:	bd10      	pop	{r4, pc}

000b430c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b430c:	b508      	push	{r3, lr}
   b430e:	4b02      	ldr	r3, [pc, #8]	; (b4318 <netdb_freeaddrinfo+0xc>)
   b4310:	681b      	ldr	r3, [r3, #0]
   b4312:	689b      	ldr	r3, [r3, #8]
   b4314:	9301      	str	r3, [sp, #4]
   b4316:	bd08      	pop	{r3, pc}
   b4318:	00030268 	.word	0x00030268

000b431c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b431c:	b508      	push	{r3, lr}
   b431e:	4b02      	ldr	r3, [pc, #8]	; (b4328 <netdb_getaddrinfo+0xc>)
   b4320:	681b      	ldr	r3, [r3, #0]
   b4322:	68db      	ldr	r3, [r3, #12]
   b4324:	9301      	str	r3, [sp, #4]
   b4326:	bd08      	pop	{r3, pc}
   b4328:	00030268 	.word	0x00030268

000b432c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b432c:	b508      	push	{r3, lr}
   b432e:	4b02      	ldr	r3, [pc, #8]	; (b4338 <HAL_RNG_GetRandomNumber+0xc>)
   b4330:	681b      	ldr	r3, [r3, #0]
   b4332:	685b      	ldr	r3, [r3, #4]
   b4334:	9301      	str	r3, [sp, #4]
   b4336:	bd08      	pop	{r3, pc}
   b4338:	00030218 	.word	0x00030218

000b433c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b433c:	b508      	push	{r3, lr}
   b433e:	4b02      	ldr	r3, [pc, #8]	; (b4348 <HAL_Delay_Microseconds+0xc>)
   b4340:	681b      	ldr	r3, [r3, #0]
   b4342:	68db      	ldr	r3, [r3, #12]
   b4344:	9301      	str	r3, [sp, #4]
   b4346:	bd08      	pop	{r3, pc}
   b4348:	00030218 	.word	0x00030218

000b434c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b434c:	b508      	push	{r3, lr}
   b434e:	4b02      	ldr	r3, [pc, #8]	; (b4358 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4350:	681b      	ldr	r3, [r3, #0]
   b4352:	695b      	ldr	r3, [r3, #20]
   b4354:	9301      	str	r3, [sp, #4]
   b4356:	bd08      	pop	{r3, pc}
   b4358:	00030218 	.word	0x00030218

000b435c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b435c:	b508      	push	{r3, lr}
   b435e:	4b02      	ldr	r3, [pc, #8]	; (b4368 <os_mutex_recursive_create+0xc>)
   b4360:	681b      	ldr	r3, [r3, #0]
   b4362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4364:	9301      	str	r3, [sp, #4]
   b4366:	bd08      	pop	{r3, pc}
   b4368:	00030248 	.word	0x00030248

000b436c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b436c:	b508      	push	{r3, lr}
   b436e:	4b02      	ldr	r3, [pc, #8]	; (b4378 <os_mutex_recursive_destroy+0xc>)
   b4370:	681b      	ldr	r3, [r3, #0]
   b4372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4374:	9301      	str	r3, [sp, #4]
   b4376:	bd08      	pop	{r3, pc}
   b4378:	00030248 	.word	0x00030248

000b437c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b437c:	b508      	push	{r3, lr}
   b437e:	4b02      	ldr	r3, [pc, #8]	; (b4388 <os_mutex_recursive_lock+0xc>)
   b4380:	681b      	ldr	r3, [r3, #0]
   b4382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4384:	9301      	str	r3, [sp, #4]
   b4386:	bd08      	pop	{r3, pc}
   b4388:	00030248 	.word	0x00030248

000b438c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b438c:	b508      	push	{r3, lr}
   b438e:	4b02      	ldr	r3, [pc, #8]	; (b4398 <os_mutex_recursive_unlock+0xc>)
   b4390:	681b      	ldr	r3, [r3, #0]
   b4392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4394:	9301      	str	r3, [sp, #4]
   b4396:	bd08      	pop	{r3, pc}
   b4398:	00030248 	.word	0x00030248

000b439c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b439c:	b508      	push	{r3, lr}
   b439e:	4b02      	ldr	r3, [pc, #8]	; (b43a8 <inet_inet_ntop+0xc>)
   b43a0:	681b      	ldr	r3, [r3, #0]
   b43a2:	695b      	ldr	r3, [r3, #20]
   b43a4:	9301      	str	r3, [sp, #4]
   b43a6:	bd08      	pop	{r3, pc}
   b43a8:	00030264 	.word	0x00030264

000b43ac <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b43ac:	b508      	push	{r3, lr}
   b43ae:	4b02      	ldr	r3, [pc, #8]	; (b43b8 <hal_usart_end+0xc>)
   b43b0:	681b      	ldr	r3, [r3, #0]
   b43b2:	689b      	ldr	r3, [r3, #8]
   b43b4:	9301      	str	r3, [sp, #4]
   b43b6:	bd08      	pop	{r3, pc}
   b43b8:	0003023c 	.word	0x0003023c

000b43bc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b43bc:	b508      	push	{r3, lr}
   b43be:	4b02      	ldr	r3, [pc, #8]	; (b43c8 <hal_usart_write+0xc>)
   b43c0:	681b      	ldr	r3, [r3, #0]
   b43c2:	68db      	ldr	r3, [r3, #12]
   b43c4:	9301      	str	r3, [sp, #4]
   b43c6:	bd08      	pop	{r3, pc}
   b43c8:	0003023c 	.word	0x0003023c

000b43cc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b43cc:	b508      	push	{r3, lr}
   b43ce:	4b02      	ldr	r3, [pc, #8]	; (b43d8 <hal_usart_available+0xc>)
   b43d0:	681b      	ldr	r3, [r3, #0]
   b43d2:	691b      	ldr	r3, [r3, #16]
   b43d4:	9301      	str	r3, [sp, #4]
   b43d6:	bd08      	pop	{r3, pc}
   b43d8:	0003023c 	.word	0x0003023c

000b43dc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b43dc:	b508      	push	{r3, lr}
   b43de:	4b02      	ldr	r3, [pc, #8]	; (b43e8 <hal_usart_read+0xc>)
   b43e0:	681b      	ldr	r3, [r3, #0]
   b43e2:	695b      	ldr	r3, [r3, #20]
   b43e4:	9301      	str	r3, [sp, #4]
   b43e6:	bd08      	pop	{r3, pc}
   b43e8:	0003023c 	.word	0x0003023c

000b43ec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b43ec:	b508      	push	{r3, lr}
   b43ee:	4b02      	ldr	r3, [pc, #8]	; (b43f8 <hal_usart_peek+0xc>)
   b43f0:	681b      	ldr	r3, [r3, #0]
   b43f2:	699b      	ldr	r3, [r3, #24]
   b43f4:	9301      	str	r3, [sp, #4]
   b43f6:	bd08      	pop	{r3, pc}
   b43f8:	0003023c 	.word	0x0003023c

000b43fc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b43fc:	b508      	push	{r3, lr}
   b43fe:	4b02      	ldr	r3, [pc, #8]	; (b4408 <hal_usart_flush+0xc>)
   b4400:	681b      	ldr	r3, [r3, #0]
   b4402:	69db      	ldr	r3, [r3, #28]
   b4404:	9301      	str	r3, [sp, #4]
   b4406:	bd08      	pop	{r3, pc}
   b4408:	0003023c 	.word	0x0003023c

000b440c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b440c:	b508      	push	{r3, lr}
   b440e:	4b02      	ldr	r3, [pc, #8]	; (b4418 <hal_usart_available_data_for_write+0xc>)
   b4410:	681b      	ldr	r3, [r3, #0]
   b4412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4414:	9301      	str	r3, [sp, #4]
   b4416:	bd08      	pop	{r3, pc}
   b4418:	0003023c 	.word	0x0003023c

000b441c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b441c:	b508      	push	{r3, lr}
   b441e:	4b02      	ldr	r3, [pc, #8]	; (b4428 <hal_usart_begin_config+0xc>)
   b4420:	681b      	ldr	r3, [r3, #0]
   b4422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4424:	9301      	str	r3, [sp, #4]
   b4426:	bd08      	pop	{r3, pc}
   b4428:	0003023c 	.word	0x0003023c

000b442c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b442c:	b508      	push	{r3, lr}
   b442e:	4b02      	ldr	r3, [pc, #8]	; (b4438 <hal_usart_init_ex+0xc>)
   b4430:	681b      	ldr	r3, [r3, #0]
   b4432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4434:	9301      	str	r3, [sp, #4]
   b4436:	bd08      	pop	{r3, pc}
   b4438:	0003023c 	.word	0x0003023c

000b443c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b443c:	b508      	push	{r3, lr}
   b443e:	4b02      	ldr	r3, [pc, #8]	; (b4448 <HAL_USB_USART_Init+0xc>)
   b4440:	681b      	ldr	r3, [r3, #0]
   b4442:	681b      	ldr	r3, [r3, #0]
   b4444:	9301      	str	r3, [sp, #4]
   b4446:	bd08      	pop	{r3, pc}
   b4448:	0003024c 	.word	0x0003024c

000b444c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b444c:	b508      	push	{r3, lr}
   b444e:	4b02      	ldr	r3, [pc, #8]	; (b4458 <HAL_USB_USART_Begin+0xc>)
   b4450:	681b      	ldr	r3, [r3, #0]
   b4452:	685b      	ldr	r3, [r3, #4]
   b4454:	9301      	str	r3, [sp, #4]
   b4456:	bd08      	pop	{r3, pc}
   b4458:	0003024c 	.word	0x0003024c

000b445c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b445c:	b508      	push	{r3, lr}
   b445e:	4b02      	ldr	r3, [pc, #8]	; (b4468 <HAL_USB_USART_End+0xc>)
   b4460:	681b      	ldr	r3, [r3, #0]
   b4462:	689b      	ldr	r3, [r3, #8]
   b4464:	9301      	str	r3, [sp, #4]
   b4466:	bd08      	pop	{r3, pc}
   b4468:	0003024c 	.word	0x0003024c

000b446c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b446c:	b508      	push	{r3, lr}
   b446e:	4b02      	ldr	r3, [pc, #8]	; (b4478 <HAL_USB_USART_Available_Data+0xc>)
   b4470:	681b      	ldr	r3, [r3, #0]
   b4472:	691b      	ldr	r3, [r3, #16]
   b4474:	9301      	str	r3, [sp, #4]
   b4476:	bd08      	pop	{r3, pc}
   b4478:	0003024c 	.word	0x0003024c

000b447c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b447c:	b508      	push	{r3, lr}
   b447e:	4b02      	ldr	r3, [pc, #8]	; (b4488 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4480:	681b      	ldr	r3, [r3, #0]
   b4482:	695b      	ldr	r3, [r3, #20]
   b4484:	9301      	str	r3, [sp, #4]
   b4486:	bd08      	pop	{r3, pc}
   b4488:	0003024c 	.word	0x0003024c

000b448c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b448c:	b508      	push	{r3, lr}
   b448e:	4b02      	ldr	r3, [pc, #8]	; (b4498 <HAL_USB_USART_Receive_Data+0xc>)
   b4490:	681b      	ldr	r3, [r3, #0]
   b4492:	699b      	ldr	r3, [r3, #24]
   b4494:	9301      	str	r3, [sp, #4]
   b4496:	bd08      	pop	{r3, pc}
   b4498:	0003024c 	.word	0x0003024c

000b449c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b449c:	b508      	push	{r3, lr}
   b449e:	4b02      	ldr	r3, [pc, #8]	; (b44a8 <HAL_USB_USART_Send_Data+0xc>)
   b44a0:	681b      	ldr	r3, [r3, #0]
   b44a2:	69db      	ldr	r3, [r3, #28]
   b44a4:	9301      	str	r3, [sp, #4]
   b44a6:	bd08      	pop	{r3, pc}
   b44a8:	0003024c 	.word	0x0003024c

000b44ac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b44ac:	b508      	push	{r3, lr}
   b44ae:	4b02      	ldr	r3, [pc, #8]	; (b44b8 <HAL_USB_USART_Flush_Data+0xc>)
   b44b0:	681b      	ldr	r3, [r3, #0]
   b44b2:	6a1b      	ldr	r3, [r3, #32]
   b44b4:	9301      	str	r3, [sp, #4]
   b44b6:	bd08      	pop	{r3, pc}
   b44b8:	0003024c 	.word	0x0003024c

000b44bc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b44bc:	b508      	push	{r3, lr}
   b44be:	4b02      	ldr	r3, [pc, #8]	; (b44c8 <panic_+0xc>)
   b44c0:	681b      	ldr	r3, [r3, #0]
   b44c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b44c4:	9301      	str	r3, [sp, #4]
   b44c6:	bd08      	pop	{r3, pc}
   b44c8:	00030260 	.word	0x00030260

000b44cc <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b44cc:	b508      	push	{r3, lr}
   b44ce:	4b02      	ldr	r3, [pc, #8]	; (b44d8 <log_level_name+0xc>)
   b44d0:	681b      	ldr	r3, [r3, #0]
   b44d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b44d4:	9301      	str	r3, [sp, #4]
   b44d6:	bd08      	pop	{r3, pc}
   b44d8:	00030260 	.word	0x00030260

000b44dc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b44dc:	b508      	push	{r3, lr}
   b44de:	4b02      	ldr	r3, [pc, #8]	; (b44e8 <log_set_callbacks+0xc>)
   b44e0:	681b      	ldr	r3, [r3, #0]
   b44e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b44e4:	9301      	str	r3, [sp, #4]
   b44e6:	bd08      	pop	{r3, pc}
   b44e8:	00030260 	.word	0x00030260

000b44ec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b44ec:	b508      	push	{r3, lr}
   b44ee:	4b02      	ldr	r3, [pc, #8]	; (b44f8 <set_system_mode+0xc>)
   b44f0:	681b      	ldr	r3, [r3, #0]
   b44f2:	685b      	ldr	r3, [r3, #4]
   b44f4:	9301      	str	r3, [sp, #4]
   b44f6:	bd08      	pop	{r3, pc}
   b44f8:	00030220 	.word	0x00030220

000b44fc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b44fc:	b508      	push	{r3, lr}
   b44fe:	4b02      	ldr	r3, [pc, #8]	; (b4508 <system_thread_set_state+0xc>)
   b4500:	681b      	ldr	r3, [r3, #0]
   b4502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4504:	9301      	str	r3, [sp, #4]
   b4506:	bd08      	pop	{r3, pc}
   b4508:	00030220 	.word	0x00030220

000b450c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b450c:	b508      	push	{r3, lr}
   b450e:	4b03      	ldr	r3, [pc, #12]	; (b451c <system_ctrl_set_app_request_handler+0x10>)
   b4510:	681b      	ldr	r3, [r3, #0]
   b4512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4516:	9301      	str	r3, [sp, #4]
   b4518:	bd08      	pop	{r3, pc}
   b451a:	0000      	.short	0x0000
   b451c:	00030220 	.word	0x00030220

000b4520 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4520:	b508      	push	{r3, lr}
   b4522:	4b03      	ldr	r3, [pc, #12]	; (b4530 <system_ctrl_set_result+0x10>)
   b4524:	681b      	ldr	r3, [r3, #0]
   b4526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b452a:	9301      	str	r3, [sp, #4]
   b452c:	bd08      	pop	{r3, pc}
   b452e:	0000      	.short	0x0000
   b4530:	00030220 	.word	0x00030220

000b4534 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4534:	b508      	push	{r3, lr}
   b4536:	4b02      	ldr	r3, [pc, #8]	; (b4540 <network_connect+0xc>)
   b4538:	681b      	ldr	r3, [r3, #0]
   b453a:	685b      	ldr	r3, [r3, #4]
   b453c:	9301      	str	r3, [sp, #4]
   b453e:	bd08      	pop	{r3, pc}
   b4540:	00030240 	.word	0x00030240

000b4544 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4544:	b508      	push	{r3, lr}
   b4546:	4b02      	ldr	r3, [pc, #8]	; (b4550 <network_connecting+0xc>)
   b4548:	681b      	ldr	r3, [r3, #0]
   b454a:	689b      	ldr	r3, [r3, #8]
   b454c:	9301      	str	r3, [sp, #4]
   b454e:	bd08      	pop	{r3, pc}
   b4550:	00030240 	.word	0x00030240

000b4554 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4554:	b508      	push	{r3, lr}
   b4556:	4b02      	ldr	r3, [pc, #8]	; (b4560 <network_disconnect+0xc>)
   b4558:	681b      	ldr	r3, [r3, #0]
   b455a:	68db      	ldr	r3, [r3, #12]
   b455c:	9301      	str	r3, [sp, #4]
   b455e:	bd08      	pop	{r3, pc}
   b4560:	00030240 	.word	0x00030240

000b4564 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4564:	b508      	push	{r3, lr}
   b4566:	4b02      	ldr	r3, [pc, #8]	; (b4570 <network_ready+0xc>)
   b4568:	681b      	ldr	r3, [r3, #0]
   b456a:	691b      	ldr	r3, [r3, #16]
   b456c:	9301      	str	r3, [sp, #4]
   b456e:	bd08      	pop	{r3, pc}
   b4570:	00030240 	.word	0x00030240

000b4574 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4574:	b508      	push	{r3, lr}
   b4576:	4b02      	ldr	r3, [pc, #8]	; (b4580 <network_on+0xc>)
   b4578:	681b      	ldr	r3, [r3, #0]
   b457a:	695b      	ldr	r3, [r3, #20]
   b457c:	9301      	str	r3, [sp, #4]
   b457e:	bd08      	pop	{r3, pc}
   b4580:	00030240 	.word	0x00030240

000b4584 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4584:	b508      	push	{r3, lr}
   b4586:	4b02      	ldr	r3, [pc, #8]	; (b4590 <network_off+0xc>)
   b4588:	681b      	ldr	r3, [r3, #0]
   b458a:	699b      	ldr	r3, [r3, #24]
   b458c:	9301      	str	r3, [sp, #4]
   b458e:	bd08      	pop	{r3, pc}
   b4590:	00030240 	.word	0x00030240

000b4594 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4594:	b508      	push	{r3, lr}
   b4596:	4b02      	ldr	r3, [pc, #8]	; (b45a0 <network_listen+0xc>)
   b4598:	681b      	ldr	r3, [r3, #0]
   b459a:	69db      	ldr	r3, [r3, #28]
   b459c:	9301      	str	r3, [sp, #4]
   b459e:	bd08      	pop	{r3, pc}
   b45a0:	00030240 	.word	0x00030240

000b45a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b02      	ldr	r3, [pc, #8]	; (b45b0 <network_listening+0xc>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	6a1b      	ldr	r3, [r3, #32]
   b45ac:	9301      	str	r3, [sp, #4]
   b45ae:	bd08      	pop	{r3, pc}
   b45b0:	00030240 	.word	0x00030240

000b45b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b45b4:	b508      	push	{r3, lr}
   b45b6:	4b02      	ldr	r3, [pc, #8]	; (b45c0 <network_set_listen_timeout+0xc>)
   b45b8:	681b      	ldr	r3, [r3, #0]
   b45ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b45bc:	9301      	str	r3, [sp, #4]
   b45be:	bd08      	pop	{r3, pc}
   b45c0:	00030240 	.word	0x00030240

000b45c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b45c4:	b508      	push	{r3, lr}
   b45c6:	4b02      	ldr	r3, [pc, #8]	; (b45d0 <network_get_listen_timeout+0xc>)
   b45c8:	681b      	ldr	r3, [r3, #0]
   b45ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b45cc:	9301      	str	r3, [sp, #4]
   b45ce:	bd08      	pop	{r3, pc}
   b45d0:	00030240 	.word	0x00030240

000b45d4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b45d4:	b508      	push	{r3, lr}
   b45d6:	4b02      	ldr	r3, [pc, #8]	; (b45e0 <network_is_on+0xc>)
   b45d8:	681b      	ldr	r3, [r3, #0]
   b45da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b45dc:	9301      	str	r3, [sp, #4]
   b45de:	bd08      	pop	{r3, pc}
   b45e0:	00030240 	.word	0x00030240

000b45e4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b45e4:	b508      	push	{r3, lr}
   b45e6:	4b02      	ldr	r3, [pc, #8]	; (b45f0 <network_is_off+0xc>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45ec:	9301      	str	r3, [sp, #4]
   b45ee:	bd08      	pop	{r3, pc}
   b45f0:	00030240 	.word	0x00030240

000b45f4 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b02      	ldr	r3, [pc, #8]	; (b4600 <network_prefer+0xc>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b45fc:	9301      	str	r3, [sp, #4]
   b45fe:	bd08      	pop	{r3, pc}
   b4600:	00030240 	.word	0x00030240

000b4604 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <network_is_preferred+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	00030240 	.word	0x00030240

000b4614 <spark_cloud_flag_connect>:
DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <spark_cloud_flag_connect+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	68db      	ldr	r3, [r3, #12]
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	00030244 	.word	0x00030244

000b4624 <spark_set_connection_property>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <spark_set_connection_property+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	00030244 	.word	0x00030244

000b4634 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	00030244 	.word	0x00030244

000b4644 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <malloc+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	681b      	ldr	r3, [r3, #0]
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	0003021c 	.word	0x0003021c

000b4654 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <free+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	685b      	ldr	r3, [r3, #4]
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	0003021c 	.word	0x0003021c

000b4664 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <realloc+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	689b      	ldr	r3, [r3, #8]
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	0003021c 	.word	0x0003021c

000b4674 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <vsnprintf+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	0003021c 	.word	0x0003021c

000b4684 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <__errno+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	0003021c 	.word	0x0003021c

000b4694 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <__assert_func+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	0003021c 	.word	0x0003021c

000b46a4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <newlib_impure_ptr_callback+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	0003021c 	.word	0x0003021c

000b46b4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b46b4:	2200      	movs	r2, #0
   b46b6:	6840      	ldr	r0, [r0, #4]
   b46b8:	4611      	mov	r1, r2
   b46ba:	f7ff bf73 	b.w	b45a4 <network_listening>

000b46be <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b46be:	2200      	movs	r2, #0
   b46c0:	6840      	ldr	r0, [r0, #4]
   b46c2:	4611      	mov	r1, r2
   b46c4:	f7ff bf7e 	b.w	b45c4 <network_get_listen_timeout>

000b46c8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b46c8:	6840      	ldr	r0, [r0, #4]
   b46ca:	2200      	movs	r2, #0
   b46cc:	f7ff bf72 	b.w	b45b4 <network_set_listen_timeout>

000b46d0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b46d0:	6840      	ldr	r0, [r0, #4]
   b46d2:	2200      	movs	r2, #0
   b46d4:	f081 0101 	eor.w	r1, r1, #1
   b46d8:	f7ff bf5c 	b.w	b4594 <network_listen>

000b46dc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b46dc:	2300      	movs	r3, #0
   b46de:	6840      	ldr	r0, [r0, #4]
   b46e0:	461a      	mov	r2, r3
   b46e2:	4619      	mov	r1, r3
   b46e4:	f7ff bf4e 	b.w	b4584 <network_off>

000b46e8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b46e8:	2300      	movs	r3, #0
   b46ea:	6840      	ldr	r0, [r0, #4]
   b46ec:	461a      	mov	r2, r3
   b46ee:	4619      	mov	r1, r3
   b46f0:	f7ff bf40 	b.w	b4574 <network_on>

000b46f4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b46f4:	2200      	movs	r2, #0
   b46f6:	6840      	ldr	r0, [r0, #4]
   b46f8:	4611      	mov	r1, r2
   b46fa:	f7ff bf33 	b.w	b4564 <network_ready>

000b46fe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b46fe:	2200      	movs	r2, #0
   b4700:	6840      	ldr	r0, [r0, #4]
   b4702:	4611      	mov	r1, r2
   b4704:	f7ff bf1e 	b.w	b4544 <network_connecting>

000b4708 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4708:	6840      	ldr	r0, [r0, #4]
   b470a:	2200      	movs	r2, #0
   b470c:	2102      	movs	r1, #2
   b470e:	f7ff bf21 	b.w	b4554 <network_disconnect>

000b4712 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4712:	2300      	movs	r3, #0
   b4714:	6840      	ldr	r0, [r0, #4]
   b4716:	461a      	mov	r2, r3
   b4718:	f7ff bf0c 	b.w	b4534 <network_connect>

000b471c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b471c:	4b02      	ldr	r3, [pc, #8]	; (b4728 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b471e:	2203      	movs	r2, #3
   b4720:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4722:	4a02      	ldr	r2, [pc, #8]	; (b472c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4724:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4726:	4770      	bx	lr
   b4728:	2003e6b4 	.word	0x2003e6b4
   b472c:	000b6744 	.word	0x000b6744

000b4730 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4730:	680b      	ldr	r3, [r1, #0]
   b4732:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4734:	684b      	ldr	r3, [r1, #4]
   b4736:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4738:	b113      	cbz	r3, b4740 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b473a:	685a      	ldr	r2, [r3, #4]
   b473c:	3201      	adds	r2, #1
   b473e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4740:	4770      	bx	lr

000b4742 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4742:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b4744:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4746:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4748:	b17c      	cbz	r4, b476a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b474a:	6863      	ldr	r3, [r4, #4]
   b474c:	3b01      	subs	r3, #1
   b474e:	6063      	str	r3, [r4, #4]
   b4750:	b95b      	cbnz	r3, b476a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4752:	6823      	ldr	r3, [r4, #0]
   b4754:	4620      	mov	r0, r4
   b4756:	689b      	ldr	r3, [r3, #8]
   b4758:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b475a:	68a3      	ldr	r3, [r4, #8]
   b475c:	3b01      	subs	r3, #1
   b475e:	60a3      	str	r3, [r4, #8]
   b4760:	b91b      	cbnz	r3, b476a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4762:	6823      	ldr	r3, [r4, #0]
   b4764:	4620      	mov	r0, r4
   b4766:	68db      	ldr	r3, [r3, #12]
   b4768:	4798      	blx	r3
      }
   b476a:	4628      	mov	r0, r5
   b476c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4770 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4770:	4b05      	ldr	r3, [pc, #20]	; (b4788 <_GLOBAL__sub_I_System+0x18>)
   b4772:	2202      	movs	r2, #2
   b4774:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4776:	4b05      	ldr	r3, [pc, #20]	; (b478c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4778:	4a05      	ldr	r2, [pc, #20]	; (b4790 <_GLOBAL__sub_I_System+0x20>)
   b477a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b477c:	2000      	movs	r0, #0
   b477e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4782:	f7ff beb3 	b.w	b44ec <set_system_mode>
   b4786:	bf00      	nop
   b4788:	2003e6c8 	.word	0x2003e6c8
   b478c:	2003e6bc 	.word	0x2003e6bc
   b4790:	ffff0000 	.word	0xffff0000

000b4794 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b4794:	b510      	push	{r4, lr}
   b4796:	4604      	mov	r4, r0
{
    free(buffer);
   b4798:	6800      	ldr	r0, [r0, #0]
   b479a:	f7ff ff5b 	bl	b4654 <free>
}
   b479e:	4620      	mov	r0, r4
   b47a0:	bd10      	pop	{r4, pc}

000b47a2 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b47a2:	b510      	push	{r4, lr}
   b47a4:	4604      	mov	r4, r0
    if (buffer) {
   b47a6:	6800      	ldr	r0, [r0, #0]
   b47a8:	b108      	cbz	r0, b47ae <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b47aa:	f7ff ff53 	bl	b4654 <free>
    }
    buffer = nullptr;
   b47ae:	2300      	movs	r3, #0
    capacity_ = len = 0;
   b47b0:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b47b4:	6023      	str	r3, [r4, #0]
}
   b47b6:	bd10      	pop	{r4, pc}

000b47b8 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b47b8:	b538      	push	{r3, r4, r5, lr}
   b47ba:	4604      	mov	r4, r0
   b47bc:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b47be:	6800      	ldr	r0, [r0, #0]
   b47c0:	3101      	adds	r1, #1
   b47c2:	f7ff ff4f 	bl	b4664 <realloc>
    if (newbuffer) {
   b47c6:	b110      	cbz	r0, b47ce <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
   b47c8:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b47cc:	2001      	movs	r0, #1
    }
    return 0;
}
   b47ce:	bd38      	pop	{r3, r4, r5, pc}

000b47d0 <_ZN6String7reserveEj>:
{
   b47d0:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
   b47d2:	6803      	ldr	r3, [r0, #0]
{
   b47d4:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
   b47d6:	b123      	cbz	r3, b47e2 <_ZN6String7reserveEj+0x12>
   b47d8:	6843      	ldr	r3, [r0, #4]
   b47da:	428b      	cmp	r3, r1
   b47dc:	d301      	bcc.n	b47e2 <_ZN6String7reserveEj+0x12>
   b47de:	2001      	movs	r0, #1
}
   b47e0:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b47e2:	4620      	mov	r0, r4
   b47e4:	f7ff ffe8 	bl	b47b8 <_ZN6String12changeBufferEj>
   b47e8:	2800      	cmp	r0, #0
   b47ea:	d0f9      	beq.n	b47e0 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b47ec:	68a3      	ldr	r3, [r4, #8]
   b47ee:	2b00      	cmp	r3, #0
   b47f0:	d1f5      	bne.n	b47de <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b47f2:	6822      	ldr	r2, [r4, #0]
   b47f4:	7013      	strb	r3, [r2, #0]
   b47f6:	e7f2      	b.n	b47de <_ZN6String7reserveEj+0xe>

000b47f8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b47f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b47fa:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b47fc:	4611      	mov	r1, r2
   b47fe:	9201      	str	r2, [sp, #4]
{
   b4800:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b4802:	f7ff ffe5 	bl	b47d0 <_ZN6String7reserveEj>
   b4806:	9a01      	ldr	r2, [sp, #4]
   b4808:	b928      	cbnz	r0, b4816 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b480a:	4620      	mov	r0, r4
   b480c:	f7ff ffc9 	bl	b47a2 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b4810:	4620      	mov	r0, r4
   b4812:	b003      	add	sp, #12
   b4814:	bd30      	pop	{r4, r5, pc}
    len = length;
   b4816:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b4818:	4629      	mov	r1, r5
   b481a:	6820      	ldr	r0, [r4, #0]
   b481c:	f001 fdc8 	bl	b63b0 <memcpy>
    buffer[len] = 0;
   b4820:	6822      	ldr	r2, [r4, #0]
   b4822:	68a3      	ldr	r3, [r4, #8]
   b4824:	2100      	movs	r1, #0
   b4826:	54d1      	strb	r1, [r2, r3]
    return *this;
   b4828:	e7f2      	b.n	b4810 <_ZN6String4copyEPKcj+0x18>

000b482a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b482a:	b538      	push	{r3, r4, r5, lr}
   b482c:	4605      	mov	r5, r0
    if (buffer) {
   b482e:	6800      	ldr	r0, [r0, #0]
{
   b4830:	460c      	mov	r4, r1
    if (buffer) {
   b4832:	b170      	cbz	r0, b4852 <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
   b4834:	686a      	ldr	r2, [r5, #4]
   b4836:	688b      	ldr	r3, [r1, #8]
   b4838:	429a      	cmp	r2, r3
   b483a:	d308      	bcc.n	b484e <_ZN6String4moveERS_+0x24>
   b483c:	6809      	ldr	r1, [r1, #0]
   b483e:	b131      	cbz	r1, b484e <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b4840:	f001 fe2b 	bl	b649a <strcpy>
            len = rhs.len;
   b4844:	68a3      	ldr	r3, [r4, #8]
   b4846:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b4848:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
   b484a:	60a3      	str	r3, [r4, #8]
}
   b484c:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b484e:	f7ff ff01 	bl	b4654 <free>
    buffer = rhs.buffer;
   b4852:	6823      	ldr	r3, [r4, #0]
   b4854:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
   b4856:	6863      	ldr	r3, [r4, #4]
   b4858:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b485a:	68a3      	ldr	r3, [r4, #8]
   b485c:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b485e:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
   b4860:	e9c4 3300 	strd	r3, r3, [r4]
   b4864:	e7f1      	b.n	b484a <_ZN6String4moveERS_+0x20>

000b4866 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b4866:	b510      	push	{r4, lr}
    buffer = nullptr;
   b4868:	2300      	movs	r3, #0
    capacity_ = 0;
   b486a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b486e:	4604      	mov	r4, r0
    len = 0;
   b4870:	6083      	str	r3, [r0, #8]
    flags = 0;
   b4872:	7303      	strb	r3, [r0, #12]
    move(rval);
   b4874:	f7ff ffd9 	bl	b482a <_ZN6String4moveERS_>
}
   b4878:	4620      	mov	r0, r4
   b487a:	bd10      	pop	{r4, pc}

000b487c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b487c:	4288      	cmp	r0, r1
{
   b487e:	b510      	push	{r4, lr}
   b4880:	4604      	mov	r4, r0
    if (this == &rhs) {
   b4882:	d005      	beq.n	b4890 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b4884:	680b      	ldr	r3, [r1, #0]
   b4886:	b12b      	cbz	r3, b4894 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b4888:	688a      	ldr	r2, [r1, #8]
   b488a:	4619      	mov	r1, r3
   b488c:	f7ff ffb4 	bl	b47f8 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b4890:	4620      	mov	r0, r4
   b4892:	bd10      	pop	{r4, pc}
        invalidate();
   b4894:	f7ff ff85 	bl	b47a2 <_ZN6String10invalidateEv>
   b4898:	e7fa      	b.n	b4890 <_ZN6StringaSERKS_+0x14>

000b489a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b489a:	b510      	push	{r4, lr}
    buffer = nullptr;
   b489c:	2300      	movs	r3, #0
String::String(const String &value)
   b489e:	4604      	mov	r4, r0
    capacity_ = 0;
   b48a0:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b48a4:	6083      	str	r3, [r0, #8]
    flags = 0;
   b48a6:	7303      	strb	r3, [r0, #12]
    *this = value;
   b48a8:	f7ff ffe8 	bl	b487c <_ZN6StringaSERKS_>
}
   b48ac:	4620      	mov	r0, r4
   b48ae:	bd10      	pop	{r4, pc}

000b48b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b48b0:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b48b2:	6843      	ldr	r3, [r0, #4]
   b48b4:	3b01      	subs	r3, #1
    {
   b48b6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b48b8:	6043      	str	r3, [r0, #4]
   b48ba:	b963      	cbnz	r3, b48d6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b48bc:	6803      	ldr	r3, [r0, #0]
   b48be:	689b      	ldr	r3, [r3, #8]
   b48c0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b48c2:	68a3      	ldr	r3, [r4, #8]
   b48c4:	3b01      	subs	r3, #1
   b48c6:	60a3      	str	r3, [r4, #8]
   b48c8:	b92b      	cbnz	r3, b48d6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b48ca:	6823      	ldr	r3, [r4, #0]
   b48cc:	4620      	mov	r0, r4
   b48ce:	68db      	ldr	r3, [r3, #12]
    }
   b48d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b48d4:	4718      	bx	r3
    }
   b48d6:	bd10      	pop	{r4, pc}

000b48d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b48d8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b48da:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b48de:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b48e0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b48e4:	42ae      	cmp	r6, r5
   b48e6:	d004      	beq.n	b48f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b48e8:	4628      	mov	r0, r5
   b48ea:	f7ff ff53 	bl	b4794 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b48ee:	3510      	adds	r5, #16
   b48f0:	e7f8      	b.n	b48e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b48f2:	6820      	ldr	r0, [r4, #0]
   b48f4:	f7ff feae 	bl	b4654 <free>
    AllocatorT::free(data_);
}
   b48f8:	4620      	mov	r0, r4
   b48fa:	bd70      	pop	{r4, r5, r6, pc}

000b48fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b48fc:	4802      	ldr	r0, [pc, #8]	; (b4908 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b48fe:	2300      	movs	r3, #0
   b4900:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4902:	f7ff bd2b 	b.w	b435c <os_mutex_recursive_create>
   b4906:	bf00      	nop
   b4908:	2003e6cc 	.word	0x2003e6cc

000b490c <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
   b490c:	b510      	push	{r4, lr}
   b490e:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
   b4910:	6880      	ldr	r0, [r0, #8]
   b4912:	6803      	ldr	r3, [r0, #0]
   b4914:	68db      	ldr	r3, [r3, #12]
   b4916:	4798      	blx	r3
   b4918:	68e3      	ldr	r3, [r4, #12]
   b491a:	4418      	add	r0, r3
   b491c:	60e0      	str	r0, [r4, #12]
}
   b491e:	bd10      	pop	{r4, pc}

000b4920 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4922:	4606      	mov	r6, r0
   b4924:	460d      	mov	r5, r1
  size_t n = 0;
   b4926:	188f      	adds	r7, r1, r2
   b4928:	2400      	movs	r4, #0
  while (size--) {
   b492a:	42bd      	cmp	r5, r7
   b492c:	d00c      	beq.n	b4948 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b492e:	6833      	ldr	r3, [r6, #0]
   b4930:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4934:	689b      	ldr	r3, [r3, #8]
   b4936:	4630      	mov	r0, r6
   b4938:	4798      	blx	r3
     if (chunk>=0)
   b493a:	1e03      	subs	r3, r0, #0
   b493c:	db01      	blt.n	b4942 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b493e:	441c      	add	r4, r3
  while (size--) {
   b4940:	e7f3      	b.n	b492a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4942:	2c00      	cmp	r4, #0
   b4944:	bf08      	it	eq
   b4946:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4948:	4620      	mov	r0, r4
   b494a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b494c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b494c:	4770      	bx	lr

000b494e <_ZN5spark16JSONStreamWriterD0Ev>:
   b494e:	b510      	push	{r4, lr}
   b4950:	2110      	movs	r1, #16
   b4952:	4604      	mov	r4, r0
   b4954:	f7ff fbb3 	bl	b40be <_ZdlPvj>
   b4958:	4620      	mov	r0, r4
   b495a:	bd10      	pop	{r4, pc}

000b495c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b495c:	6803      	ldr	r3, [r0, #0]
   b495e:	689b      	ldr	r3, [r3, #8]
   b4960:	4718      	bx	r3

000b4962 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4962:	b530      	push	{r4, r5, lr}
   b4964:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4966:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4968:	2a01      	cmp	r2, #1
  *str = '\0';
   b496a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b496e:	bf98      	it	ls
   b4970:	220a      	movls	r2, #10
   b4972:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4974:	460d      	mov	r5, r1
   b4976:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b497a:	fb01 5312 	mls	r3, r1, r2, r5
   b497e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4982:	2b09      	cmp	r3, #9
   b4984:	bf94      	ite	ls
   b4986:	3330      	addls	r3, #48	; 0x30
   b4988:	3337      	addhi	r3, #55	; 0x37
   b498a:	b2db      	uxtb	r3, r3
  } while(n);
   b498c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b498e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4992:	d9ef      	bls.n	b4974 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4994:	4621      	mov	r1, r4
   b4996:	f7ff fca7 	bl	b42e8 <_ZN5Print5writeEPKc>
}
   b499a:	b00b      	add	sp, #44	; 0x2c
   b499c:	bd30      	pop	{r4, r5, pc}

000b499e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b499e:	b510      	push	{r4, lr}
   b49a0:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b49a2:	f7ff fcd3 	bl	b434c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b49a6:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b49a8:	6823      	ldr	r3, [r4, #0]
   b49aa:	4620      	mov	r0, r4
   b49ac:	695b      	ldr	r3, [r3, #20]
   b49ae:	4798      	blx	r3
    if (c >= 0) return c;
   b49b0:	2800      	cmp	r0, #0
   b49b2:	da08      	bge.n	b49c6 <_ZN6Stream9timedReadEv+0x28>
   b49b4:	f7ff fcca 	bl	b434c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b49b8:	68e3      	ldr	r3, [r4, #12]
   b49ba:	1ac0      	subs	r0, r0, r3
   b49bc:	68a3      	ldr	r3, [r4, #8]
   b49be:	4298      	cmp	r0, r3
   b49c0:	d3f2      	bcc.n	b49a8 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b49c2:	f04f 30ff 	mov.w	r0, #4294967295
}
   b49c6:	bd10      	pop	{r4, pc}

000b49c8 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b49c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b49cc:	4607      	mov	r7, r0
   b49ce:	460c      	mov	r4, r1
   b49d0:	188e      	adds	r6, r1, r2
   b49d2:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b49d4:	42b5      	cmp	r5, r6
   b49d6:	eba5 0804 	sub.w	r8, r5, r4
   b49da:	d007      	beq.n	b49ec <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b49dc:	4638      	mov	r0, r7
   b49de:	f7ff ffde 	bl	b499e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b49e2:	1e03      	subs	r3, r0, #0
   b49e4:	db02      	blt.n	b49ec <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b49e6:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b49ea:	e7f3      	b.n	b49d4 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b49ec:	4640      	mov	r0, r8
   b49ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b49f2 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b49f2:	4770      	bx	lr

000b49f4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b49f4:	4608      	mov	r0, r1
   b49f6:	b111      	cbz	r1, b49fe <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b49f8:	680b      	ldr	r3, [r1, #0]
   b49fa:	685b      	ldr	r3, [r3, #4]
   b49fc:	4718      	bx	r3
}
   b49fe:	4770      	bx	lr

000b4a00 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b4a00:	4770      	bx	lr

000b4a02 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b4a02:	4770      	bx	lr

000b4a04 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b4a04:	4770      	bx	lr

000b4a06 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b4a06:	b538      	push	{r3, r4, r5, lr}
   b4a08:	4604      	mov	r4, r0
   b4a0a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b4a0c:	6800      	ldr	r0, [r0, #0]
   b4a0e:	212e      	movs	r1, #46	; 0x2e
   b4a10:	f001 fd39 	bl	b6486 <strchrnul>
    size = s - category;
   b4a14:	6823      	ldr	r3, [r4, #0]
   b4a16:	1ac3      	subs	r3, r0, r3
   b4a18:	602b      	str	r3, [r5, #0]
    if (size) {
   b4a1a:	b123      	cbz	r3, b4a26 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b4a1c:	7803      	ldrb	r3, [r0, #0]
   b4a1e:	b103      	cbz	r3, b4a22 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b4a20:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b4a22:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4a24:	6020      	str	r0, [r4, #0]
}
   b4a26:	4618      	mov	r0, r3
   b4a28:	bd38      	pop	{r3, r4, r5, pc}

000b4a2a <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b4a2a:	b510      	push	{r4, lr}
   b4a2c:	2104      	movs	r1, #4
   b4a2e:	4604      	mov	r4, r0
   b4a30:	f7ff fb45 	bl	b40be <_ZdlPvj>
   b4a34:	4620      	mov	r0, r4
   b4a36:	bd10      	pop	{r4, pc}

000b4a38 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b4a38:	b510      	push	{r4, lr}
   b4a3a:	2104      	movs	r1, #4
   b4a3c:	4604      	mov	r4, r0
   b4a3e:	f7ff fb3e 	bl	b40be <_ZdlPvj>
   b4a42:	4620      	mov	r0, r4
   b4a44:	bd10      	pop	{r4, pc}

000b4a46 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b4a46:	f7ff bc99 	b.w	b437c <os_mutex_recursive_lock>

000b4a4a <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b4a4a:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b4a4c:	f7ff fae6 	bl	b401c <strcmp>
}
   b4a50:	fab0 f080 	clz	r0, r0
   b4a54:	0940      	lsrs	r0, r0, #5
   b4a56:	bd08      	pop	{r3, pc}

000b4a58 <__tcf_1>:
   b4a58:	4770      	bx	lr

000b4a5a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b4a5a:	b510      	push	{r4, lr}
   b4a5c:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b4a5e:	f001 f8f1 	bl	b5c44 <_Z16_fetch_usbserialv>
   b4a62:	4284      	cmp	r4, r0
   b4a64:	d010      	beq.n	b4a88 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b4a66:	f001 fc6d 	bl	b6344 <_Z22__fetch_global_Serial1v>
   b4a6a:	4284      	cmp	r4, r0
   b4a6c:	d105      	bne.n	b4a7a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b4a6e:	f001 fc69 	bl	b6344 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b4a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b4a76:	f001 b964 	b.w	b5d42 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b4a7a:	b12c      	cbz	r4, b4a88 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b4a7c:	6823      	ldr	r3, [r4, #0]
   b4a7e:	4620      	mov	r0, r4
   b4a80:	685b      	ldr	r3, [r3, #4]
}
   b4a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4a86:	4718      	bx	r3
   b4a88:	bd10      	pop	{r4, pc}

000b4a8a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b4a8a:	b513      	push	{r0, r1, r4, lr}
   b4a8c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b4a8e:	4608      	mov	r0, r1
   b4a90:	9101      	str	r1, [sp, #4]
   b4a92:	f7ff facd 	bl	b4030 <strlen>
   b4a96:	9901      	ldr	r1, [sp, #4]
   b4a98:	4602      	mov	r2, r0
   b4a9a:	4620      	mov	r0, r4
}
   b4a9c:	b002      	add	sp, #8
   b4a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b4aa2:	f001 bc23 	b.w	b62ec <_ZN5spark10JSONWriter5valueEPKcj>

000b4aa6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b4aa6:	b513      	push	{r0, r1, r4, lr}
   b4aa8:	4604      	mov	r4, r0
    write(str, strlen(str));
   b4aaa:	4608      	mov	r0, r1
   b4aac:	9101      	str	r1, [sp, #4]
   b4aae:	f7ff fabf 	bl	b4030 <strlen>
   b4ab2:	6823      	ldr	r3, [r4, #0]
   b4ab4:	9901      	ldr	r1, [sp, #4]
   b4ab6:	68db      	ldr	r3, [r3, #12]
   b4ab8:	4602      	mov	r2, r0
   b4aba:	4620      	mov	r0, r4
}
   b4abc:	b002      	add	sp, #8
   b4abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b4ac2:	4718      	bx	r3

000b4ac4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b4ac4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b4ac6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b4ac8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b4acc:	68db      	ldr	r3, [r3, #12]
   b4ace:	2201      	movs	r2, #1
   b4ad0:	f10d 0107 	add.w	r1, sp, #7
   b4ad4:	4798      	blx	r3
}
   b4ad6:	b003      	add	sp, #12
   b4ad8:	f85d fb04 	ldr.w	pc, [sp], #4

000b4adc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b4adc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b4ae0:	e9d0 8400 	ldrd	r8, r4, [r0]
   b4ae4:	f04f 0a14 	mov.w	sl, #20
   b4ae8:	9300      	str	r3, [sp, #0]
   b4aea:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b4aee:	4b18      	ldr	r3, [pc, #96]	; (b4b50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b4af0:	10a4      	asrs	r4, r4, #2
   b4af2:	4617      	mov	r7, r2
   b4af4:	435c      	muls	r4, r3
   b4af6:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b4af8:	2c00      	cmp	r4, #0
   b4afa:	dd21      	ble.n	b4b40 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b4afc:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b4afe:	fb0a f006 	mul.w	r0, sl, r6
   b4b02:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b4b06:	463a      	mov	r2, r7
   b4b08:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b4b0c:	5828      	ldr	r0, [r5, r0]
   b4b0e:	9101      	str	r1, [sp, #4]
   b4b10:	455f      	cmp	r7, fp
   b4b12:	bf28      	it	cs
   b4b14:	465a      	movcs	r2, fp
   b4b16:	f001 fcc8 	bl	b64aa <strncmp>
                if (cmp == 0) {
   b4b1a:	2800      	cmp	r0, #0
   b4b1c:	9901      	ldr	r1, [sp, #4]
   b4b1e:	f04f 0301 	mov.w	r3, #1
   b4b22:	d10b      	bne.n	b4b3c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b4b24:	455f      	cmp	r7, fp
   b4b26:	d103      	bne.n	b4b30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b4b28:	9a00      	ldr	r2, [sp, #0]
   b4b2a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b4b2c:	4634      	mov	r4, r6
   b4b2e:	e7e3      	b.n	b4af8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b4b30:	d9fc      	bls.n	b4b2c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b4b32:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b4b34:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b4b38:	3e01      	subs	r6, #1
   b4b3a:	e7f7      	b.n	b4b2c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b4b3c:	dbf9      	blt.n	b4b32 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b4b3e:	e7f5      	b.n	b4b2c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b4b40:	eba5 0508 	sub.w	r5, r5, r8
}
   b4b44:	4802      	ldr	r0, [pc, #8]	; (b4b50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b4b46:	10ad      	asrs	r5, r5, #2
   b4b48:	4368      	muls	r0, r5
   b4b4a:	b003      	add	sp, #12
   b4b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4b50:	cccccccd 	.word	0xcccccccd

000b4b54 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b4b54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b4b56:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b4b58:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b4b5a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b4b5c:	b303      	cbz	r3, b4ba0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b4b5e:	b1f9      	cbz	r1, b4ba0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b4b60:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b4b62:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b4b66:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b4b68:	a903      	add	r1, sp, #12
   b4b6a:	a801      	add	r0, sp, #4
   b4b6c:	f7ff ff4b 	bl	b4a06 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b4b70:	4601      	mov	r1, r0
   b4b72:	b1a8      	cbz	r0, b4ba0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b4b74:	f10d 030b 	add.w	r3, sp, #11
   b4b78:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b4b7a:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b4b7e:	4620      	mov	r0, r4
   b4b80:	f7ff ffac 	bl	b4adc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b4b84:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b4b88:	b153      	cbz	r3, b4ba0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b4b8a:	6823      	ldr	r3, [r4, #0]
   b4b8c:	2414      	movs	r4, #20
   b4b8e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b4b92:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b4b94:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b4b98:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b4b9a:	bfa8      	it	ge
   b4b9c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b4b9e:	e7e3      	b.n	b4b68 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b4ba0:	4628      	mov	r0, r5
   b4ba2:	b004      	add	sp, #16
   b4ba4:	bd70      	pop	{r4, r5, r6, pc}

000b4ba6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b4ba6:	b40e      	push	{r1, r2, r3}
   b4ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4baa:	b08c      	sub	sp, #48	; 0x30
   b4bac:	af00      	add	r7, sp, #0
   b4bae:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b4bb2:	4604      	mov	r4, r0
   b4bb4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4bb8:	607a      	str	r2, [r7, #4]
   b4bba:	462b      	mov	r3, r5
   b4bbc:	2120      	movs	r1, #32
   b4bbe:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b4bc2:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4bc4:	f7ff fd56 	bl	b4674 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b4bc8:	281f      	cmp	r0, #31
   b4bca:	687a      	ldr	r2, [r7, #4]
   b4bcc:	d91a      	bls.n	b4c04 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b4bce:	f100 0308 	add.w	r3, r0, #8
   b4bd2:	f023 0307 	bic.w	r3, r3, #7
        }
   b4bd6:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b4bd8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4bdc:	1c41      	adds	r1, r0, #1
   b4bde:	462b      	mov	r3, r5
   b4be0:	4668      	mov	r0, sp
        va_start(args, fmt);
   b4be2:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4be4:	f7ff fd46 	bl	b4674 <vsnprintf>
        if (n > 0) {
   b4be8:	1e02      	subs	r2, r0, #0
   b4bea:	dd04      	ble.n	b4bf6 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b4bec:	6823      	ldr	r3, [r4, #0]
   b4bee:	4669      	mov	r1, sp
   b4bf0:	68db      	ldr	r3, [r3, #12]
   b4bf2:	4620      	mov	r0, r4
   b4bf4:	4798      	blx	r3
   b4bf6:	46b5      	mov	sp, r6
}
   b4bf8:	3730      	adds	r7, #48	; 0x30
   b4bfa:	46bd      	mov	sp, r7
   b4bfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4c00:	b003      	add	sp, #12
   b4c02:	4770      	bx	lr
    } else if (n > 0) {
   b4c04:	2800      	cmp	r0, #0
   b4c06:	d0f7      	beq.n	b4bf8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b4c08:	6823      	ldr	r3, [r4, #0]
   b4c0a:	4602      	mov	r2, r0
   b4c0c:	68db      	ldr	r3, [r3, #12]
   b4c0e:	f107 0110 	add.w	r1, r7, #16
   b4c12:	4620      	mov	r0, r4
   b4c14:	4798      	blx	r3
}
   b4c16:	e7ef      	b.n	b4bf8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b4c18 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b4c18:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b4c1a:	4c09      	ldr	r4, [pc, #36]	; (b4c40 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b4c1c:	7823      	ldrb	r3, [r4, #0]
   b4c1e:	f3bf 8f5b 	dmb	ish
   b4c22:	07db      	lsls	r3, r3, #31
   b4c24:	d409      	bmi.n	b4c3a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b4c26:	4620      	mov	r0, r4
   b4c28:	f7ff fa58 	bl	b40dc <__cxa_guard_acquire>
   b4c2c:	b128      	cbz	r0, b4c3a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b4c2e:	4620      	mov	r0, r4
   b4c30:	f7ff fa59 	bl	b40e6 <__cxa_guard_release>
   b4c34:	4803      	ldr	r0, [pc, #12]	; (b4c44 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b4c36:	f001 fbad 	bl	b6394 <atexit>
}
   b4c3a:	4803      	ldr	r0, [pc, #12]	; (b4c48 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b4c3c:	bd10      	pop	{r4, pc}
   b4c3e:	bf00      	nop
   b4c40:	2003e6d4 	.word	0x2003e6d4
   b4c44:	000b4a01 	.word	0x000b4a01
   b4c48:	2003e610 	.word	0x2003e610

000b4c4c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b4c4c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b4c4e:	4c09      	ldr	r4, [pc, #36]	; (b4c74 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b4c50:	7823      	ldrb	r3, [r4, #0]
   b4c52:	f3bf 8f5b 	dmb	ish
   b4c56:	07db      	lsls	r3, r3, #31
   b4c58:	d409      	bmi.n	b4c6e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b4c5a:	4620      	mov	r0, r4
   b4c5c:	f7ff fa3e 	bl	b40dc <__cxa_guard_acquire>
   b4c60:	b128      	cbz	r0, b4c6e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b4c62:	4620      	mov	r0, r4
   b4c64:	f7ff fa3f 	bl	b40e6 <__cxa_guard_release>
   b4c68:	4803      	ldr	r0, [pc, #12]	; (b4c78 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b4c6a:	f001 fb93 	bl	b6394 <atexit>
    return &factory;
}
   b4c6e:	4803      	ldr	r0, [pc, #12]	; (b4c7c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b4c70:	bd10      	pop	{r4, pc}
   b4c72:	bf00      	nop
   b4c74:	2003e6d8 	.word	0x2003e6d8
   b4c78:	000b4a59 	.word	0x000b4a59
   b4c7c:	2003e614 	.word	0x2003e614

000b4c80 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b4c80:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b4c82:	2500      	movs	r5, #0
   b4c84:	4604      	mov	r4, r0
   b4c86:	e9c0 5500 	strd	r5, r5, [r0]
   b4c8a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4c8e:	6085      	str	r5, [r0, #8]
   b4c90:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b4c92:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b4c96:	f7ff fb61 	bl	b435c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b4c9a:	f7ff ffbd 	bl	b4c18 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b4c9e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b4ca0:	f7ff ffd4 	bl	b4c4c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b4ca4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b4ca6:	6220      	str	r0, [r4, #32]
}
   b4ca8:	4620      	mov	r0, r4
   b4caa:	bd38      	pop	{r3, r4, r5, pc}

000b4cac <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b4cac:	b510      	push	{r4, lr}
    static LogManager mgr;
   b4cae:	4c0a      	ldr	r4, [pc, #40]	; (b4cd8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b4cb0:	7823      	ldrb	r3, [r4, #0]
   b4cb2:	f3bf 8f5b 	dmb	ish
   b4cb6:	07db      	lsls	r3, r3, #31
   b4cb8:	d40c      	bmi.n	b4cd4 <_ZN5spark10LogManager8instanceEv+0x28>
   b4cba:	4620      	mov	r0, r4
   b4cbc:	f7ff fa0e 	bl	b40dc <__cxa_guard_acquire>
   b4cc0:	b140      	cbz	r0, b4cd4 <_ZN5spark10LogManager8instanceEv+0x28>
   b4cc2:	4806      	ldr	r0, [pc, #24]	; (b4cdc <_ZN5spark10LogManager8instanceEv+0x30>)
   b4cc4:	f7ff ffdc 	bl	b4c80 <_ZN5spark10LogManagerC1Ev>
   b4cc8:	4620      	mov	r0, r4
   b4cca:	f7ff fa0c 	bl	b40e6 <__cxa_guard_release>
   b4cce:	4804      	ldr	r0, [pc, #16]	; (b4ce0 <_ZN5spark10LogManager8instanceEv+0x34>)
   b4cd0:	f001 fb60 	bl	b6394 <atexit>
    return &mgr;
}
   b4cd4:	4801      	ldr	r0, [pc, #4]	; (b4cdc <_ZN5spark10LogManager8instanceEv+0x30>)
   b4cd6:	bd10      	pop	{r4, pc}
   b4cd8:	2003e6d0 	.word	0x2003e6d0
   b4cdc:	2003e6e0 	.word	0x2003e6e0
   b4ce0:	000b5225 	.word	0x000b5225

000b4ce4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b4ce4:	4a02      	ldr	r2, [pc, #8]	; (b4cf0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b4ce6:	4903      	ldr	r1, [pc, #12]	; (b4cf4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b4ce8:	4803      	ldr	r0, [pc, #12]	; (b4cf8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b4cea:	2300      	movs	r3, #0
   b4cec:	f7ff bbf6 	b.w	b44dc <log_set_callbacks>
   b4cf0:	000b5009 	.word	0x000b5009
   b4cf4:	000b4f95 	.word	0x000b4f95
   b4cf8:	000b4f15 	.word	0x000b4f15

000b4cfc <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b4cfc:	2300      	movs	r3, #0
   b4cfe:	461a      	mov	r2, r3
   b4d00:	4619      	mov	r1, r3
   b4d02:	4618      	mov	r0, r3
   b4d04:	f7ff bbea 	b.w	b44dc <log_set_callbacks>

000b4d08 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b4d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b4d0a:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b4d0c:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4d0e:	4668      	mov	r0, sp
   b4d10:	f7ff fd0e 	bl	b4730 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b4d14:	466a      	mov	r2, sp
   b4d16:	4629      	mov	r1, r5
   b4d18:	4620      	mov	r0, r4
   b4d1a:	f001 fa07 	bl	b612c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4d1e:	a801      	add	r0, sp, #4
   b4d20:	f7ff fd0f 	bl	b4742 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4d24:	4620      	mov	r0, r4
   b4d26:	b003      	add	sp, #12
   b4d28:	bd30      	pop	{r4, r5, pc}

000b4d2a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b4d2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b4d2c:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b4d2e:	4604      	mov	r4, r0
   b4d30:	4668      	mov	r0, sp
   b4d32:	f7ff fcfd 	bl	b4730 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b4d36:	466a      	mov	r2, sp
   b4d38:	4629      	mov	r1, r5
   b4d3a:	4620      	mov	r0, r4
   b4d3c:	f001 f9d2 	bl	b60e4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b4d40:	a801      	add	r0, sp, #4
   b4d42:	f7ff fcfe 	bl	b4742 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4d46:	4620      	mov	r0, r4
   b4d48:	b003      	add	sp, #12
   b4d4a:	bd30      	pop	{r4, r5, pc}

000b4d4c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b4d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b4d4e:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b4d50:	4604      	mov	r4, r0
   b4d52:	4668      	mov	r0, sp
   b4d54:	f7ff fcec 	bl	b4730 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b4d58:	466a      	mov	r2, sp
   b4d5a:	4629      	mov	r1, r5
   b4d5c:	4620      	mov	r0, r4
   b4d5e:	f001 f96a 	bl	b6036 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b4d62:	a801      	add	r0, sp, #4
   b4d64:	f7ff fced 	bl	b4742 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4d68:	4620      	mov	r0, r4
   b4d6a:	b003      	add	sp, #12
   b4d6c:	bd30      	pop	{r4, r5, pc}
	...

000b4d70 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b4d70:	b570      	push	{r4, r5, r6, lr}
   b4d72:	b08a      	sub	sp, #40	; 0x28
   b4d74:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b4d76:	4601      	mov	r1, r0
   b4d78:	a804      	add	r0, sp, #16
   b4d7a:	f7ff ffc5 	bl	b4d08 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b4d7e:	4e14      	ldr	r6, [pc, #80]	; (b4dd0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b4d80:	a804      	add	r0, sp, #16
   b4d82:	f001 f9eb 	bl	b615c <_ZN5spark18JSONObjectIterator4nextEv>
   b4d86:	b1e8      	cbz	r0, b4dc4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b4d88:	a904      	add	r1, sp, #16
   b4d8a:	4668      	mov	r0, sp
   b4d8c:	f7ff ffcd 	bl	b4d2a <_ZNK5spark18JSONObjectIterator4nameEv>
   b4d90:	9802      	ldr	r0, [sp, #8]
   b4d92:	4631      	mov	r1, r6
   b4d94:	f7ff fe59 	bl	b4a4a <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b4d98:	4604      	mov	r4, r0
   b4d9a:	b110      	cbz	r0, b4da2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b4d9c:	1e2c      	subs	r4, r5, #0
   b4d9e:	bf18      	it	ne
   b4da0:	2401      	movne	r4, #1
   b4da2:	a801      	add	r0, sp, #4
   b4da4:	f7ff fccd 	bl	b4742 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4da8:	2c00      	cmp	r4, #0
   b4daa:	d0e9      	beq.n	b4d80 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b4dac:	a904      	add	r1, sp, #16
   b4dae:	4668      	mov	r0, sp
   b4db0:	f7ff ffcc 	bl	b4d4c <_ZNK5spark18JSONObjectIterator5valueEv>
   b4db4:	4668      	mov	r0, sp
   b4db6:	f001 f974 	bl	b60a2 <_ZNK5spark9JSONValue5toIntEv>
   b4dba:	6028      	str	r0, [r5, #0]
   b4dbc:	a801      	add	r0, sp, #4
   b4dbe:	f7ff fcc0 	bl	b4742 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4dc2:	e7dd      	b.n	b4d80 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b4dc4:	a805      	add	r0, sp, #20
   b4dc6:	f7ff fcbc 	bl	b4742 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4dca:	b00a      	add	sp, #40	; 0x28
   b4dcc:	bd70      	pop	{r4, r5, r6, pc}
   b4dce:	bf00      	nop
   b4dd0:	000b6798 	.word	0x000b6798

000b4dd4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b4dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4dd6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b4dd8:	4620      	mov	r0, r4
   b4dda:	4913      	ldr	r1, [pc, #76]	; (b4e28 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b4ddc:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b4dde:	f7ff f91d 	bl	b401c <strcmp>
   b4de2:	b950      	cbnz	r0, b4dfa <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b4de4:	f000 ff2e 	bl	b5c44 <_Z16_fetch_usbserialv>
   b4de8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4dec:	f000 ff1a 	bl	b5c24 <_ZN9USBSerial5beginEl>
}
   b4df0:	b003      	add	sp, #12
   b4df2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b4df6:	f000 bf25 	b.w	b5c44 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b4dfa:	490c      	ldr	r1, [pc, #48]	; (b4e2c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b4dfc:	4620      	mov	r0, r4
   b4dfe:	f7ff f90d 	bl	b401c <strcmp>
   b4e02:	b978      	cbnz	r0, b4e24 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b4e04:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b4e08:	a901      	add	r1, sp, #4
   b4e0a:	4628      	mov	r0, r5
        int baud = 9600;
   b4e0c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b4e0e:	f7ff ffaf 	bl	b4d70 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b4e12:	f001 fa97 	bl	b6344 <_Z22__fetch_global_Serial1v>
   b4e16:	9901      	ldr	r1, [sp, #4]
   b4e18:	f000 ff90 	bl	b5d3c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b4e1c:	f001 fa92 	bl	b6344 <_Z22__fetch_global_Serial1v>
}
   b4e20:	b003      	add	sp, #12
   b4e22:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b4e24:	2000      	movs	r0, #0
   b4e26:	e7fb      	b.n	b4e20 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b4e28:	000b679d 	.word	0x000b679d
   b4e2c:	000b67a4 	.word	0x000b67a4

000b4e30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4e30:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4e32:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4e36:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4e38:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4e3a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4e3e:	42ae      	cmp	r6, r5
   b4e40:	d005      	beq.n	b4e4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b4e42:	f105 0008 	add.w	r0, r5, #8
   b4e46:	f7ff fff3 	bl	b4e30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b4e4a:	3514      	adds	r5, #20
   b4e4c:	e7f7      	b.n	b4e3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4e4e:	6820      	ldr	r0, [r4, #0]
   b4e50:	f7ff fc00 	bl	b4654 <free>
}
   b4e54:	4620      	mov	r0, r4
   b4e56:	bd70      	pop	{r4, r5, r6, pc}

000b4e58 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b4e58:	b510      	push	{r4, lr}
   b4e5a:	4604      	mov	r4, r0
   b4e5c:	300c      	adds	r0, #12
   b4e5e:	f7ff ffe7 	bl	b4e30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b4e62:	4620      	mov	r0, r4
   b4e64:	f7ff fd38 	bl	b48d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b4e68:	4620      	mov	r0, r4
   b4e6a:	bd10      	pop	{r4, pc}

000b4e6c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b4e6c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b4e6e:	4b04      	ldr	r3, [pc, #16]	; (b4e80 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b4e70:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b4e72:	f840 3b04 	str.w	r3, [r0], #4
   b4e76:	f7ff ffef 	bl	b4e58 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b4e7a:	4620      	mov	r0, r4
   b4e7c:	bd10      	pop	{r4, pc}
   b4e7e:	bf00      	nop
   b4e80:	000b6714 	.word	0x000b6714

000b4e84 <_ZN5spark16StreamLogHandlerD0Ev>:
   b4e84:	b510      	push	{r4, lr}
   b4e86:	4604      	mov	r4, r0
   b4e88:	f7ff fff0 	bl	b4e6c <_ZN5spark16StreamLogHandlerD1Ev>
   b4e8c:	4620      	mov	r0, r4
   b4e8e:	2124      	movs	r1, #36	; 0x24
   b4e90:	f7ff f915 	bl	b40be <_ZdlPvj>
   b4e94:	4620      	mov	r0, r4
   b4e96:	bd10      	pop	{r4, pc}

000b4e98 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b4e98:	b510      	push	{r4, lr}
   b4e9a:	4b03      	ldr	r3, [pc, #12]	; (b4ea8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b4e9c:	6003      	str	r3, [r0, #0]
   b4e9e:	4604      	mov	r4, r0
   b4ea0:	f7ff ffe4 	bl	b4e6c <_ZN5spark16StreamLogHandlerD1Ev>
   b4ea4:	4620      	mov	r0, r4
   b4ea6:	bd10      	pop	{r4, pc}
   b4ea8:	000b6830 	.word	0x000b6830

000b4eac <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b4eac:	b510      	push	{r4, lr}
   b4eae:	4604      	mov	r4, r0
   b4eb0:	f7ff fff2 	bl	b4e98 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b4eb4:	4620      	mov	r0, r4
   b4eb6:	2124      	movs	r1, #36	; 0x24
   b4eb8:	f7ff f901 	bl	b40be <_ZdlPvj>
   b4ebc:	4620      	mov	r0, r4
   b4ebe:	bd10      	pop	{r4, pc}

000b4ec0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b4ec0:	680a      	ldr	r2, [r1, #0]
   b4ec2:	6002      	str	r2, [r0, #0]
   b4ec4:	684a      	ldr	r2, [r1, #4]
   b4ec6:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b4ec8:	2200      	movs	r2, #0
   b4eca:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b4ece:	b510      	push	{r4, lr}
   b4ed0:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4ed2:	688c      	ldr	r4, [r1, #8]
   b4ed4:	6084      	str	r4, [r0, #8]
   b4ed6:	68cc      	ldr	r4, [r1, #12]
   b4ed8:	60c4      	str	r4, [r0, #12]
   b4eda:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b4edc:	608a      	str	r2, [r1, #8]
   b4ede:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4ee0:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b4ee2:	610a      	str	r2, [r1, #16]
   b4ee4:	bd10      	pop	{r4, pc}

000b4ee6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
   b4ee6:	2200      	movs	r2, #0
   b4ee8:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b4eec:	b510      	push	{r4, lr}
        capacity_(0) {
   b4eee:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4ef0:	680c      	ldr	r4, [r1, #0]
   b4ef2:	6004      	str	r4, [r0, #0]
   b4ef4:	684c      	ldr	r4, [r1, #4]
   b4ef6:	6044      	str	r4, [r0, #4]
   b4ef8:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4efa:	600a      	str	r2, [r1, #0]
   b4efc:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4efe:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4f00:	608a      	str	r2, [r1, #8]
}
   b4f02:	bd10      	pop	{r4, pc}

000b4f04 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b4f04:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b4f06:	6803      	ldr	r3, [r0, #0]
   b4f08:	4604      	mov	r4, r0
   b4f0a:	6818      	ldr	r0, [r3, #0]
   b4f0c:	f7ff fa3e 	bl	b438c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b4f10:	4620      	mov	r0, r4
   b4f12:	bd10      	pop	{r4, pc}

000b4f14 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b4f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f18:	b087      	sub	sp, #28
   b4f1a:	4680      	mov	r8, r0
   b4f1c:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b4f1e:	4b1c      	ldr	r3, [pc, #112]	; (b4f90 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b4f20:	685b      	ldr	r3, [r3, #4]
   b4f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b4f26:	4689      	mov	r9, r1
   b4f28:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b4f2a:	b96b      	cbnz	r3, b4f48 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b4f2c:	f7ff febe 	bl	b4cac <_ZN5spark10LogManager8instanceEv>
   b4f30:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b4f32:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b4f36:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4f38:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b4f3a:	f7ff fd84 	bl	b4a46 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b4f3e:	7b23      	ldrb	r3, [r4, #12]
   b4f40:	b12b      	cbz	r3, b4f4e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b4f42:	a805      	add	r0, sp, #20
   b4f44:	f7ff ffde 	bl	b4f04 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b4f48:	b007      	add	sp, #28
   b4f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b4f4e:	2301      	movs	r3, #1
   b4f50:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b4f52:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b4f56:	fa5f f989 	uxtb.w	r9, r9
   b4f5a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b4f5e:	45aa      	cmp	sl, r5
   b4f60:	d012      	beq.n	b4f88 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b4f62:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b4f66:	4631      	mov	r1, r6
   b4f68:	1d38      	adds	r0, r7, #4
   b4f6a:	f7ff fdf3 	bl	b4b54 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b4f6e:	4581      	cmp	r9, r0
   b4f70:	d3f5      	bcc.n	b4f5e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b4f72:	683b      	ldr	r3, [r7, #0]
   b4f74:	9a03      	ldr	r2, [sp, #12]
   b4f76:	9200      	str	r2, [sp, #0]
   b4f78:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b4f7c:	464a      	mov	r2, r9
   b4f7e:	4633      	mov	r3, r6
   b4f80:	4641      	mov	r1, r8
   b4f82:	4638      	mov	r0, r7
   b4f84:	47d8      	blx	fp
   b4f86:	e7ea      	b.n	b4f5e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b4f88:	2300      	movs	r3, #0
   b4f8a:	7323      	strb	r3, [r4, #12]
   b4f8c:	e7d9      	b.n	b4f42 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b4f8e:	bf00      	nop
   b4f90:	e000ed00 	.word	0xe000ed00

000b4f94 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b4f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f98:	469b      	mov	fp, r3
   b4f9a:	4b1a      	ldr	r3, [pc, #104]	; (b5004 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b4f9c:	685b      	ldr	r3, [r3, #4]
   b4f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b4fa2:	4680      	mov	r8, r0
   b4fa4:	4689      	mov	r9, r1
   b4fa6:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b4fa8:	b96b      	cbnz	r3, b4fc6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b4faa:	f7ff fe7f 	bl	b4cac <_ZN5spark10LogManager8instanceEv>
   b4fae:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b4fb0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b4fb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4fb6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b4fb8:	f7ff fd45 	bl	b4a46 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b4fbc:	7b23      	ldrb	r3, [r4, #12]
   b4fbe:	b12b      	cbz	r3, b4fcc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b4fc0:	a801      	add	r0, sp, #4
   b4fc2:	f7ff ff9f 	bl	b4f04 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b4fc6:	b003      	add	sp, #12
   b4fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b4fcc:	2301      	movs	r3, #1
   b4fce:	7323      	strb	r3, [r4, #12]
   b4fd0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b4fd4:	b2f6      	uxtb	r6, r6
   b4fd6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b4fda:	4555      	cmp	r5, sl
   b4fdc:	d00e      	beq.n	b4ffc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b4fde:	f855 7b04 	ldr.w	r7, [r5], #4
   b4fe2:	4659      	mov	r1, fp
   b4fe4:	1d38      	adds	r0, r7, #4
   b4fe6:	f7ff fdb5 	bl	b4b54 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b4fea:	4286      	cmp	r6, r0
   b4fec:	d3f5      	bcc.n	b4fda <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b4fee:	683b      	ldr	r3, [r7, #0]
   b4ff0:	464a      	mov	r2, r9
   b4ff2:	68db      	ldr	r3, [r3, #12]
   b4ff4:	4641      	mov	r1, r8
   b4ff6:	4638      	mov	r0, r7
   b4ff8:	4798      	blx	r3
   b4ffa:	e7ee      	b.n	b4fda <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b4ffc:	2300      	movs	r3, #0
   b4ffe:	7323      	strb	r3, [r4, #12]
   b5000:	e7de      	b.n	b4fc0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b5002:	bf00      	nop
   b5004:	e000ed00 	.word	0xe000ed00

000b5008 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b5008:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b500c:	4b16      	ldr	r3, [pc, #88]	; (b5068 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b500e:	685b      	ldr	r3, [r3, #4]
   b5010:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5014:	4605      	mov	r5, r0
   b5016:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b5018:	bb1b      	cbnz	r3, b5062 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b501a:	f7ff fe47 	bl	b4cac <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b501e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b5022:	4604      	mov	r4, r0
   b5024:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5026:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5028:	f7ff fd0d 	bl	b4a46 <_ZN14RecursiveMutex4lockEv.isra.0>
   b502c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b5030:	2446      	movs	r4, #70	; 0x46
   b5032:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5036:	45b0      	cmp	r8, r6
   b5038:	d109      	bne.n	b504e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b503a:	a801      	add	r0, sp, #4
   b503c:	f7ff ff62 	bl	b4f04 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b5040:	42a5      	cmp	r5, r4
   b5042:	bfb4      	ite	lt
   b5044:	2000      	movlt	r0, #0
   b5046:	2001      	movge	r0, #1
}
   b5048:	b002      	add	sp, #8
   b504a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b504e:	f856 0b04 	ldr.w	r0, [r6], #4
   b5052:	4639      	mov	r1, r7
   b5054:	3004      	adds	r0, #4
   b5056:	f7ff fd7d 	bl	b4b54 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b505a:	4284      	cmp	r4, r0
   b505c:	bfa8      	it	ge
   b505e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b5060:	e7e9      	b.n	b5036 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b5062:	2000      	movs	r0, #0
   b5064:	e7f0      	b.n	b5048 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b5066:	bf00      	nop
   b5068:	e000ed00 	.word	0xe000ed00

000b506c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b506e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b5072:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5074:	4604      	mov	r4, r0
   b5076:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5078:	db0d      	blt.n	b5096 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b507a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b507c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b507e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5080:	dd04      	ble.n	b508c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b5082:	00b9      	lsls	r1, r7, #2
   b5084:	f7ff faee 	bl	b4664 <realloc>
            if (!d) {
   b5088:	b918      	cbnz	r0, b5092 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b508a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b508c:	f7ff fae2 	bl	b4654 <free>
        T* d = nullptr;
   b5090:	2000      	movs	r0, #0
        data_ = d;
   b5092:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5094:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5096:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5098:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b509a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b509e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b50a0:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b50a4:	1d08      	adds	r0, r1, #4
   b50a6:	f001 f991 	bl	b63cc <memmove>
    new(p) T(std::move(value));
   b50aa:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b50ae:	6863      	ldr	r3, [r4, #4]
   b50b0:	3301      	adds	r3, #1
   b50b2:	6063      	str	r3, [r4, #4]
    return true;
   b50b4:	2001      	movs	r0, #1
   b50b6:	e7e8      	b.n	b508a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b50b8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b50b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b50ba:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b50be:	4604      	mov	r4, r0
   b50c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b50c2:	9301      	str	r3, [sp, #4]
   b50c4:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b50c6:	f7ff fcbe 	bl	b4a46 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b50ca:	e9d4 3200 	ldrd	r3, r2, [r4]
   b50ce:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b50d2:	4293      	cmp	r3, r2
   b50d4:	4619      	mov	r1, r3
   b50d6:	d00b      	beq.n	b50f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b50d8:	6809      	ldr	r1, [r1, #0]
   b50da:	42a9      	cmp	r1, r5
   b50dc:	f103 0304 	add.w	r3, r3, #4
   b50e0:	d1f7      	bne.n	b50d2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b50e2:	a801      	add	r0, sp, #4
   b50e4:	f7ff ff0e 	bl	b4f04 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b50e8:	2500      	movs	r5, #0
}
   b50ea:	4628      	mov	r0, r5
   b50ec:	b003      	add	sp, #12
   b50ee:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b50f0:	4629      	mov	r1, r5
   b50f2:	4620      	mov	r0, r4
   b50f4:	f7ff ffba 	bl	b506c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b50f8:	4605      	mov	r5, r0
   b50fa:	2800      	cmp	r0, #0
   b50fc:	d0f1      	beq.n	b50e2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b50fe:	6863      	ldr	r3, [r4, #4]
   b5100:	2b01      	cmp	r3, #1
   b5102:	d101      	bne.n	b5108 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b5104:	f7ff fdee 	bl	b4ce4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5108:	a801      	add	r0, sp, #4
   b510a:	f7ff fefb 	bl	b4f04 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b510e:	e7ec      	b.n	b50ea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b5110 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5110:	b570      	push	{r4, r5, r6, lr}
   b5112:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b5114:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5118:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b511a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b511e:	4282      	cmp	r2, r0
   b5120:	d00f      	beq.n	b5142 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b5122:	4601      	mov	r1, r0
            if (*p == value) {
   b5124:	681d      	ldr	r5, [r3, #0]
   b5126:	f851 6b04 	ldr.w	r6, [r1], #4
   b512a:	42ae      	cmp	r6, r5
   b512c:	d107      	bne.n	b513e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b512e:	1a52      	subs	r2, r2, r1
   b5130:	f001 f94c 	bl	b63cc <memmove>
    --size_;
   b5134:	6863      	ldr	r3, [r4, #4]
   b5136:	3b01      	subs	r3, #1
   b5138:	6063      	str	r3, [r4, #4]
    return true;
   b513a:	2001      	movs	r0, #1
}
   b513c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b513e:	4608      	mov	r0, r1
   b5140:	e7ed      	b.n	b511e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b5142:	2000      	movs	r0, #0
   b5144:	e7fa      	b.n	b513c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b5146 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5146:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5148:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b514c:	4604      	mov	r4, r0
   b514e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5150:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5152:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b5154:	f7ff fc77 	bl	b4a46 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b5158:	a901      	add	r1, sp, #4
   b515a:	4620      	mov	r0, r4
   b515c:	f7ff ffd8 	bl	b5110 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b5160:	b118      	cbz	r0, b516a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b5162:	6863      	ldr	r3, [r4, #4]
   b5164:	b90b      	cbnz	r3, b516a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b5166:	f7ff fdc9 	bl	b4cfc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b516a:	a803      	add	r0, sp, #12
   b516c:	f7ff feca 	bl	b4f04 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5170:	b004      	add	sp, #16
   b5172:	bd10      	pop	{r4, pc}

000b5174 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b5174:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b5176:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b517a:	2318      	movs	r3, #24
   b517c:	4604      	mov	r4, r0
   b517e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b5182:	42ae      	cmp	r6, r5
   b5184:	d015      	beq.n	b51b2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b5186:	f105 0110 	add.w	r1, r5, #16
   b518a:	4620      	mov	r0, r4
   b518c:	f7ff ffc0 	bl	b5110 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b5190:	6863      	ldr	r3, [r4, #4]
   b5192:	b90b      	cbnz	r3, b5198 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b5194:	f7ff fdb2 	bl	b4cfc <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b5198:	69e0      	ldr	r0, [r4, #28]
   b519a:	6929      	ldr	r1, [r5, #16]
   b519c:	6803      	ldr	r3, [r0, #0]
   b519e:	68db      	ldr	r3, [r3, #12]
   b51a0:	4798      	blx	r3
        if (h.stream) {
   b51a2:	6969      	ldr	r1, [r5, #20]
   b51a4:	b119      	cbz	r1, b51ae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b51a6:	6a20      	ldr	r0, [r4, #32]
   b51a8:	6803      	ldr	r3, [r0, #0]
   b51aa:	68db      	ldr	r3, [r3, #12]
   b51ac:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b51ae:	3518      	adds	r5, #24
   b51b0:	e7e7      	b.n	b5182 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b51b2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b51b6:	2618      	movs	r6, #24
   b51b8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b51bc:	42ae      	cmp	r6, r5
   b51be:	d004      	beq.n	b51ca <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b51c0:	4628      	mov	r0, r5
   b51c2:	f7ff fae7 	bl	b4794 <_ZN6StringD1Ev>
   b51c6:	3518      	adds	r5, #24
   b51c8:	e7f8      	b.n	b51bc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b51ca:	2300      	movs	r3, #0
   b51cc:	6163      	str	r3, [r4, #20]
}
   b51ce:	bd70      	pop	{r4, r5, r6, pc}

000b51d0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b51d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b51d2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b51d4:	f7ff fd92 	bl	b4cfc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b51d8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b51dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b51de:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b51e0:	f7ff fc31 	bl	b4a46 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b51e4:	4620      	mov	r0, r4
   b51e6:	f7ff ffc5 	bl	b5174 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b51ea:	a801      	add	r0, sp, #4
   b51ec:	f7ff fe8a 	bl	b4f04 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b51f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b51f2:	b108      	cbz	r0, b51f8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b51f4:	f7ff f8ba 	bl	b436c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b51f8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b51fc:	2618      	movs	r6, #24
   b51fe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5202:	42ae      	cmp	r6, r5
   b5204:	d004      	beq.n	b5210 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b5206:	4628      	mov	r0, r5
   b5208:	f7ff fac4 	bl	b4794 <_ZN6StringD1Ev>
   b520c:	3518      	adds	r5, #24
   b520e:	e7f8      	b.n	b5202 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5210:	6920      	ldr	r0, [r4, #16]
   b5212:	f7ff fa1f 	bl	b4654 <free>
   b5216:	6820      	ldr	r0, [r4, #0]
   b5218:	f7ff fa1c 	bl	b4654 <free>
}
   b521c:	4620      	mov	r0, r4
   b521e:	b002      	add	sp, #8
   b5220:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5224 <__tcf_2>:
    static LogManager mgr;
   b5224:	4801      	ldr	r0, [pc, #4]	; (b522c <__tcf_2+0x8>)
   b5226:	f7ff bfd3 	b.w	b51d0 <_ZN5spark10LogManagerD1Ev>
   b522a:	bf00      	nop
   b522c:	2003e6e0 	.word	0x2003e6e0

000b5230 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5230:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5234:	4604      	mov	r4, r0
   b5236:	460d      	mov	r5, r1
   b5238:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b523a:	d915      	bls.n	b5268 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b523c:	4290      	cmp	r0, r2
   b523e:	d214      	bcs.n	b526a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b5240:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5244:	1a75      	subs	r5, r6, r1
   b5246:	f1a1 0714 	sub.w	r7, r1, #20
   b524a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b524c:	42b7      	cmp	r7, r6
   b524e:	d01a      	beq.n	b5286 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b5250:	b11c      	cbz	r4, b525a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b5252:	4631      	mov	r1, r6
   b5254:	4620      	mov	r0, r4
   b5256:	f7ff fe33 	bl	b4ec0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b525a:	f106 0008 	add.w	r0, r6, #8
   b525e:	f7ff fde7 	bl	b4e30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b5262:	3e14      	subs	r6, #20
   b5264:	3c14      	subs	r4, #20
   b5266:	e7f1      	b.n	b524c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5268:	d00d      	beq.n	b5286 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b526a:	42b5      	cmp	r5, r6
   b526c:	d00b      	beq.n	b5286 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b526e:	b11c      	cbz	r4, b5278 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b5270:	4629      	mov	r1, r5
   b5272:	4620      	mov	r0, r4
   b5274:	f7ff fe24 	bl	b4ec0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b5278:	f105 0008 	add.w	r0, r5, #8
   b527c:	f7ff fdd8 	bl	b4e30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b5280:	3514      	adds	r5, #20
   b5282:	3414      	adds	r4, #20
   b5284:	e7f1      	b.n	b526a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b5286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5288 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5288:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b528a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b528c:	4604      	mov	r4, r0
   b528e:	460d      	mov	r5, r1
   b5290:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5292:	d914      	bls.n	b52be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b5294:	4290      	cmp	r0, r2
   b5296:	d213      	bcs.n	b52c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b5298:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b529c:	1a75      	subs	r5, r6, r1
   b529e:	f1a1 0710 	sub.w	r7, r1, #16
   b52a2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b52a4:	42b7      	cmp	r7, r6
   b52a6:	d018      	beq.n	b52da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b52a8:	b11c      	cbz	r4, b52b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b52aa:	4631      	mov	r1, r6
   b52ac:	4620      	mov	r0, r4
   b52ae:	f7ff fada 	bl	b4866 <_ZN6StringC1EOS_>
                end->~T();
   b52b2:	4630      	mov	r0, r6
   b52b4:	f7ff fa6e 	bl	b4794 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b52b8:	3e10      	subs	r6, #16
   b52ba:	3c10      	subs	r4, #16
   b52bc:	e7f2      	b.n	b52a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b52be:	d00c      	beq.n	b52da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b52c0:	42b5      	cmp	r5, r6
   b52c2:	d00a      	beq.n	b52da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b52c4:	b11c      	cbz	r4, b52ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b52c6:	4629      	mov	r1, r5
   b52c8:	4620      	mov	r0, r4
   b52ca:	f7ff facc 	bl	b4866 <_ZN6StringC1EOS_>
                p->~T();
   b52ce:	4628      	mov	r0, r5
   b52d0:	f7ff fa60 	bl	b4794 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b52d4:	3510      	adds	r5, #16
   b52d6:	3410      	adds	r4, #16
   b52d8:	e7f2      	b.n	b52c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b52da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b52dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b52dc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b52de:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b52e0:	4605      	mov	r5, r0
        if (n > 0) {
   b52e2:	dd11      	ble.n	b5308 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b52e4:	0130      	lsls	r0, r6, #4
   b52e6:	f7ff f9ad 	bl	b4644 <malloc>
            if (!d) {
   b52ea:	4604      	mov	r4, r0
   b52ec:	b158      	cbz	r0, b5306 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b52ee:	e9d5 1200 	ldrd	r1, r2, [r5]
   b52f2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b52f6:	f7ff ffc7 	bl	b5288 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b52fa:	6828      	ldr	r0, [r5, #0]
   b52fc:	f7ff f9aa 	bl	b4654 <free>
        data_ = d;
   b5300:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5302:	60ae      	str	r6, [r5, #8]
        return true;
   b5304:	2001      	movs	r0, #1
    }
   b5306:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5308:	2400      	movs	r4, #0
   b530a:	e7f6      	b.n	b52fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b530c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b530c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5310:	4690      	mov	r8, r2
   b5312:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5314:	2300      	movs	r3, #0
   b5316:	9103      	str	r1, [sp, #12]
    return size_;
   b5318:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b531c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b531e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b5320:	4299      	cmp	r1, r3
        capacity_(0) {
   b5322:	e9c0 3300 	strd	r3, r3, [r0]
   b5326:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b532a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b532e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5332:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5334:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b5336:	dc23      	bgt.n	b5380 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b5338:	e9d8 5700 	ldrd	r5, r7, [r8]
   b533c:	2314      	movs	r3, #20
   b533e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b5342:	42af      	cmp	r7, r5
   b5344:	d03b      	beq.n	b53be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b5346:	4629      	mov	r1, r5
   b5348:	a80b      	add	r0, sp, #44	; 0x2c
   b534a:	f7ff fa8c 	bl	b4866 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b534e:	a90b      	add	r1, sp, #44	; 0x2c
   b5350:	a80f      	add	r0, sp, #60	; 0x3c
   b5352:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b5354:	f7ff fa87 	bl	b4866 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5358:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b535c:	4299      	cmp	r1, r3
   b535e:	da1b      	bge.n	b5398 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b5360:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b5362:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b5364:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b5368:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b536c:	4631      	mov	r1, r6
   b536e:	f106 0010 	add.w	r0, r6, #16
   b5372:	f7ff ff89 	bl	b5288 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b5376:	b9ee      	cbnz	r6, b53b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b5378:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b537a:	3301      	adds	r3, #1
   b537c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b537e:	e011      	b.n	b53a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b5380:	a808      	add	r0, sp, #32
   b5382:	f7ff ffab 	bl	b52dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5386:	2800      	cmp	r0, #0
   b5388:	d1d6      	bne.n	b5338 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b538a:	a808      	add	r0, sp, #32
   b538c:	f7ff faa4 	bl	b48d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5390:	4620      	mov	r0, r4
   b5392:	b015      	add	sp, #84	; 0x54
   b5394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5398:	3101      	adds	r1, #1
   b539a:	a808      	add	r0, sp, #32
   b539c:	f7ff ff9e 	bl	b52dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b53a0:	2800      	cmp	r0, #0
   b53a2:	d1dd      	bne.n	b5360 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b53a4:	a80f      	add	r0, sp, #60	; 0x3c
   b53a6:	f7ff f9f5 	bl	b4794 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b53aa:	a80b      	add	r0, sp, #44	; 0x2c
   b53ac:	f7ff f9f2 	bl	b4794 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b53b0:	3514      	adds	r5, #20
   b53b2:	e7c6      	b.n	b5342 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b53b4:	a90f      	add	r1, sp, #60	; 0x3c
   b53b6:	4630      	mov	r0, r6
   b53b8:	f7ff fa55 	bl	b4866 <_ZN6StringC1EOS_>
   b53bc:	e7dc      	b.n	b5378 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b53be:	2600      	movs	r6, #0
   b53c0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b53c4:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b53c6:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b53ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b53ce:	429e      	cmp	r6, r3
   b53d0:	da7c      	bge.n	b54cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b53d2:	0133      	lsls	r3, r6, #4
   b53d4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b53d6:	9306      	str	r3, [sp, #24]
        if (!category) {
   b53d8:	b90b      	cbnz	r3, b53de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b53da:	3601      	adds	r6, #1
   b53dc:	e7f5      	b.n	b53ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b53de:	2300      	movs	r3, #0
   b53e0:	9307      	str	r3, [sp, #28]
   b53e2:	fb09 f306 	mul.w	r3, r9, r6
   b53e6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b53e8:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b53ea:	a907      	add	r1, sp, #28
   b53ec:	a806      	add	r0, sp, #24
   b53ee:	f7ff fb0a 	bl	b4a06 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b53f2:	4682      	mov	sl, r0
   b53f4:	2800      	cmp	r0, #0
   b53f6:	d0f0      	beq.n	b53da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b53f8:	f04f 0300 	mov.w	r3, #0
   b53fc:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5400:	4601      	mov	r1, r0
   b5402:	9a07      	ldr	r2, [sp, #28]
   b5404:	f10d 0317 	add.w	r3, sp, #23
   b5408:	4628      	mov	r0, r5
   b540a:	f7ff fb67 	bl	b4adc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b540e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5412:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5414:	2f00      	cmp	r7, #0
   b5416:	d14a      	bne.n	b54ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b5418:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b541c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b5420:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b5424:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5428:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b542c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b5430:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5432:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b5436:	4293      	cmp	r3, r2
   b5438:	db17      	blt.n	b546a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b543a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b543e:	f1ba 0f00 	cmp.w	sl, #0
   b5442:	dd30      	ble.n	b54a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b5444:	fb09 f00a 	mul.w	r0, r9, sl
   b5448:	f7ff f8fc 	bl	b4644 <malloc>
            if (!d) {
   b544c:	4683      	mov	fp, r0
   b544e:	b360      	cbz	r0, b54aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b5450:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5454:	fb09 1202 	mla	r2, r9, r2, r1
   b5458:	f7ff feea 	bl	b5230 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b545c:	6828      	ldr	r0, [r5, #0]
   b545e:	f7ff f8f9 	bl	b4654 <free>
        data_ = d;
   b5462:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b5466:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b546a:	682b      	ldr	r3, [r5, #0]
   b546c:	9a01      	ldr	r2, [sp, #4]
   b546e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b5472:	686a      	ldr	r2, [r5, #4]
   b5474:	4651      	mov	r1, sl
   b5476:	fb09 3202 	mla	r2, r9, r2, r3
   b547a:	f10a 0014 	add.w	r0, sl, #20
   b547e:	f7ff fed7 	bl	b5230 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b5482:	f1ba 0f00 	cmp.w	sl, #0
   b5486:	d003      	beq.n	b5490 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b5488:	a90f      	add	r1, sp, #60	; 0x3c
   b548a:	4650      	mov	r0, sl
   b548c:	f7ff fd18 	bl	b4ec0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b5490:	686b      	ldr	r3, [r5, #4]
   b5492:	3301      	adds	r3, #1
   b5494:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b5496:	a811      	add	r0, sp, #68	; 0x44
   b5498:	f7ff fcca 	bl	b4e30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b549c:	b13f      	cbz	r7, b54ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b549e:	a80b      	add	r0, sp, #44	; 0x2c
   b54a0:	f7ff fcc6 	bl	b4e30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b54a4:	e771      	b.n	b538a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b54a6:	46bb      	mov	fp, r7
   b54a8:	e7d8      	b.n	b545c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b54aa:	2701      	movs	r7, #1
   b54ac:	e7f3      	b.n	b5496 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b54ae:	9b01      	ldr	r3, [sp, #4]
   b54b0:	682d      	ldr	r5, [r5, #0]
   b54b2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b54b6:	9b06      	ldr	r3, [sp, #24]
   b54b8:	781b      	ldrb	r3, [r3, #0]
   b54ba:	b92b      	cbnz	r3, b54c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b54bc:	f8d8 3000 	ldr.w	r3, [r8]
   b54c0:	9a02      	ldr	r2, [sp, #8]
   b54c2:	4413      	add	r3, r2
   b54c4:	7c1b      	ldrb	r3, [r3, #16]
   b54c6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b54c8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b54ca:	e78e      	b.n	b53ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54cc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b54ce:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54d0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b54d2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54d4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b54d6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b54d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b54da:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54dc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b54de:	60a2      	str	r2, [r4, #8]
   b54e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b54e2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54e4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b54e6:	60e2      	str	r2, [r4, #12]
   b54e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b54ea:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b54ec:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b54ee:	6122      	str	r2, [r4, #16]
   b54f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b54f2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b54f4:	9b03      	ldr	r3, [sp, #12]
   b54f6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b54f8:	6162      	str	r2, [r4, #20]
   b54fa:	7623      	strb	r3, [r4, #24]
   b54fc:	e7cf      	b.n	b549e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b5500 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5500:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5502:	4604      	mov	r4, r0
   b5504:	b087      	sub	sp, #28
   b5506:	460d      	mov	r5, r1
        filter_(level, filters) {
   b5508:	4626      	mov	r6, r4
        stream_(&stream) {
   b550a:	4619      	mov	r1, r3
   b550c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b550e:	4617      	mov	r7, r2
        stream_(&stream) {
   b5510:	f7fe fe62 	bl	b41d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5514:	4b0b      	ldr	r3, [pc, #44]	; (b5544 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b5516:	f846 3b04 	str.w	r3, [r6], #4
   b551a:	4669      	mov	r1, sp
   b551c:	a803      	add	r0, sp, #12
   b551e:	f7fe fe5b 	bl	b41d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5522:	aa03      	add	r2, sp, #12
   b5524:	4639      	mov	r1, r7
   b5526:	4630      	mov	r0, r6
   b5528:	f7ff fef0 	bl	b530c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b552c:	a803      	add	r0, sp, #12
   b552e:	f7fe fe12 	bl	b4156 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5532:	4668      	mov	r0, sp
   b5534:	f7fe fe0f 	bl	b4156 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5538:	4b03      	ldr	r3, [pc, #12]	; (b5548 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b553a:	6023      	str	r3, [r4, #0]
}
   b553c:	4620      	mov	r0, r4
        stream_(&stream) {
   b553e:	6225      	str	r5, [r4, #32]
}
   b5540:	b007      	add	sp, #28
   b5542:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5544:	000b6714 	.word	0x000b6714
   b5548:	000b6818 	.word	0x000b6818

000b554c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b554c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b554e:	460f      	mov	r7, r1
   b5550:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5552:	491d      	ldr	r1, [pc, #116]	; (b55c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b5554:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5556:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b5558:	4616      	mov	r6, r2
   b555a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b555c:	f7fe fd5e 	bl	b401c <strcmp>
   b5560:	b9c0      	cbnz	r0, b5594 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b5562:	b1a4      	cbz	r4, b558e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b5564:	4629      	mov	r1, r5
   b5566:	a801      	add	r0, sp, #4
   b5568:	f7ff fcbd 	bl	b4ee6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b556c:	4917      	ldr	r1, [pc, #92]	; (b55cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b556e:	2024      	movs	r0, #36	; 0x24
   b5570:	f000 ff0c 	bl	b638c <_ZnwjRKSt9nothrow_t>
   b5574:	4605      	mov	r5, r0
   b5576:	b130      	cbz	r0, b5586 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b5578:	ab01      	add	r3, sp, #4
   b557a:	4632      	mov	r2, r6
   b557c:	4621      	mov	r1, r4
   b557e:	f7ff ffbf 	bl	b5500 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5582:	4b13      	ldr	r3, [pc, #76]	; (b55d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b5584:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5586:	a801      	add	r0, sp, #4
   b5588:	f7fe fde5 	bl	b4156 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b558c:	462c      	mov	r4, r5
}
   b558e:	4620      	mov	r0, r4
   b5590:	b005      	add	sp, #20
   b5592:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b5594:	490f      	ldr	r1, [pc, #60]	; (b55d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b5596:	4638      	mov	r0, r7
   b5598:	f7fe fd40 	bl	b401c <strcmp>
   b559c:	b990      	cbnz	r0, b55c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b559e:	2c00      	cmp	r4, #0
   b55a0:	d0f5      	beq.n	b558e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b55a2:	4629      	mov	r1, r5
   b55a4:	a801      	add	r0, sp, #4
   b55a6:	f7ff fc9e 	bl	b4ee6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b55aa:	4908      	ldr	r1, [pc, #32]	; (b55cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b55ac:	2024      	movs	r0, #36	; 0x24
   b55ae:	f000 feed 	bl	b638c <_ZnwjRKSt9nothrow_t>
   b55b2:	4605      	mov	r5, r0
   b55b4:	2800      	cmp	r0, #0
   b55b6:	d0e6      	beq.n	b5586 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b55b8:	ab01      	add	r3, sp, #4
   b55ba:	4632      	mov	r2, r6
   b55bc:	4621      	mov	r1, r4
   b55be:	f7ff ff9f 	bl	b5500 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b55c2:	e7e0      	b.n	b5586 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b55c4:	2400      	movs	r4, #0
   b55c6:	e7e2      	b.n	b558e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b55c8:	000b67ac 	.word	0x000b67ac
   b55cc:	000b69a5 	.word	0x000b69a5
   b55d0:	000b6830 	.word	0x000b6830
   b55d4:	000b67b0 	.word	0x000b67b0

000b55d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b55d8:	4b01      	ldr	r3, [pc, #4]	; (b55e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b55da:	4a02      	ldr	r2, [pc, #8]	; (b55e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b55dc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b55de:	4770      	bx	lr
   b55e0:	2003e6dc 	.word	0x2003e6dc
   b55e4:	000b67c1 	.word	0x000b67c1

000b55e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b55e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b55ec:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b55ee:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b55f2:	4604      	mov	r4, r0
   b55f4:	460e      	mov	r6, r1
   b55f6:	4617      	mov	r7, r2
   b55f8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b55fa:	f000 fb23 	bl	b5c44 <_Z16_fetch_usbserialv>
   b55fe:	4581      	cmp	r9, r0
   b5600:	d04c      	beq.n	b569c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b5602:	792b      	ldrb	r3, [r5, #4]
   b5604:	0719      	lsls	r1, r3, #28
   b5606:	d504      	bpl.n	b5612 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b5608:	696a      	ldr	r2, [r5, #20]
   b560a:	4954      	ldr	r1, [pc, #336]	; (b575c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b560c:	4620      	mov	r0, r4
   b560e:	f7ff faca 	bl	b4ba6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b5612:	f1b8 0f00 	cmp.w	r8, #0
   b5616:	d00d      	beq.n	b5634 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b5618:	215b      	movs	r1, #91	; 0x5b
   b561a:	4620      	mov	r0, r4
   b561c:	f7ff fa52 	bl	b4ac4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b5620:	4641      	mov	r1, r8
   b5622:	4620      	mov	r0, r4
   b5624:	f7ff fa3f 	bl	b4aa6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b5628:	6823      	ldr	r3, [r4, #0]
   b562a:	494d      	ldr	r1, [pc, #308]	; (b5760 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b562c:	68db      	ldr	r3, [r3, #12]
   b562e:	2202      	movs	r2, #2
   b5630:	4620      	mov	r0, r4
   b5632:	4798      	blx	r3
    if (attr.has_file) {
   b5634:	792b      	ldrb	r3, [r5, #4]
   b5636:	07da      	lsls	r2, r3, #31
   b5638:	d523      	bpl.n	b5682 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b563a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b563e:	212f      	movs	r1, #47	; 0x2f
   b5640:	4640      	mov	r0, r8
   b5642:	f000 ff46 	bl	b64d2 <strrchr>
    if (s1) {
   b5646:	b108      	cbz	r0, b564c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b5648:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b564c:	4641      	mov	r1, r8
   b564e:	4620      	mov	r0, r4
   b5650:	f7ff fa29 	bl	b4aa6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b5654:	792b      	ldrb	r3, [r5, #4]
   b5656:	079b      	lsls	r3, r3, #30
   b5658:	d508      	bpl.n	b566c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b565a:	213a      	movs	r1, #58	; 0x3a
   b565c:	4620      	mov	r0, r4
   b565e:	f7ff fa31 	bl	b4ac4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b5662:	68ea      	ldr	r2, [r5, #12]
   b5664:	493f      	ldr	r1, [pc, #252]	; (b5764 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b5666:	4620      	mov	r0, r4
   b5668:	f7ff fa9d 	bl	b4ba6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b566c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b566e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b5670:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b5674:	68db      	ldr	r3, [r3, #12]
   b5676:	bf14      	ite	ne
   b5678:	493b      	ldrne	r1, [pc, #236]	; (b5768 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b567a:	493c      	ldreq	r1, [pc, #240]	; (b576c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b567c:	2202      	movs	r2, #2
            write(": ", 2);
   b567e:	4620      	mov	r0, r4
   b5680:	4798      	blx	r3
    if (attr.has_function) {
   b5682:	792b      	ldrb	r3, [r5, #4]
   b5684:	0758      	lsls	r0, r3, #29
   b5686:	d51d      	bpl.n	b56c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b5688:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b568a:	460b      	mov	r3, r1
   b568c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b568e:	f813 0b01 	ldrb.w	r0, [r3], #1
   b5692:	b160      	cbz	r0, b56ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b5694:	2820      	cmp	r0, #32
   b5696:	d108      	bne.n	b56aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b5698:	4619      	mov	r1, r3
   b569a:	e7f7      	b.n	b568c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b569c:	4834      	ldr	r0, [pc, #208]	; (b5770 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b569e:	f000 fbc8 	bl	b5e32 <_ZN5spark12NetworkClass9listeningEv>
   b56a2:	2800      	cmp	r0, #0
   b56a4:	d0ad      	beq.n	b5602 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b56a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b56aa:	2828      	cmp	r0, #40	; 0x28
   b56ac:	d1ee      	bne.n	b568c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b56ae:	6823      	ldr	r3, [r4, #0]
   b56b0:	1a52      	subs	r2, r2, r1
   b56b2:	68db      	ldr	r3, [r3, #12]
   b56b4:	4620      	mov	r0, r4
   b56b6:	4798      	blx	r3
        write("(): ", 4);
   b56b8:	6823      	ldr	r3, [r4, #0]
   b56ba:	492e      	ldr	r1, [pc, #184]	; (b5774 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b56bc:	68db      	ldr	r3, [r3, #12]
   b56be:	2204      	movs	r2, #4
   b56c0:	4620      	mov	r0, r4
   b56c2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b56c4:	2100      	movs	r1, #0
   b56c6:	4638      	mov	r0, r7
   b56c8:	f7fe ff00 	bl	b44cc <log_level_name>
   b56cc:	4601      	mov	r1, r0
    write(s);
   b56ce:	4620      	mov	r0, r4
   b56d0:	f7ff f9e9 	bl	b4aa6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b56d4:	6823      	ldr	r3, [r4, #0]
   b56d6:	4925      	ldr	r1, [pc, #148]	; (b576c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b56d8:	68db      	ldr	r3, [r3, #12]
   b56da:	2202      	movs	r2, #2
   b56dc:	4620      	mov	r0, r4
   b56de:	4798      	blx	r3
    if (msg) {
   b56e0:	b11e      	cbz	r6, b56ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b56e2:	4631      	mov	r1, r6
   b56e4:	4620      	mov	r0, r4
   b56e6:	f7ff f9de 	bl	b4aa6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b56ea:	792b      	ldrb	r3, [r5, #4]
   b56ec:	f013 0f30 	tst.w	r3, #48	; 0x30
   b56f0:	d02c      	beq.n	b574c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b56f2:	6823      	ldr	r3, [r4, #0]
   b56f4:	4920      	ldr	r1, [pc, #128]	; (b5778 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b56f6:	68db      	ldr	r3, [r3, #12]
   b56f8:	2202      	movs	r2, #2
   b56fa:	4620      	mov	r0, r4
   b56fc:	4798      	blx	r3
        if (attr.has_code) {
   b56fe:	792b      	ldrb	r3, [r5, #4]
   b5700:	06d9      	lsls	r1, r3, #27
   b5702:	d50a      	bpl.n	b571a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b5704:	6823      	ldr	r3, [r4, #0]
   b5706:	491d      	ldr	r1, [pc, #116]	; (b577c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b5708:	68db      	ldr	r3, [r3, #12]
   b570a:	2207      	movs	r2, #7
   b570c:	4620      	mov	r0, r4
   b570e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b5710:	69aa      	ldr	r2, [r5, #24]
   b5712:	491b      	ldr	r1, [pc, #108]	; (b5780 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b5714:	4620      	mov	r0, r4
   b5716:	f7ff fa46 	bl	b4ba6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b571a:	792b      	ldrb	r3, [r5, #4]
   b571c:	069a      	lsls	r2, r3, #26
   b571e:	d511      	bpl.n	b5744 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b5720:	06db      	lsls	r3, r3, #27
   b5722:	d505      	bpl.n	b5730 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b5724:	6823      	ldr	r3, [r4, #0]
   b5726:	4910      	ldr	r1, [pc, #64]	; (b5768 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b5728:	68db      	ldr	r3, [r3, #12]
   b572a:	2202      	movs	r2, #2
   b572c:	4620      	mov	r0, r4
   b572e:	4798      	blx	r3
            write("details = ", 10);
   b5730:	6823      	ldr	r3, [r4, #0]
   b5732:	4914      	ldr	r1, [pc, #80]	; (b5784 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b5734:	68db      	ldr	r3, [r3, #12]
   b5736:	4620      	mov	r0, r4
   b5738:	220a      	movs	r2, #10
   b573a:	4798      	blx	r3
            write(attr.details);
   b573c:	69e9      	ldr	r1, [r5, #28]
   b573e:	4620      	mov	r0, r4
   b5740:	f7ff f9b1 	bl	b4aa6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b5744:	215d      	movs	r1, #93	; 0x5d
   b5746:	4620      	mov	r0, r4
   b5748:	f7ff f9bc 	bl	b4ac4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b574c:	6823      	ldr	r3, [r4, #0]
   b574e:	490e      	ldr	r1, [pc, #56]	; (b5788 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b5750:	68db      	ldr	r3, [r3, #12]
   b5752:	4620      	mov	r0, r4
   b5754:	2202      	movs	r2, #2
}
   b5756:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b575a:	4718      	bx	r3
   b575c:	000b67c5 	.word	0x000b67c5
   b5760:	000b67cc 	.word	0x000b67cc
   b5764:	000b67cf 	.word	0x000b67cf
   b5768:	000b67d2 	.word	0x000b67d2
   b576c:	000b67d7 	.word	0x000b67d7
   b5770:	2003e744 	.word	0x2003e744
   b5774:	000b67d5 	.word	0x000b67d5
   b5778:	000b67da 	.word	0x000b67da
   b577c:	000b67dd 	.word	0x000b67dd
   b5780:	000b67e5 	.word	0x000b67e5
   b5784:	000b67e8 	.word	0x000b67e8
   b5788:	000b67f3 	.word	0x000b67f3

000b578c <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b578c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5790:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b5792:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b5794:	460d      	mov	r5, r1
   b5796:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b5798:	f000 fa54 	bl	b5c44 <_Z16_fetch_usbserialv>
   b579c:	4287      	cmp	r7, r0
   b579e:	d007      	beq.n	b57b0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b57a0:	6a20      	ldr	r0, [r4, #32]
   b57a2:	6803      	ldr	r3, [r0, #0]
   b57a4:	4632      	mov	r2, r6
   b57a6:	4629      	mov	r1, r5
   b57a8:	68db      	ldr	r3, [r3, #12]
}
   b57aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b57ae:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b57b0:	4803      	ldr	r0, [pc, #12]	; (b57c0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b57b2:	f000 fb3e 	bl	b5e32 <_ZN5spark12NetworkClass9listeningEv>
   b57b6:	2800      	cmp	r0, #0
   b57b8:	d0f2      	beq.n	b57a0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b57ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b57be:	bf00      	nop
   b57c0:	2003e744 	.word	0x2003e744

000b57c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b57c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b57c8:	b085      	sub	sp, #20
    return stream_;
   b57ca:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b57ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b57d0:	4605      	mov	r5, r0
   b57d2:	460f      	mov	r7, r1
   b57d4:	4690      	mov	r8, r2
   b57d6:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b57d8:	f000 fa34 	bl	b5c44 <_Z16_fetch_usbserialv>
   b57dc:	4581      	cmp	r9, r0
   b57de:	d105      	bne.n	b57ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b57e0:	4849      	ldr	r0, [pc, #292]	; (b5908 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b57e2:	f000 fb26 	bl	b5e32 <_ZN5spark12NetworkClass9listeningEv>
   b57e6:	2800      	cmp	r0, #0
   b57e8:	f040 808a 	bne.w	b5900 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b57ec:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
   b57ee:	4a47      	ldr	r2, [pc, #284]	; (b590c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b57f0:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
   b57f2:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b57f6:	4668      	mov	r0, sp
        bytesWritten_(0) {
   b57f8:	e9cd 3902 	strd	r3, r9, [sp, #8]
        state_(BEGIN) {
   b57fc:	f88d 9004 	strb.w	r9, [sp, #4]
   b5800:	f000 fcd5 	bl	b61ae <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b5804:	4649      	mov	r1, r9
   b5806:	4640      	mov	r0, r8
   b5808:	f7fe fe60 	bl	b44cc <log_level_name>
    json.name("l", 1).value(s);
   b580c:	4940      	ldr	r1, [pc, #256]	; (b5910 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b580e:	4680      	mov	r8, r0
   b5810:	2201      	movs	r2, #1
   b5812:	4668      	mov	r0, sp
   b5814:	f000 fd5a 	bl	b62cc <_ZN5spark10JSONWriter4nameEPKcj>
   b5818:	4641      	mov	r1, r8
   b581a:	f7ff f936 	bl	b4a8a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b581e:	b13f      	cbz	r7, b5830 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
   b5820:	493c      	ldr	r1, [pc, #240]	; (b5914 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b5822:	2201      	movs	r2, #1
   b5824:	4668      	mov	r0, sp
   b5826:	f000 fd51 	bl	b62cc <_ZN5spark10JSONWriter4nameEPKcj>
   b582a:	4639      	mov	r1, r7
   b582c:	f7ff f92d 	bl	b4a8a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b5830:	b13e      	cbz	r6, b5842 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
   b5832:	4939      	ldr	r1, [pc, #228]	; (b5918 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b5834:	2201      	movs	r2, #1
   b5836:	4668      	mov	r0, sp
   b5838:	f000 fd48 	bl	b62cc <_ZN5spark10JSONWriter4nameEPKcj>
   b583c:	4631      	mov	r1, r6
   b583e:	f7ff f924 	bl	b4a8a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b5842:	7923      	ldrb	r3, [r4, #4]
   b5844:	07df      	lsls	r7, r3, #31
   b5846:	d50e      	bpl.n	b5866 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
   b5848:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b584a:	212f      	movs	r1, #47	; 0x2f
   b584c:	4630      	mov	r0, r6
   b584e:	f000 fe40 	bl	b64d2 <strrchr>
    if (s1) {
   b5852:	b100      	cbz	r0, b5856 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
   b5854:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b5856:	4931      	ldr	r1, [pc, #196]	; (b591c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b5858:	2201      	movs	r2, #1
   b585a:	4668      	mov	r0, sp
   b585c:	f000 fd36 	bl	b62cc <_ZN5spark10JSONWriter4nameEPKcj>
   b5860:	4631      	mov	r1, r6
   b5862:	f7ff f912 	bl	b4a8a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b5866:	7923      	ldrb	r3, [r4, #4]
   b5868:	079e      	lsls	r6, r3, #30
   b586a:	d507      	bpl.n	b587c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
   b586c:	492c      	ldr	r1, [pc, #176]	; (b5920 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b586e:	2202      	movs	r2, #2
   b5870:	4668      	mov	r0, sp
   b5872:	f000 fd2b 	bl	b62cc <_ZN5spark10JSONWriter4nameEPKcj>
   b5876:	68e1      	ldr	r1, [r4, #12]
   b5878:	f000 fca6 	bl	b61c8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b587c:	7923      	ldrb	r3, [r4, #4]
   b587e:	0758      	lsls	r0, r3, #29
   b5880:	d514      	bpl.n	b58ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b5882:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b5884:	4633      	mov	r3, r6
   b5886:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b5888:	f813 2b01 	ldrb.w	r2, [r3], #1
   b588c:	b12a      	cbz	r2, b589a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
   b588e:	2a20      	cmp	r2, #32
   b5890:	d101      	bne.n	b5896 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
   b5892:	461e      	mov	r6, r3
   b5894:	e7f7      	b.n	b5886 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
   b5896:	2a28      	cmp	r2, #40	; 0x28
   b5898:	d1f5      	bne.n	b5886 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
   b589a:	4922      	ldr	r1, [pc, #136]	; (b5924 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b589c:	2202      	movs	r2, #2
   b589e:	4668      	mov	r0, sp
   b58a0:	f000 fd14 	bl	b62cc <_ZN5spark10JSONWriter4nameEPKcj>
   b58a4:	1bba      	subs	r2, r7, r6
   b58a6:	4631      	mov	r1, r6
   b58a8:	f000 fd20 	bl	b62ec <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b58ac:	7923      	ldrb	r3, [r4, #4]
   b58ae:	0719      	lsls	r1, r3, #28
   b58b0:	d507      	bpl.n	b58c2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
   b58b2:	491d      	ldr	r1, [pc, #116]	; (b5928 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b58b4:	2201      	movs	r2, #1
   b58b6:	4668      	mov	r0, sp
   b58b8:	f000 fd08 	bl	b62cc <_ZN5spark10JSONWriter4nameEPKcj>
   b58bc:	6961      	ldr	r1, [r4, #20]
   b58be:	f000 fc95 	bl	b61ec <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b58c2:	7923      	ldrb	r3, [r4, #4]
   b58c4:	06da      	lsls	r2, r3, #27
   b58c6:	d507      	bpl.n	b58d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b58c8:	4918      	ldr	r1, [pc, #96]	; (b592c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b58ca:	2204      	movs	r2, #4
   b58cc:	4668      	mov	r0, sp
   b58ce:	f000 fcfd 	bl	b62cc <_ZN5spark10JSONWriter4nameEPKcj>
   b58d2:	69a1      	ldr	r1, [r4, #24]
   b58d4:	f000 fc78 	bl	b61c8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b58d8:	7923      	ldrb	r3, [r4, #4]
   b58da:	069b      	lsls	r3, r3, #26
   b58dc:	d507      	bpl.n	b58ee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b58de:	4914      	ldr	r1, [pc, #80]	; (b5930 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b58e0:	2206      	movs	r2, #6
   b58e2:	4668      	mov	r0, sp
   b58e4:	f000 fcf2 	bl	b62cc <_ZN5spark10JSONWriter4nameEPKcj>
   b58e8:	69e1      	ldr	r1, [r4, #28]
   b58ea:	f7ff f8ce 	bl	b4a8a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b58ee:	4668      	mov	r0, sp
   b58f0:	f000 fc47 	bl	b6182 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b58f4:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b58f6:	490f      	ldr	r1, [pc, #60]	; (b5934 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b58f8:	6803      	ldr	r3, [r0, #0]
   b58fa:	2202      	movs	r2, #2
   b58fc:	68db      	ldr	r3, [r3, #12]
   b58fe:	4798      	blx	r3
}
   b5900:	b005      	add	sp, #20
   b5902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5906:	bf00      	nop
   b5908:	2003e744 	.word	0x2003e744
   b590c:	000b6788 	.word	0x000b6788
   b5910:	000b67a2 	.word	0x000b67a2
   b5914:	000b67f6 	.word	0x000b67f6
   b5918:	000b6a38 	.word	0x000b6a38
   b591c:	000b67f8 	.word	0x000b67f8
   b5920:	000b67fa 	.word	0x000b67fa
   b5924:	000b67fd 	.word	0x000b67fd
   b5928:	000b6800 	.word	0x000b6800
   b592c:	000b6802 	.word	0x000b6802
   b5930:	000b6807 	.word	0x000b6807
   b5934:	000b67f3 	.word	0x000b67f3

000b5938 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5938:	4b02      	ldr	r3, [pc, #8]	; (b5944 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b593a:	681a      	ldr	r2, [r3, #0]
   b593c:	4b02      	ldr	r3, [pc, #8]	; (b5948 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b593e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5940:	4770      	bx	lr
   b5942:	bf00      	nop
   b5944:	2003e618 	.word	0x2003e618
   b5948:	2003e708 	.word	0x2003e708

000b594c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b594c:	4b01      	ldr	r3, [pc, #4]	; (b5954 <_GLOBAL__sub_I_RGB+0x8>)
   b594e:	2200      	movs	r2, #0
   b5950:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5952:	4770      	bx	lr
   b5954:	2003e70c 	.word	0x2003e70c

000b5958 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5958:	4b01      	ldr	r3, [pc, #4]	; (b5960 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b595a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b595c:	4770      	bx	lr
   b595e:	bf00      	nop
   b5960:	2003e61c 	.word	0x2003e61c

000b5964 <serialEventRun>:
{
   b5964:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5966:	4b0b      	ldr	r3, [pc, #44]	; (b5994 <serialEventRun+0x30>)
   b5968:	b143      	cbz	r3, b597c <serialEventRun+0x18>
   b596a:	f000 f96b 	bl	b5c44 <_Z16_fetch_usbserialv>
   b596e:	6803      	ldr	r3, [r0, #0]
   b5970:	691b      	ldr	r3, [r3, #16]
   b5972:	4798      	blx	r3
   b5974:	2800      	cmp	r0, #0
   b5976:	dd01      	ble.n	b597c <serialEventRun+0x18>
        serialEvent();
   b5978:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b597c:	4b06      	ldr	r3, [pc, #24]	; (b5998 <serialEventRun+0x34>)
   b597e:	b143      	cbz	r3, b5992 <serialEventRun+0x2e>
   b5980:	f000 fce0 	bl	b6344 <_Z22__fetch_global_Serial1v>
   b5984:	6803      	ldr	r3, [r0, #0]
   b5986:	691b      	ldr	r3, [r3, #16]
   b5988:	4798      	blx	r3
   b598a:	2800      	cmp	r0, #0
   b598c:	dd01      	ble.n	b5992 <serialEventRun+0x2e>
        serialEvent1();
   b598e:	f3af 8000 	nop.w
}
   b5992:	bd08      	pop	{r3, pc}
	...

000b599c <_post_loop>:
{
   b599c:	b508      	push	{r3, lr}
	serialEventRun();
   b599e:	f7ff ffe1 	bl	b5964 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b59a2:	f7fe fcd3 	bl	b434c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b59a6:	4b01      	ldr	r3, [pc, #4]	; (b59ac <_post_loop+0x10>)
   b59a8:	6018      	str	r0, [r3, #0]
}
   b59aa:	bd08      	pop	{r3, pc}
   b59ac:	2003e764 	.word	0x2003e764

000b59b0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b59b0:	4805      	ldr	r0, [pc, #20]	; (b59c8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b59b2:	4a06      	ldr	r2, [pc, #24]	; (b59cc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b59b4:	4906      	ldr	r1, [pc, #24]	; (b59d0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b59b6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b59b8:	1a12      	subs	r2, r2, r0
   b59ba:	f000 fcf9 	bl	b63b0 <memcpy>
    __backup_sram_signature = signature;
   b59be:	4b05      	ldr	r3, [pc, #20]	; (b59d4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b59c0:	4a05      	ldr	r2, [pc, #20]	; (b59d8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b59c2:	601a      	str	r2, [r3, #0]
}
   b59c4:	bd08      	pop	{r3, pc}
   b59c6:	bf00      	nop
   b59c8:	2003f400 	.word	0x2003f400
   b59cc:	2003f404 	.word	0x2003f404
   b59d0:	000b6bf8 	.word	0x000b6bf8
   b59d4:	2003f400 	.word	0x2003f400
   b59d8:	9a271c1e 	.word	0x9a271c1e

000b59dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b59dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b59de:	2300      	movs	r3, #0
   b59e0:	9300      	str	r3, [sp, #0]
   b59e2:	461a      	mov	r2, r3
   b59e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b59e8:	f7fe fd9a 	bl	b4520 <system_ctrl_set_result>
}
   b59ec:	b003      	add	sp, #12
   b59ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b59f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b59f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b59f6:	8843      	ldrh	r3, [r0, #2]
   b59f8:	2b0a      	cmp	r3, #10
   b59fa:	d008      	beq.n	b5a0e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b59fc:	2b50      	cmp	r3, #80	; 0x50
   b59fe:	d10b      	bne.n	b5a18 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5a00:	4b09      	ldr	r3, [pc, #36]	; (b5a28 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5a02:	681b      	ldr	r3, [r3, #0]
   b5a04:	b14b      	cbz	r3, b5a1a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5a06:	b003      	add	sp, #12
   b5a08:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5a0c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5a0e:	f7ff ffe5 	bl	b59dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5a12:	b003      	add	sp, #12
   b5a14:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5a18:	2300      	movs	r3, #0
   b5a1a:	9300      	str	r3, [sp, #0]
   b5a1c:	461a      	mov	r2, r3
   b5a1e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5a22:	f7fe fd7d 	bl	b4520 <system_ctrl_set_result>
}
   b5a26:	e7f4      	b.n	b5a12 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5a28:	2003e720 	.word	0x2003e720

000b5a2c <module_user_init_hook>:
{
   b5a2c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5a2e:	4812      	ldr	r0, [pc, #72]	; (b5a78 <module_user_init_hook+0x4c>)
   b5a30:	2100      	movs	r1, #0
   b5a32:	f7fe fe37 	bl	b46a4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5a36:	4b11      	ldr	r3, [pc, #68]	; (b5a7c <module_user_init_hook+0x50>)
   b5a38:	681a      	ldr	r2, [r3, #0]
   b5a3a:	4b11      	ldr	r3, [pc, #68]	; (b5a80 <module_user_init_hook+0x54>)
   b5a3c:	429a      	cmp	r2, r3
   b5a3e:	4b11      	ldr	r3, [pc, #68]	; (b5a84 <module_user_init_hook+0x58>)
   b5a40:	bf0c      	ite	eq
   b5a42:	2201      	moveq	r2, #1
   b5a44:	2200      	movne	r2, #0
   b5a46:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5a48:	d001      	beq.n	b5a4e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5a4a:	f7ff ffb1 	bl	b59b0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5a4e:	f7fe fc6d 	bl	b432c <HAL_RNG_GetRandomNumber>
   b5a52:	4604      	mov	r4, r0
    srand(seed);
   b5a54:	f000 fcdc 	bl	b6410 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5a58:	4b0b      	ldr	r3, [pc, #44]	; (b5a88 <module_user_init_hook+0x5c>)
   b5a5a:	b113      	cbz	r3, b5a62 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5a5c:	4620      	mov	r0, r4
   b5a5e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5a62:	2100      	movs	r1, #0
   b5a64:	4808      	ldr	r0, [pc, #32]	; (b5a88 <module_user_init_hook+0x5c>)
   b5a66:	f7fe fde5 	bl	b4634 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5a6e:	4807      	ldr	r0, [pc, #28]	; (b5a8c <module_user_init_hook+0x60>)
   b5a70:	2100      	movs	r1, #0
   b5a72:	f7fe bd4b 	b.w	b450c <system_ctrl_set_app_request_handler>
   b5a76:	bf00      	nop
   b5a78:	000b5959 	.word	0x000b5959
   b5a7c:	2003f400 	.word	0x2003f400
   b5a80:	9a271c1e 	.word	0x9a271c1e
   b5a84:	2003e71c 	.word	0x2003e71c
   b5a88:	00000000 	.word	0x00000000
   b5a8c:	000b59f5 	.word	0x000b59f5

000b5a90 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5a90:	4770      	bx	lr

000b5a92 <_ZN9IPAddressD0Ev>:
   b5a92:	b510      	push	{r4, lr}
   b5a94:	2118      	movs	r1, #24
   b5a96:	4604      	mov	r4, r0
   b5a98:	f7fe fb11 	bl	b40be <_ZdlPvj>
   b5a9c:	4620      	mov	r0, r4
   b5a9e:	bd10      	pop	{r4, pc}

000b5aa0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5aa2:	7d03      	ldrb	r3, [r0, #20]
   b5aa4:	2b06      	cmp	r3, #6
{
   b5aa6:	b08d      	sub	sp, #52	; 0x34
   b5aa8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5aaa:	f100 0704 	add.w	r7, r0, #4
   b5aae:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5ab2:	d012      	beq.n	b5ada <_ZNK9IPAddress7printToER5Print+0x3a>
   b5ab4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5ab8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5abc:	220a      	movs	r2, #10
   b5abe:	4630      	mov	r0, r6
   b5ac0:	f7fe ff4f 	bl	b4962 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5ac4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5ac6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5ac8:	d019      	beq.n	b5afe <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5aca:	2c00      	cmp	r4, #0
   b5acc:	d0f4      	beq.n	b5ab8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5ace:	212e      	movs	r1, #46	; 0x2e
   b5ad0:	4630      	mov	r0, r6
   b5ad2:	f7fe ff43 	bl	b495c <_ZN5Print5printEc>
   b5ad6:	4404      	add	r4, r0
   b5ad8:	e7ee      	b.n	b5ab8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5ada:	232f      	movs	r3, #47	; 0x2f
   b5adc:	466a      	mov	r2, sp
   b5ade:	4639      	mov	r1, r7
   b5ae0:	200a      	movs	r0, #10
		buf[0] = 0;
   b5ae2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5ae6:	f7fe fc59 	bl	b439c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5aea:	4668      	mov	r0, sp
   b5aec:	f7fe faa0 	bl	b4030 <strlen>
   b5af0:	6833      	ldr	r3, [r6, #0]
   b5af2:	4602      	mov	r2, r0
   b5af4:	68db      	ldr	r3, [r3, #12]
   b5af6:	4669      	mov	r1, sp
   b5af8:	4630      	mov	r0, r6
   b5afa:	4798      	blx	r3
   b5afc:	4604      	mov	r4, r0
    }
    return n;
}
   b5afe:	4620      	mov	r0, r4
   b5b00:	b00d      	add	sp, #52	; 0x34
   b5b02:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5b04 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5b04:	b510      	push	{r4, lr}
   b5b06:	4b05      	ldr	r3, [pc, #20]	; (b5b1c <_ZN9IPAddressC1Ev+0x18>)
   b5b08:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5b0a:	2211      	movs	r2, #17
   b5b0c:	f840 3b04 	str.w	r3, [r0], #4
   b5b10:	2100      	movs	r1, #0
   b5b12:	f000 fc75 	bl	b6400 <memset>
}
   b5b16:	4620      	mov	r0, r4
   b5b18:	bd10      	pop	{r4, pc}
   b5b1a:	bf00      	nop
   b5b1c:	000b6894 	.word	0x000b6894

000b5b20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5b20:	4603      	mov	r3, r0
   b5b22:	4a07      	ldr	r2, [pc, #28]	; (b5b40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5b24:	b510      	push	{r4, lr}
   b5b26:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5b2a:	f101 0210 	add.w	r2, r1, #16
   b5b2e:	f851 4b04 	ldr.w	r4, [r1], #4
   b5b32:	f843 4b04 	str.w	r4, [r3], #4
   b5b36:	4291      	cmp	r1, r2
   b5b38:	d1f9      	bne.n	b5b2e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5b3a:	780a      	ldrb	r2, [r1, #0]
   b5b3c:	701a      	strb	r2, [r3, #0]
}
   b5b3e:	bd10      	pop	{r4, pc}
   b5b40:	000b6894 	.word	0x000b6894

000b5b44 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5b44:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5b46:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5b4a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5b4e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5b52:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5b56:	2304      	movs	r3, #4
   b5b58:	6041      	str	r1, [r0, #4]
   b5b5a:	7503      	strb	r3, [r0, #20]
}
   b5b5c:	bd10      	pop	{r4, pc}
	...

000b5b60 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5b60:	b507      	push	{r0, r1, r2, lr}
   b5b62:	4b06      	ldr	r3, [pc, #24]	; (b5b7c <_ZN9IPAddressC1EPKh+0x1c>)
   b5b64:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5b66:	78cb      	ldrb	r3, [r1, #3]
   b5b68:	9300      	str	r3, [sp, #0]
   b5b6a:	788b      	ldrb	r3, [r1, #2]
   b5b6c:	784a      	ldrb	r2, [r1, #1]
   b5b6e:	7809      	ldrb	r1, [r1, #0]
   b5b70:	f7ff ffe8 	bl	b5b44 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5b74:	b003      	add	sp, #12
   b5b76:	f85d fb04 	ldr.w	pc, [sp], #4
   b5b7a:	bf00      	nop
   b5b7c:	000b6894 	.word	0x000b6894

000b5b80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5b80:	7441      	strb	r1, [r0, #17]
}
   b5b82:	4770      	bx	lr

000b5b84 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5b84:	4770      	bx	lr

000b5b86 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5b86:	4770      	bx	lr

000b5b88 <_ZN9USBSerial4readEv>:
{
   b5b88:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5b8a:	2100      	movs	r1, #0
   b5b8c:	7c00      	ldrb	r0, [r0, #16]
   b5b8e:	f7fe fc7d 	bl	b448c <HAL_USB_USART_Receive_Data>
}
   b5b92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b96:	bd08      	pop	{r3, pc}

000b5b98 <_ZN9USBSerial4peekEv>:
{
   b5b98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5b9a:	2101      	movs	r1, #1
   b5b9c:	7c00      	ldrb	r0, [r0, #16]
   b5b9e:	f7fe fc75 	bl	b448c <HAL_USB_USART_Receive_Data>
}
   b5ba2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ba6:	bd08      	pop	{r3, pc}

000b5ba8 <_ZN9USBSerial17availableForWriteEv>:
{
   b5ba8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5baa:	7c00      	ldrb	r0, [r0, #16]
   b5bac:	f7fe fc66 	bl	b447c <HAL_USB_USART_Available_Data_For_Write>
}
   b5bb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5bb4:	bd08      	pop	{r3, pc}

000b5bb6 <_ZN9USBSerial9availableEv>:
{
   b5bb6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5bb8:	7c00      	ldrb	r0, [r0, #16]
   b5bba:	f7fe fc57 	bl	b446c <HAL_USB_USART_Available_Data>
}
   b5bbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5bc2:	bd08      	pop	{r3, pc}

000b5bc4 <_ZN9USBSerial5writeEh>:
{
   b5bc4:	b513      	push	{r0, r1, r4, lr}
   b5bc6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5bc8:	7c00      	ldrb	r0, [r0, #16]
{
   b5bca:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5bcc:	f7fe fc56 	bl	b447c <HAL_USB_USART_Available_Data_For_Write>
   b5bd0:	2800      	cmp	r0, #0
   b5bd2:	9901      	ldr	r1, [sp, #4]
   b5bd4:	dc01      	bgt.n	b5bda <_ZN9USBSerial5writeEh+0x16>
   b5bd6:	7c60      	ldrb	r0, [r4, #17]
   b5bd8:	b120      	cbz	r0, b5be4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5bda:	7c20      	ldrb	r0, [r4, #16]
   b5bdc:	f7fe fc5e 	bl	b449c <HAL_USB_USART_Send_Data>
   b5be0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5be4:	b002      	add	sp, #8
   b5be6:	bd10      	pop	{r4, pc}

000b5be8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5be8:	7c00      	ldrb	r0, [r0, #16]
   b5bea:	f7fe bc5f 	b.w	b44ac <HAL_USB_USART_Flush_Data>

000b5bee <_ZN9USBSerialD0Ev>:
   b5bee:	b510      	push	{r4, lr}
   b5bf0:	2114      	movs	r1, #20
   b5bf2:	4604      	mov	r4, r0
   b5bf4:	f7fe fa63 	bl	b40be <_ZdlPvj>
   b5bf8:	4620      	mov	r0, r4
   b5bfa:	bd10      	pop	{r4, pc}

000b5bfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5bfc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5c02:	4604      	mov	r4, r0
   b5c04:	4608      	mov	r0, r1
   b5c06:	2100      	movs	r1, #0
   b5c08:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5c0c:	4b04      	ldr	r3, [pc, #16]	; (b5c20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5c0e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5c10:	2301      	movs	r3, #1
  _serial = serial;
   b5c12:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5c14:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5c16:	4611      	mov	r1, r2
   b5c18:	f7fe fc10 	bl	b443c <HAL_USB_USART_Init>
}
   b5c1c:	4620      	mov	r0, r4
   b5c1e:	bd10      	pop	{r4, pc}
   b5c20:	000b68a8 	.word	0x000b68a8

000b5c24 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5c24:	7c00      	ldrb	r0, [r0, #16]
   b5c26:	2200      	movs	r2, #0
   b5c28:	f7fe bc10 	b.w	b444c <HAL_USB_USART_Begin>

000b5c2c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b5c2c:	7c00      	ldrb	r0, [r0, #16]
   b5c2e:	f7fe bc15 	b.w	b445c <HAL_USB_USART_End>

000b5c32 <_Z19acquireSerialBufferv>:
{
   b5c32:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5c34:	2214      	movs	r2, #20
{
   b5c36:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5c38:	2100      	movs	r1, #0
   b5c3a:	f000 fbe1 	bl	b6400 <memset>
}
   b5c3e:	4620      	mov	r0, r4
   b5c40:	bd10      	pop	{r4, pc}
	...

000b5c44 <_Z16_fetch_usbserialv>:
{
   b5c44:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5c46:	4c0f      	ldr	r4, [pc, #60]	; (b5c84 <_Z16_fetch_usbserialv+0x40>)
{
   b5c48:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5c4a:	a803      	add	r0, sp, #12
   b5c4c:	f7ff fff1 	bl	b5c32 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5c50:	7821      	ldrb	r1, [r4, #0]
   b5c52:	f3bf 8f5b 	dmb	ish
   b5c56:	f011 0101 	ands.w	r1, r1, #1
   b5c5a:	d10f      	bne.n	b5c7c <_Z16_fetch_usbserialv+0x38>
   b5c5c:	4620      	mov	r0, r4
   b5c5e:	9101      	str	r1, [sp, #4]
   b5c60:	f7fe fa3c 	bl	b40dc <__cxa_guard_acquire>
   b5c64:	9901      	ldr	r1, [sp, #4]
   b5c66:	b148      	cbz	r0, b5c7c <_Z16_fetch_usbserialv+0x38>
   b5c68:	aa03      	add	r2, sp, #12
   b5c6a:	4807      	ldr	r0, [pc, #28]	; (b5c88 <_Z16_fetch_usbserialv+0x44>)
   b5c6c:	f7ff ffc6 	bl	b5bfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5c70:	4620      	mov	r0, r4
   b5c72:	f7fe fa38 	bl	b40e6 <__cxa_guard_release>
   b5c76:	4805      	ldr	r0, [pc, #20]	; (b5c8c <_Z16_fetch_usbserialv+0x48>)
   b5c78:	f000 fb8c 	bl	b6394 <atexit>
	return _usbserial;
}
   b5c7c:	4802      	ldr	r0, [pc, #8]	; (b5c88 <_Z16_fetch_usbserialv+0x44>)
   b5c7e:	b008      	add	sp, #32
   b5c80:	bd10      	pop	{r4, pc}
   b5c82:	bf00      	nop
   b5c84:	2003e724 	.word	0x2003e724
   b5c88:	2003e728 	.word	0x2003e728
   b5c8c:	000b5b85 	.word	0x000b5b85

000b5c90 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5c90:	4770      	bx	lr

000b5c92 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5c92:	7441      	strb	r1, [r0, #17]
}
   b5c94:	4770      	bx	lr

000b5c96 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5c96:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5c98:	7c00      	ldrb	r0, [r0, #16]
   b5c9a:	f7fe fbb7 	bl	b440c <hal_usart_available_data_for_write>
}
   b5c9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ca2:	bd08      	pop	{r3, pc}

000b5ca4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5ca4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5ca6:	7c00      	ldrb	r0, [r0, #16]
   b5ca8:	f7fe fb90 	bl	b43cc <hal_usart_available>
}
   b5cac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5cb0:	bd08      	pop	{r3, pc}

000b5cb2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5cb2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5cb4:	7c00      	ldrb	r0, [r0, #16]
   b5cb6:	f7fe fb99 	bl	b43ec <hal_usart_peek>
}
   b5cba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5cbe:	bd08      	pop	{r3, pc}

000b5cc0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5cc0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5cc2:	7c00      	ldrb	r0, [r0, #16]
   b5cc4:	f7fe fb8a 	bl	b43dc <hal_usart_read>
}
   b5cc8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ccc:	bd08      	pop	{r3, pc}

000b5cce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5cce:	7c00      	ldrb	r0, [r0, #16]
   b5cd0:	f7fe bb94 	b.w	b43fc <hal_usart_flush>

000b5cd4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5cd6:	7c45      	ldrb	r5, [r0, #17]
{
   b5cd8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5cda:	b12d      	cbz	r5, b5ce8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5cdc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5cde:	b003      	add	sp, #12
   b5ce0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5ce4:	f7fe bb6a 	b.w	b43bc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ce8:	7c00      	ldrb	r0, [r0, #16]
   b5cea:	9101      	str	r1, [sp, #4]
   b5cec:	f7fe fb8e 	bl	b440c <hal_usart_available_data_for_write>
   b5cf0:	2800      	cmp	r0, #0
   b5cf2:	9901      	ldr	r1, [sp, #4]
   b5cf4:	dcf2      	bgt.n	b5cdc <_ZN11USARTSerial5writeEh+0x8>
}
   b5cf6:	4628      	mov	r0, r5
   b5cf8:	b003      	add	sp, #12
   b5cfa:	bd30      	pop	{r4, r5, pc}

000b5cfc <_ZN11USARTSerialD0Ev>:
   b5cfc:	b510      	push	{r4, lr}
   b5cfe:	2114      	movs	r1, #20
   b5d00:	4604      	mov	r4, r0
   b5d02:	f7fe f9dc 	bl	b40be <_ZdlPvj>
   b5d06:	4620      	mov	r0, r4
   b5d08:	bd10      	pop	{r4, pc}
	...

000b5d0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5d0c:	b510      	push	{r4, lr}
   b5d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5d12:	4604      	mov	r4, r0
   b5d14:	4608      	mov	r0, r1
   b5d16:	4611      	mov	r1, r2
   b5d18:	2200      	movs	r2, #0
   b5d1a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5d1e:	4b04      	ldr	r3, [pc, #16]	; (b5d30 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5d20:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5d22:	2301      	movs	r3, #1
  _serial = serial;
   b5d24:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5d26:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5d28:	f7fe fb80 	bl	b442c <hal_usart_init_ex>
}
   b5d2c:	4620      	mov	r0, r4
   b5d2e:	bd10      	pop	{r4, pc}
   b5d30:	000b68dc 	.word	0x000b68dc

000b5d34 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b5d34:	7c00      	ldrb	r0, [r0, #16]
   b5d36:	2300      	movs	r3, #0
   b5d38:	f7fe bb70 	b.w	b441c <hal_usart_begin_config>

000b5d3c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b5d3c:	2200      	movs	r2, #0
   b5d3e:	f7ff bff9 	b.w	b5d34 <_ZN11USARTSerial5beginEmm>

000b5d42 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b5d42:	7c00      	ldrb	r0, [r0, #16]
   b5d44:	f7fe bb32 	b.w	b43ac <hal_usart_end>

000b5d48 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5d48:	2200      	movs	r2, #0
   b5d4a:	6840      	ldr	r0, [r0, #4]
   b5d4c:	4611      	mov	r1, r2
   b5d4e:	f7fe bc09 	b.w	b4564 <network_ready>

000b5d52 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5d52:	2200      	movs	r2, #0
   b5d54:	6840      	ldr	r0, [r0, #4]
   b5d56:	4611      	mov	r1, r2
   b5d58:	f7fe bc24 	b.w	b45a4 <network_listening>

000b5d5c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5d5c:	2200      	movs	r2, #0
   b5d5e:	6840      	ldr	r0, [r0, #4]
   b5d60:	4611      	mov	r1, r2
   b5d62:	f7fe bc2f 	b.w	b45c4 <network_get_listen_timeout>

000b5d66 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5d66:	6840      	ldr	r0, [r0, #4]
   b5d68:	2200      	movs	r2, #0
   b5d6a:	f7fe bc23 	b.w	b45b4 <network_set_listen_timeout>

000b5d6e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5d6e:	6840      	ldr	r0, [r0, #4]
   b5d70:	2200      	movs	r2, #0
   b5d72:	f081 0101 	eor.w	r1, r1, #1
   b5d76:	f7fe bc0d 	b.w	b4594 <network_listen>

000b5d7a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5d7a:	2300      	movs	r3, #0
   b5d7c:	6840      	ldr	r0, [r0, #4]
   b5d7e:	461a      	mov	r2, r3
   b5d80:	4619      	mov	r1, r3
   b5d82:	f7fe bbff 	b.w	b4584 <network_off>

000b5d86 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5d86:	2300      	movs	r3, #0
   b5d88:	6840      	ldr	r0, [r0, #4]
   b5d8a:	461a      	mov	r2, r3
   b5d8c:	4619      	mov	r1, r3
   b5d8e:	f7fe bbf1 	b.w	b4574 <network_on>

000b5d92 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5d92:	2200      	movs	r2, #0
   b5d94:	6840      	ldr	r0, [r0, #4]
   b5d96:	4611      	mov	r1, r2
   b5d98:	f7fe bbd4 	b.w	b4544 <network_connecting>

000b5d9c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5d9c:	6840      	ldr	r0, [r0, #4]
   b5d9e:	2200      	movs	r2, #0
   b5da0:	2102      	movs	r1, #2
   b5da2:	f7fe bbd7 	b.w	b4554 <network_disconnect>

000b5da6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5da6:	2300      	movs	r3, #0
   b5da8:	6840      	ldr	r0, [r0, #4]
   b5daa:	461a      	mov	r2, r3
   b5dac:	f7fe bbc2 	b.w	b4534 <network_connect>

000b5db0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5db0:	4b02      	ldr	r3, [pc, #8]	; (b5dbc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5db2:	2204      	movs	r2, #4
   b5db4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5db6:	4a02      	ldr	r2, [pc, #8]	; (b5dc0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5db8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5dba:	4770      	bx	lr
   b5dbc:	2003e73c 	.word	0x2003e73c
   b5dc0:	000b6910 	.word	0x000b6910

000b5dc4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5dc4:	2300      	movs	r3, #0
   b5dc6:	6840      	ldr	r0, [r0, #4]
   b5dc8:	461a      	mov	r2, r3
   b5dca:	f7fe bbb3 	b.w	b4534 <network_connect>

000b5dce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5dce:	6840      	ldr	r0, [r0, #4]
   b5dd0:	2200      	movs	r2, #0
   b5dd2:	2102      	movs	r1, #2
   b5dd4:	f7fe bbbe 	b.w	b4554 <network_disconnect>

000b5dd8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5dd8:	2200      	movs	r2, #0
   b5dda:	6840      	ldr	r0, [r0, #4]
   b5ddc:	4611      	mov	r1, r2
   b5dde:	f7fe bbb1 	b.w	b4544 <network_connecting>

000b5de2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5de2:	2200      	movs	r2, #0
   b5de4:	6840      	ldr	r0, [r0, #4]
   b5de6:	4611      	mov	r1, r2
   b5de8:	f7fe bbbc 	b.w	b4564 <network_ready>

000b5dec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5dec:	2300      	movs	r3, #0
   b5dee:	6840      	ldr	r0, [r0, #4]
   b5df0:	461a      	mov	r2, r3
   b5df2:	4619      	mov	r1, r3
   b5df4:	f7fe bbbe 	b.w	b4574 <network_on>

000b5df8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5df8:	2300      	movs	r3, #0
   b5dfa:	6840      	ldr	r0, [r0, #4]
   b5dfc:	461a      	mov	r2, r3
   b5dfe:	4619      	mov	r1, r3
   b5e00:	f7fe bbc0 	b.w	b4584 <network_off>

000b5e04 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5e04:	6840      	ldr	r0, [r0, #4]
   b5e06:	2100      	movs	r1, #0
   b5e08:	f7fe bbe4 	b.w	b45d4 <network_is_on>

000b5e0c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5e0c:	6840      	ldr	r0, [r0, #4]
   b5e0e:	2100      	movs	r1, #0
   b5e10:	f7fe bbe8 	b.w	b45e4 <network_is_off>

000b5e14 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5e14:	6840      	ldr	r0, [r0, #4]
   b5e16:	2200      	movs	r2, #0
   b5e18:	f081 0101 	eor.w	r1, r1, #1
   b5e1c:	f7fe bbba 	b.w	b4594 <network_listen>

000b5e20 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5e20:	6840      	ldr	r0, [r0, #4]
   b5e22:	2200      	movs	r2, #0
   b5e24:	f7fe bbc6 	b.w	b45b4 <network_set_listen_timeout>

000b5e28 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5e28:	2200      	movs	r2, #0
   b5e2a:	6840      	ldr	r0, [r0, #4]
   b5e2c:	4611      	mov	r1, r2
   b5e2e:	f7fe bbc9 	b.w	b45c4 <network_get_listen_timeout>

000b5e32 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5e32:	2200      	movs	r2, #0
   b5e34:	6840      	ldr	r0, [r0, #4]
   b5e36:	4611      	mov	r1, r2
   b5e38:	f7fe bbb4 	b.w	b45a4 <network_listening>

000b5e3c <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b5e3c:	6840      	ldr	r0, [r0, #4]
   b5e3e:	2100      	movs	r1, #0
   b5e40:	f7fe bbe0 	b.w	b4604 <network_is_preferred>

000b5e44 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5e48:	b095      	sub	sp, #84	; 0x54
   b5e4a:	4614      	mov	r4, r2
   b5e4c:	460d      	mov	r5, r1
   b5e4e:	4607      	mov	r7, r0
    IPAddress addr;
   b5e50:	f7ff fe58 	bl	b5b04 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5e54:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5e56:	221c      	movs	r2, #28
   b5e58:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5e5a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5e5c:	f000 fad0 	bl	b6400 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5e60:	2340      	movs	r3, #64	; 0x40
   b5e62:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5e64:	4620      	mov	r0, r4
   b5e66:	466b      	mov	r3, sp
   b5e68:	aa0c      	add	r2, sp, #48	; 0x30
   b5e6a:	2100      	movs	r1, #0
   b5e6c:	f7fe fa56 	bl	b431c <netdb_getaddrinfo>
    if (!r) {
   b5e70:	4604      	mov	r4, r0
   b5e72:	2800      	cmp	r0, #0
   b5e74:	d14b      	bne.n	b5f0e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5e76:	4602      	mov	r2, r0
   b5e78:	2101      	movs	r1, #1
   b5e7a:	6868      	ldr	r0, [r5, #4]
   b5e7c:	f7fe fb72 	bl	b4564 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5e80:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5e82:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5e84:	4622      	mov	r2, r4
   b5e86:	6868      	ldr	r0, [r5, #4]
   b5e88:	f7fe fb6c 	bl	b4564 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5e8c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5e8e:	4681      	mov	r9, r0
        bool ok = false;
   b5e90:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5e92:	2e00      	cmp	r6, #0
   b5e94:	d03b      	beq.n	b5f0e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5e96:	2900      	cmp	r1, #0
   b5e98:	d139      	bne.n	b5f0e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5e9a:	6873      	ldr	r3, [r6, #4]
   b5e9c:	2b02      	cmp	r3, #2
   b5e9e:	d003      	beq.n	b5ea8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5ea0:	2b0a      	cmp	r3, #10
   b5ea2:	d011      	beq.n	b5ec8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5ea4:	69f6      	ldr	r6, [r6, #28]
   b5ea6:	e7f4      	b.n	b5e92 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5ea8:	f1b8 0f00 	cmp.w	r8, #0
   b5eac:	d0fa      	beq.n	b5ea4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5eae:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5eb0:	a806      	add	r0, sp, #24
   b5eb2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5eb4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5eb6:	f7ff fe53 	bl	b5b60 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ebc:	1d3c      	adds	r4, r7, #4
   b5ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ec0:	682b      	ldr	r3, [r5, #0]
   b5ec2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5ec4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5ec6:	e7ed      	b.n	b5ea4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5ec8:	f1b9 0f00 	cmp.w	r9, #0
   b5ecc:	d0ea      	beq.n	b5ea4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5ece:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5ed0:	2210      	movs	r2, #16
   b5ed2:	a801      	add	r0, sp, #4
   b5ed4:	f000 fa94 	bl	b6400 <memset>
                    a.v = 6;
   b5ed8:	2306      	movs	r3, #6
   b5eda:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5ede:	ad01      	add	r5, sp, #4
   b5ee0:	f104 0308 	add.w	r3, r4, #8
   b5ee4:	3418      	adds	r4, #24
   b5ee6:	6818      	ldr	r0, [r3, #0]
   b5ee8:	6859      	ldr	r1, [r3, #4]
   b5eea:	462a      	mov	r2, r5
   b5eec:	c203      	stmia	r2!, {r0, r1}
   b5eee:	3308      	adds	r3, #8
   b5ef0:	42a3      	cmp	r3, r4
   b5ef2:	4615      	mov	r5, r2
   b5ef4:	d1f7      	bne.n	b5ee6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5ef6:	a901      	add	r1, sp, #4
   b5ef8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5efa:	ad07      	add	r5, sp, #28
   b5efc:	f7ff fe10 	bl	b5b20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5f02:	1d3c      	adds	r4, r7, #4
   b5f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5f06:	682b      	ldr	r3, [r5, #0]
   b5f08:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5f0a:	4649      	mov	r1, r9
   b5f0c:	e7ca      	b.n	b5ea4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5f0e:	9800      	ldr	r0, [sp, #0]
   b5f10:	f7fe f9fc 	bl	b430c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5f14:	4638      	mov	r0, r7
   b5f16:	b015      	add	sp, #84	; 0x54
   b5f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5f1c <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b5f1c:	3803      	subs	r0, #3
   b5f1e:	2802      	cmp	r0, #2
   b5f20:	bf9a      	itte	ls
   b5f22:	4b02      	ldrls	r3, [pc, #8]	; (b5f2c <_ZN5spark12NetworkClass4fromEm+0x10>)
   b5f24:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b5f28:	4801      	ldrhi	r0, [pc, #4]	; (b5f30 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   b5f2a:	4770      	bx	lr
   b5f2c:	000b694c 	.word	0x000b694c
   b5f30:	2003e744 	.word	0x2003e744

000b5f34 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   b5f34:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   b5f36:	2200      	movs	r2, #0
   b5f38:	6840      	ldr	r0, [r0, #4]
   b5f3a:	f7fe fb5b 	bl	b45f4 <network_prefer>
}
   b5f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b5f42:	f7ff bfeb 	b.w	b5f1c <_ZN5spark12NetworkClass4fromEm>
	...

000b5f48 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5f48:	4b02      	ldr	r3, [pc, #8]	; (b5f54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5f4a:	4a03      	ldr	r2, [pc, #12]	; (b5f58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5f4c:	601a      	str	r2, [r3, #0]
   b5f4e:	2200      	movs	r2, #0
   b5f50:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b5f52:	4770      	bx	lr
   b5f54:	2003e744 	.word	0x2003e744
   b5f58:	000b6960 	.word	0x000b6960

000b5f5c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b5f5c:	f100 0310 	add.w	r3, r0, #16
   b5f60:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b5f62:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b5f66:	2901      	cmp	r1, #1
   b5f68:	4618      	mov	r0, r3
   b5f6a:	d108      	bne.n	b5f7e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b5f6c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b5f70:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b5f74:	3a01      	subs	r2, #1
   b5f76:	f103 0310 	add.w	r3, r3, #16
   b5f7a:	d1f2      	bne.n	b5f62 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b5f7c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b5f7e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b5f80:	bf04      	itt	eq
   b5f82:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b5f86:	1852      	addeq	r2, r2, r1
   b5f88:	e7f4      	b.n	b5f74 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b5f8a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b5f8a:	b40e      	push	{r1, r2, r3}
   b5f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5f8e:	b088      	sub	sp, #32
   b5f90:	af00      	add	r7, sp, #0
   b5f92:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5f96:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b5f98:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5f9c:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b5f9e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5fa0:	462b      	mov	r3, r5
   b5fa2:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b5fa4:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5fa6:	f7fe fb65 	bl	b4674 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b5faa:	280f      	cmp	r0, #15
   b5fac:	687a      	ldr	r2, [r7, #4]
   b5fae:	d91a      	bls.n	b5fe6 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b5fb0:	f100 0308 	add.w	r3, r0, #8
   b5fb4:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b5fb8:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b5fba:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5fbe:	1c41      	adds	r1, r0, #1
   b5fc0:	462b      	mov	r3, r5
   b5fc2:	4668      	mov	r0, sp
        va_start(args, fmt);
   b5fc4:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5fc6:	f7fe fb55 	bl	b4674 <vsnprintf>
        if (n > 0) {
   b5fca:	1e02      	subs	r2, r0, #0
   b5fcc:	dd04      	ble.n	b5fd8 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b5fce:	6823      	ldr	r3, [r4, #0]
   b5fd0:	4669      	mov	r1, sp
   b5fd2:	689b      	ldr	r3, [r3, #8]
   b5fd4:	4620      	mov	r0, r4
   b5fd6:	4798      	blx	r3
   b5fd8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b5fda:	3720      	adds	r7, #32
   b5fdc:	46bd      	mov	sp, r7
   b5fde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5fe2:	b003      	add	sp, #12
   b5fe4:	4770      	bx	lr
    } else if (n > 0) {
   b5fe6:	2800      	cmp	r0, #0
   b5fe8:	d0f7      	beq.n	b5fda <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b5fea:	6823      	ldr	r3, [r4, #0]
   b5fec:	4602      	mov	r2, r0
   b5fee:	689b      	ldr	r3, [r3, #8]
   b5ff0:	f107 0110 	add.w	r1, r7, #16
   b5ff4:	4620      	mov	r0, r4
   b5ff6:	4798      	blx	r3
}
   b5ff8:	e7ef      	b.n	b5fda <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b5ffa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5ffa:	b538      	push	{r3, r4, r5, lr}
   b5ffc:	680b      	ldr	r3, [r1, #0]
   b5ffe:	6003      	str	r3, [r0, #0]
   b6000:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b6002:	6843      	ldr	r3, [r0, #4]
   b6004:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6006:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b6008:	d008      	beq.n	b601c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b600a:	b115      	cbz	r5, b6012 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b600c:	686b      	ldr	r3, [r5, #4]
   b600e:	3301      	adds	r3, #1
   b6010:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b6012:	6860      	ldr	r0, [r4, #4]
   b6014:	b108      	cbz	r0, b601a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b6016:	f7fe fc4b 	bl	b48b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b601a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b601c:	bd38      	pop	{r3, r4, r5, pc}

000b601e <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   b601e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6020:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b6022:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6026:	689b      	ldr	r3, [r3, #8]
   b6028:	2201      	movs	r2, #1
   b602a:	f10d 0107 	add.w	r1, sp, #7
   b602e:	4798      	blx	r3
}
   b6030:	b003      	add	sp, #12
   b6032:	f85d fb04 	ldr.w	pc, [sp], #4

000b6036 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6036:	460b      	mov	r3, r1
   b6038:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b603a:	2200      	movs	r2, #0
   b603c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b603e:	e9c0 2200 	strd	r2, r2, [r0]
   b6042:	4604      	mov	r4, r0
        t_ = t;
   b6044:	6083      	str	r3, [r0, #8]
    if (t) {
   b6046:	b90b      	cbnz	r3, b604c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b6048:	4620      	mov	r0, r4
   b604a:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b604c:	f7ff ffd5 	bl	b5ffa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b6050:	e7fa      	b.n	b6048 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b6052 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b6052:	6883      	ldr	r3, [r0, #8]
   b6054:	b1eb      	cbz	r3, b6092 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b6056:	781a      	ldrb	r2, [r3, #0]
   b6058:	2a03      	cmp	r2, #3
   b605a:	d81a      	bhi.n	b6092 <_ZNK5spark9JSONValue4typeEv+0x40>
   b605c:	e8df f002 	tbb	[pc, r2]
   b6060:	1b021704 	.word	0x1b021704
   b6064:	2005      	movs	r0, #5
   b6066:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b6068:	6802      	ldr	r2, [r0, #0]
   b606a:	685b      	ldr	r3, [r3, #4]
   b606c:	6852      	ldr	r2, [r2, #4]
   b606e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b6070:	282d      	cmp	r0, #45	; 0x2d
   b6072:	d012      	beq.n	b609a <_ZNK5spark9JSONValue4typeEv+0x48>
   b6074:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6078:	2b09      	cmp	r3, #9
   b607a:	d90e      	bls.n	b609a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b607c:	2874      	cmp	r0, #116	; 0x74
   b607e:	d00e      	beq.n	b609e <_ZNK5spark9JSONValue4typeEv+0x4c>
   b6080:	2866      	cmp	r0, #102	; 0x66
   b6082:	d00c      	beq.n	b609e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b6084:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b6088:	4258      	negs	r0, r3
   b608a:	4158      	adcs	r0, r3
   b608c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b608e:	2006      	movs	r0, #6
   b6090:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b6092:	2000      	movs	r0, #0
   b6094:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b6096:	2004      	movs	r0, #4
   b6098:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b609a:	2003      	movs	r0, #3
   b609c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b609e:	2002      	movs	r0, #2
}
   b60a0:	4770      	bx	lr

000b60a2 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b60a2:	b510      	push	{r4, lr}
   b60a4:	4604      	mov	r4, r0
    switch (type()) {
   b60a6:	f7ff ffd4 	bl	b6052 <_ZNK5spark9JSONValue4typeEv>
   b60aa:	2802      	cmp	r0, #2
   b60ac:	d00e      	beq.n	b60cc <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b60ae:	1ec3      	subs	r3, r0, #3
   b60b0:	b2db      	uxtb	r3, r3
   b60b2:	2b01      	cmp	r3, #1
   b60b4:	d814      	bhi.n	b60e0 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b60b6:	6822      	ldr	r2, [r4, #0]
   b60b8:	68a3      	ldr	r3, [r4, #8]
   b60ba:	6850      	ldr	r0, [r2, #4]
   b60bc:	685b      	ldr	r3, [r3, #4]
}
   b60be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b60c2:	220a      	movs	r2, #10
   b60c4:	2100      	movs	r1, #0
   b60c6:	4418      	add	r0, r3
   b60c8:	f000 ba9a 	b.w	b6600 <strtol>
        const char* const s = d_->json + t_->start;
   b60cc:	6822      	ldr	r2, [r4, #0]
   b60ce:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b60d0:	6852      	ldr	r2, [r2, #4]
   b60d2:	685b      	ldr	r3, [r3, #4]
   b60d4:	5cd0      	ldrb	r0, [r2, r3]
   b60d6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b60da:	4258      	negs	r0, r3
   b60dc:	4158      	adcs	r0, r3
}
   b60de:	bd10      	pop	{r4, pc}
    switch (type()) {
   b60e0:	2000      	movs	r0, #0
   b60e2:	e7fc      	b.n	b60de <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b60e4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b60e4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b60e6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b60e8:	e9c0 3300 	strd	r3, r3, [r0]
   b60ec:	4604      	mov	r4, r0
        n_(0) {
   b60ee:	480e      	ldr	r0, [pc, #56]	; (b6128 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b60f0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b60f4:	b1a9      	cbz	r1, b6122 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b60f6:	780b      	ldrb	r3, [r1, #0]
   b60f8:	2b03      	cmp	r3, #3
   b60fa:	d006      	beq.n	b610a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b60fc:	b98b      	cbnz	r3, b6122 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b60fe:	6813      	ldr	r3, [r2, #0]
   b6100:	6858      	ldr	r0, [r3, #4]
   b6102:	684b      	ldr	r3, [r1, #4]
   b6104:	5cc3      	ldrb	r3, [r0, r3]
   b6106:	2b6e      	cmp	r3, #110	; 0x6e
   b6108:	d007      	beq.n	b611a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b610a:	6813      	ldr	r3, [r2, #0]
   b610c:	684d      	ldr	r5, [r1, #4]
   b610e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b6110:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b6112:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b6114:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b6116:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b6118:	60e3      	str	r3, [r4, #12]
   b611a:	4611      	mov	r1, r2
   b611c:	4620      	mov	r0, r4
   b611e:	f7ff ff6c 	bl	b5ffa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6122:	4620      	mov	r0, r4
   b6124:	bd38      	pop	{r3, r4, r5, pc}
   b6126:	bf00      	nop
   b6128:	000b67f5 	.word	0x000b67f5

000b612c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b612c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b612e:	2500      	movs	r5, #0
   b6130:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b6132:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b6136:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b613a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b613e:	4604      	mov	r4, r0
   b6140:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b6142:	b14b      	cbz	r3, b6158 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b6144:	781a      	ldrb	r2, [r3, #0]
   b6146:	2a01      	cmp	r2, #1
   b6148:	d106      	bne.n	b6158 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b614a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b614e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b6150:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b6152:	6143      	str	r3, [r0, #20]
   b6154:	f7ff ff51 	bl	b5ffa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6158:	4620      	mov	r0, r4
   b615a:	bd38      	pop	{r3, r4, r5, pc}

000b615c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b615c:	b510      	push	{r4, lr}
    if (!n_) {
   b615e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b6160:	4604      	mov	r4, r0
    if (!n_) {
   b6162:	b163      	cbz	r3, b617e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b6164:	6880      	ldr	r0, [r0, #8]
   b6166:	60e0      	str	r0, [r4, #12]
    --n_;
   b6168:	3b01      	subs	r3, #1
    ++t_;
   b616a:	3010      	adds	r0, #16
   b616c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b616e:	6120      	str	r0, [r4, #16]
    --n_;
   b6170:	6163      	str	r3, [r4, #20]
    if (n_) {
   b6172:	b113      	cbz	r3, b617a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b6174:	f7ff fef2 	bl	b5f5c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b6178:	60a0      	str	r0, [r4, #8]
    return true;
   b617a:	2001      	movs	r0, #1
   b617c:	e000      	b.n	b6180 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b617e:	4618      	mov	r0, r3
}
   b6180:	bd10      	pop	{r4, pc}

000b6182 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6182:	b510      	push	{r4, lr}
    write('}');
   b6184:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6186:	4604      	mov	r4, r0
    write('}');
   b6188:	f7ff ff49 	bl	b601e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b618c:	2301      	movs	r3, #1
   b618e:	7123      	strb	r3, [r4, #4]
}
   b6190:	4620      	mov	r0, r4
   b6192:	bd10      	pop	{r4, pc}

000b6194 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b6194:	b508      	push	{r3, lr}
    switch (state_) {
   b6196:	7903      	ldrb	r3, [r0, #4]
   b6198:	2b01      	cmp	r3, #1
   b619a:	d002      	beq.n	b61a2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b619c:	2b02      	cmp	r3, #2
   b619e:	d004      	beq.n	b61aa <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b61a0:	bd08      	pop	{r3, pc}
        write(',');
   b61a2:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b61a4:	f7ff ff3b 	bl	b601e <_ZN5spark10JSONWriter5writeEc>
}
   b61a8:	e7fa      	b.n	b61a0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b61aa:	213a      	movs	r1, #58	; 0x3a
   b61ac:	e7fa      	b.n	b61a4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b61ae <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b61ae:	b510      	push	{r4, lr}
   b61b0:	4604      	mov	r4, r0
    writeSeparator();
   b61b2:	f7ff ffef 	bl	b6194 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b61b6:	4620      	mov	r0, r4
   b61b8:	217b      	movs	r1, #123	; 0x7b
   b61ba:	f7ff ff30 	bl	b601e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b61be:	2300      	movs	r3, #0
   b61c0:	7123      	strb	r3, [r4, #4]
}
   b61c2:	4620      	mov	r0, r4
   b61c4:	bd10      	pop	{r4, pc}
	...

000b61c8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b61c8:	b513      	push	{r0, r1, r4, lr}
   b61ca:	4604      	mov	r4, r0
   b61cc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b61ce:	f7ff ffe1 	bl	b6194 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b61d2:	6823      	ldr	r3, [r4, #0]
   b61d4:	9a01      	ldr	r2, [sp, #4]
   b61d6:	68db      	ldr	r3, [r3, #12]
   b61d8:	4903      	ldr	r1, [pc, #12]	; (b61e8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b61da:	4620      	mov	r0, r4
   b61dc:	4798      	blx	r3
    state_ = NEXT;
   b61de:	2301      	movs	r3, #1
}
   b61e0:	4620      	mov	r0, r4
    state_ = NEXT;
   b61e2:	7123      	strb	r3, [r4, #4]
}
   b61e4:	b002      	add	sp, #8
   b61e6:	bd10      	pop	{r4, pc}
   b61e8:	000b67cf 	.word	0x000b67cf

000b61ec <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b61ec:	b513      	push	{r0, r1, r4, lr}
   b61ee:	4604      	mov	r4, r0
   b61f0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b61f2:	f7ff ffcf 	bl	b6194 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b61f6:	6823      	ldr	r3, [r4, #0]
   b61f8:	9a01      	ldr	r2, [sp, #4]
   b61fa:	68db      	ldr	r3, [r3, #12]
   b61fc:	4903      	ldr	r1, [pc, #12]	; (b620c <_ZN5spark10JSONWriter5valueEj+0x20>)
   b61fe:	4620      	mov	r0, r4
   b6200:	4798      	blx	r3
    state_ = NEXT;
   b6202:	2301      	movs	r3, #1
}
   b6204:	4620      	mov	r0, r4
    state_ = NEXT;
   b6206:	7123      	strb	r3, [r4, #4]
}
   b6208:	b002      	add	sp, #8
   b620a:	bd10      	pop	{r4, pc}
   b620c:	000b699c 	.word	0x000b699c

000b6210 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6214:	460d      	mov	r5, r1
    write('"');
   b6216:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6218:	4690      	mov	r8, r2
   b621a:	4604      	mov	r4, r0
    write('"');
   b621c:	f7ff feff 	bl	b601e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b6220:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b62c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b6224:	44a8      	add	r8, r5
    const char *s = str;
   b6226:	462f      	mov	r7, r5
    while (s != end) {
   b6228:	4547      	cmp	r7, r8
   b622a:	46ba      	mov	sl, r7
   b622c:	d03d      	beq.n	b62aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b622e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b6232:	2e22      	cmp	r6, #34	; 0x22
   b6234:	d006      	beq.n	b6244 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6236:	2e5c      	cmp	r6, #92	; 0x5c
   b6238:	d004      	beq.n	b6244 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b623a:	4630      	mov	r0, r6
   b623c:	f000 f8b0 	bl	b63a0 <isprint>
   b6240:	2800      	cmp	r0, #0
   b6242:	d1f1      	bne.n	b6228 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b6244:	6823      	ldr	r3, [r4, #0]
   b6246:	ebaa 0205 	sub.w	r2, sl, r5
   b624a:	689b      	ldr	r3, [r3, #8]
   b624c:	4629      	mov	r1, r5
   b624e:	4620      	mov	r0, r4
   b6250:	4798      	blx	r3
            write('\\');
   b6252:	215c      	movs	r1, #92	; 0x5c
   b6254:	4620      	mov	r0, r4
   b6256:	f7ff fee2 	bl	b601e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b625a:	2e0d      	cmp	r6, #13
   b625c:	d80a      	bhi.n	b6274 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b625e:	2e07      	cmp	r6, #7
   b6260:	d91c      	bls.n	b629c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6262:	f1a6 0308 	sub.w	r3, r6, #8
   b6266:	2b05      	cmp	r3, #5
   b6268:	d818      	bhi.n	b629c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b626a:	e8df f003 	tbb	[pc, r3]
   b626e:	0f0d      	.short	0x0f0d
   b6270:	15131711 	.word	0x15131711
   b6274:	2e22      	cmp	r6, #34	; 0x22
   b6276:	d001      	beq.n	b627c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b6278:	2e5c      	cmp	r6, #92	; 0x5c
   b627a:	d10f      	bne.n	b629c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b627c:	4631      	mov	r1, r6
                write('b');
   b627e:	4620      	mov	r0, r4
   b6280:	f7ff fecd 	bl	b601e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b6284:	463d      	mov	r5, r7
    while (s != end) {
   b6286:	e7cf      	b.n	b6228 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b6288:	2162      	movs	r1, #98	; 0x62
   b628a:	e7f8      	b.n	b627e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b628c:	2174      	movs	r1, #116	; 0x74
   b628e:	e7f6      	b.n	b627e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b6290:	216e      	movs	r1, #110	; 0x6e
   b6292:	e7f4      	b.n	b627e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b6294:	2166      	movs	r1, #102	; 0x66
   b6296:	e7f2      	b.n	b627e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b6298:	2172      	movs	r1, #114	; 0x72
   b629a:	e7f0      	b.n	b627e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b629c:	6823      	ldr	r3, [r4, #0]
   b629e:	4632      	mov	r2, r6
   b62a0:	68db      	ldr	r3, [r3, #12]
   b62a2:	4649      	mov	r1, r9
   b62a4:	4620      	mov	r0, r4
   b62a6:	4798      	blx	r3
                break;
   b62a8:	e7ec      	b.n	b6284 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b62aa:	42bd      	cmp	r5, r7
   b62ac:	d005      	beq.n	b62ba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b62ae:	6823      	ldr	r3, [r4, #0]
   b62b0:	1b7a      	subs	r2, r7, r5
   b62b2:	689b      	ldr	r3, [r3, #8]
   b62b4:	4629      	mov	r1, r5
   b62b6:	4620      	mov	r0, r4
   b62b8:	4798      	blx	r3
    }
    write('"');
   b62ba:	2122      	movs	r1, #34	; 0x22
   b62bc:	4620      	mov	r0, r4
   b62be:	f7ff feae 	bl	b601e <_ZN5spark10JSONWriter5writeEc>
}
   b62c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b62c6:	bf00      	nop
   b62c8:	000b699f 	.word	0x000b699f

000b62cc <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b62cc:	b513      	push	{r0, r1, r4, lr}
   b62ce:	4604      	mov	r4, r0
   b62d0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b62d4:	f7ff ff5e 	bl	b6194 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b62d8:	4620      	mov	r0, r4
   b62da:	e9dd 2100 	ldrd	r2, r1, [sp]
   b62de:	f7ff ff97 	bl	b6210 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b62e2:	2302      	movs	r3, #2
}
   b62e4:	4620      	mov	r0, r4
    state_ = VALUE;
   b62e6:	7123      	strb	r3, [r4, #4]
}
   b62e8:	b002      	add	sp, #8
   b62ea:	bd10      	pop	{r4, pc}

000b62ec <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b62ec:	b513      	push	{r0, r1, r4, lr}
   b62ee:	4604      	mov	r4, r0
   b62f0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b62f4:	f7ff ff4e 	bl	b6194 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b62f8:	4620      	mov	r0, r4
   b62fa:	e9dd 2100 	ldrd	r2, r1, [sp]
   b62fe:	f7ff ff87 	bl	b6210 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b6302:	2301      	movs	r3, #1
}
   b6304:	4620      	mov	r0, r4
    state_ = NEXT;
   b6306:	7123      	strb	r3, [r4, #4]
}
   b6308:	b002      	add	sp, #8
   b630a:	bd10      	pop	{r4, pc}

000b630c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b630c:	4770      	bx	lr
	...

000b6310 <_Z20acquireSerial1Bufferv>:
{
   b6310:	b538      	push	{r3, r4, r5, lr}
   b6312:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6314:	2514      	movs	r5, #20
   b6316:	462a      	mov	r2, r5
   b6318:	2100      	movs	r1, #0
   b631a:	f000 f871 	bl	b6400 <memset>
   b631e:	8025      	strh	r5, [r4, #0]
   b6320:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6322:	4907      	ldr	r1, [pc, #28]	; (b6340 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6324:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6326:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6328:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b632a:	f000 f831 	bl	b6390 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b632e:	4904      	ldr	r1, [pc, #16]	; (b6340 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6330:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6332:	4628      	mov	r0, r5
   b6334:	f000 f82c 	bl	b6390 <_ZnajRKSt9nothrow_t>
    };
   b6338:	60e0      	str	r0, [r4, #12]
}
   b633a:	4620      	mov	r0, r4
   b633c:	bd38      	pop	{r3, r4, r5, pc}
   b633e:	bf00      	nop
   b6340:	000b69a5 	.word	0x000b69a5

000b6344 <_Z22__fetch_global_Serial1v>:
{
   b6344:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6346:	4d0e      	ldr	r5, [pc, #56]	; (b6380 <_Z22__fetch_global_Serial1v+0x3c>)
   b6348:	7829      	ldrb	r1, [r5, #0]
   b634a:	f3bf 8f5b 	dmb	ish
   b634e:	f011 0401 	ands.w	r4, r1, #1
{
   b6352:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6354:	d111      	bne.n	b637a <_Z22__fetch_global_Serial1v+0x36>
   b6356:	4628      	mov	r0, r5
   b6358:	f7fd fec0 	bl	b40dc <__cxa_guard_acquire>
   b635c:	b168      	cbz	r0, b637a <_Z22__fetch_global_Serial1v+0x36>
   b635e:	a801      	add	r0, sp, #4
   b6360:	f7ff ffd6 	bl	b6310 <_Z20acquireSerial1Bufferv>
   b6364:	aa01      	add	r2, sp, #4
   b6366:	4621      	mov	r1, r4
   b6368:	4806      	ldr	r0, [pc, #24]	; (b6384 <_Z22__fetch_global_Serial1v+0x40>)
   b636a:	f7ff fccf 	bl	b5d0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b636e:	4628      	mov	r0, r5
   b6370:	f7fd feb9 	bl	b40e6 <__cxa_guard_release>
   b6374:	4804      	ldr	r0, [pc, #16]	; (b6388 <_Z22__fetch_global_Serial1v+0x44>)
   b6376:	f000 f80d 	bl	b6394 <atexit>
    return serial1;
}
   b637a:	4802      	ldr	r0, [pc, #8]	; (b6384 <_Z22__fetch_global_Serial1v+0x40>)
   b637c:	b007      	add	sp, #28
   b637e:	bd30      	pop	{r4, r5, pc}
   b6380:	2003e74c 	.word	0x2003e74c
   b6384:	2003e750 	.word	0x2003e750
   b6388:	000b630d 	.word	0x000b630d

000b638c <_ZnwjRKSt9nothrow_t>:
   b638c:	f7fd be93 	b.w	b40b6 <_Znwj>

000b6390 <_ZnajRKSt9nothrow_t>:
   b6390:	f7fd be93 	b.w	b40ba <_Znaj>

000b6394 <atexit>:
   b6394:	2300      	movs	r3, #0
   b6396:	4601      	mov	r1, r0
   b6398:	461a      	mov	r2, r3
   b639a:	4618      	mov	r0, r3
   b639c:	f000 b93a 	b.w	b6614 <__register_exitproc>

000b63a0 <isprint>:
   b63a0:	4b02      	ldr	r3, [pc, #8]	; (b63ac <isprint+0xc>)
   b63a2:	4418      	add	r0, r3
   b63a4:	7840      	ldrb	r0, [r0, #1]
   b63a6:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b63aa:	4770      	bx	lr
   b63ac:	000b6a3a 	.word	0x000b6a3a

000b63b0 <memcpy>:
   b63b0:	440a      	add	r2, r1
   b63b2:	4291      	cmp	r1, r2
   b63b4:	f100 33ff 	add.w	r3, r0, #4294967295
   b63b8:	d100      	bne.n	b63bc <memcpy+0xc>
   b63ba:	4770      	bx	lr
   b63bc:	b510      	push	{r4, lr}
   b63be:	f811 4b01 	ldrb.w	r4, [r1], #1
   b63c2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b63c6:	4291      	cmp	r1, r2
   b63c8:	d1f9      	bne.n	b63be <memcpy+0xe>
   b63ca:	bd10      	pop	{r4, pc}

000b63cc <memmove>:
   b63cc:	4288      	cmp	r0, r1
   b63ce:	b510      	push	{r4, lr}
   b63d0:	eb01 0402 	add.w	r4, r1, r2
   b63d4:	d902      	bls.n	b63dc <memmove+0x10>
   b63d6:	4284      	cmp	r4, r0
   b63d8:	4623      	mov	r3, r4
   b63da:	d807      	bhi.n	b63ec <memmove+0x20>
   b63dc:	1e43      	subs	r3, r0, #1
   b63de:	42a1      	cmp	r1, r4
   b63e0:	d008      	beq.n	b63f4 <memmove+0x28>
   b63e2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b63e6:	f803 2f01 	strb.w	r2, [r3, #1]!
   b63ea:	e7f8      	b.n	b63de <memmove+0x12>
   b63ec:	4402      	add	r2, r0
   b63ee:	4601      	mov	r1, r0
   b63f0:	428a      	cmp	r2, r1
   b63f2:	d100      	bne.n	b63f6 <memmove+0x2a>
   b63f4:	bd10      	pop	{r4, pc}
   b63f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b63fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b63fe:	e7f7      	b.n	b63f0 <memmove+0x24>

000b6400 <memset>:
   b6400:	4402      	add	r2, r0
   b6402:	4603      	mov	r3, r0
   b6404:	4293      	cmp	r3, r2
   b6406:	d100      	bne.n	b640a <memset+0xa>
   b6408:	4770      	bx	lr
   b640a:	f803 1b01 	strb.w	r1, [r3], #1
   b640e:	e7f9      	b.n	b6404 <memset+0x4>

000b6410 <srand>:
   b6410:	b538      	push	{r3, r4, r5, lr}
   b6412:	4b10      	ldr	r3, [pc, #64]	; (b6454 <srand+0x44>)
   b6414:	681d      	ldr	r5, [r3, #0]
   b6416:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6418:	4604      	mov	r4, r0
   b641a:	b9b3      	cbnz	r3, b644a <srand+0x3a>
   b641c:	2018      	movs	r0, #24
   b641e:	f7fe f911 	bl	b4644 <malloc>
   b6422:	4602      	mov	r2, r0
   b6424:	63a8      	str	r0, [r5, #56]	; 0x38
   b6426:	b920      	cbnz	r0, b6432 <srand+0x22>
   b6428:	4b0b      	ldr	r3, [pc, #44]	; (b6458 <srand+0x48>)
   b642a:	480c      	ldr	r0, [pc, #48]	; (b645c <srand+0x4c>)
   b642c:	2142      	movs	r1, #66	; 0x42
   b642e:	f7fe f931 	bl	b4694 <__assert_func>
   b6432:	490b      	ldr	r1, [pc, #44]	; (b6460 <srand+0x50>)
   b6434:	4b0b      	ldr	r3, [pc, #44]	; (b6464 <srand+0x54>)
   b6436:	e9c0 1300 	strd	r1, r3, [r0]
   b643a:	4b0b      	ldr	r3, [pc, #44]	; (b6468 <srand+0x58>)
   b643c:	6083      	str	r3, [r0, #8]
   b643e:	230b      	movs	r3, #11
   b6440:	8183      	strh	r3, [r0, #12]
   b6442:	2100      	movs	r1, #0
   b6444:	2001      	movs	r0, #1
   b6446:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b644a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b644c:	2200      	movs	r2, #0
   b644e:	611c      	str	r4, [r3, #16]
   b6450:	615a      	str	r2, [r3, #20]
   b6452:	bd38      	pop	{r3, r4, r5, pc}
   b6454:	2003e61c 	.word	0x2003e61c
   b6458:	000b69a6 	.word	0x000b69a6
   b645c:	000b69bd 	.word	0x000b69bd
   b6460:	abcd330e 	.word	0xabcd330e
   b6464:	e66d1234 	.word	0xe66d1234
   b6468:	0005deec 	.word	0x0005deec

000b646c <strchr>:
   b646c:	b2c9      	uxtb	r1, r1
   b646e:	4603      	mov	r3, r0
   b6470:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6474:	b11a      	cbz	r2, b647e <strchr+0x12>
   b6476:	428a      	cmp	r2, r1
   b6478:	d1f9      	bne.n	b646e <strchr+0x2>
   b647a:	4618      	mov	r0, r3
   b647c:	4770      	bx	lr
   b647e:	2900      	cmp	r1, #0
   b6480:	bf18      	it	ne
   b6482:	2300      	movne	r3, #0
   b6484:	e7f9      	b.n	b647a <strchr+0xe>

000b6486 <strchrnul>:
   b6486:	b510      	push	{r4, lr}
   b6488:	4604      	mov	r4, r0
   b648a:	f7ff ffef 	bl	b646c <strchr>
   b648e:	b918      	cbnz	r0, b6498 <strchrnul+0x12>
   b6490:	4620      	mov	r0, r4
   b6492:	f7fd fdcd 	bl	b4030 <strlen>
   b6496:	4420      	add	r0, r4
   b6498:	bd10      	pop	{r4, pc}

000b649a <strcpy>:
   b649a:	4603      	mov	r3, r0
   b649c:	f811 2b01 	ldrb.w	r2, [r1], #1
   b64a0:	f803 2b01 	strb.w	r2, [r3], #1
   b64a4:	2a00      	cmp	r2, #0
   b64a6:	d1f9      	bne.n	b649c <strcpy+0x2>
   b64a8:	4770      	bx	lr

000b64aa <strncmp>:
   b64aa:	b510      	push	{r4, lr}
   b64ac:	b17a      	cbz	r2, b64ce <strncmp+0x24>
   b64ae:	4603      	mov	r3, r0
   b64b0:	3901      	subs	r1, #1
   b64b2:	1884      	adds	r4, r0, r2
   b64b4:	f813 0b01 	ldrb.w	r0, [r3], #1
   b64b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b64bc:	4290      	cmp	r0, r2
   b64be:	d101      	bne.n	b64c4 <strncmp+0x1a>
   b64c0:	42a3      	cmp	r3, r4
   b64c2:	d101      	bne.n	b64c8 <strncmp+0x1e>
   b64c4:	1a80      	subs	r0, r0, r2
   b64c6:	bd10      	pop	{r4, pc}
   b64c8:	2800      	cmp	r0, #0
   b64ca:	d1f3      	bne.n	b64b4 <strncmp+0xa>
   b64cc:	e7fa      	b.n	b64c4 <strncmp+0x1a>
   b64ce:	4610      	mov	r0, r2
   b64d0:	e7f9      	b.n	b64c6 <strncmp+0x1c>

000b64d2 <strrchr>:
   b64d2:	b538      	push	{r3, r4, r5, lr}
   b64d4:	4603      	mov	r3, r0
   b64d6:	460c      	mov	r4, r1
   b64d8:	b969      	cbnz	r1, b64f6 <strrchr+0x24>
   b64da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b64de:	f7ff bfc5 	b.w	b646c <strchr>
   b64e2:	1c43      	adds	r3, r0, #1
   b64e4:	4605      	mov	r5, r0
   b64e6:	4621      	mov	r1, r4
   b64e8:	4618      	mov	r0, r3
   b64ea:	f7ff ffbf 	bl	b646c <strchr>
   b64ee:	2800      	cmp	r0, #0
   b64f0:	d1f7      	bne.n	b64e2 <strrchr+0x10>
   b64f2:	4628      	mov	r0, r5
   b64f4:	bd38      	pop	{r3, r4, r5, pc}
   b64f6:	2500      	movs	r5, #0
   b64f8:	e7f5      	b.n	b64e6 <strrchr+0x14>
	...

000b64fc <_strtol_l.constprop.0>:
   b64fc:	2b01      	cmp	r3, #1
   b64fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6502:	d001      	beq.n	b6508 <_strtol_l.constprop.0+0xc>
   b6504:	2b24      	cmp	r3, #36	; 0x24
   b6506:	d906      	bls.n	b6516 <_strtol_l.constprop.0+0x1a>
   b6508:	f7fe f8bc 	bl	b4684 <__errno>
   b650c:	2316      	movs	r3, #22
   b650e:	6003      	str	r3, [r0, #0]
   b6510:	2000      	movs	r0, #0
   b6512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6516:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b65fc <_strtol_l.constprop.0+0x100>
   b651a:	460d      	mov	r5, r1
   b651c:	462e      	mov	r6, r5
   b651e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b6522:	f814 700c 	ldrb.w	r7, [r4, ip]
   b6526:	f017 0708 	ands.w	r7, r7, #8
   b652a:	d1f7      	bne.n	b651c <_strtol_l.constprop.0+0x20>
   b652c:	2c2d      	cmp	r4, #45	; 0x2d
   b652e:	d132      	bne.n	b6596 <_strtol_l.constprop.0+0x9a>
   b6530:	782c      	ldrb	r4, [r5, #0]
   b6532:	2701      	movs	r7, #1
   b6534:	1cb5      	adds	r5, r6, #2
   b6536:	2b00      	cmp	r3, #0
   b6538:	d05b      	beq.n	b65f2 <_strtol_l.constprop.0+0xf6>
   b653a:	2b10      	cmp	r3, #16
   b653c:	d109      	bne.n	b6552 <_strtol_l.constprop.0+0x56>
   b653e:	2c30      	cmp	r4, #48	; 0x30
   b6540:	d107      	bne.n	b6552 <_strtol_l.constprop.0+0x56>
   b6542:	782c      	ldrb	r4, [r5, #0]
   b6544:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b6548:	2c58      	cmp	r4, #88	; 0x58
   b654a:	d14d      	bne.n	b65e8 <_strtol_l.constprop.0+0xec>
   b654c:	786c      	ldrb	r4, [r5, #1]
   b654e:	2310      	movs	r3, #16
   b6550:	3502      	adds	r5, #2
   b6552:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b6556:	f108 38ff 	add.w	r8, r8, #4294967295
   b655a:	f04f 0c00 	mov.w	ip, #0
   b655e:	fbb8 f9f3 	udiv	r9, r8, r3
   b6562:	4666      	mov	r6, ip
   b6564:	fb03 8a19 	mls	sl, r3, r9, r8
   b6568:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b656c:	f1be 0f09 	cmp.w	lr, #9
   b6570:	d816      	bhi.n	b65a0 <_strtol_l.constprop.0+0xa4>
   b6572:	4674      	mov	r4, lr
   b6574:	42a3      	cmp	r3, r4
   b6576:	dd24      	ble.n	b65c2 <_strtol_l.constprop.0+0xc6>
   b6578:	f1bc 0f00 	cmp.w	ip, #0
   b657c:	db1e      	blt.n	b65bc <_strtol_l.constprop.0+0xc0>
   b657e:	45b1      	cmp	r9, r6
   b6580:	d31c      	bcc.n	b65bc <_strtol_l.constprop.0+0xc0>
   b6582:	d101      	bne.n	b6588 <_strtol_l.constprop.0+0x8c>
   b6584:	45a2      	cmp	sl, r4
   b6586:	db19      	blt.n	b65bc <_strtol_l.constprop.0+0xc0>
   b6588:	fb06 4603 	mla	r6, r6, r3, r4
   b658c:	f04f 0c01 	mov.w	ip, #1
   b6590:	f815 4b01 	ldrb.w	r4, [r5], #1
   b6594:	e7e8      	b.n	b6568 <_strtol_l.constprop.0+0x6c>
   b6596:	2c2b      	cmp	r4, #43	; 0x2b
   b6598:	bf04      	itt	eq
   b659a:	782c      	ldrbeq	r4, [r5, #0]
   b659c:	1cb5      	addeq	r5, r6, #2
   b659e:	e7ca      	b.n	b6536 <_strtol_l.constprop.0+0x3a>
   b65a0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b65a4:	f1be 0f19 	cmp.w	lr, #25
   b65a8:	d801      	bhi.n	b65ae <_strtol_l.constprop.0+0xb2>
   b65aa:	3c37      	subs	r4, #55	; 0x37
   b65ac:	e7e2      	b.n	b6574 <_strtol_l.constprop.0+0x78>
   b65ae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b65b2:	f1be 0f19 	cmp.w	lr, #25
   b65b6:	d804      	bhi.n	b65c2 <_strtol_l.constprop.0+0xc6>
   b65b8:	3c57      	subs	r4, #87	; 0x57
   b65ba:	e7db      	b.n	b6574 <_strtol_l.constprop.0+0x78>
   b65bc:	f04f 3cff 	mov.w	ip, #4294967295
   b65c0:	e7e6      	b.n	b6590 <_strtol_l.constprop.0+0x94>
   b65c2:	f1bc 0f00 	cmp.w	ip, #0
   b65c6:	da05      	bge.n	b65d4 <_strtol_l.constprop.0+0xd8>
   b65c8:	2322      	movs	r3, #34	; 0x22
   b65ca:	6003      	str	r3, [r0, #0]
   b65cc:	4646      	mov	r6, r8
   b65ce:	b942      	cbnz	r2, b65e2 <_strtol_l.constprop.0+0xe6>
   b65d0:	4630      	mov	r0, r6
   b65d2:	e79e      	b.n	b6512 <_strtol_l.constprop.0+0x16>
   b65d4:	b107      	cbz	r7, b65d8 <_strtol_l.constprop.0+0xdc>
   b65d6:	4276      	negs	r6, r6
   b65d8:	2a00      	cmp	r2, #0
   b65da:	d0f9      	beq.n	b65d0 <_strtol_l.constprop.0+0xd4>
   b65dc:	f1bc 0f00 	cmp.w	ip, #0
   b65e0:	d000      	beq.n	b65e4 <_strtol_l.constprop.0+0xe8>
   b65e2:	1e69      	subs	r1, r5, #1
   b65e4:	6011      	str	r1, [r2, #0]
   b65e6:	e7f3      	b.n	b65d0 <_strtol_l.constprop.0+0xd4>
   b65e8:	2430      	movs	r4, #48	; 0x30
   b65ea:	2b00      	cmp	r3, #0
   b65ec:	d1b1      	bne.n	b6552 <_strtol_l.constprop.0+0x56>
   b65ee:	2308      	movs	r3, #8
   b65f0:	e7af      	b.n	b6552 <_strtol_l.constprop.0+0x56>
   b65f2:	2c30      	cmp	r4, #48	; 0x30
   b65f4:	d0a5      	beq.n	b6542 <_strtol_l.constprop.0+0x46>
   b65f6:	230a      	movs	r3, #10
   b65f8:	e7ab      	b.n	b6552 <_strtol_l.constprop.0+0x56>
   b65fa:	bf00      	nop
   b65fc:	000b6a3b 	.word	0x000b6a3b

000b6600 <strtol>:
   b6600:	4613      	mov	r3, r2
   b6602:	460a      	mov	r2, r1
   b6604:	4601      	mov	r1, r0
   b6606:	4802      	ldr	r0, [pc, #8]	; (b6610 <strtol+0x10>)
   b6608:	6800      	ldr	r0, [r0, #0]
   b660a:	f7ff bf77 	b.w	b64fc <_strtol_l.constprop.0>
   b660e:	bf00      	nop
   b6610:	2003e61c 	.word	0x2003e61c

000b6614 <__register_exitproc>:
   b6614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6618:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b66d4 <__register_exitproc+0xc0>
   b661c:	4606      	mov	r6, r0
   b661e:	f8d8 0000 	ldr.w	r0, [r8]
   b6622:	461f      	mov	r7, r3
   b6624:	460d      	mov	r5, r1
   b6626:	4691      	mov	r9, r2
   b6628:	f000 f856 	bl	b66d8 <__retarget_lock_acquire_recursive>
   b662c:	4b25      	ldr	r3, [pc, #148]	; (b66c4 <__register_exitproc+0xb0>)
   b662e:	681c      	ldr	r4, [r3, #0]
   b6630:	b934      	cbnz	r4, b6640 <__register_exitproc+0x2c>
   b6632:	4c25      	ldr	r4, [pc, #148]	; (b66c8 <__register_exitproc+0xb4>)
   b6634:	601c      	str	r4, [r3, #0]
   b6636:	4b25      	ldr	r3, [pc, #148]	; (b66cc <__register_exitproc+0xb8>)
   b6638:	b113      	cbz	r3, b6640 <__register_exitproc+0x2c>
   b663a:	681b      	ldr	r3, [r3, #0]
   b663c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6640:	6863      	ldr	r3, [r4, #4]
   b6642:	2b1f      	cmp	r3, #31
   b6644:	dd07      	ble.n	b6656 <__register_exitproc+0x42>
   b6646:	f8d8 0000 	ldr.w	r0, [r8]
   b664a:	f000 f847 	bl	b66dc <__retarget_lock_release_recursive>
   b664e:	f04f 30ff 	mov.w	r0, #4294967295
   b6652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6656:	b34e      	cbz	r6, b66ac <__register_exitproc+0x98>
   b6658:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b665c:	b988      	cbnz	r0, b6682 <__register_exitproc+0x6e>
   b665e:	4b1c      	ldr	r3, [pc, #112]	; (b66d0 <__register_exitproc+0xbc>)
   b6660:	b923      	cbnz	r3, b666c <__register_exitproc+0x58>
   b6662:	f8d8 0000 	ldr.w	r0, [r8]
   b6666:	f000 f838 	bl	b66da <__retarget_lock_release>
   b666a:	e7f0      	b.n	b664e <__register_exitproc+0x3a>
   b666c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6670:	f7fd ffe8 	bl	b4644 <malloc>
   b6674:	2800      	cmp	r0, #0
   b6676:	d0f4      	beq.n	b6662 <__register_exitproc+0x4e>
   b6678:	2300      	movs	r3, #0
   b667a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b667e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6682:	6863      	ldr	r3, [r4, #4]
   b6684:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6688:	2201      	movs	r2, #1
   b668a:	409a      	lsls	r2, r3
   b668c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6690:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6694:	4313      	orrs	r3, r2
   b6696:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b669a:	2e02      	cmp	r6, #2
   b669c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b66a0:	bf02      	ittt	eq
   b66a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b66a6:	4313      	orreq	r3, r2
   b66a8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b66ac:	6863      	ldr	r3, [r4, #4]
   b66ae:	f8d8 0000 	ldr.w	r0, [r8]
   b66b2:	1c5a      	adds	r2, r3, #1
   b66b4:	3302      	adds	r3, #2
   b66b6:	6062      	str	r2, [r4, #4]
   b66b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b66bc:	f000 f80e 	bl	b66dc <__retarget_lock_release_recursive>
   b66c0:	2000      	movs	r0, #0
   b66c2:	e7c6      	b.n	b6652 <__register_exitproc+0x3e>
   b66c4:	2003e7f4 	.word	0x2003e7f4
   b66c8:	2003e768 	.word	0x2003e768
   b66cc:	00000000 	.word	0x00000000
   b66d0:	000b4645 	.word	0x000b4645
   b66d4:	2003e680 	.word	0x2003e680

000b66d8 <__retarget_lock_acquire_recursive>:
   b66d8:	4770      	bx	lr

000b66da <__retarget_lock_release>:
   b66da:	4770      	bx	lr

000b66dc <__retarget_lock_release_recursive>:
   b66dc:	4770      	bx	lr

000b66de <link_code_end>:
	...

000b66e0 <dynalib_user>:
   b66e0:	4041 000b 407d 000b 40a5 000b 40a9 000b     A@..}@...@...@..
   b66f0:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b6700:	7620 7269 7574 6c61 0000 0000                virtual....

000b670c <_ZTVN5spark10LogHandlerE>:
	...
   b671c:	40c5 000b 40ed 000b                         .@...@..

000b6724 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b672c:	40f1 000b 4125 000b 55e9 000b 578d 000b     .@..%A...U...W..

000b673c <_ZTVN5spark13EthernetClassE>:
	...
   b6744:	4713 000b 4709 000b 46ff 000b 46f5 000b     .G...G...F...F..
   b6754:	46e9 000b 46dd 000b 5e05 000b 5e0d 000b     .F...F...^...^..
   b6764:	46d1 000b 46c9 000b 46bf 000b 46b5 000b     .F...F...F...F..
   b6774:	5f35 000b 5e3d 000b 5e45 000b               5_..=^..E^..

000b6780 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b6788:	494d 000b 494f 000b 490d 000b 5f8b 000b     MI..OI...I..._..
   b6798:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   b67a8:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   b67b8:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   b67c8:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
   b67d8:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   b67e8:	6564 6174 6c69 2073 203d 0d00 000a 006d     details = ....m.
   b67f8:	0066 6e6c 6600 006e 0074 6f63 6564 6400     f.ln.fn.t.code.d
   b6808:	7465 6961 006c 0000                         etail...

000b6810 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b6818:	4e6d 000b 4e85 000b 55e9 000b 578d 000b     mN...N...U...W..

000b6828 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b6830:	4e99 000b 4ead 000b 57c5 000b 49f3 000b     .N...N...W...I..

000b6840 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b6848:	4a05 000b 4a2b 000b 554d 000b 49f5 000b     .J..+J..MU...I..

000b6858 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b6860:	4a03 000b 4a39 000b 4dd5 000b 4a5b 000b     .J..9J...M..[J..
   b6870:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b6880:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b688c <_ZTV9IPAddress>:
	...
   b6894:	5aa1 000b 5a91 000b 5a93 000b               .Z...Z...Z..

000b68a0 <_ZTV9USBSerial>:
	...
   b68a8:	5b87 000b 5bef 000b 5bc5 000b 4921 000b     .[...[...[..!I..
   b68b8:	5bb7 000b 5b89 000b 5b99 000b 5be9 000b     .[...[...[...[..
   b68c8:	49c9 000b 5ba9 000b 5b81 000b               .I...[...[..

000b68d4 <_ZTV11USARTSerial>:
	...
   b68dc:	5c91 000b 5cfd 000b 5cd5 000b 4921 000b     .\...\...\..!I..
   b68ec:	5ca5 000b 5cc1 000b 5cb3 000b 5ccf 000b     .\...\...\...\..
   b68fc:	49c9 000b 5c93 000b 5c97 000b               .I...\...\..

000b6908 <_ZTVN5spark9WiFiClassE>:
	...
   b6910:	5da7 000b 5d9d 000b 5d93 000b 5d49 000b     .]...]...]..I]..
   b6920:	5d87 000b 5d7b 000b 5e05 000b 5e0d 000b     .]..{]...^...^..
   b6930:	5d6f 000b 5d67 000b 5d5d 000b 5d53 000b     o]..g]..]]..S]..
   b6940:	5f35 000b 5e3d 000b 5e45 000b               5_..=^..E^..

000b694c <CSWTCH.109>:
   b694c:	e6b4 2003 e73c 2003 e744 2003               ... <.. D.. 

000b6958 <_ZTVN5spark12NetworkClassE>:
	...
   b6960:	5dc5 000b 5dcf 000b 5dd9 000b 5de3 000b     .]...]...]...]..
   b6970:	5ded 000b 5df9 000b 5e05 000b 5e0d 000b     .]...]...^...^..
   b6980:	5e15 000b 5e21 000b 5e29 000b 5e33 000b     .^..!^..)^..3^..
   b6990:	5f35 000b 5e3d 000b 5e45 000b 7525 7500     5_..=^..E^..%u.u
   b69a0:	3025 7834                                    %04x.

000b69a5 <_ZSt7nothrow>:
   b69a5:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b69b5:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b69c5:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b69d5:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b69e5:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b69f5:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b6a05:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b6a15:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b6a25:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b6a35:	646e 632e                                    nd.c.

000b6a3a <_ctype_>:
   b6a3a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b6a4a:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b6a5a:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b6a6a:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b6a7a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b6a8a:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b6a9a:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b6aaa:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b6aba:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b6b3b <link_const_data_end>:
	...

000b6b3c <link_constructors_location>:
   b6b3c:	000b423d 	.word	0x000b423d
   b6b40:	000b471d 	.word	0x000b471d
   b6b44:	000b4771 	.word	0x000b4771
   b6b48:	000b48fd 	.word	0x000b48fd
   b6b4c:	000b55d9 	.word	0x000b55d9
   b6b50:	000b5939 	.word	0x000b5939
   b6b54:	000b594d 	.word	0x000b594d
   b6b58:	000b5db1 	.word	0x000b5db1
   b6b5c:	000b5f49 	.word	0x000b5f49
