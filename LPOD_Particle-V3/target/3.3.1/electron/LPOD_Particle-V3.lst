
c:/Users/percy/Documents/Particle/LPOD_Particle-V3/target/3.3.1/electron/LPOD_Particle-V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000048b4  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080848d0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  20000000  080848d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005e8  20000080  20000080  00040080  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08084954  08084954  00034954  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  0808497c  0808497c  0003497c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d9ae1  00000000  00000000  00034980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00013c2b  00000000  00000000  0010e461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0001a79d  00000000  00000000  0012208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002020  00000000  00000000  0013c829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000046d0  00000000  00000000  0013e849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002f824  00000000  00000000  00142f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00039b6b  00000000  00000000  0017273d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000b8b68  00000000  00000000  001ac2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000056a4  00000000  00000000  00264e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f004 f9f7 	bl	8084420 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f004 f9ff 	bl	808443c <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000000 	.word	0x20000000
 8080048:	080848d4 	.word	0x080848d4
 808004c:	20000080 	.word	0x20000080
 8080050:	20000080 	.word	0x20000080
 8080054:	20000665 	.word	0x20000665
 8080058:	20000665 	.word	0x20000665

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f002 fe17 	bl	8082c90 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080062:	2500      	movs	r5, #0
 8080064:	4e05      	ldr	r6, [pc, #20]	; (808007c <module_user_init+0x20>)
 8080066:	4c06      	ldr	r4, [pc, #24]	; (8080080 <module_user_init+0x24>)
 8080068:	1ba4      	subs	r4, r4, r6
 808006a:	08a4      	lsrs	r4, r4, #2
 808006c:	42ac      	cmp	r4, r5
 808006e:	d100      	bne.n	8080072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080072:	f856 3b04 	ldr.w	r3, [r6], #4
 8080076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f7      	b.n	808006c <module_user_init+0x10>
 808007c:	080848b0 	.word	0x080848b0
 8080080:	080848d0 	.word	0x080848d0

08080084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080084:	f001 bc44 	b.w	8081910 <setup>

08080088 <module_user_loop>:
}

void module_user_loop() {
 8080088:	b508      	push	{r3, lr}
    loop();
 808008a:	f001 fc95 	bl	80819b8 <loop>
    _post_loop();
}
 808008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 8080092:	f002 bdb5 	b.w	8082c00 <_post_loop>

08080096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 8080096:	f002 bb27 	b.w	80826e8 <malloc>

0808009a <_Znaj>:
 808009a:	f002 bb25 	b.w	80826e8 <malloc>

0808009e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 808009e:	f002 bb2b 	b.w	80826f8 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr
	...

080800b4 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80800b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80800b6:	460c      	mov	r4, r1
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80800b8:	f003 ff48 	bl	8083f4c <__aeabi_ui2f>
 80800bc:	4606      	mov	r6, r0
 80800be:	8be0      	ldrh	r0, [r4, #30]
 80800c0:	f003 ff44 	bl	8083f4c <__aeabi_ui2f>

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80800c4:	f04f 515c 	mov.w	r1, #922746880	; 0x37000000
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80800c8:	4605      	mov	r5, r0
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80800ca:	4630      	mov	r0, r6
 80800cc:	f003 ff96 	bl	8083ffc <__aeabi_fmul>
 80800d0:	f04f 5164 	mov.w	r1, #956301312	; 0x39000000
 80800d4:	4607      	mov	r7, r0
 80800d6:	4628      	mov	r0, r5
 80800d8:	f003 ff90 	bl	8083ffc <__aeabi_fmul>
 80800dc:	4601      	mov	r1, r0
 80800de:	4638      	mov	r0, r7
 80800e0:	f003 fe82 	bl	8083de8 <__aeabi_fsub>
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80800e4:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80800e8:	4607      	mov	r7, r0
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80800ea:	4630      	mov	r0, r6
 80800ec:	f003 ff86 	bl	8083ffc <__aeabi_fmul>
 80800f0:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80800f4:	4606      	mov	r6, r0
 80800f6:	4628      	mov	r0, r5
 80800f8:	f003 ff80 	bl	8083ffc <__aeabi_fmul>
 80800fc:	4601      	mov	r1, r0
 80800fe:	4630      	mov	r0, r6
 8080100:	f003 fe72 	bl	8083de8 <__aeabi_fsub>
 8080104:	4605      	mov	r5, r0
 8080106:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 808010a:	f003 ff23 	bl	8083f54 <__aeabi_i2f>
 808010e:	4601      	mov	r1, r0
 8080110:	4628      	mov	r0, r5
 8080112:	f003 ff73 	bl	8083ffc <__aeabi_fmul>
 8080116:	4605      	mov	r5, r0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8080118:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
 808011c:	f003 ff1a 	bl	8083f54 <__aeabi_i2f>
 8080120:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8080124:	f003 ff6a 	bl	8083ffc <__aeabi_fmul>
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8080128:	4639      	mov	r1, r7
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 808012a:	4606      	mov	r6, r0
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 808012c:	4638      	mov	r0, r7
 808012e:	f003 ff65 	bl	8083ffc <__aeabi_fmul>
 8080132:	4601      	mov	r1, r0
    var2 =
 8080134:	4630      	mov	r0, r6
 8080136:	f003 ff61 	bl	8083ffc <__aeabi_fmul>
 808013a:	4601      	mov	r1, r0

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 808013c:	4628      	mov	r0, r5
 808013e:	f003 fe55 	bl	8083dec <__addsf3>

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 8080142:	4902      	ldr	r1, [pc, #8]	; (808014c <calc_temperature+0x98>)
    dev->calib.t_fine = (var1 + var2);
 8080144:	63a0      	str	r0, [r4, #56]	; 0x38
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 8080146:	f004 f80d 	bl	8084164 <__aeabi_fdiv>

    return calc_temp;
}
 808014a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808014c:	45a00000 	.word	0x45a00000

08080150 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 8080150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080154:	460c      	mov	r4, r1
 8080156:	4680      	mov	r8, r0
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8080158:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 808015c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808015e:	f003 ff4d 	bl	8083ffc <__aeabi_fmul>
 8080162:	4969      	ldr	r1, [pc, #420]	; (8080308 <calc_pressure+0x1b8>)
 8080164:	f003 fe40 	bl	8083de8 <__aeabi_fsub>
 8080168:	4605      	mov	r5, r0
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 808016a:	f994 0028 	ldrsb.w	r0, [r4, #40]	; 0x28
 808016e:	f003 fef1 	bl	8083f54 <__aeabi_i2f>
 8080172:	4629      	mov	r1, r5
 8080174:	f003 ff42 	bl	8083ffc <__aeabi_fmul>
 8080178:	4629      	mov	r1, r5
 808017a:	f003 ff3f 	bl	8083ffc <__aeabi_fmul>
 808017e:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8080182:	f003 ff3b 	bl	8083ffc <__aeabi_fmul>
 8080186:	4606      	mov	r6, r0
 8080188:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 808018c:	f003 fee2 	bl	8083f54 <__aeabi_i2f>
 8080190:	4629      	mov	r1, r5
 8080192:	f003 ff33 	bl	8083ffc <__aeabi_fmul>
 8080196:	4601      	mov	r1, r0
 8080198:	4630      	mov	r0, r6
 808019a:	f003 fe27 	bl	8083dec <__addsf3>
 808019e:	f04f 5158 	mov.w	r1, #905969664	; 0x36000000
 80801a2:	f003 ff2b 	bl	8083ffc <__aeabi_fmul>
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 80801a6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80801aa:	f003 ff27 	bl	8083ffc <__aeabi_fmul>
 80801ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80801b2:	f003 fe1b 	bl	8083dec <__addsf3>
 80801b6:	4606      	mov	r6, r0
 80801b8:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80801ba:	f003 fec7 	bl	8083f4c <__aeabi_ui2f>
 80801be:	4631      	mov	r1, r6
 80801c0:	f003 ff1c 	bl	8083ffc <__aeabi_fmul>
 80801c4:	4606      	mov	r6, r0
    calc_pres = (1048576.0f - ((float)pres_adc));

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 80801c6:	f004 f8df 	bl	8084388 <__aeabi_f2iz>
 80801ca:	2800      	cmp	r0, #0
 80801cc:	f000 8099 	beq.w	8080302 <calc_pressure+0x1b2>
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 80801d0:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
 80801d4:	f003 febe 	bl	8083f54 <__aeabi_i2f>
 80801d8:	f04f 515c 	mov.w	r1, #922746880	; 0x37000000
 80801dc:	f003 ff0e 	bl	8083ffc <__aeabi_fmul>
 80801e0:	4629      	mov	r1, r5
 80801e2:	4607      	mov	r7, r0
 80801e4:	4628      	mov	r0, r5
 80801e6:	f003 ff09 	bl	8083ffc <__aeabi_fmul>
 80801ea:	4601      	mov	r1, r0
 80801ec:	4638      	mov	r0, r7
 80801ee:	f003 ff05 	bl	8083ffc <__aeabi_fmul>
 80801f2:	4607      	mov	r7, r0
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 80801f4:	f9b4 002c 	ldrsh.w	r0, [r4, #44]	; 0x2c
 80801f8:	f003 feac 	bl	8083f54 <__aeabi_i2f>
 80801fc:	4629      	mov	r1, r5
 80801fe:	f003 fefd 	bl	8083ffc <__aeabi_fmul>
 8080202:	4601      	mov	r1, r0
 8080204:	f003 fdf2 	bl	8083dec <__addsf3>
 8080208:	4639      	mov	r1, r7
 808020a:	f003 fdef 	bl	8083dec <__addsf3>
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 808020e:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8080212:	f003 fef3 	bl	8083ffc <__aeabi_fmul>
 8080216:	4607      	mov	r7, r0
    calc_pres = (1048576.0f - ((float)pres_adc));
 8080218:	4640      	mov	r0, r8
 808021a:	f003 fe97 	bl	8083f4c <__aeabi_ui2f>
 808021e:	4601      	mov	r1, r0
 8080220:	f04f 4093 	mov.w	r0, #1233125376	; 0x49800000
 8080224:	f003 fde0 	bl	8083de8 <__aeabi_fsub>
 8080228:	4605      	mov	r5, r0
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 808022a:	f9b4 002a 	ldrsh.w	r0, [r4, #42]	; 0x2a
 808022e:	f003 fe91 	bl	8083f54 <__aeabi_i2f>
 8080232:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8080236:	f003 fee1 	bl	8083ffc <__aeabi_fmul>
 808023a:	4639      	mov	r1, r7
 808023c:	f003 fdd6 	bl	8083dec <__addsf3>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8080240:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 8080244:	f003 feda 	bl	8083ffc <__aeabi_fmul>
 8080248:	4601      	mov	r1, r0
 808024a:	4628      	mov	r0, r5
 808024c:	f003 fdcc 	bl	8083de8 <__aeabi_fsub>
 8080250:	492e      	ldr	r1, [pc, #184]	; (808030c <calc_pressure+0x1bc>)
 8080252:	f003 fed3 	bl	8083ffc <__aeabi_fmul>
 8080256:	4631      	mov	r1, r6
 8080258:	f003 ff84 	bl	8084164 <__aeabi_fdiv>
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 808025c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8080260:	4605      	mov	r5, r0
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8080262:	f003 fecb 	bl	8083ffc <__aeabi_fmul>
 8080266:	4606      	mov	r6, r0
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8080268:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
 808026c:	f003 fe72 	bl	8083f54 <__aeabi_i2f>
 8080270:	4629      	mov	r1, r5
 8080272:	f003 fec3 	bl	8083ffc <__aeabi_fmul>
 8080276:	4629      	mov	r1, r5
 8080278:	f003 fec0 	bl	8083ffc <__aeabi_fmul>
 808027c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8080280:	f003 febc 	bl	8083ffc <__aeabi_fmul>
 8080284:	4607      	mov	r7, r0
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 8080286:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 808028a:	f003 fe63 	bl	8083f54 <__aeabi_i2f>
 808028e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8080292:	f003 feb3 	bl	8083ffc <__aeabi_fmul>
 8080296:	4629      	mov	r1, r5
 8080298:	f003 feb0 	bl	8083ffc <__aeabi_fmul>
 808029c:	4601      	mov	r1, r0
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 808029e:	4638      	mov	r0, r7
 80802a0:	f003 fda4 	bl	8083dec <__addsf3>
 80802a4:	4607      	mov	r7, r0
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 80802a6:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80802aa:	f003 fe53 	bl	8083f54 <__aeabi_i2f>
 80802ae:	f04f 515c 	mov.w	r1, #922746880	; 0x37000000
 80802b2:	f003 fea3 	bl	8083ffc <__aeabi_fmul>
 80802b6:	4631      	mov	r1, r6
 80802b8:	4680      	mov	r8, r0
 80802ba:	4630      	mov	r0, r6
 80802bc:	f003 fe9e 	bl	8083ffc <__aeabi_fmul>
 80802c0:	4631      	mov	r1, r6
 80802c2:	f003 fe9b 	bl	8083ffc <__aeabi_fmul>
 80802c6:	4601      	mov	r1, r0
 80802c8:	4640      	mov	r0, r8
 80802ca:	f003 fe97 	bl	8083ffc <__aeabi_fmul>
 80802ce:	4601      	mov	r1, r0
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 80802d0:	4638      	mov	r0, r7
 80802d2:	f003 fd8b 	bl	8083dec <__addsf3>
 80802d6:	4606      	mov	r6, r0
 80802d8:	f994 002f 	ldrsb.w	r0, [r4, #47]	; 0x2f
 80802dc:	f003 fe3a 	bl	8083f54 <__aeabi_i2f>
 80802e0:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80802e4:	f003 fe8a 	bl	8083ffc <__aeabi_fmul>
 80802e8:	4601      	mov	r1, r0
 80802ea:	4630      	mov	r0, r6
 80802ec:	f003 fd7e 	bl	8083dec <__addsf3>
 80802f0:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80802f4:	f003 fe82 	bl	8083ffc <__aeabi_fmul>
 80802f8:	4629      	mov	r1, r5
 80802fa:	f003 fd77 	bl	8083dec <__addsf3>
    {
        calc_pres = 0;
    }

    return calc_pres;
}
 80802fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        calc_pres = 0;
 8080302:	2000      	movs	r0, #0
    return calc_pres;
 8080304:	e7fb      	b.n	80802fe <calc_pressure+0x1ae>
 8080306:	bf00      	nop
 8080308:	477a0000 	.word	0x477a0000
 808030c:	45c35000 	.word	0x45c35000

08080310 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8080310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080314:	460c      	mov	r4, r1
 8080316:	4607      	mov	r7, r0
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8080318:	4943      	ldr	r1, [pc, #268]	; (8080428 <calc_humidity+0x118>)
 808031a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808031c:	f003 ff22 	bl	8084164 <__aeabi_fdiv>
 8080320:	4605      	mov	r5, r0
    var1 = (float)((float)hum_adc) -
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8080322:	f994 0015 	ldrsb.w	r0, [r4, #21]
 8080326:	f003 fe15 	bl	8083f54 <__aeabi_i2f>
 808032a:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 808032e:	f003 fe65 	bl	8083ffc <__aeabi_fmul>
 8080332:	4629      	mov	r1, r5
 8080334:	f003 fe62 	bl	8083ffc <__aeabi_fmul>
 8080338:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 808033c:	f003 fd56 	bl	8083dec <__addsf3>
 8080340:	4606      	mov	r6, r0
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8080342:	f994 0016 	ldrsb.w	r0, [r4, #22]
 8080346:	f003 fe05 	bl	8083f54 <__aeabi_i2f>
 808034a:	f04f 5156 	mov.w	r1, #897581056	; 0x35800000
 808034e:	f003 fe55 	bl	8083ffc <__aeabi_fmul>
 8080352:	4629      	mov	r1, r5
 8080354:	f003 fe52 	bl	8083ffc <__aeabi_fmul>
 8080358:	4629      	mov	r1, r5
 808035a:	f003 fe4f 	bl	8083ffc <__aeabi_fmul>
 808035e:	4601      	mov	r1, r0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8080360:	4630      	mov	r0, r6
 8080362:	f003 fd43 	bl	8083dec <__addsf3>
 8080366:	4606      	mov	r6, r0
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8080368:	8a60      	ldrh	r0, [r4, #18]
 808036a:	f003 fdef 	bl	8083f4c <__aeabi_ui2f>
 808036e:	f04f 515a 	mov.w	r1, #914358272	; 0x36800000
 8080372:	f003 fe43 	bl	8083ffc <__aeabi_fmul>
 8080376:	4601      	mov	r1, r0
 8080378:	4630      	mov	r0, r6
 808037a:	f003 fe3f 	bl	8083ffc <__aeabi_fmul>
 808037e:	4606      	mov	r6, r0
    var1 = (float)((float)hum_adc) -
 8080380:	4638      	mov	r0, r7
 8080382:	f003 fde3 	bl	8083f4c <__aeabi_ui2f>
 8080386:	4607      	mov	r7, r0
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8080388:	f994 0014 	ldrsb.w	r0, [r4, #20]
 808038c:	f003 fde2 	bl	8083f54 <__aeabi_i2f>
 8080390:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8080394:	f003 fe32 	bl	8083ffc <__aeabi_fmul>
 8080398:	4629      	mov	r1, r5
 808039a:	f003 fe2f 	bl	8083ffc <__aeabi_fmul>
 808039e:	4680      	mov	r8, r0
 80803a0:	8a20      	ldrh	r0, [r4, #16]
 80803a2:	f003 fdd3 	bl	8083f4c <__aeabi_ui2f>
 80803a6:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80803aa:	f003 fe27 	bl	8083ffc <__aeabi_fmul>
 80803ae:	4601      	mov	r1, r0
 80803b0:	4640      	mov	r0, r8
 80803b2:	f003 fd1b 	bl	8083dec <__addsf3>
 80803b6:	4601      	mov	r1, r0
    var1 = (float)((float)hum_adc) -
 80803b8:	4638      	mov	r0, r7
 80803ba:	f003 fd15 	bl	8083de8 <__aeabi_fsub>
 80803be:	4601      	mov	r1, r0
    var2 = var1 *
 80803c0:	4630      	mov	r0, r6
 80803c2:	f003 fe1b 	bl	8083ffc <__aeabi_fmul>
 80803c6:	4606      	mov	r6, r0
    var3 = (float)dev->calib.par_h6 / 16384.0f;
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 80803c8:	f994 0018 	ldrsb.w	r0, [r4, #24]
 80803cc:	f003 fdc2 	bl	8083f54 <__aeabi_i2f>
 80803d0:	f04f 5154 	mov.w	r1, #889192448	; 0x35000000
 80803d4:	f003 fe12 	bl	8083ffc <__aeabi_fmul>
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 80803d8:	4629      	mov	r1, r5
 80803da:	f003 fe0f 	bl	8083ffc <__aeabi_fmul>
 80803de:	4605      	mov	r5, r0
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 80803e0:	7de0      	ldrb	r0, [r4, #23]
 80803e2:	f003 fdb3 	bl	8083f4c <__aeabi_ui2f>
 80803e6:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 80803ea:	f003 fe07 	bl	8083ffc <__aeabi_fmul>
 80803ee:	4601      	mov	r1, r0
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 80803f0:	4628      	mov	r0, r5
 80803f2:	f003 fcfb 	bl	8083dec <__addsf3>
 80803f6:	4631      	mov	r1, r6
 80803f8:	f003 fe00 	bl	8083ffc <__aeabi_fmul>
 80803fc:	4631      	mov	r1, r6
 80803fe:	f003 fdfd 	bl	8083ffc <__aeabi_fmul>
 8080402:	4631      	mov	r1, r6
 8080404:	f003 fcf2 	bl	8083dec <__addsf3>
    if (calc_hum > 100.0f)
 8080408:	4908      	ldr	r1, [pc, #32]	; (808042c <calc_humidity+0x11c>)
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 808040a:	4604      	mov	r4, r0
    if (calc_hum > 100.0f)
 808040c:	f003 ffb2 	bl	8084374 <__aeabi_fcmpgt>
 8080410:	b940      	cbnz	r0, 8080424 <calc_humidity+0x114>
    {
        calc_hum = 100.0f;
    }
    else if (calc_hum < 0.0f)
 8080412:	2100      	movs	r1, #0
 8080414:	4620      	mov	r0, r4
 8080416:	f003 ff8f 	bl	8084338 <__aeabi_fcmplt>
 808041a:	b100      	cbz	r0, 808041e <calc_humidity+0x10e>
    {
        calc_hum = 0.0f;
 808041c:	2400      	movs	r4, #0
    }

    return calc_hum;
}
 808041e:	4620      	mov	r0, r4
 8080420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        calc_hum = 100.0f;
 8080424:	4c01      	ldr	r4, [pc, #4]	; (808042c <calc_humidity+0x11c>)
    return calc_hum;
 8080426:	e7fa      	b.n	808041e <calc_humidity+0x10e>
 8080428:	45a00000 	.word	0x45a00000
 808042c:	42c80000 	.word	0x42c80000

08080430 <calc_res_heat>:
    return calc_gas_res;
}

/* This internal API is used to calculate the heater resistance value */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8080430:	b570      	push	{r4, r5, r6, lr}
 8080432:	4606      	mov	r6, r0
    {
        temp = 400;
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8080434:	f9b1 001a 	ldrsh.w	r0, [r1, #26]
{
 8080438:	460c      	mov	r4, r1
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 808043a:	f003 fd8b 	bl	8083f54 <__aeabi_i2f>
 808043e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8080442:	f003 fddb 	bl	8083ffc <__aeabi_fmul>
 8080446:	4937      	ldr	r1, [pc, #220]	; (8080524 <calc_res_heat+0xf4>)
 8080448:	f003 fdd8 	bl	8083ffc <__aeabi_fmul>
 808044c:	4936      	ldr	r1, [pc, #216]	; (8080528 <calc_res_heat+0xf8>)
 808044e:	f003 fccd 	bl	8083dec <__addsf3>
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8080452:	f5b6 7fc8 	cmp.w	r6, #400	; 0x190
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8080456:	4605      	mov	r5, r0
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8080458:	4630      	mov	r0, r6
 808045a:	bf28      	it	cs
 808045c:	f44f 70c8 	movcs.w	r0, #400	; 0x190
 8080460:	f003 fd74 	bl	8083f4c <__aeabi_ui2f>
 8080464:	4601      	mov	r1, r0
 8080466:	4628      	mov	r0, r5
 8080468:	f003 fdc8 	bl	8083ffc <__aeabi_fmul>
 808046c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8080470:	f003 fcbc 	bl	8083dec <__addsf3>
 8080474:	4605      	mov	r5, r0
    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8080476:	f994 0019 	ldrsb.w	r0, [r4, #25]
 808047a:	f003 fd6b 	bl	8083f54 <__aeabi_i2f>
 808047e:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8080482:	f003 fdbb 	bl	8083ffc <__aeabi_fmul>
 8080486:	4929      	ldr	r1, [pc, #164]	; (808052c <calc_res_heat+0xfc>)
 8080488:	f003 fcb0 	bl	8083dec <__addsf3>
 808048c:	4601      	mov	r1, r0
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 808048e:	4628      	mov	r0, r5
 8080490:	f003 fdb4 	bl	8083ffc <__aeabi_fmul>
 8080494:	4605      	mov	r5, r0
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8080496:	f994 001c 	ldrsb.w	r0, [r4, #28]
 808049a:	f003 fd5b 	bl	8083f54 <__aeabi_i2f>
 808049e:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80804a2:	f003 fdab 	bl	8083ffc <__aeabi_fmul>
 80804a6:	4606      	mov	r6, r0
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 80804a8:	f994 000e 	ldrsb.w	r0, [r4, #14]
 80804ac:	f003 fd52 	bl	8083f54 <__aeabi_i2f>
 80804b0:	4601      	mov	r1, r0
 80804b2:	4630      	mov	r0, r6
 80804b4:	f003 fda2 	bl	8083ffc <__aeabi_fmul>
 80804b8:	4601      	mov	r1, r0
 80804ba:	4628      	mov	r0, r5
 80804bc:	f003 fc96 	bl	8083dec <__addsf3>
 80804c0:	4605      	mov	r5, r0
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80804c2:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80804c6:	f003 fd41 	bl	8083f4c <__aeabi_ui2f>
 80804ca:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80804ce:	f003 fc8d 	bl	8083dec <__addsf3>
 80804d2:	4601      	mov	r1, r0
 80804d4:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 80804d8:	f003 fe44 	bl	8084164 <__aeabi_fdiv>
 80804dc:	4601      	mov	r1, r0
 80804de:	4628      	mov	r0, r5
 80804e0:	f003 fd8c 	bl	8083ffc <__aeabi_fmul>
 80804e4:	4605      	mov	r5, r0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80804e6:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 80804ea:	f003 fd33 	bl	8083f54 <__aeabi_i2f>
 80804ee:	4910      	ldr	r1, [pc, #64]	; (8080530 <calc_res_heat+0x100>)
 80804f0:	f003 fd84 	bl	8083ffc <__aeabi_fmul>
 80804f4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80804f8:	f003 fc78 	bl	8083dec <__addsf3>
 80804fc:	4601      	mov	r1, r0
 80804fe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8080502:	f003 fe2f 	bl	8084164 <__aeabi_fdiv>
 8080506:	4601      	mov	r1, r0
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8080508:	4628      	mov	r0, r5
 808050a:	f003 fd77 	bl	8083ffc <__aeabi_fmul>
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 808050e:	4909      	ldr	r1, [pc, #36]	; (8080534 <calc_res_heat+0x104>)
 8080510:	f003 fc6a 	bl	8083de8 <__aeabi_fsub>
        (uint8_t)(3.4f *
 8080514:	4908      	ldr	r1, [pc, #32]	; (8080538 <calc_res_heat+0x108>)
 8080516:	f003 fd71 	bl	8083ffc <__aeabi_fmul>
    res_heat =
 808051a:	f003 ff5b 	bl	80843d4 <__aeabi_f2uiz>
                   25));

    return res_heat;
}
 808051e:	b2c0      	uxtb	r0, r0
 8080520:	bd70      	pop	{r4, r5, r6, pc}
 8080522:	bf00      	nop
 8080524:	3a03126f 	.word	0x3a03126f
 8080528:	3b1a0275 	.word	0x3b1a0275
 808052c:	42440000 	.word	0x42440000
 8080530:	3b03126f 	.word	0x3b03126f
 8080534:	41c80000 	.word	0x41c80000
 8080538:	4059999a 	.word	0x4059999a

0808053c <null_ptr_check>:
/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
    int8_t rslt = BME68X_OK;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 808053c:	b148      	cbz	r0, 8080552 <null_ptr_check+0x16>
 808053e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8080540:	b13b      	cbz	r3, 8080552 <null_ptr_check+0x16>
 8080542:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8080544:	b12b      	cbz	r3, 8080552 <null_ptr_check+0x16>
 8080546:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8080548:	fab0 f080 	clz	r0, r0
 808054c:	0940      	lsrs	r0, r0, #5
 808054e:	4240      	negs	r0, r0
 8080550:	4770      	bx	lr
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8080552:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return rslt;
}
 8080556:	4770      	bx	lr

08080558 <boundary_check>:
{
 8080558:	b510      	push	{r4, lr}
 808055a:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 808055c:	4610      	mov	r0, r2
 808055e:	f7ff ffed 	bl	808053c <null_ptr_check>
    if ((value != NULL) && (rslt == BME68X_OK))
 8080562:	b950      	cbnz	r0, 808057a <boundary_check+0x22>
        if (*value > max)
 8080564:	7823      	ldrb	r3, [r4, #0]
 8080566:	428b      	cmp	r3, r1
 8080568:	d906      	bls.n	8080578 <boundary_check+0x20>
            *value = max;
 808056a:	7021      	strb	r1, [r4, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 808056c:	f892 304d 	ldrb.w	r3, [r2, #77]	; 0x4d
 8080570:	f043 0301 	orr.w	r3, r3, #1
 8080574:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
}
 8080578:	bd10      	pop	{r4, pc}
        rslt = BME68X_E_NULL_PTR;
 808057a:	f04f 30ff 	mov.w	r0, #4294967295
 808057e:	e7fb      	b.n	8080578 <boundary_check+0x20>

08080580 <set_mem_page>:
{
 8080580:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8080582:	4602      	mov	r2, r0
    rslt = null_ptr_check(dev);
 8080584:	4608      	mov	r0, r1
 8080586:	f7ff ffd9 	bl	808053c <null_ptr_check>
{
 808058a:	460c      	mov	r4, r1
    if (rslt == BME68X_OK)
 808058c:	4605      	mov	r5, r0
 808058e:	bb40      	cbnz	r0, 80805e2 <set_mem_page+0x62>
            mem_page = BME68X_MEM_PAGE0;
 8080590:	f012 0f80 	tst.w	r2, #128	; 0x80
 8080594:	bf14      	ite	ne
 8080596:	2300      	movne	r3, #0
 8080598:	2310      	moveq	r3, #16
        if (mem_page != dev->mem_page)
 808059a:	7b4a      	ldrb	r2, [r1, #13]
 808059c:	429a      	cmp	r2, r3
 808059e:	d020      	beq.n	80805e2 <set_mem_page+0x62>
            dev->mem_page = mem_page;
 80805a0:	734b      	strb	r3, [r1, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80805a2:	6c0e      	ldr	r6, [r1, #64]	; 0x40
 80805a4:	684b      	ldr	r3, [r1, #4]
 80805a6:	2201      	movs	r2, #1
 80805a8:	20f3      	movs	r0, #243	; 0xf3
 80805aa:	f10d 0107 	add.w	r1, sp, #7
 80805ae:	47b0      	blx	r6
 80805b0:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
            if (dev->intf_rslt != 0)
 80805b4:	b998      	cbnz	r0, 80805de <set_mem_page+0x5e>
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80805b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80805ba:	7b63      	ldrb	r3, [r4, #13]
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80805bc:	f022 0210 	bic.w	r2, r2, #16
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80805c0:	f003 0310 	and.w	r3, r3, #16
 80805c4:	4313      	orrs	r3, r2
 80805c6:	f88d 3007 	strb.w	r3, [sp, #7]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80805ca:	2201      	movs	r2, #1
 80805cc:	2073      	movs	r0, #115	; 0x73
 80805ce:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80805d0:	6863      	ldr	r3, [r4, #4]
 80805d2:	f10d 0107 	add.w	r1, sp, #7
 80805d6:	47b0      	blx	r6
 80805d8:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 80805dc:	b108      	cbz	r0, 80805e2 <set_mem_page+0x62>
                    rslt = BME68X_E_COM_FAIL;
 80805de:	f06f 0501 	mvn.w	r5, #1
}
 80805e2:	4628      	mov	r0, r5
 80805e4:	b002      	add	sp, #8
 80805e6:	bd70      	pop	{r4, r5, r6, pc}

080805e8 <get_mem_page>:
{
 80805e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80805ea:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 80805ec:	f7ff ffa6 	bl	808053c <null_ptr_check>
    if (rslt == BME68X_OK)
 80805f0:	b970      	cbnz	r0, 8080610 <get_mem_page+0x28>
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80805f2:	2201      	movs	r2, #1
 80805f4:	20f3      	movs	r0, #243	; 0xf3
 80805f6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80805f8:	6863      	ldr	r3, [r4, #4]
 80805fa:	f10d 0107 	add.w	r1, sp, #7
 80805fe:	47a8      	blx	r5
 8080600:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 8080604:	b930      	cbnz	r0, 8080614 <get_mem_page+0x2c>
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8080606:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808060a:	f003 0310 	and.w	r3, r3, #16
 808060e:	7363      	strb	r3, [r4, #13]
}
 8080610:	b003      	add	sp, #12
 8080612:	bd30      	pop	{r4, r5, pc}
            rslt = BME68X_E_COM_FAIL;
 8080614:	f06f 0001 	mvn.w	r0, #1
    return rslt;
 8080618:	e7fa      	b.n	8080610 <get_mem_page+0x28>
	...

0808061c <calc_gas_resistance_low.isra.0>:
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
 808061c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    const float lookup_k1_range[16] = {
 8080620:	4c34      	ldr	r4, [pc, #208]	; (80806f4 <calc_gas_resistance_low.isra.0+0xd8>)
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
 8080622:	b0a0      	sub	sp, #128	; 0x80
    const float lookup_k1_range[16] = {
 8080624:	466d      	mov	r5, sp
 8080626:	4626      	mov	r6, r4
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
 8080628:	4684      	mov	ip, r0
 808062a:	460f      	mov	r7, r1
 808062c:	4690      	mov	r8, r2
    const float lookup_k1_range[16] = {
 808062e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8080632:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8080636:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808063a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    const float lookup_k2_range[16] = {
 808063e:	3440      	adds	r4, #64	; 0x40
    const float lookup_k1_range[16] = {
 8080640:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const float lookup_k2_range[16] = {
 8080644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8080646:	ad10      	add	r5, sp, #64	; 0x40
 8080648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808064a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808064c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808064e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8080650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8080652:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8080656:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    float gas_res_f = gas_res_adc;
 808065a:	4660      	mov	r0, ip
 808065c:	f003 fc76 	bl	8083f4c <__aeabi_ui2f>
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8080660:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 8080664:	f003 fbc0 	bl	8083de8 <__aeabi_fsub>
 8080668:	4604      	mov	r4, r0
    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 808066a:	4640      	mov	r0, r8
 808066c:	f003 fc72 	bl	8083f54 <__aeabi_i2f>
 8080670:	4921      	ldr	r1, [pc, #132]	; (80806f8 <calc_gas_resistance_low.isra.0+0xdc>)
 8080672:	f003 fcc3 	bl	8083ffc <__aeabi_fmul>
 8080676:	4921      	ldr	r1, [pc, #132]	; (80806fc <calc_gas_resistance_low.isra.0+0xe0>)
 8080678:	f003 fbb8 	bl	8083dec <__addsf3>
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 808067c:	ab20      	add	r3, sp, #128	; 0x80
 808067e:	eb03 0687 	add.w	r6, r3, r7, lsl #2
    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8080682:	4605      	mov	r5, r0
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8080684:	491e      	ldr	r1, [pc, #120]	; (8080700 <calc_gas_resistance_low.isra.0+0xe4>)
 8080686:	f856 0c80 	ldr.w	r0, [r6, #-128]
 808068a:	f003 fd6b 	bl	8084164 <__aeabi_fdiv>
 808068e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8080692:	f003 fbab 	bl	8083dec <__addsf3>
 8080696:	4601      	mov	r1, r0
 8080698:	4628      	mov	r0, r5
 808069a:	f003 fcaf 	bl	8083ffc <__aeabi_fmul>
 808069e:	4601      	mov	r1, r0
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 80806a0:	4620      	mov	r0, r4
 80806a2:	f003 fd5f 	bl	8084164 <__aeabi_fdiv>
 80806a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80806aa:	f003 fb9f 	bl	8083dec <__addsf3>
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 80806ae:	4914      	ldr	r1, [pc, #80]	; (8080700 <calc_gas_resistance_low.isra.0+0xe4>)
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 80806b0:	4604      	mov	r4, r0
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 80806b2:	f856 0c40 	ldr.w	r0, [r6, #-64]
 80806b6:	f003 fd55 	bl	8084164 <__aeabi_fdiv>
 80806ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80806be:	f003 fb95 	bl	8083dec <__addsf3>
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 80806c2:	4910      	ldr	r1, [pc, #64]	; (8080704 <calc_gas_resistance_low.isra.0+0xe8>)
 80806c4:	f003 fc9a 	bl	8083ffc <__aeabi_fmul>
 80806c8:	4605      	mov	r5, r0
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 80806ca:	2001      	movs	r0, #1
 80806cc:	40b8      	lsls	r0, r7
 80806ce:	f003 fc3d 	bl	8083f4c <__aeabi_ui2f>
 80806d2:	4601      	mov	r1, r0
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 80806d4:	4628      	mov	r0, r5
 80806d6:	f003 fc91 	bl	8083ffc <__aeabi_fmul>
 80806da:	4601      	mov	r1, r0
 80806dc:	4620      	mov	r0, r4
 80806de:	f003 fc8d 	bl	8083ffc <__aeabi_fmul>
 80806e2:	4601      	mov	r1, r0
 80806e4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80806e8:	f003 fd3c 	bl	8084164 <__aeabi_fdiv>
}
 80806ec:	b020      	add	sp, #128	; 0x80
 80806ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80806f2:	bf00      	nop
 80806f4:	080845a4 	.word	0x080845a4
 80806f8:	40a00000 	.word	0x40a00000
 80806fc:	44a78000 	.word	0x44a78000
 8080700:	42c80000 	.word	0x42c80000
 8080704:	340637bd 	.word	0x340637bd

08080708 <bme68x_set_regs>:
{
 8080708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808070c:	461c      	mov	r4, r3
 808070e:	460d      	mov	r5, r1
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8080710:	2100      	movs	r1, #0
{
 8080712:	b087      	sub	sp, #28
 8080714:	4607      	mov	r7, r0
 8080716:	4616      	mov	r6, r2
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8080718:	a802      	add	r0, sp, #8
 808071a:	2210      	movs	r2, #16
 808071c:	9101      	str	r1, [sp, #4]
 808071e:	f003 fe8d 	bl	808443c <memset>
    rslt = null_ptr_check(dev);
 8080722:	4620      	mov	r0, r4
 8080724:	f7ff ff0a 	bl	808053c <null_ptr_check>
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8080728:	bb90      	cbnz	r0, 8080790 <bme68x_set_regs+0x88>
 808072a:	b38f      	cbz	r7, 8080790 <bme68x_set_regs+0x88>
 808072c:	b385      	cbz	r5, 8080790 <bme68x_set_regs+0x88>
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 808072e:	1e73      	subs	r3, r6, #1
 8080730:	2b09      	cmp	r3, #9
 8080732:	d830      	bhi.n	8080796 <bme68x_set_regs+0x8e>
 8080734:	3d01      	subs	r5, #1
 8080736:	f10d 0804 	add.w	r8, sp, #4
 808073a:	eb07 0906 	add.w	r9, r7, r6
            for (index = 0; index < len; index++)
 808073e:	454f      	cmp	r7, r9
 8080740:	d112      	bne.n	8080768 <bme68x_set_regs+0x60>
            if (rslt == BME68X_OK)
 8080742:	b970      	cbnz	r0, 8080762 <bme68x_set_regs+0x5a>
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8080744:	0072      	lsls	r2, r6, #1
 8080746:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8080748:	6863      	ldr	r3, [r4, #4]
 808074a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 808074e:	3a01      	subs	r2, #1
 8080750:	f10d 0105 	add.w	r1, sp, #5
 8080754:	47a8      	blx	r5
                    rslt = BME68X_E_COM_FAIL;
 8080756:	2800      	cmp	r0, #0
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8080758:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
                    rslt = BME68X_E_COM_FAIL;
 808075c:	bf18      	it	ne
 808075e:	f06f 0001 	mvnne.w	r0, #1
}
 8080762:	b007      	add	sp, #28
 8080764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if (dev->intf == BME68X_SPI_INTF)
 8080768:	7b22      	ldrb	r2, [r4, #12]
                    rslt = set_mem_page(reg_addr[index], dev);
 808076a:	783b      	ldrb	r3, [r7, #0]
                if (dev->intf == BME68X_SPI_INTF)
 808076c:	b932      	cbnz	r2, 808077c <bme68x_set_regs+0x74>
                    rslt = set_mem_page(reg_addr[index], dev);
 808076e:	4618      	mov	r0, r3
 8080770:	4621      	mov	r1, r4
 8080772:	f7ff ff05 	bl	8080580 <set_mem_page>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8080776:	783b      	ldrb	r3, [r7, #0]
 8080778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
                    tmp_buff[(2 * index)] = reg_addr[index];
 808077c:	f888 3000 	strb.w	r3, [r8]
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8080780:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8080784:	f108 0802 	add.w	r8, r8, #2
 8080788:	f808 3c01 	strb.w	r3, [r8, #-1]
            for (index = 0; index < len; index++)
 808078c:	3701      	adds	r7, #1
 808078e:	e7d6      	b.n	808073e <bme68x_set_regs+0x36>
        rslt = BME68X_E_NULL_PTR;
 8080790:	f04f 30ff 	mov.w	r0, #4294967295
 8080794:	e7e5      	b.n	8080762 <bme68x_set_regs+0x5a>
            rslt = BME68X_E_INVALID_LENGTH;
 8080796:	f06f 0003 	mvn.w	r0, #3
 808079a:	e7e2      	b.n	8080762 <bme68x_set_regs+0x5a>

0808079c <bme68x_get_regs>:
{
 808079c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80807a0:	4606      	mov	r6, r0
    rslt = null_ptr_check(dev);
 80807a2:	4618      	mov	r0, r3
{
 80807a4:	461d      	mov	r5, r3
    rslt = null_ptr_check(dev);
 80807a6:	f7ff fec9 	bl	808053c <null_ptr_check>
{
 80807aa:	460f      	mov	r7, r1
 80807ac:	4691      	mov	r9, r2
    if ((rslt == BME68X_OK) && reg_data)
 80807ae:	4604      	mov	r4, r0
 80807b0:	b9c8      	cbnz	r0, 80807e6 <bme68x_get_regs+0x4a>
 80807b2:	b1c1      	cbz	r1, 80807e6 <bme68x_get_regs+0x4a>
        if (dev->intf == BME68X_SPI_INTF)
 80807b4:	7b2b      	ldrb	r3, [r5, #12]
 80807b6:	b93b      	cbnz	r3, 80807c8 <bme68x_get_regs+0x2c>
            rslt = set_mem_page(reg_addr, dev);
 80807b8:	4629      	mov	r1, r5
 80807ba:	4630      	mov	r0, r6
 80807bc:	f7ff fee0 	bl	8080580 <set_mem_page>
            if (rslt == BME68X_OK)
 80807c0:	4604      	mov	r4, r0
 80807c2:	b908      	cbnz	r0, 80807c8 <bme68x_get_regs+0x2c>
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 80807c4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80807c8:	4630      	mov	r0, r6
 80807ca:	464a      	mov	r2, r9
 80807cc:	4639      	mov	r1, r7
 80807ce:	686b      	ldr	r3, [r5, #4]
 80807d0:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 80807d2:	47b0      	blx	r6
            rslt = BME68X_E_COM_FAIL;
 80807d4:	2800      	cmp	r0, #0
 80807d6:	bf18      	it	ne
 80807d8:	f06f 0401 	mvnne.w	r4, #1
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80807dc:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
}
 80807e0:	4620      	mov	r0, r4
 80807e2:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
        rslt = BME68X_E_NULL_PTR;
 80807e6:	f04f 34ff 	mov.w	r4, #4294967295
 80807ea:	e7f9      	b.n	80807e0 <bme68x_get_regs+0x44>

080807ec <bme68x_soft_reset>:
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 80807ec:	23e0      	movs	r3, #224	; 0xe0
{
 80807ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 80807f0:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 80807f4:	23b6      	movs	r3, #182	; 0xb6
{
 80807f6:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 80807f8:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
 80807fc:	f7ff fe9e 	bl	808053c <null_ptr_check>
    if (rslt == BME68X_OK)
 8080800:	4604      	mov	r4, r0
 8080802:	b980      	cbnz	r0, 8080826 <bme68x_soft_reset+0x3a>
        if (dev->intf == BME68X_SPI_INTF)
 8080804:	7b2b      	ldrb	r3, [r5, #12]
 8080806:	b18b      	cbz	r3, 808082c <bme68x_soft_reset+0x40>
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8080808:	462b      	mov	r3, r5
 808080a:	f10d 0107 	add.w	r1, sp, #7
 808080e:	2201      	movs	r2, #1
 8080810:	f10d 0006 	add.w	r0, sp, #6
 8080814:	f7ff ff78 	bl	8080708 <bme68x_set_regs>
 8080818:	4604      	mov	r4, r0
            dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 808081a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 808081c:	f242 7010 	movw	r0, #10000	; 0x2710
 8080820:	6869      	ldr	r1, [r5, #4]
 8080822:	4798      	blx	r3
            if (rslt == BME68X_OK)
 8080824:	b14c      	cbz	r4, 808083a <bme68x_soft_reset+0x4e>
}
 8080826:	4620      	mov	r0, r4
 8080828:	b003      	add	sp, #12
 808082a:	bd30      	pop	{r4, r5, pc}
            rslt = get_mem_page(dev);
 808082c:	4628      	mov	r0, r5
 808082e:	f7ff fedb 	bl	80805e8 <get_mem_page>
        if (rslt == BME68X_OK)
 8080832:	4604      	mov	r4, r0
 8080834:	2800      	cmp	r0, #0
 8080836:	d1f6      	bne.n	8080826 <bme68x_soft_reset+0x3a>
 8080838:	e7e6      	b.n	8080808 <bme68x_soft_reset+0x1c>
                if (dev->intf == BME68X_SPI_INTF)
 808083a:	7b2b      	ldrb	r3, [r5, #12]
 808083c:	2b00      	cmp	r3, #0
 808083e:	d1f2      	bne.n	8080826 <bme68x_soft_reset+0x3a>
                    rslt = get_mem_page(dev);
 8080840:	4628      	mov	r0, r5
 8080842:	f7ff fed1 	bl	80805e8 <get_mem_page>
 8080846:	4604      	mov	r4, r0
 8080848:	e7ed      	b.n	8080826 <bme68x_soft_reset+0x3a>

0808084a <bme68x_init>:
{
 808084a:	b510      	push	{r4, lr}
 808084c:	b08c      	sub	sp, #48	; 0x30
 808084e:	4604      	mov	r4, r0
    rslt = bme68x_soft_reset(dev);
 8080850:	f7ff ffcc 	bl	80807ec <bme68x_soft_reset>
    if (rslt == BME68X_OK)
 8080854:	4603      	mov	r3, r0
 8080856:	2800      	cmp	r0, #0
 8080858:	f040 809b 	bne.w	8080992 <bme68x_init+0x148>
        rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 808085c:	4623      	mov	r3, r4
 808085e:	2201      	movs	r2, #1
 8080860:	4621      	mov	r1, r4
 8080862:	20d0      	movs	r0, #208	; 0xd0
 8080864:	f7ff ff9a 	bl	808079c <bme68x_get_regs>
        if (rslt == BME68X_OK)
 8080868:	4603      	mov	r3, r0
 808086a:	2800      	cmp	r0, #0
 808086c:	f040 8091 	bne.w	8080992 <bme68x_init+0x148>
            if (dev->chip_id == BME68X_CHIP_ID)
 8080870:	7822      	ldrb	r2, [r4, #0]
 8080872:	2a61      	cmp	r2, #97	; 0x61
 8080874:	f040 8090 	bne.w	8080998 <bme68x_init+0x14e>
{
    int8_t rslt;
    uint8_t reg_data = 0;

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8080878:	4623      	mov	r3, r4
    uint8_t reg_data = 0;
 808087a:	f88d 0004 	strb.w	r0, [sp, #4]
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 808087e:	2201      	movs	r2, #1
 8080880:	20f0      	movs	r0, #240	; 0xf0
 8080882:	a901      	add	r1, sp, #4
 8080884:	f7ff ff8a 	bl	808079c <bme68x_get_regs>

    if (rslt == BME68X_OK)
 8080888:	4603      	mov	r3, r0
 808088a:	2800      	cmp	r0, #0
 808088c:	f040 8081 	bne.w	8080992 <bme68x_init+0x148>
    {
        dev->variant_id = reg_data;
 8080890:	f89d 3004 	ldrb.w	r3, [sp, #4]
    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8080894:	2217      	movs	r2, #23
        dev->variant_id = reg_data;
 8080896:	60a3      	str	r3, [r4, #8]
    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8080898:	208a      	movs	r0, #138	; 0x8a
 808089a:	4623      	mov	r3, r4
 808089c:	a901      	add	r1, sp, #4
 808089e:	f7ff ff7d 	bl	808079c <bme68x_get_regs>
    if (rslt == BME68X_OK)
 80808a2:	4603      	mov	r3, r0
 80808a4:	2800      	cmp	r0, #0
 80808a6:	d174      	bne.n	8080992 <bme68x_init+0x148>
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 80808a8:	4623      	mov	r3, r4
 80808aa:	220e      	movs	r2, #14
 80808ac:	20e1      	movs	r0, #225	; 0xe1
 80808ae:	f10d 011b 	add.w	r1, sp, #27
 80808b2:	f7ff ff73 	bl	808079c <bme68x_get_regs>
    if (rslt == BME68X_OK)
 80808b6:	4603      	mov	r3, r0
 80808b8:	2800      	cmp	r0, #0
 80808ba:	d16a      	bne.n	8080992 <bme68x_init+0x148>
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 80808bc:	4623      	mov	r3, r4
 80808be:	2205      	movs	r2, #5
 80808c0:	f10d 0129 	add.w	r1, sp, #41	; 0x29
 80808c4:	f7ff ff6a 	bl	808079c <bme68x_get_regs>
    if (rslt == BME68X_OK)
 80808c8:	4603      	mov	r3, r0
 80808ca:	2800      	cmp	r0, #0
 80808cc:	d161      	bne.n	8080992 <bme68x_init+0x148>
        dev->calib.par_t1 =
 80808ce:	f8bd 2023 	ldrh.w	r2, [sp, #35]	; 0x23
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 80808d2:	f89d 001d 	ldrb.w	r0, [sp, #29]
        dev->calib.par_t1 =
 80808d6:	83e2      	strh	r2, [r4, #30]
        dev->calib.par_t2 =
 80808d8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80808dc:	8422      	strh	r2, [r4, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 80808de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80808e2:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
        dev->calib.par_p1 =
 80808e6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80808ea:	84a2      	strh	r2, [r4, #36]	; 0x24
        dev->calib.par_p2 =
 80808ec:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80808f0:	84e2      	strh	r2, [r4, #38]	; 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 80808f2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80808f6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        dev->calib.par_p4 =
 80808fa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80808fe:	8562      	strh	r2, [r4, #42]	; 0x2a
        dev->calib.par_p5 =
 8080900:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8080904:	85a2      	strh	r2, [r4, #44]	; 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8080906:	f89d 2013 	ldrb.w	r2, [sp, #19]
 808090a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 808090e:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8080912:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
        dev->calib.par_p8 =
 8080916:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 808091a:	8622      	strh	r2, [r4, #48]	; 0x30
        dev->calib.par_p9 =
 808091c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8080920:	8662      	strh	r2, [r4, #50]	; 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8080922:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8080926:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 808092a:	f89d 201c 	ldrb.w	r2, [sp, #28]
 808092e:	f002 010f 	and.w	r1, r2, #15
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8080932:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
        dev->calib.par_h1 =
 8080936:	8221      	strh	r1, [r4, #16]
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8080938:	f89d 101b 	ldrb.w	r1, [sp, #27]
 808093c:	0912      	lsrs	r2, r2, #4
 808093e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
        dev->calib.par_h2 =
 8080942:	8262      	strh	r2, [r4, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8080944:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8080948:	7522      	strb	r2, [r4, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 808094a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 808094e:	7562      	strb	r2, [r4, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8080950:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8080954:	75a2      	strb	r2, [r4, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8080956:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 808095a:	75e2      	strb	r2, [r4, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 808095c:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
 8080960:	7622      	strb	r2, [r4, #24]
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8080962:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8080966:	7662      	strb	r2, [r4, #25]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8080968:	f8bd 2025 	ldrh.w	r2, [sp, #37]	; 0x25
        dev->calib.par_gh2 =
 808096c:	8362      	strh	r2, [r4, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 808096e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8080972:	7722      	strb	r2, [r4, #28]
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8080974:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 8080978:	f3c2 1201 	ubfx	r2, r2, #4, #2
 808097c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8080980:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8080984:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8080988:	f99d 202d 	ldrsb.w	r2, [sp, #45]	; 0x2d
 808098c:	1112      	asrs	r2, r2, #4
 808098e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
}
 8080992:	4618      	mov	r0, r3
 8080994:	b00c      	add	sp, #48	; 0x30
 8080996:	bd10      	pop	{r4, pc}
                rslt = BME68X_E_DEV_NOT_FOUND;
 8080998:	f06f 0302 	mvn.w	r3, #2
 808099c:	e7f9      	b.n	8080992 <bme68x_init+0x148>

0808099e <bme68x_set_op_mode>:
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 808099e:	2374      	movs	r3, #116	; 0x74
{
 80809a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80809a2:	4606      	mov	r6, r0
 80809a4:	460d      	mov	r5, r1
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 80809a6:	f88d 3007 	strb.w	r3, [sp, #7]
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 80809aa:	462b      	mov	r3, r5
 80809ac:	2201      	movs	r2, #1
 80809ae:	2074      	movs	r0, #116	; 0x74
 80809b0:	f10d 0106 	add.w	r1, sp, #6
 80809b4:	f7ff fef2 	bl	808079c <bme68x_get_regs>
        if (rslt == BME68X_OK)
 80809b8:	4604      	mov	r4, r0
 80809ba:	b9b8      	cbnz	r0, 80809ec <bme68x_set_op_mode+0x4e>
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80809bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
            if (pow_mode != BME68X_SLEEP_MODE)
 80809c0:	0793      	lsls	r3, r2, #30
 80809c2:	d016      	beq.n	80809f2 <bme68x_set_op_mode+0x54>
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80809c4:	f022 0203 	bic.w	r2, r2, #3
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80809c8:	462b      	mov	r3, r5
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80809ca:	f88d 2006 	strb.w	r2, [sp, #6]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80809ce:	f10d 0106 	add.w	r1, sp, #6
 80809d2:	2201      	movs	r2, #1
 80809d4:	f10d 0007 	add.w	r0, sp, #7
 80809d8:	f7ff fe96 	bl	8080708 <bme68x_set_regs>
 80809dc:	4604      	mov	r4, r0
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80809de:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80809e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80809e4:	6869      	ldr	r1, [r5, #4]
 80809e6:	4798      	blx	r3
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 80809e8:	2c00      	cmp	r4, #0
 80809ea:	d0de      	beq.n	80809aa <bme68x_set_op_mode+0xc>
}
 80809ec:	4620      	mov	r0, r4
 80809ee:	b002      	add	sp, #8
 80809f0:	bd70      	pop	{r4, r5, r6, pc}
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 80809f2:	2e00      	cmp	r6, #0
 80809f4:	d0fa      	beq.n	80809ec <bme68x_set_op_mode+0x4e>
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 80809f6:	f022 0203 	bic.w	r2, r2, #3
 80809fa:	f006 0603 	and.w	r6, r6, #3
 80809fe:	4332      	orrs	r2, r6
 8080a00:	f88d 2006 	strb.w	r2, [sp, #6]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8080a04:	462b      	mov	r3, r5
 8080a06:	2201      	movs	r2, #1
 8080a08:	f10d 0106 	add.w	r1, sp, #6
 8080a0c:	f10d 0007 	add.w	r0, sp, #7
 8080a10:	f7ff fe7a 	bl	8080708 <bme68x_set_regs>
 8080a14:	4604      	mov	r4, r0
 8080a16:	e7e9      	b.n	80809ec <bme68x_set_op_mode+0x4e>

08080a18 <bme68x_get_op_mode>:
{
 8080a18:	b513      	push	{r0, r1, r4, lr}
 8080a1a:	460b      	mov	r3, r1
    if (op_mode)
 8080a1c:	4604      	mov	r4, r0
 8080a1e:	b160      	cbz	r0, 8080a3a <bme68x_get_op_mode+0x22>
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8080a20:	2201      	movs	r2, #1
 8080a22:	2074      	movs	r0, #116	; 0x74
 8080a24:	f10d 0107 	add.w	r1, sp, #7
 8080a28:	f7ff feb8 	bl	808079c <bme68x_get_regs>
        *op_mode = mode & BME68X_MODE_MSK;
 8080a2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080a30:	f003 0303 	and.w	r3, r3, #3
 8080a34:	7023      	strb	r3, [r4, #0]
}
 8080a36:	b002      	add	sp, #8
 8080a38:	bd10      	pop	{r4, pc}
        rslt = BME68X_E_NULL_PTR;
 8080a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8080a3e:	e7fa      	b.n	8080a36 <bme68x_get_op_mode+0x1e>

08080a40 <bme68x_set_conf>:
{
 8080a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8080a42:	4b4d      	ldr	r3, [pc, #308]	; (8080b78 <bme68x_set_conf+0x138>)
{
 8080a44:	4606      	mov	r6, r0
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8080a46:	6818      	ldr	r0, [r3, #0]
 8080a48:	791b      	ldrb	r3, [r3, #4]
{
 8080a4a:	b087      	sub	sp, #28
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8080a4c:	f88d 300c 	strb.w	r3, [sp, #12]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8080a50:	2300      	movs	r3, #0
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8080a52:	9002      	str	r0, [sp, #8]
    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8080a54:	f10d 0007 	add.w	r0, sp, #7
{
 8080a58:	460d      	mov	r5, r1
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8080a5a:	9304      	str	r3, [sp, #16]
 8080a5c:	f88d 3014 	strb.w	r3, [sp, #20]
    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8080a60:	f7ff ffda 	bl	8080a18 <bme68x_get_op_mode>
    if (rslt == BME68X_OK)
 8080a64:	4604      	mov	r4, r0
 8080a66:	2800      	cmp	r0, #0
 8080a68:	f040 8083 	bne.w	8080b72 <bme68x_set_conf+0x132>
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8080a6c:	4629      	mov	r1, r5
 8080a6e:	f7ff ff96 	bl	808099e <bme68x_set_op_mode>
 8080a72:	4607      	mov	r7, r0
 8080a74:	4604      	mov	r4, r0
    if (conf == NULL)
 8080a76:	b966      	cbnz	r6, 8080a92 <bme68x_set_conf+0x52>
        rslt = BME68X_E_NULL_PTR;
 8080a78:	f04f 34ff 	mov.w	r4, #4294967295
    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8080a7c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8080a80:	b120      	cbz	r0, 8080a8c <bme68x_set_conf+0x4c>
 8080a82:	b91c      	cbnz	r4, 8080a8c <bme68x_set_conf+0x4c>
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8080a84:	4629      	mov	r1, r5
 8080a86:	f7ff ff8a 	bl	808099e <bme68x_set_op_mode>
 8080a8a:	4604      	mov	r4, r0
}
 8080a8c:	4620      	mov	r0, r4
 8080a8e:	b007      	add	sp, #28
 8080a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (rslt == BME68X_OK)
 8080a92:	2800      	cmp	r0, #0
 8080a94:	d1f2      	bne.n	8080a7c <bme68x_set_conf+0x3c>
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8080a96:	462b      	mov	r3, r5
 8080a98:	2205      	movs	r2, #5
 8080a9a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8080a9e:	a904      	add	r1, sp, #16
 8080aa0:	f7ff fe7c 	bl	808079c <bme68x_get_regs>
        dev->info_msg = BME68X_OK;
 8080aa4:	f885 704d 	strb.w	r7, [r5, #77]	; 0x4d
        if (rslt == BME68X_OK)
 8080aa8:	4604      	mov	r4, r0
 8080aaa:	2800      	cmp	r0, #0
 8080aac:	d1e6      	bne.n	8080a7c <bme68x_set_conf+0x3c>
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8080aae:	462a      	mov	r2, r5
 8080ab0:	2107      	movs	r1, #7
 8080ab2:	1cf0      	adds	r0, r6, #3
 8080ab4:	f7ff fd50 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080ab8:	4604      	mov	r4, r0
 8080aba:	2800      	cmp	r0, #0
 8080abc:	d1de      	bne.n	8080a7c <bme68x_set_conf+0x3c>
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8080abe:	2105      	movs	r1, #5
 8080ac0:	1c70      	adds	r0, r6, #1
 8080ac2:	f7ff fd49 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080ac6:	4604      	mov	r4, r0
 8080ac8:	2800      	cmp	r0, #0
 8080aca:	d1d7      	bne.n	8080a7c <bme68x_set_conf+0x3c>
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8080acc:	1cb0      	adds	r0, r6, #2
 8080ace:	f7ff fd43 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080ad2:	4604      	mov	r4, r0
 8080ad4:	2800      	cmp	r0, #0
 8080ad6:	d1d1      	bne.n	8080a7c <bme68x_set_conf+0x3c>
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8080ad8:	4630      	mov	r0, r6
 8080ada:	f7ff fd3d 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080ade:	4604      	mov	r4, r0
 8080ae0:	2800      	cmp	r0, #0
 8080ae2:	d1cb      	bne.n	8080a7c <bme68x_set_conf+0x3c>
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8080ae4:	2108      	movs	r1, #8
 8080ae6:	1d30      	adds	r0, r6, #4
 8080ae8:	f7ff fd36 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080aec:	4604      	mov	r4, r0
 8080aee:	2800      	cmp	r0, #0
 8080af0:	d1c4      	bne.n	8080a7c <bme68x_set_conf+0x3c>
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8080af2:	78f3      	ldrb	r3, [r6, #3]
 8080af4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8080af8:	009b      	lsls	r3, r3, #2
 8080afa:	f022 021c 	bic.w	r2, r2, #28
 8080afe:	f003 031c 	and.w	r3, r3, #28
 8080b02:	4313      	orrs	r3, r2
 8080b04:	b25a      	sxtb	r2, r3
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8080b06:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8080b0a:	7871      	ldrb	r1, [r6, #1]
 8080b0c:	f003 031f 	and.w	r3, r3, #31
 8080b10:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8080b14:	78b1      	ldrb	r1, [r6, #2]
 8080b16:	f023 031c 	bic.w	r3, r3, #28
 8080b1a:	0089      	lsls	r1, r1, #2
 8080b1c:	f001 011c 	and.w	r1, r1, #28
 8080b20:	430b      	orrs	r3, r1
 8080b22:	f88d 3013 	strb.w	r3, [sp, #19]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8080b26:	7831      	ldrb	r1, [r6, #0]
 8080b28:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8080b2c:	f001 0107 	and.w	r1, r1, #7
 8080b30:	f023 0307 	bic.w	r3, r3, #7
 8080b34:	430b      	orrs	r3, r1
            if (conf->odr != BME68X_ODR_NONE)
 8080b36:	7931      	ldrb	r1, [r6, #4]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8080b38:	f88d 3011 	strb.w	r3, [sp, #17]
            if (conf->odr != BME68X_ODR_NONE)
 8080b3c:	2908      	cmp	r1, #8
                odr3 = 0;
 8080b3e:	bf12      	itee	ne
 8080b40:	2000      	movne	r0, #0
    uint8_t odr20 = 0, odr3 = 1;
 8080b42:	2001      	moveq	r0, #1
 8080b44:	2100      	moveq	r1, #0
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8080b46:	f89d 3010 	ldrb.w	r3, [sp, #16]
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8080b4a:	f002 021f 	and.w	r2, r2, #31
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8080b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8080b52:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8080b56:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8080b5a:	f88d 2014 	strb.w	r2, [sp, #20]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8080b5e:	f88d 3010 	strb.w	r3, [sp, #16]
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8080b62:	2205      	movs	r2, #5
 8080b64:	462b      	mov	r3, r5
 8080b66:	a904      	add	r1, sp, #16
 8080b68:	a802      	add	r0, sp, #8
 8080b6a:	f7ff fdcd 	bl	8080708 <bme68x_set_regs>
 8080b6e:	4604      	mov	r4, r0
 8080b70:	e784      	b.n	8080a7c <bme68x_set_conf+0x3c>
    if (conf == NULL)
 8080b72:	2e00      	cmp	r6, #0
 8080b74:	d182      	bne.n	8080a7c <bme68x_set_conf+0x3c>
 8080b76:	e77f      	b.n	8080a78 <bme68x_set_conf+0x38>
 8080b78:	0808459c 	.word	0x0808459c

08080b7c <bme68x_get_meas_dur>:
{
 8080b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8080b7e:	4b1d      	ldr	r3, [pc, #116]	; (8080bf4 <bme68x_get_meas_dur+0x78>)
{
 8080b80:	4605      	mov	r5, r0
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8080b82:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8080b86:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
    if (conf != NULL)
 8080b8a:	460c      	mov	r4, r1
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8080b8c:	9000      	str	r0, [sp, #0]
 8080b8e:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (conf != NULL)
 8080b92:	b911      	cbnz	r1, 8080b9a <bme68x_get_meas_dur+0x1e>
    uint32_t meas_dur = 0; /* Calculate in us */
 8080b94:	2000      	movs	r0, #0
}
 8080b96:	b003      	add	sp, #12
 8080b98:	bd30      	pop	{r4, r5, pc}
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8080b9a:	2105      	movs	r1, #5
 8080b9c:	1c60      	adds	r0, r4, #1
 8080b9e:	f7ff fcdb 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080ba2:	2800      	cmp	r0, #0
 8080ba4:	d1f6      	bne.n	8080b94 <bme68x_get_meas_dur+0x18>
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8080ba6:	1ca0      	adds	r0, r4, #2
 8080ba8:	f7ff fcd6 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080bac:	2800      	cmp	r0, #0
 8080bae:	d1f1      	bne.n	8080b94 <bme68x_get_meas_dur+0x18>
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8080bb0:	4620      	mov	r0, r4
 8080bb2:	f7ff fcd1 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080bb6:	2800      	cmp	r0, #0
 8080bb8:	d1ec      	bne.n	8080b94 <bme68x_get_meas_dur+0x18>
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8080bba:	7863      	ldrb	r3, [r4, #1]
 8080bbc:	aa02      	add	r2, sp, #8
 8080bbe:	4413      	add	r3, r2
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8080bc0:	78a2      	ldrb	r2, [r4, #2]
 8080bc2:	a902      	add	r1, sp, #8
 8080bc4:	440a      	add	r2, r1
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8080bc6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8080bca:	f812 0c08 	ldrb.w	r0, [r2, #-8]
            if (op_mode != BME68X_PARALLEL_MODE)
 8080bce:	2d02      	cmp	r5, #2
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8080bd0:	4418      	add	r0, r3
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8080bd2:	7823      	ldrb	r3, [r4, #0]
 8080bd4:	440b      	add	r3, r1
 8080bd6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8080bda:	4403      	add	r3, r0
            meas_dur = meas_cycles * UINT32_C(1963);
 8080bdc:	f240 70ab 	movw	r0, #1963	; 0x7ab
 8080be0:	fb03 f000 	mul.w	r0, r3, r0
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8080be4:	bf0b      	itete	eq
 8080be6:	f500 5086 	addeq.w	r0, r0, #4288	; 0x10c0
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8080bea:	f500 50a5 	addne.w	r0, r0, #5280	; 0x14a0
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8080bee:	3005      	addeq	r0, #5
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8080bf0:	300d      	addne	r0, #13
    return meas_dur;
 8080bf2:	e7d0      	b.n	8080b96 <bme68x_get_meas_dur+0x1a>
 8080bf4:	080845a4 	.word	0x080845a4

08080bf8 <bme68x_get_data>:
{
 8080bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080bfc:	b0b5      	sub	sp, #212	; 0xd4
 8080bfe:	461d      	mov	r5, r3
    struct bme68x_data field_data[3] = { { 0 } };
 8080c00:	ab22      	add	r3, sp, #136	; 0x88
{
 8080c02:	9201      	str	r2, [sp, #4]
 8080c04:	4604      	mov	r4, r0
 8080c06:	460e      	mov	r6, r1
    struct bme68x_data field_data[3] = { { 0 } };
 8080c08:	4618      	mov	r0, r3
 8080c0a:	2248      	movs	r2, #72	; 0x48
 8080c0c:	2100      	movs	r1, #0
 8080c0e:	f003 fc15 	bl	808443c <memset>
    field_ptr[1] = &field_data[1];
 8080c12:	ab28      	add	r3, sp, #160	; 0xa0
    field_ptr[0] = &field_data[0];
 8080c14:	900a      	str	r0, [sp, #40]	; 0x28
    field_ptr[1] = &field_data[1];
 8080c16:	930b      	str	r3, [sp, #44]	; 0x2c
    rslt = null_ptr_check(dev);
 8080c18:	4628      	mov	r0, r5
    field_ptr[2] = &field_data[2];
 8080c1a:	ab2e      	add	r3, sp, #184	; 0xb8
 8080c1c:	930c      	str	r3, [sp, #48]	; 0x30
    rslt = null_ptr_check(dev);
 8080c1e:	f7ff fc8d 	bl	808053c <null_ptr_check>
    if ((rslt == BME68X_OK) && (data != NULL))
 8080c22:	4607      	mov	r7, r0
 8080c24:	b128      	cbz	r0, 8080c32 <bme68x_get_data+0x3a>
        rslt = BME68X_E_NULL_PTR;
 8080c26:	f04f 34ff 	mov.w	r4, #4294967295
}
 8080c2a:	4620      	mov	r0, r4
 8080c2c:	b035      	add	sp, #212	; 0xd4
 8080c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((rslt == BME68X_OK) && (data != NULL))
 8080c32:	2e00      	cmp	r6, #0
 8080c34:	d0f7      	beq.n	8080c26 <bme68x_get_data+0x2e>
        if (op_mode == BME68X_FORCED_MODE)
 8080c36:	2c01      	cmp	r4, #1
 8080c38:	f040 80d8 	bne.w	8080dec <bme68x_get_data+0x1f4>
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8080c3c:	4601      	mov	r1, r0
 8080c3e:	9015      	str	r0, [sp, #84]	; 0x54
 8080c40:	220d      	movs	r2, #13
 8080c42:	a816      	add	r0, sp, #88	; 0x58
 8080c44:	f003 fbfa 	bl	808443c <memset>
 8080c48:	2705      	movs	r7, #5
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8080c4a:	462b      	mov	r3, r5
 8080c4c:	2211      	movs	r2, #17
 8080c4e:	201d      	movs	r0, #29
 8080c50:	a915      	add	r1, sp, #84	; 0x54
 8080c52:	f7ff fda3 	bl	808079c <bme68x_get_regs>
        data->meas_index = buff[1];
 8080c56:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8080c5a:	4604      	mov	r4, r0
        data->meas_index = buff[1];
 8080c5c:	70b2      	strb	r2, [r6, #2]
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8080c5e:	f89d 2056 	ldrb.w	r2, [sp, #86]	; 0x56
        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8080c62:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8080c66:	9202      	str	r2, [sp, #8]
 8080c68:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8080c6c:	f000 0380 	and.w	r3, r0, #128	; 0x80
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8080c70:	9203      	str	r2, [sp, #12]
 8080c72:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8080c76:	f000 000f 	and.w	r0, r0, #15
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8080c7a:	9204      	str	r2, [sp, #16]
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8080c7c:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8080c80:	7033      	strb	r3, [r6, #0]
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8080c82:	9205      	str	r2, [sp, #20]
 8080c84:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8080c88:	7070      	strb	r0, [r6, #1]
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8080c8a:	9206      	str	r2, [sp, #24]
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8080c8c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8080c90:	f89d a062 	ldrb.w	sl, [sp, #98]	; 0x62
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8080c94:	9207      	str	r2, [sp, #28]
 8080c96:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8080c9a:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8080c9e:	9208      	str	r2, [sp, #32]
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8080ca0:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8080ca4:	f89d 905b 	ldrb.w	r9, [sp, #91]	; 0x5b
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8080ca8:	9209      	str	r2, [sp, #36]	; 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8080caa:	68aa      	ldr	r2, [r5, #8]
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8080cac:	f89d b063 	ldrb.w	fp, [sp, #99]	; 0x63
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8080cb0:	2a01      	cmp	r2, #1
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8080cb2:	bf13      	iteet	ne
 8080cb4:	f00a 0220 	andne.w	r2, sl, #32
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8080cb8:	f008 0220 	andeq.w	r2, r8, #32
 8080cbc:	431a      	orreq	r2, r3
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8080cbe:	4313      	orrne	r3, r2
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8080cc0:	bf0c      	ite	eq
 8080cc2:	f008 0310 	andeq.w	r3, r8, #16
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8080cc6:	f00a 0210 	andne.w	r2, sl, #16
 8080cca:	4313      	orrs	r3, r2
 8080ccc:	7033      	strb	r3, [r6, #0]
        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8080cce:	061b      	lsls	r3, r3, #24
 8080cd0:	d575      	bpl.n	8080dbe <bme68x_get_data+0x1c6>
 8080cd2:	2c00      	cmp	r4, #0
 8080cd4:	d179      	bne.n	8080dca <bme68x_get_data+0x1d2>
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8080cd6:	462b      	mov	r3, r5
 8080cd8:	2201      	movs	r2, #1
 8080cda:	1cf1      	adds	r1, r6, #3
 8080cdc:	305a      	adds	r0, #90	; 0x5a
 8080cde:	f7ff fd5d 	bl	808079c <bme68x_get_regs>
            if (rslt == BME68X_OK)
 8080ce2:	4604      	mov	r4, r0
 8080ce4:	2800      	cmp	r0, #0
 8080ce6:	d170      	bne.n	8080dca <bme68x_get_data+0x1d2>
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8080ce8:	7870      	ldrb	r0, [r6, #1]
 8080cea:	462b      	mov	r3, r5
 8080cec:	3050      	adds	r0, #80	; 0x50
 8080cee:	2201      	movs	r2, #1
 8080cf0:	1d31      	adds	r1, r6, #4
 8080cf2:	b2c0      	uxtb	r0, r0
 8080cf4:	f7ff fd52 	bl	808079c <bme68x_get_regs>
            if (rslt == BME68X_OK)
 8080cf8:	4604      	mov	r4, r0
 8080cfa:	2800      	cmp	r0, #0
 8080cfc:	d165      	bne.n	8080dca <bme68x_get_data+0x1d2>
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8080cfe:	7870      	ldrb	r0, [r6, #1]
 8080d00:	462b      	mov	r3, r5
 8080d02:	3064      	adds	r0, #100	; 0x64
 8080d04:	2201      	movs	r2, #1
 8080d06:	1d71      	adds	r1, r6, #5
 8080d08:	b2c0      	uxtb	r0, r0
 8080d0a:	f7ff fd47 	bl	808079c <bme68x_get_regs>
            if (rslt == BME68X_OK)
 8080d0e:	4604      	mov	r4, r0
 8080d10:	2800      	cmp	r0, #0
 8080d12:	d15a      	bne.n	8080dca <bme68x_get_data+0x1d2>
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8080d14:	9b06      	ldr	r3, [sp, #24]
 8080d16:	ea4f 1019 	mov.w	r0, r9, lsr #4
 8080d1a:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
                data->temperature = calc_temperature(adc_temp, dev);
 8080d1e:	9b05      	ldr	r3, [sp, #20]
 8080d20:	4629      	mov	r1, r5
 8080d22:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
 8080d26:	f7ff f9c5 	bl	80800b4 <calc_temperature>
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8080d2a:	9b04      	ldr	r3, [sp, #16]
                data->temperature = calc_temperature(adc_temp, dev);
 8080d2c:	60b0      	str	r0, [r6, #8]
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8080d2e:	0918      	lsrs	r0, r3, #4
 8080d30:	9b03      	ldr	r3, [sp, #12]
                data->pressure = calc_pressure(adc_pres, dev);
 8080d32:	4629      	mov	r1, r5
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8080d34:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
                data->pressure = calc_pressure(adc_pres, dev);
 8080d38:	9b02      	ldr	r3, [sp, #8]
 8080d3a:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
 8080d3e:	f7ff fa07 	bl	8080150 <calc_pressure>
                data->humidity = calc_humidity(adc_hum, dev);
 8080d42:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
                data->pressure = calc_pressure(adc_pres, dev);
 8080d46:	60f0      	str	r0, [r6, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 8080d48:	4629      	mov	r1, r5
 8080d4a:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
 8080d4e:	f7ff fadf 	bl	8080310 <calc_humidity>
 8080d52:	6130      	str	r0, [r6, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8080d54:	68ab      	ldr	r3, [r5, #8]
 8080d56:	2b01      	cmp	r3, #1
 8080d58:	d125      	bne.n	8080da6 <bme68x_get_data+0x1ae>
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8080d5a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8080d5e:	ea4f 1398 	mov.w	r3, r8, lsr #6
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8080d62:	f008 080f 	and.w	r8, r8, #15
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8080d66:	fa20 f008 	lsr.w	r0, r0, r8
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8080d6a:	ea43 0b8b 	orr.w	fp, r3, fp, lsl #2
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8080d6e:	f003 f8ed 	bl	8083f4c <__aeabi_ui2f>
 8080d72:	49b3      	ldr	r1, [pc, #716]	; (8081040 <bme68x_get_data+0x448>)
 8080d74:	f003 f942 	bl	8083ffc <__aeabi_fmul>
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8080d78:	f5ab 7b00 	sub.w	fp, fp, #512	; 0x200
    var2 *= INT32_C(3);
 8080d7c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8080d80:	4604      	mov	r4, r0
 8080d82:	f50b 5080 	add.w	r0, fp, #4096	; 0x1000
 8080d86:	f003 f8e5 	bl	8083f54 <__aeabi_i2f>
 8080d8a:	4601      	mov	r1, r0
 8080d8c:	4620      	mov	r0, r4
 8080d8e:	f003 f9e9 	bl	8084164 <__aeabi_fdiv>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8080d92:	6170      	str	r0, [r6, #20]
                if (data->status & BME68X_NEW_DATA_MSK)
 8080d94:	f996 3000 	ldrsb.w	r3, [r6]
                    new_fields = 0;
 8080d98:	2b00      	cmp	r3, #0
 8080d9a:	bfb5      	itete	lt
 8080d9c:	2701      	movlt	r7, #1
 8080d9e:	2700      	movge	r7, #0
 8080da0:	2400      	movlt	r4, #0
 8080da2:	2402      	movge	r4, #2
 8080da4:	e01c      	b.n	8080de0 <bme68x_get_data+0x1e8>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8080da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8080da8:	ea4f 109a 	mov.w	r0, sl, lsr #6
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8080dac:	f995 203e 	ldrsb.w	r2, [r5, #62]	; 0x3e
 8080db0:	f00a 010f 	and.w	r1, sl, #15
 8080db4:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
 8080db8:	f7ff fc30 	bl	808061c <calc_gas_resistance_low.isra.0>
 8080dbc:	e7e9      	b.n	8080d92 <bme68x_get_data+0x19a>
        if (rslt == BME68X_OK)
 8080dbe:	b924      	cbnz	r4, 8080dca <bme68x_get_data+0x1d2>
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8080dc0:	f242 7010 	movw	r0, #10000	; 0x2710
 8080dc4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8080dc6:	6869      	ldr	r1, [r5, #4]
 8080dc8:	4798      	blx	r3
    while ((tries) && (rslt == BME68X_OK))
 8080dca:	3f01      	subs	r7, #1
 8080dcc:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8080dd0:	d004      	beq.n	8080ddc <bme68x_get_data+0x1e4>
 8080dd2:	2c00      	cmp	r4, #0
 8080dd4:	f43f af39 	beq.w	8080c4a <bme68x_get_data+0x52>
    uint8_t i = 0, j = 0, new_fields = 0;
 8080dd8:	2700      	movs	r7, #0
 8080dda:	e001      	b.n	8080de0 <bme68x_get_data+0x1e8>
            if (rslt == BME68X_OK)
 8080ddc:	2c00      	cmp	r4, #0
 8080dde:	d0d9      	beq.n	8080d94 <bme68x_get_data+0x19c>
        if (n_data == NULL)
 8080de0:	9b01      	ldr	r3, [sp, #4]
 8080de2:	2b00      	cmp	r3, #0
 8080de4:	f43f af1f 	beq.w	8080c26 <bme68x_get_data+0x2e>
            *n_data = new_fields;
 8080de8:	701f      	strb	r7, [r3, #0]
    return rslt;
 8080dea:	e71e      	b.n	8080c2a <bme68x_get_data+0x32>
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8080dec:	3c02      	subs	r4, #2
 8080dee:	2c01      	cmp	r4, #1
 8080df0:	f200 8123 	bhi.w	808103a <bme68x_get_data+0x442>
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8080df4:	4601      	mov	r1, r0
 8080df6:	222f      	movs	r2, #47	; 0x2f
 8080df8:	9015      	str	r0, [sp, #84]	; 0x54
 8080dfa:	a816      	add	r0, sp, #88	; 0x58
 8080dfc:	f003 fb1e 	bl	808443c <memset>
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8080e00:	221a      	movs	r2, #26
 8080e02:	4639      	mov	r1, r7
 8080e04:	a80e      	add	r0, sp, #56	; 0x38
 8080e06:	970d      	str	r7, [sp, #52]	; 0x34
 8080e08:	f003 fb18 	bl	808443c <memset>
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 8080e0c:	462b      	mov	r3, r5
 8080e0e:	2233      	movs	r2, #51	; 0x33
 8080e10:	201d      	movs	r0, #29
 8080e12:	a915      	add	r1, sp, #84	; 0x54
 8080e14:	f7ff fcc2 	bl	808079c <bme68x_get_regs>
 8080e18:	4604      	mov	r4, r0
 8080e1a:	4682      	mov	sl, r0
    if (rslt == BME68X_OK)
 8080e1c:	2800      	cmp	r0, #0
 8080e1e:	f040 809d 	bne.w	8080f5c <bme68x_get_data+0x364>
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8080e22:	462b      	mov	r3, r5
 8080e24:	221e      	movs	r2, #30
 8080e26:	2050      	movs	r0, #80	; 0x50
 8080e28:	a90d      	add	r1, sp, #52	; 0x34
 8080e2a:	f7ff fcb7 	bl	808079c <bme68x_get_regs>
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8080e2e:	af15      	add	r7, sp, #84	; 0x54
 8080e30:	4604      	mov	r4, r0
 8080e32:	2800      	cmp	r0, #0
 8080e34:	f040 8092 	bne.w	8080f5c <bme68x_get_data+0x364>
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8080e38:	ab0a      	add	r3, sp, #40	; 0x28
 8080e3a:	f853 802a 	ldr.w	r8, [r3, sl, lsl #2]
        data[i]->meas_index = buff[off + 1];
 8080e3e:	787b      	ldrb	r3, [r7, #1]
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8080e40:	f897 9003 	ldrb.w	r9, [r7, #3]
        data[i]->meas_index = buff[off + 1];
 8080e44:	f888 3002 	strb.w	r3, [r8, #2]
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8080e48:	78bb      	ldrb	r3, [r7, #2]
 8080e4a:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8080e4e:	ea49 3903 	orr.w	r9, r9, r3, lsl #12
                        ((uint32_t) buff[off + 4] / 16));
 8080e52:	793b      	ldrb	r3, [r7, #4]
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8080e54:	79b8      	ldrb	r0, [r7, #6]
        adc_pres =
 8080e56:	ea49 1913 	orr.w	r9, r9, r3, lsr #4
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8080e5a:	797b      	ldrb	r3, [r7, #5]
 8080e5c:	0100      	lsls	r0, r0, #4
 8080e5e:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
                        ((uint32_t) buff[off + 7] / 16));
 8080e62:	79fb      	ldrb	r3, [r7, #7]
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8080e64:	7a7a      	ldrb	r2, [r7, #9]
        adc_temp =
 8080e66:	ea40 1313 	orr.w	r3, r0, r3, lsr #4
 8080e6a:	9302      	str	r3, [sp, #8]
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8080e6c:	7a3b      	ldrb	r3, [r7, #8]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8080e6e:	7bf8      	ldrb	r0, [r7, #15]
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8080e70:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8080e74:	7b7b      	ldrb	r3, [r7, #13]
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8080e76:	7839      	ldrb	r1, [r7, #0]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8080e78:	9004      	str	r0, [sp, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8080e7a:	68a8      	ldr	r0, [r5, #8]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8080e7c:	f897 b010 	ldrb.w	fp, [r7, #16]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8080e80:	9303      	str	r3, [sp, #12]
 8080e82:	7bbb      	ldrb	r3, [r7, #14]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8080e84:	2801      	cmp	r0, #1
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8080e86:	f001 0c0f 	and.w	ip, r1, #15
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8080e8a:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8080e8e:	bf14      	ite	ne
 8080e90:	f003 0e20 	andne.w	lr, r3, #32
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8080e94:	f00b 0e20 	andeq.w	lr, fp, #32
 8080e98:	b249      	sxtb	r1, r1
 8080e9a:	bf0b      	itete	eq
 8080e9c:	ea41 010e 	orreq.w	r1, r1, lr
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8080ea0:	ea41 010e 	orrne.w	r1, r1, lr
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8080ea4:	f00b 0e10 	andeq.w	lr, fp, #16
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 8080ea8:	f003 0e10 	andne.w	lr, r3, #16
 8080eac:	ea41 010e 	orr.w	r1, r1, lr
 8080eb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
        data[i]->idac = set_val[data[i]->gas_index];
 8080eb4:	ab34      	add	r3, sp, #208	; 0xd0
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 8080eb6:	f888 1000 	strb.w	r1, [r8]
        data[i]->idac = set_val[data[i]->gas_index];
 8080eba:	eb03 010c 	add.w	r1, r3, ip
 8080ebe:	f811 1c9c 	ldrb.w	r1, [r1, #-156]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8080ec2:	f888 c001 	strb.w	ip, [r8, #1]
        data[i]->idac = set_val[data[i]->gas_index];
 8080ec6:	f888 1004 	strb.w	r1, [r8, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8080eca:	eb03 010c 	add.w	r1, r3, ip
 8080ece:	f811 1c92 	ldrb.w	r1, [r1, #-146]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8080ed2:	449c      	add	ip, r3
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8080ed4:	f888 1003 	strb.w	r1, [r8, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8080ed8:	f81c 1c88 	ldrb.w	r1, [ip, #-136]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8080edc:	9802      	ldr	r0, [sp, #8]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8080ede:	f888 1005 	strb.w	r1, [r8, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8080ee2:	4629      	mov	r1, r5
 8080ee4:	f7ff f8e6 	bl	80800b4 <calc_temperature>
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8080ee8:	4629      	mov	r1, r5
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8080eea:	f8c8 0008 	str.w	r0, [r8, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8080eee:	4648      	mov	r0, r9
 8080ef0:	f7ff f92e 	bl	8080150 <calc_pressure>
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8080ef4:	9a05      	ldr	r2, [sp, #20]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8080ef6:	f8c8 000c 	str.w	r0, [r8, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8080efa:	4629      	mov	r1, r5
 8080efc:	4610      	mov	r0, r2
 8080efe:	f7ff fa07 	bl	8080310 <calc_humidity>
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8080f02:	68aa      	ldr	r2, [r5, #8]
 8080f04:	9b06      	ldr	r3, [sp, #24]
 8080f06:	2a01      	cmp	r2, #1
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8080f08:	f8c8 0010 	str.w	r0, [r8, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8080f0c:	d13b      	bne.n	8080f86 <bme68x_get_data+0x38e>
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8080f0e:	9b04      	ldr	r3, [sp, #16]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8080f10:	ea4f 199b 	mov.w	r9, fp, lsr #6
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8080f14:	ea49 0983 	orr.w	r9, r9, r3, lsl #2
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8080f18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8080f1c:	f00b 000f 	and.w	r0, fp, #15
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8080f20:	fa23 f000 	lsr.w	r0, r3, r0
 8080f24:	f003 f812 	bl	8083f4c <__aeabi_ui2f>
 8080f28:	4945      	ldr	r1, [pc, #276]	; (8081040 <bme68x_get_data+0x448>)
 8080f2a:	f003 f867 	bl	8083ffc <__aeabi_fmul>
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8080f2e:	f5a9 7900 	sub.w	r9, r9, #512	; 0x200
    var2 *= INT32_C(3);
 8080f32:	eb09 0949 	add.w	r9, r9, r9, lsl #1
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8080f36:	4683      	mov	fp, r0
 8080f38:	f509 5080 	add.w	r0, r9, #4096	; 0x1000
 8080f3c:	f003 f80a 	bl	8083f54 <__aeabi_i2f>
 8080f40:	4601      	mov	r1, r0
 8080f42:	4658      	mov	r0, fp
 8080f44:	f003 f90e 	bl	8084164 <__aeabi_fdiv>
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8080f48:	f10a 0a01 	add.w	sl, sl, #1
 8080f4c:	f1ba 0f03 	cmp.w	sl, #3
 8080f50:	f8c8 0014 	str.w	r0, [r8, #20]
 8080f54:	f107 0711 	add.w	r7, r7, #17
 8080f58:	f47f af6e 	bne.w	8080e38 <bme68x_get_data+0x240>
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8080f5c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8080f60:	4672      	mov	r2, lr
 8080f62:	2303      	movs	r3, #3
            new_fields = 0;
 8080f64:	2700      	movs	r7, #0
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8080f66:	2c00      	cmp	r4, #0
 8080f68:	d14e      	bne.n	8081008 <bme68x_get_data+0x410>
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8080f6a:	f852 1b04 	ldr.w	r1, [r2], #4
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8080f6e:	3b01      	subs	r3, #1
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8080f70:	f991 1000 	ldrsb.w	r1, [r1]
 8080f74:	2900      	cmp	r1, #0
                    new_fields++;
 8080f76:	bfbc      	itt	lt
 8080f78:	3701      	addlt	r7, #1
 8080f7a:	b2ff      	uxtblt	r7, r7
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8080f7c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8080f80:	d1f3      	bne.n	8080f6a <bme68x_get_data+0x372>
 8080f82:	4670      	mov	r0, lr
 8080f84:	e038      	b.n	8080ff8 <bme68x_get_data+0x400>
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8080f86:	0998      	lsrs	r0, r3, #6
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8080f88:	f003 010f 	and.w	r1, r3, #15
 8080f8c:	9b03      	ldr	r3, [sp, #12]
 8080f8e:	f995 203e 	ldrsb.w	r2, [r5, #62]	; 0x3e
 8080f92:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
 8080f96:	f7ff fb41 	bl	808061c <calc_gas_resistance_low.isra.0>
 8080f9a:	e7d5      	b.n	8080f48 <bme68x_get_data+0x350>
 8080f9c:	f04f 0902 	mov.w	r9, #2
    meas_index1 = (int16_t)field[low_index]->meas_index;
 8080fa0:	f8dc 5000 	ldr.w	r5, [ip]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8080fa4:	f851 3b04 	ldr.w	r3, [r1], #4
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8080fa8:	f995 a000 	ldrsb.w	sl, [r5]
 8080fac:	f993 2000 	ldrsb.w	r2, [r3]
 8080fb0:	f1ba 0f00 	cmp.w	sl, #0
 8080fb4:	da16      	bge.n	8080fe4 <bme68x_get_data+0x3ec>
 8080fb6:	2a00      	cmp	r2, #0
 8080fb8:	da16      	bge.n	8080fe8 <bme68x_get_data+0x3f0>
        int16_t diff = meas_index2 - meas_index1;
 8080fba:	f895 a002 	ldrb.w	sl, [r5, #2]
 8080fbe:	789a      	ldrb	r2, [r3, #2]
 8080fc0:	eba2 020a 	sub.w	r2, r2, sl
 8080fc4:	b292      	uxth	r2, r2
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8080fc6:	f102 0a02 	add.w	sl, r2, #2
 8080fca:	fa1f fa8a 	uxth.w	sl, sl
 8080fce:	f1ba 0f01 	cmp.w	sl, #1
 8080fd2:	d902      	bls.n	8080fda <bme68x_get_data+0x3e2>
 8080fd4:	b212      	sxth	r2, r2
 8080fd6:	2a02      	cmp	r2, #2
 8080fd8:	dd06      	ble.n	8080fe8 <bme68x_get_data+0x3f0>
    field[index1] = field[index2];
 8080fda:	f8cc 3000 	str.w	r3, [ip]
    field[index2] = temp;
 8080fde:	f841 5c04 	str.w	r5, [r1, #-4]
}
 8080fe2:	e001      	b.n	8080fe8 <bme68x_get_data+0x3f0>
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8080fe4:	2a00      	cmp	r2, #0
 8080fe6:	dbf8      	blt.n	8080fda <bme68x_get_data+0x3e2>
                for (j = i + 1; j < 3; j++)
 8080fe8:	f1b9 0f02 	cmp.w	r9, #2
 8080fec:	d1d6      	bne.n	8080f9c <bme68x_get_data+0x3a4>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8080fee:	f1b8 0f02 	cmp.w	r8, #2
 8080ff2:	f04f 0301 	mov.w	r3, #1
 8080ff6:	d007      	beq.n	8081008 <bme68x_get_data+0x410>
                for (j = i + 1; j < 3; j++)
 8080ff8:	3301      	adds	r3, #1
 8080ffa:	4684      	mov	ip, r0
 8080ffc:	fa5f f883 	uxtb.w	r8, r3
 8081000:	3004      	adds	r0, #4
 8081002:	4601      	mov	r1, r0
 8081004:	46c1      	mov	r9, r8
 8081006:	e7cb      	b.n	8080fa0 <bme68x_get_data+0x3a8>
 8081008:	f04f 0800 	mov.w	r8, #0
                data[i] = *field_ptr[i];
 808100c:	f04f 0918 	mov.w	r9, #24
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8081010:	b97c      	cbnz	r4, 8081032 <bme68x_get_data+0x43a>
                data[i] = *field_ptr[i];
 8081012:	fb09 6508 	mla	r5, r9, r8, r6
 8081016:	f85e cb04 	ldr.w	ip, [lr], #4
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 808101a:	f108 0801 	add.w	r8, r8, #1
                data[i] = *field_ptr[i];
 808101e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8081022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8081024:	e89c 0003 	ldmia.w	ip, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8081028:	f1b8 0f03 	cmp.w	r8, #3
                data[i] = *field_ptr[i];
 808102c:	e885 0003 	stmia.w	r5, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8081030:	d1ef      	bne.n	8081012 <bme68x_get_data+0x41a>
                rslt = BME68X_W_NO_NEW_DATA;
 8081032:	2f00      	cmp	r7, #0
 8081034:	bf08      	it	eq
 8081036:	2402      	moveq	r4, #2
 8081038:	e6d2      	b.n	8080de0 <bme68x_get_data+0x1e8>
            rslt = BME68X_W_DEFINE_OP_MODE;
 808103a:	2401      	movs	r4, #1
 808103c:	e6d0      	b.n	8080de0 <bme68x_get_data+0x1e8>
 808103e:	bf00      	nop
 8081040:	49742400 	.word	0x49742400

08081044 <bme68x_set_heatr_conf>:
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8081044:	f247 1370 	movw	r3, #29040	; 0x7170
{
 8081048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808104c:	b093      	sub	sp, #76	; 0x4c
 808104e:	4606      	mov	r6, r0
 8081050:	4617      	mov	r7, r2
    if (conf != NULL)
 8081052:	460d      	mov	r5, r1
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8081054:	f8ad 3014 	strh.w	r3, [sp, #20]
    if (conf != NULL)
 8081058:	2900      	cmp	r1, #0
 808105a:	f000 8090 	beq.w	808117e <bme68x_set_heatr_conf+0x13a>
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 808105e:	4611      	mov	r1, r2
 8081060:	2000      	movs	r0, #0
 8081062:	f7ff fc9c 	bl	808099e <bme68x_set_op_mode>
        if (rslt == BME68X_OK)
 8081066:	4604      	mov	r4, r0
 8081068:	2800      	cmp	r0, #0
 808106a:	f040 80f7 	bne.w	808125c <bme68x_set_heatr_conf+0x218>
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 808106e:	236e      	movs	r3, #110	; 0x6e
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8081070:	4a8f      	ldr	r2, [pc, #572]	; (80812b0 <bme68x_set_heatr_conf+0x26c>)
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8081072:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8081076:	f8d2 0086 	ldr.w	r0, [r2, #134]	; 0x86
 808107a:	f8d2 108a 	ldr.w	r1, [r2, #138]	; 0x8a
 808107e:	ab06      	add	r3, sp, #24
 8081080:	c303      	stmia	r3!, {r0, r1}
 8081082:	f8b2 208e 	ldrh.w	r2, [r2, #142]	; 0x8e
    switch (op_mode)
 8081086:	2e02      	cmp	r6, #2
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8081088:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 808108a:	ab09      	add	r3, sp, #36	; 0x24
 808108c:	c303      	stmia	r3!, {r0, r1}
 808108e:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8081090:	ab0c      	add	r3, sp, #48	; 0x30
 8081092:	c303      	stmia	r3!, {r0, r1}
 8081094:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8081096:	ab0f      	add	r3, sp, #60	; 0x3c
 8081098:	c303      	stmia	r3!, {r0, r1}
 808109a:	f10d 0918 	add.w	r9, sp, #24
 808109e:	801a      	strh	r2, [r3, #0]
    switch (op_mode)
 80810a0:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
 80810a4:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 80810a8:	f000 80a1 	beq.w	80811ee <bme68x_set_heatr_conf+0x1aa>
 80810ac:	2e03      	cmp	r6, #3
 80810ae:	d064      	beq.n	808117a <bme68x_set_heatr_conf+0x136>
 80810b0:	2e01      	cmp	r6, #1
 80810b2:	f040 80fb 	bne.w	80812ac <bme68x_set_heatr_conf+0x268>
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 80810b6:	235a      	movs	r3, #90	; 0x5a
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 80810b8:	4639      	mov	r1, r7
 80810ba:	8868      	ldrh	r0, [r5, #2]
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 80810bc:	f88d 3018 	strb.w	r3, [sp, #24]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 80810c0:	f7ff f9b6 	bl	8080430 <calc_res_heat>
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 80810c4:	2364      	movs	r3, #100	; 0x64
 80810c6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 80810ca:	88ab      	ldrh	r3, [r5, #4]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 80810cc:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    if (dur >= 0xfc0)
 80810d0:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80810d4:	d24f      	bcs.n	8081176 <bme68x_set_heatr_conf+0x132>
        while (dur > 0x3F)
 80810d6:	2b3f      	cmp	r3, #63	; 0x3f
 80810d8:	b2e2      	uxtb	r2, r4
 80810da:	f104 0401 	add.w	r4, r4, #1
 80810de:	d848      	bhi.n	8081172 <bme68x_set_heatr_conf+0x12e>
        durval = (uint8_t)(dur + (factor * 64));
 80810e0:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80810e4:	b2db      	uxtb	r3, r3
            (*nb_conv) = 0;
 80810e6:	f04f 0800 	mov.w	r8, #0
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 80810ea:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 80810ee:	463b      	mov	r3, r7
 80810f0:	4632      	mov	r2, r6
 80810f2:	4651      	mov	r1, sl
 80810f4:	4648      	mov	r0, r9
 80810f6:	f7ff fb07 	bl	8080708 <bme68x_set_regs>
    if (rslt == BME68X_OK)
 80810fa:	4604      	mov	r4, r0
 80810fc:	2800      	cmp	r0, #0
 80810fe:	f040 80ad 	bne.w	808125c <bme68x_set_heatr_conf+0x218>
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8081102:	463b      	mov	r3, r7
 8081104:	4632      	mov	r2, r6
 8081106:	a90f      	add	r1, sp, #60	; 0x3c
 8081108:	a80c      	add	r0, sp, #48	; 0x30
 808110a:	f7ff fafd 	bl	8080708 <bme68x_set_regs>
        if (rslt == BME68X_OK)
 808110e:	4604      	mov	r4, r0
 8081110:	2800      	cmp	r0, #0
 8081112:	f040 80a3 	bne.w	808125c <bme68x_set_heatr_conf+0x218>
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 8081116:	463b      	mov	r3, r7
 8081118:	2202      	movs	r2, #2
 808111a:	2070      	movs	r0, #112	; 0x70
 808111c:	a90f      	add	r1, sp, #60	; 0x3c
 808111e:	f7ff fb3d 	bl	808079c <bme68x_get_regs>
            if (rslt == BME68X_OK)
 8081122:	4604      	mov	r4, r0
 8081124:	2800      	cmp	r0, #0
 8081126:	f040 8099 	bne.w	808125c <bme68x_set_heatr_conf+0x218>
                if (conf->enable == BME68X_ENABLE)
 808112a:	782a      	ldrb	r2, [r5, #0]
 808112c:	2a01      	cmp	r2, #1
 808112e:	f040 80ba 	bne.w	80812a6 <bme68x_set_heatr_conf+0x262>
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8081132:	68bb      	ldr	r3, [r7, #8]
                    hctrl = BME68X_ENABLE_HEATER;
 8081134:	2b01      	cmp	r3, #1
 8081136:	bf08      	it	eq
 8081138:	2202      	moveq	r2, #2
                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 808113a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 808113e:	a90f      	add	r1, sp, #60	; 0x3c
                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8081140:	f023 0308 	bic.w	r3, r3, #8
 8081144:	ea43 04c4 	orr.w	r4, r3, r4, lsl #3
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8081148:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 808114c:	a805      	add	r0, sp, #20
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 808114e:	f023 030f 	bic.w	r3, r3, #15
 8081152:	ea43 0308 	orr.w	r3, r3, r8
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8081156:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 808115a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 808115e:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8081162:	2202      	movs	r2, #2
 8081164:	463b      	mov	r3, r7
                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8081166:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 808116a:	f7ff facd 	bl	8080708 <bme68x_set_regs>
 808116e:	4604      	mov	r4, r0
 8081170:	e074      	b.n	808125c <bme68x_set_heatr_conf+0x218>
            dur = dur / 4;
 8081172:	089b      	lsrs	r3, r3, #2
            factor += 1;
 8081174:	e7af      	b.n	80810d6 <bme68x_set_heatr_conf+0x92>
        durval = 0xff; /* Max duration*/
 8081176:	23ff      	movs	r3, #255	; 0xff
 8081178:	e7b5      	b.n	80810e6 <bme68x_set_heatr_conf+0xa2>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 808117a:	68eb      	ldr	r3, [r5, #12]
 808117c:	b913      	cbnz	r3, 8081184 <bme68x_set_heatr_conf+0x140>
        rslt = BME68X_E_NULL_PTR;
 808117e:	f04f 34ff 	mov.w	r4, #4294967295
 8081182:	e06b      	b.n	808125c <bme68x_set_heatr_conf+0x218>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8081184:	68aa      	ldr	r2, [r5, #8]
 8081186:	2a00      	cmp	r2, #0
 8081188:	d0f9      	beq.n	808117e <bme68x_set_heatr_conf+0x13a>
            for (i = 0; i < conf->profile_len; i++)
 808118a:	7c2e      	ldrb	r6, [r5, #16]
 808118c:	fa5f f884 	uxtb.w	r8, r4
 8081190:	4546      	cmp	r6, r8
 8081192:	d801      	bhi.n	8081198 <bme68x_set_heatr_conf+0x154>
 8081194:	46b0      	mov	r8, r6
 8081196:	e7aa      	b.n	80810ee <bme68x_set_heatr_conf+0xaa>
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8081198:	f108 015a 	add.w	r1, r8, #90	; 0x5a
 808119c:	f809 1004 	strb.w	r1, [r9, r4]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80811a0:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 80811a4:	4639      	mov	r1, r7
 80811a6:	9301      	str	r3, [sp, #4]
 80811a8:	9200      	str	r2, [sp, #0]
 80811aa:	f7ff f941 	bl	8080430 <calc_res_heat>
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80811ae:	f108 0864 	add.w	r8, r8, #100	; 0x64
 80811b2:	ab0c      	add	r3, sp, #48	; 0x30
 80811b4:	f803 8004 	strb.w	r8, [r3, r4]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 80811b8:	9b01      	ldr	r3, [sp, #4]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80811ba:	f80a 0004 	strb.w	r0, [sl, r4]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 80811be:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
    if (dur >= 0xfc0)
 80811c2:	9a00      	ldr	r2, [sp, #0]
 80811c4:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
 80811c8:	d20f      	bcs.n	80811ea <bme68x_set_heatr_conf+0x1a6>
 80811ca:	2000      	movs	r0, #0
        while (dur > 0x3F)
 80811cc:	293f      	cmp	r1, #63	; 0x3f
 80811ce:	fa5f fc80 	uxtb.w	ip, r0
 80811d2:	f100 0001 	add.w	r0, r0, #1
 80811d6:	d806      	bhi.n	80811e6 <bme68x_set_heatr_conf+0x1a2>
        durval = (uint8_t)(dur + (factor * 64));
 80811d8:	eb01 118c 	add.w	r1, r1, ip, lsl #6
 80811dc:	b2c9      	uxtb	r1, r1
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 80811de:	f80b 1004 	strb.w	r1, [fp, r4]
            for (i = 0; i < conf->profile_len; i++)
 80811e2:	3401      	adds	r4, #1
 80811e4:	e7d2      	b.n	808118c <bme68x_set_heatr_conf+0x148>
            dur = dur / 4;
 80811e6:	0889      	lsrs	r1, r1, #2
            factor += 1;
 80811e8:	e7f0      	b.n	80811cc <bme68x_set_heatr_conf+0x188>
        durval = 0xff; /* Max duration*/
 80811ea:	21ff      	movs	r1, #255	; 0xff
 80811ec:	e7f7      	b.n	80811de <bme68x_set_heatr_conf+0x19a>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 80811ee:	68eb      	ldr	r3, [r5, #12]
 80811f0:	2b00      	cmp	r3, #0
 80811f2:	d0c4      	beq.n	808117e <bme68x_set_heatr_conf+0x13a>
 80811f4:	68aa      	ldr	r2, [r5, #8]
 80811f6:	9200      	str	r2, [sp, #0]
 80811f8:	2a00      	cmp	r2, #0
 80811fa:	d0c0      	beq.n	808117e <bme68x_set_heatr_conf+0x13a>
            if (conf->shared_heatr_dur == 0)
 80811fc:	8a6a      	ldrh	r2, [r5, #18]
            for (i = 0; i < conf->profile_len; i++)
 80811fe:	f04f 0800 	mov.w	r8, #0
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8081202:	2a00      	cmp	r2, #0
 8081204:	bf08      	it	eq
 8081206:	2403      	moveq	r4, #3
            for (i = 0; i < conf->profile_len; i++)
 8081208:	7c2e      	ldrb	r6, [r5, #16]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 808120a:	f8cd b004 	str.w	fp, [sp, #4]
            for (i = 0; i < conf->profile_len; i++)
 808120e:	fa5f fb88 	uxtb.w	fp, r8
 8081212:	455e      	cmp	r6, fp
 8081214:	d826      	bhi.n	8081264 <bme68x_set_heatr_conf+0x220>
    if (dur >= 0x783)
 8081216:	f240 7382 	movw	r3, #1922	; 0x782
 808121a:	429a      	cmp	r2, r3
 808121c:	d841      	bhi.n	80812a2 <bme68x_set_heatr_conf+0x25e>
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 808121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081222:	435a      	muls	r2, r3
 8081224:	f240 13dd 	movw	r3, #477	; 0x1dd
 8081228:	fbb2 f2f3 	udiv	r2, r2, r3
        while (dur > 0x3F)
 808122c:	2300      	movs	r3, #0
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 808122e:	b292      	uxth	r2, r2
        while (dur > 0x3F)
 8081230:	2a3f      	cmp	r2, #63	; 0x3f
 8081232:	b2d9      	uxtb	r1, r3
 8081234:	f103 0301 	add.w	r3, r3, #1
 8081238:	d831      	bhi.n	808129e <bme68x_set_heatr_conf+0x25a>
        heatdurval = (uint8_t)(dur + (factor * 64));
 808123a:	eb02 1281 	add.w	r2, r2, r1, lsl #6
 808123e:	b2d2      	uxtb	r2, r2
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8081240:	f88d 2012 	strb.w	r2, [sp, #18]
            if (rslt == BME68X_OK)
 8081244:	b954      	cbnz	r4, 808125c <bme68x_set_heatr_conf+0x218>
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8081246:	463b      	mov	r3, r7
 8081248:	2201      	movs	r2, #1
 808124a:	f10d 0112 	add.w	r1, sp, #18
 808124e:	f10d 0013 	add.w	r0, sp, #19
 8081252:	f7ff fa59 	bl	8080708 <bme68x_set_regs>
    if (rslt == BME68X_OK)
 8081256:	4604      	mov	r4, r0
 8081258:	2800      	cmp	r0, #0
 808125a:	d09b      	beq.n	8081194 <bme68x_set_heatr_conf+0x150>
}
 808125c:	4620      	mov	r0, r4
 808125e:	b013      	add	sp, #76	; 0x4c
 8081260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081264:	e9cd 3202 	strd	r3, r2, [sp, #8]
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8081268:	f10b 015a 	add.w	r1, fp, #90	; 0x5a
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 808126c:	9b00      	ldr	r3, [sp, #0]
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 808126e:	f809 1008 	strb.w	r1, [r9, r8]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8081272:	f833 0018 	ldrh.w	r0, [r3, r8, lsl #1]
 8081276:	4639      	mov	r1, r7
 8081278:	f7ff f8da 	bl	8080430 <calc_res_heat>
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 808127c:	f10b 0b64 	add.w	fp, fp, #100	; 0x64
 8081280:	ab0c      	add	r3, sp, #48	; 0x30
 8081282:	f803 b008 	strb.w	fp, [r3, r8]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8081286:	9b02      	ldr	r3, [sp, #8]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8081288:	f80a 0008 	strb.w	r0, [sl, r8]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 808128c:	f833 1018 	ldrh.w	r1, [r3, r8, lsl #1]
 8081290:	9a01      	ldr	r2, [sp, #4]
 8081292:	f808 1002 	strb.w	r1, [r8, r2]
            for (i = 0; i < conf->profile_len; i++)
 8081296:	9a03      	ldr	r2, [sp, #12]
 8081298:	f108 0801 	add.w	r8, r8, #1
 808129c:	e7b7      	b.n	808120e <bme68x_set_heatr_conf+0x1ca>
            dur = dur >> 2;
 808129e:	0892      	lsrs	r2, r2, #2
            factor += 1;
 80812a0:	e7c6      	b.n	8081230 <bme68x_set_heatr_conf+0x1ec>
        heatdurval = 0xff; /* Max duration */
 80812a2:	22ff      	movs	r2, #255	; 0xff
 80812a4:	e7cc      	b.n	8081240 <bme68x_set_heatr_conf+0x1fc>
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 80812a6:	4602      	mov	r2, r0
                    hctrl = BME68X_DISABLE_HEATER;
 80812a8:	2401      	movs	r4, #1
 80812aa:	e746      	b.n	808113a <bme68x_set_heatr_conf+0xf6>
    switch (op_mode)
 80812ac:	2401      	movs	r4, #1
    return rslt;
 80812ae:	e7d5      	b.n	808125c <bme68x_set_heatr_conf+0x218>
 80812b0:	080845a4 	.word	0x080845a4

080812b4 <_ZN16Adafruit_ADS1115C1Ev>:
/*!
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115() {
  m_bitShift = 0;
 80812b4:	2200      	movs	r2, #0
 80812b6:	7102      	strb	r2, [r0, #4]
  m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 80812b8:	80c2      	strh	r2, [r0, #6]
  m_dataRate = RATE_ADS1115_128SPS;
 80812ba:	2280      	movs	r2, #128	; 0x80
 80812bc:	8102      	strh	r2, [r0, #8]
}
 80812be:	4770      	bx	lr

080812c0 <_ZN16Adafruit_ADS1X155beginEhP7TwoWire>:
    @param wire I2C bus

    @return true if successful, otherwise false
*/
/**************************************************************************/
bool Adafruit_ADS1X15::begin(uint8_t i2c_addr, TwoWire *wire) {
 80812c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80812c2:	4605      	mov	r5, r0
  m_i2c_dev = new Adafruit_I2CDevice(i2c_addr, wire);
 80812c4:	2010      	movs	r0, #16
bool Adafruit_ADS1X15::begin(uint8_t i2c_addr, TwoWire *wire) {
 80812c6:	460e      	mov	r6, r1
 80812c8:	4617      	mov	r7, r2
  m_i2c_dev = new Adafruit_I2CDevice(i2c_addr, wire);
 80812ca:	f7fe fee4 	bl	8080096 <_Znwj>
 80812ce:	4604      	mov	r4, r0
 80812d0:	b118      	cbz	r0, 80812da <_ZN16Adafruit_ADS1X155beginEhP7TwoWire+0x1a>
 80812d2:	463a      	mov	r2, r7
 80812d4:	4631      	mov	r1, r6
 80812d6:	f000 ff5b 	bl	8082190 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  return m_i2c_dev->begin();
 80812da:	4620      	mov	r0, r4
  m_i2c_dev = new Adafruit_I2CDevice(i2c_addr, wire);
 80812dc:	602c      	str	r4, [r5, #0]
  return m_i2c_dev->begin();
 80812de:	2101      	movs	r1, #1
}
 80812e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_i2c_dev->begin();
 80812e4:	f000 bf70 	b.w	80821c8 <_ZN18Adafruit_I2CDevice5beginEb>

080812e8 <_ZN16Adafruit_ADS1X1513writeRegisterEht>:
    @param value value to write to register
*/
/**************************************************************************/
void Adafruit_ADS1X15::writeRegister(uint8_t reg, uint16_t value) {
  buffer[0] = reg;
  buffer[1] = value >> 8;
 80812e8:	0a13      	lsrs	r3, r2, #8
void Adafruit_ADS1X15::writeRegister(uint8_t reg, uint16_t value) {
 80812ea:	b507      	push	{r0, r1, r2, lr}
  buffer[1] = value >> 8;
 80812ec:	72c3      	strb	r3, [r0, #11]
  buffer[2] = value & 0xFF;
  m_i2c_dev->write(buffer, 3);
 80812ee:	2300      	movs	r3, #0
  buffer[0] = reg;
 80812f0:	7281      	strb	r1, [r0, #10]
  buffer[2] = value & 0xFF;
 80812f2:	7302      	strb	r2, [r0, #12]
  m_i2c_dev->write(buffer, 3);
 80812f4:	e9cd 3300 	strd	r3, r3, [sp]
 80812f8:	f100 010a 	add.w	r1, r0, #10
 80812fc:	2301      	movs	r3, #1
 80812fe:	2203      	movs	r2, #3
 8081300:	6800      	ldr	r0, [r0, #0]
 8081302:	f000 ff70 	bl	80821e6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 8081306:	b003      	add	sp, #12
 8081308:	f85d fb04 	ldr.w	pc, [sp], #4

0808130c <_ZN16Adafruit_ADS1X1515startADCReadingEtb>:
    config |= ADS1X15_REG_CONFIG_MODE_SINGLE;
 808130c:	2a00      	cmp	r2, #0
 808130e:	bf14      	ite	ne
 8081310:	2200      	movne	r2, #0
 8081312:	f44f 7280 	moveq.w	r2, #256	; 0x100
void Adafruit_ADS1X15::startADCReading(uint16_t mux, bool continuous) {
 8081316:	b510      	push	{r4, lr}
 8081318:	4604      	mov	r4, r0
 808131a:	430a      	orrs	r2, r1
 808131c:	88c1      	ldrh	r1, [r0, #6]
 808131e:	430a      	orrs	r2, r1
  config |= mux;
 8081320:	8901      	ldrh	r1, [r0, #8]
 8081322:	430a      	orrs	r2, r1
  writeRegister(ADS1X15_REG_POINTER_CONFIG, config);
 8081324:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8081328:	2101      	movs	r1, #1
 808132a:	f7ff ffdd 	bl	80812e8 <_ZN16Adafruit_ADS1X1513writeRegisterEht>
  writeRegister(ADS1X15_REG_POINTER_HITHRESH, 0x8000);
 808132e:	4620      	mov	r0, r4
 8081330:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8081334:	2103      	movs	r1, #3
 8081336:	f7ff ffd7 	bl	80812e8 <_ZN16Adafruit_ADS1X1513writeRegisterEht>
  writeRegister(ADS1X15_REG_POINTER_LOWTHRESH, 0x0000);
 808133a:	4620      	mov	r0, r4
}
 808133c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister(ADS1X15_REG_POINTER_LOWTHRESH, 0x0000);
 8081340:	2200      	movs	r2, #0
 8081342:	2102      	movs	r1, #2
 8081344:	f7ff bfd0 	b.w	80812e8 <_ZN16Adafruit_ADS1X1513writeRegisterEht>

08081348 <_ZN16Adafruit_ADS1X1512readRegisterEh>:
    @param reg register address to read from

    @return 16 bit register value read
*/
/**************************************************************************/
uint16_t Adafruit_ADS1X15::readRegister(uint8_t reg) {
 8081348:	b537      	push	{r0, r1, r2, r4, r5, lr}
  buffer[0] = reg;
  m_i2c_dev->write(buffer, 1);
 808134a:	2300      	movs	r3, #0
  buffer[0] = reg;
 808134c:	4605      	mov	r5, r0
 808134e:	f805 1f0a 	strb.w	r1, [r5, #10]!
  m_i2c_dev->write(buffer, 1);
 8081352:	e9cd 3300 	strd	r3, r3, [sp]
 8081356:	2301      	movs	r3, #1
uint16_t Adafruit_ADS1X15::readRegister(uint8_t reg) {
 8081358:	4604      	mov	r4, r0
  m_i2c_dev->write(buffer, 1);
 808135a:	461a      	mov	r2, r3
 808135c:	4629      	mov	r1, r5
 808135e:	6800      	ldr	r0, [r0, #0]
 8081360:	f000 ff41 	bl	80821e6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
  m_i2c_dev->read(buffer, 2);
 8081364:	2301      	movs	r3, #1
 8081366:	2202      	movs	r2, #2
 8081368:	4629      	mov	r1, r5
 808136a:	6820      	ldr	r0, [r4, #0]
 808136c:	f000 ff8a 	bl	8082284 <_ZN18Adafruit_I2CDevice4readEPhjb>
  return ((buffer[0] << 8) | buffer[1]);
 8081370:	8960      	ldrh	r0, [r4, #10]
 8081372:	ba40      	rev16	r0, r0
}
 8081374:	b280      	uxth	r0, r0
 8081376:	b003      	add	sp, #12
 8081378:	bd30      	pop	{r4, r5, pc}

0808137a <_ZN16Adafruit_ADS1X1524getLastConversionResultsEv>:
int16_t Adafruit_ADS1X15::getLastConversionResults() {
 808137a:	b510      	push	{r4, lr}
 808137c:	4604      	mov	r4, r0
  uint16_t res = readRegister(ADS1X15_REG_POINTER_CONVERT) >> m_bitShift;
 808137e:	2100      	movs	r1, #0
 8081380:	f7ff ffe2 	bl	8081348 <_ZN16Adafruit_ADS1X1512readRegisterEh>
 8081384:	7923      	ldrb	r3, [r4, #4]
 8081386:	4118      	asrs	r0, r3
  if (m_bitShift == 0) {
 8081388:	b90b      	cbnz	r3, 808138e <_ZN16Adafruit_ADS1X1524getLastConversionResultsEv+0x14>
    return (int16_t)res;
 808138a:	b200      	sxth	r0, r0
}
 808138c:	bd10      	pop	{r4, pc}
  uint16_t res = readRegister(ADS1X15_REG_POINTER_CONVERT) >> m_bitShift;
 808138e:	b280      	uxth	r0, r0
    if (res > 0x07FF) {
 8081390:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
      res |= 0xF000;
 8081394:	bf28      	it	cs
 8081396:	f440 4070 	orrcs.w	r0, r0, #61440	; 0xf000
 808139a:	e7f6      	b.n	808138a <_ZN16Adafruit_ADS1X1524getLastConversionResultsEv+0x10>

0808139c <_ZN16Adafruit_ADS1X1518conversionCompleteEv>:
  return (readRegister(ADS1X15_REG_POINTER_CONFIG) & 0x8000) != 0;
 808139c:	2101      	movs	r1, #1
bool Adafruit_ADS1X15::conversionComplete() {
 808139e:	b508      	push	{r3, lr}
  return (readRegister(ADS1X15_REG_POINTER_CONFIG) & 0x8000) != 0;
 80813a0:	f7ff ffd2 	bl	8081348 <_ZN16Adafruit_ADS1X1512readRegisterEh>
}
 80813a4:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80813a8:	bd08      	pop	{r3, pc}
	...

080813ac <_ZN16Adafruit_ADS1X1519readADC_SingleEndedEh>:
  if (channel > 3) {
 80813ac:	2903      	cmp	r1, #3
int16_t Adafruit_ADS1X15::readADC_SingleEnded(uint8_t channel) {
 80813ae:	b510      	push	{r4, lr}
 80813b0:	4604      	mov	r4, r0
  if (channel > 3) {
 80813b2:	d80f      	bhi.n	80813d4 <_ZN16Adafruit_ADS1X1519readADC_SingleEndedEh+0x28>
  startADCReading(MUX_BY_CHANNEL[channel], /*continuous=*/false);
 80813b4:	4b08      	ldr	r3, [pc, #32]	; (80813d8 <_ZN16Adafruit_ADS1X1519readADC_SingleEndedEh+0x2c>)
 80813b6:	2200      	movs	r2, #0
 80813b8:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80813bc:	f7ff ffa6 	bl	808130c <_ZN16Adafruit_ADS1X1515startADCReadingEtb>
  while (!conversionComplete())
 80813c0:	4620      	mov	r0, r4
 80813c2:	f7ff ffeb 	bl	808139c <_ZN16Adafruit_ADS1X1518conversionCompleteEv>
 80813c6:	2800      	cmp	r0, #0
 80813c8:	d0fa      	beq.n	80813c0 <_ZN16Adafruit_ADS1X1519readADC_SingleEndedEh+0x14>
  return getLastConversionResults();
 80813ca:	4620      	mov	r0, r4
}
 80813cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getLastConversionResults();
 80813d0:	f7ff bfd3 	b.w	808137a <_ZN16Adafruit_ADS1X1524getLastConversionResultsEv>
}
 80813d4:	2000      	movs	r0, #0
 80813d6:	bd10      	pop	{r4, pc}
 80813d8:	08084634 	.word	0x08084634

080813dc <_ZL9date2daysthh>:
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
 80813dc:	2300      	movs	r3, #0
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
 80813de:	b530      	push	{r4, r5, lr}
 80813e0:	4c0e      	ldr	r4, [pc, #56]	; (808141c <_ZL9date2daysthh+0x40>)
  for (uint8_t i = 1; i < m; ++i)
 80813e2:	3301      	adds	r3, #1
 80813e4:	b2dd      	uxtb	r5, r3
 80813e6:	428d      	cmp	r5, r1
 80813e8:	d204      	bcs.n	80813f4 <_ZL9date2daysthh+0x18>
    days += pgm_read_byte(daysInMonth + i - 1);
 80813ea:	f814 5b01 	ldrb.w	r5, [r4], #1
 80813ee:	442a      	add	r2, r5
 80813f0:	b292      	uxth	r2, r2
  for (uint8_t i = 1; i < m; ++i)
 80813f2:	e7f6      	b.n	80813e2 <_ZL9date2daysthh+0x6>
  if (m > 2 && y % 4 == 0)
 80813f4:	2902      	cmp	r1, #2
 80813f6:	d903      	bls.n	8081400 <_ZL9date2daysthh+0x24>
 80813f8:	0783      	lsls	r3, r0, #30
    ++days;
 80813fa:	bf04      	itt	eq
 80813fc:	3201      	addeq	r2, #1
 80813fe:	b292      	uxtheq	r2, r2
  return days + 365 * y + (y + 3) / 4 - 1;
 8081400:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8081404:	1cc3      	adds	r3, r0, #3
 8081406:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 808140a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 808140e:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8081412:	3801      	subs	r0, #1
 8081414:	4418      	add	r0, r3
 8081416:	4410      	add	r0, r2
}
 8081418:	b280      	uxth	r0, r0
 808141a:	bd30      	pop	{r4, r5, pc}
 808141c:	0808463c 	.word	0x0808463c

08081420 <_ZL6conv2dPKc>:
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
 8081420:	7803      	ldrb	r3, [r0, #0]
    v = *p - '0';
  return 10 * v + *++p - '0';
 8081422:	7840      	ldrb	r0, [r0, #1]
  if ('0' <= *p && *p <= '9')
 8081424:	3b30      	subs	r3, #48	; 0x30
 8081426:	b2db      	uxtb	r3, r3
  uint8_t v = 0;
 8081428:	2b0a      	cmp	r3, #10
 808142a:	bf28      	it	cs
 808142c:	2300      	movcs	r3, #0
  return 10 * v + *++p - '0';
 808142e:	3830      	subs	r0, #48	; 0x30
 8081430:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8081434:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8081438:	b2c0      	uxtb	r0, r0
 808143a:	4770      	bx	lr

0808143c <_ZN7RTC_I2C14write_registerEhh>:
void RTC_I2C::write_register(uint8_t reg, uint8_t val) {
 808143c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  i2c_dev->write(buffer, 2);
 808143e:	2300      	movs	r3, #0
 8081440:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buffer[2] = {reg, val};
 8081444:	f88d 100c 	strb.w	r1, [sp, #12]
 8081448:	f88d 200d 	strb.w	r2, [sp, #13]
  i2c_dev->write(buffer, 2);
 808144c:	2301      	movs	r3, #1
 808144e:	2202      	movs	r2, #2
 8081450:	a903      	add	r1, sp, #12
 8081452:	6800      	ldr	r0, [r0, #0]
 8081454:	f000 fec7 	bl	80821e6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 8081458:	b005      	add	sp, #20
 808145a:	f85d fb04 	ldr.w	pc, [sp], #4

0808145e <_ZN7RTC_I2C13read_registerEh>:
  i2c_dev->write(&reg, 1);
 808145e:	2300      	movs	r3, #0
uint8_t RTC_I2C::read_register(uint8_t reg) {
 8081460:	b510      	push	{r4, lr}
 8081462:	b086      	sub	sp, #24
  i2c_dev->write(&reg, 1);
 8081464:	e9cd 3300 	strd	r3, r3, [sp]
 8081468:	2301      	movs	r3, #1
uint8_t RTC_I2C::read_register(uint8_t reg) {
 808146a:	4604      	mov	r4, r0
  i2c_dev->write(&reg, 1);
 808146c:	461a      	mov	r2, r3
uint8_t RTC_I2C::read_register(uint8_t reg) {
 808146e:	f88d 100f 	strb.w	r1, [sp, #15]
  i2c_dev->write(&reg, 1);
 8081472:	6800      	ldr	r0, [r0, #0]
 8081474:	f10d 010f 	add.w	r1, sp, #15
 8081478:	f000 feb5 	bl	80821e6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
  i2c_dev->read(buffer, 1);
 808147c:	2301      	movs	r3, #1
 808147e:	6820      	ldr	r0, [r4, #0]
 8081480:	461a      	mov	r2, r3
 8081482:	a905      	add	r1, sp, #20
 8081484:	f000 fefe 	bl	8082284 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
 8081488:	f89d 0014 	ldrb.w	r0, [sp, #20]
 808148c:	b006      	add	sp, #24
 808148e:	bd10      	pop	{r4, pc}

08081490 <_ZN8DateTimeC1Ethhhhh>:
  d = day;
 8081490:	7083      	strb	r3, [r0, #2]
  hh = hour;
 8081492:	f89d 3000 	ldrb.w	r3, [sp]
  if (year >= 2000U)
 8081496:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
  hh = hour;
 808149a:	70c3      	strb	r3, [r0, #3]
  mm = min;
 808149c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    year -= 2000U;
 80814a0:	bf28      	it	cs
 80814a2:	f5a1 61fa 	subcs.w	r1, r1, #2000	; 0x7d0
  mm = min;
 80814a6:	7103      	strb	r3, [r0, #4]
  ss = sec;
 80814a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    year -= 2000U;
 80814ac:	bf28      	it	cs
 80814ae:	b289      	uxthcs	r1, r1
  yOff = year;
 80814b0:	7001      	strb	r1, [r0, #0]
  m = month;
 80814b2:	7042      	strb	r2, [r0, #1]
  ss = sec;
 80814b4:	7143      	strb	r3, [r0, #5]
}
 80814b6:	4770      	bx	lr

080814b8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:

    @param date Date PROGMEM string, e.g. F("Apr 16 2020").
    @param time Time PROGMEM string, e.g. F("18:34:56").
*/
/**************************************************************************/
DateTime::DateTime(const __FlashStringHelper *date,
 80814b8:	b530      	push	{r4, r5, lr}
 80814ba:	460d      	mov	r5, r1
 80814bc:	b085      	sub	sp, #20
 80814be:	4604      	mov	r4, r0
                   const __FlashStringHelper *time) {
  char buff[11];
  memcpy_P(buff, date, 11);
 80814c0:	6808      	ldr	r0, [r1, #0]
 80814c2:	6849      	ldr	r1, [r1, #4]
 80814c4:	ab01      	add	r3, sp, #4
 80814c6:	c303      	stmia	r3!, {r0, r1}
 80814c8:	8928      	ldrh	r0, [r5, #8]
 80814ca:	7aa9      	ldrb	r1, [r5, #10]
 80814cc:	8018      	strh	r0, [r3, #0]
 80814ce:	7099      	strb	r1, [r3, #2]
  yOff = conv2d(buff + 9);
 80814d0:	f10d 000d 	add.w	r0, sp, #13
 80814d4:	f7ff ffa4 	bl	8081420 <_ZL6conv2dPKc>
 80814d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80814dc:	7020      	strb	r0, [r4, #0]
  // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
  switch (buff[0]) {
 80814de:	3b41      	subs	r3, #65	; 0x41
 80814e0:	2b12      	cmp	r3, #18
 80814e2:	d816      	bhi.n	8081512 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x5a>
 80814e4:	e8df f003 	tbb	[pc, r3]
 80814e8:	46151532 	.word	0x46151532
 80814ec:	15153015 	.word	0x15153015
 80814f0:	15150a15 	.word	0x15150a15
 80814f4:	15424439 	.word	0x15424439
 80814f8:	1515      	.short	0x1515
 80814fa:	40          	.byte	0x40
 80814fb:	00          	.byte	0x00
  case 'J':
    m = (buff[1] == 'a') ? 1 : ((buff[2] == 'n') ? 6 : 7);
 80814fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8081500:	2b61      	cmp	r3, #97	; 0x61
 8081502:	d01f      	beq.n	8081544 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x8c>
 8081504:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8081508:	2b6e      	cmp	r3, #110	; 0x6e
 808150a:	bf0c      	ite	eq
 808150c:	2306      	moveq	r3, #6
 808150e:	2307      	movne	r3, #7
    break;
  case 'N':
    m = 11;
    break;
  case 'D':
    m = 12;
 8081510:	7063      	strb	r3, [r4, #1]
    break;
  }
  d = conv2d(buff + 4);
 8081512:	a802      	add	r0, sp, #8
 8081514:	f7ff ff84 	bl	8081420 <_ZL6conv2dPKc>
 8081518:	70a0      	strb	r0, [r4, #2]
  memcpy_P(buff, time, 8);
 808151a:	6810      	ldr	r0, [r2, #0]
 808151c:	6851      	ldr	r1, [r2, #4]
 808151e:	ab01      	add	r3, sp, #4
 8081520:	c303      	stmia	r3!, {r0, r1}
  hh = conv2d(buff);
 8081522:	a801      	add	r0, sp, #4
 8081524:	f7ff ff7c 	bl	8081420 <_ZL6conv2dPKc>
 8081528:	70e0      	strb	r0, [r4, #3]
  mm = conv2d(buff + 3);
 808152a:	f10d 0007 	add.w	r0, sp, #7
 808152e:	f7ff ff77 	bl	8081420 <_ZL6conv2dPKc>
 8081532:	7120      	strb	r0, [r4, #4]
  ss = conv2d(buff + 6);
 8081534:	f10d 000a 	add.w	r0, sp, #10
 8081538:	f7ff ff72 	bl	8081420 <_ZL6conv2dPKc>
 808153c:	7160      	strb	r0, [r4, #5]
}
 808153e:	4620      	mov	r0, r4
 8081540:	b005      	add	sp, #20
 8081542:	bd30      	pop	{r4, r5, pc}
    m = (buff[1] == 'a') ? 1 : ((buff[2] == 'n') ? 6 : 7);
 8081544:	2301      	movs	r3, #1
 8081546:	e7e3      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = 2;
 8081548:	2302      	movs	r3, #2
 808154a:	e7e1      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = buff[2] == 'r' ? 4 : 8;
 808154c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8081550:	2b72      	cmp	r3, #114	; 0x72
 8081552:	bf0c      	ite	eq
 8081554:	2304      	moveq	r3, #4
 8081556:	2308      	movne	r3, #8
 8081558:	e7da      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = buff[2] == 'r' ? 3 : 5;
 808155a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 808155e:	2b72      	cmp	r3, #114	; 0x72
 8081560:	bf0c      	ite	eq
 8081562:	2303      	moveq	r3, #3
 8081564:	2305      	movne	r3, #5
 8081566:	e7d3      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = 9;
 8081568:	2309      	movs	r3, #9
 808156a:	e7d1      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = 10;
 808156c:	230a      	movs	r3, #10
 808156e:	e7cf      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = 11;
 8081570:	230b      	movs	r3, #11
 8081572:	e7cd      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = 12;
 8081574:	230c      	movs	r3, #12
 8081576:	e7cb      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>

08081578 <_ZNK8DateTime12dayOfTheWeekEv>:
/*!
    @brief  Return the day of the week.
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
 8081578:	b508      	push	{r3, lr}
  uint16_t day = date2days(yOff, m, d);
 808157a:	7882      	ldrb	r2, [r0, #2]
 808157c:	7841      	ldrb	r1, [r0, #1]
 808157e:	7800      	ldrb	r0, [r0, #0]
 8081580:	f7ff ff2c 	bl	80813dc <_ZL9date2daysthh>
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
 8081584:	2307      	movs	r3, #7
 8081586:	3006      	adds	r0, #6
 8081588:	fbb0 f3f3 	udiv	r3, r0, r3
 808158c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8081590:	1ac0      	subs	r0, r0, r3
}
 8081592:	b2c0      	uxtb	r0, r0
 8081594:	bd08      	pop	{r3, pc}

08081596 <_ZL10delay_usecmPv>:
  }

  return 0;
}

static void delay_usec(uint32_t us, void *intf_ptr) {
 8081596:	b508      	push	{r3, lr}
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8081598:	f000 feca 	bl	8082330 <HAL_Delay_Microseconds>
  (void)intf_ptr; // Unused parameter
  delayMicroseconds(us);
  yield();
}
 808159c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
 80815a0:	f000 bed6 	b.w	8082350 <os_thread_yield>

080815a4 <_ZL9spi_writehPKhmPv>:
                        void *intf_ptr) {
 80815a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80815a6:	4604      	mov	r4, r0
 80815a8:	4618      	mov	r0, r3
  if (!_dev->write((uint8_t *)reg_data, len, &reg_addr, 1)) {
 80815aa:	2301      	movs	r3, #1
 80815ac:	9300      	str	r3, [sp, #0]
 80815ae:	f10d 030f 	add.w	r3, sp, #15
                        void *intf_ptr) {
 80815b2:	f88d 400f 	strb.w	r4, [sp, #15]
  if (!_dev->write((uint8_t *)reg_data, len, &reg_addr, 1)) {
 80815b6:	f000 fcd9 	bl	8081f6c <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
 80815ba:	f080 0001 	eor.w	r0, r0, #1
 80815be:	4240      	negs	r0, r0
}
 80815c0:	b240      	sxtb	r0, r0
 80815c2:	b004      	add	sp, #16
 80815c4:	bd10      	pop	{r4, pc}

080815c6 <_ZL8spi_readhPhmPv>:
                       void *intf_ptr) {
 80815c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80815c8:	461c      	mov	r4, r3
  reg_addr |= 0x80;
 80815ca:	f060 037f 	orn	r3, r0, #127	; 0x7f
 80815ce:	f88d 300f 	strb.w	r3, [sp, #15]
  if (!_dev->write_then_read(&reg_addr, 1, reg_data, len, 0x0)) {
 80815d2:	2300      	movs	r3, #0
 80815d4:	4620      	mov	r0, r4
 80815d6:	e9cd 2300 	strd	r2, r3, [sp]
 80815da:	460b      	mov	r3, r1
 80815dc:	2201      	movs	r2, #1
 80815de:	f10d 010f 	add.w	r1, sp, #15
 80815e2:	f000 fce5 	bl	8081fb0 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh>
 80815e6:	f080 0001 	eor.w	r0, r0, #1
 80815ea:	4240      	negs	r0, r0
}
 80815ec:	b240      	sxtb	r0, r0
 80815ee:	b004      	add	sp, #16
 80815f0:	bd10      	pop	{r4, pc}

080815f2 <_ZL9i2c_writehPKhmPv>:
                 void *intf) {
 80815f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80815f4:	4604      	mov	r4, r0
 80815f6:	4618      	mov	r0, r3
  if (!_dev->write((uint8_t *)reg_data, len, true, &reg_addr, 1)) {
 80815f8:	2301      	movs	r3, #1
                 void *intf) {
 80815fa:	f88d 400f 	strb.w	r4, [sp, #15]
  if (!_dev->write((uint8_t *)reg_data, len, true, &reg_addr, 1)) {
 80815fe:	f10d 040f 	add.w	r4, sp, #15
 8081602:	9301      	str	r3, [sp, #4]
 8081604:	9400      	str	r4, [sp, #0]
 8081606:	f000 fdee 	bl	80821e6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 808160a:	f080 0001 	eor.w	r0, r0, #1
 808160e:	4240      	negs	r0, r0
}
 8081610:	b240      	sxtb	r0, r0
 8081612:	b004      	add	sp, #16
 8081614:	bd10      	pop	{r4, pc}

08081616 <_ZL8i2c_readhPhmPv>:
int8_t i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf) {
 8081616:	b530      	push	{r4, r5, lr}
 8081618:	4614      	mov	r4, r2
  if (!_dev->write_then_read(&reg_addr, 1, reg_data, len, true)) {
 808161a:	2201      	movs	r2, #1
int8_t i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf) {
 808161c:	4605      	mov	r5, r0
 808161e:	b085      	sub	sp, #20
 8081620:	4618      	mov	r0, r3
  if (!_dev->write_then_read(&reg_addr, 1, reg_data, len, true)) {
 8081622:	e9cd 4200 	strd	r4, r2, [sp]
 8081626:	460b      	mov	r3, r1
 8081628:	f10d 010f 	add.w	r1, sp, #15
int8_t i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf) {
 808162c:	f88d 500f 	strb.w	r5, [sp, #15]
  if (!_dev->write_then_read(&reg_addr, 1, reg_data, len, true)) {
 8081630:	f000 fe47 	bl	80822c2 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
 8081634:	f080 0001 	eor.w	r0, r0, #1
 8081638:	4240      	negs	r0, r0
}
 808163a:	b240      	sxtb	r0, r0
 808163c:	b005      	add	sp, #20
 808163e:	bd30      	pop	{r4, r5, pc}

08081640 <_ZN15Adafruit_BME680C1EP7TwoWire>:
    : _meas_start(0), _meas_period(0) {
 8081640:	2200      	movs	r2, #0
  _wire = theWire;
 8081642:	6181      	str	r1, [r0, #24]
    : _meas_start(0), _meas_period(0) {
 8081644:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8081648:	6202      	str	r2, [r0, #32]
 808164a:	8482      	strh	r2, [r0, #36]	; 0x24
}
 808164c:	4770      	bx	lr

0808164e <_ZN15Adafruit_BME68012beginReadingEv>:
uint32_t Adafruit_BME680::beginReading(void) {
 808164e:	b570      	push	{r4, r5, r6, lr}
  if (_meas_start != 0) {
 8081650:	6a04      	ldr	r4, [r0, #32]
uint32_t Adafruit_BME680::beginReading(void) {
 8081652:	4606      	mov	r6, r0
  if (_meas_start != 0) {
 8081654:	b11c      	cbz	r4, 808165e <_ZN15Adafruit_BME68012beginReadingEv+0x10>
    return _meas_start + _meas_period;
 8081656:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8081658:	441c      	add	r4, r3
}
 808165a:	4620      	mov	r0, r4
 808165c:	bd70      	pop	{r4, r5, r6, pc}
  int8_t rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &gas_sensor);
 808165e:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8081662:	4629      	mov	r1, r5
 8081664:	2001      	movs	r0, #1
 8081666:	f7ff f99a 	bl	808099e <bme68x_set_op_mode>
  if (rslt != BME68X_OK)
 808166a:	2800      	cmp	r0, #0
 808166c:	d1f5      	bne.n	808165a <_ZN15Adafruit_BME68012beginReadingEv+0xc>
  uint32_t delayus_period = (uint32_t)bme68x_get_meas_dur(
 808166e:	462a      	mov	r2, r5
 8081670:	f106 0178 	add.w	r1, r6, #120	; 0x78
 8081674:	2001      	movs	r0, #1
 8081676:	f7ff fa81 	bl	8080b7c <bme68x_get_meas_dur>
                            ((uint32_t)gas_heatr_conf.heatr_dur * 1000);
 808167a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 808167e:	f8b6 3084 	ldrh.w	r3, [r6, #132]	; 0x84
 8081682:	fb04 0503 	mla	r5, r4, r3, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8081686:	f000 fe5b 	bl	8082340 <HAL_Timer_Get_Milli_Seconds>
  _meas_period = delayus_period / 1000;
 808168a:	fbb5 f3f4 	udiv	r3, r5, r4
 808168e:	84b3      	strh	r3, [r6, #36]	; 0x24
  return _meas_start + _meas_period;
 8081690:	b29b      	uxth	r3, r3
  _meas_start = millis();
 8081692:	6230      	str	r0, [r6, #32]
  return _meas_start + _meas_period;
 8081694:	181c      	adds	r4, r3, r0
 8081696:	e7e0      	b.n	808165a <_ZN15Adafruit_BME68012beginReadingEv+0xc>

08081698 <_ZN15Adafruit_BME68022remainingReadingMillisEv>:
int Adafruit_BME680::remainingReadingMillis(void) {
 8081698:	b538      	push	{r3, r4, r5, lr}
  if (_meas_start != 0) {
 808169a:	6a04      	ldr	r4, [r0, #32]
 808169c:	b13c      	cbz	r4, 80816ae <_ZN15Adafruit_BME68022remainingReadingMillisEv+0x16>
    int remaining_time = (int)_meas_period - (millis() - _meas_start);
 808169e:	8c85      	ldrh	r5, [r0, #36]	; 0x24
 80816a0:	f000 fe4e 	bl	8082340 <HAL_Timer_Get_Milli_Seconds>
 80816a4:	442c      	add	r4, r5
 80816a6:	1a20      	subs	r0, r4, r0
 80816a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80816ac:	bd38      	pop	{r3, r4, r5, pc}
  return reading_not_started;
 80816ae:	f04f 30ff 	mov.w	r0, #4294967295
 80816b2:	e7fb      	b.n	80816ac <_ZN15Adafruit_BME68022remainingReadingMillisEv+0x14>

080816b4 <_ZN15Adafruit_BME68010endReadingEv>:
bool Adafruit_BME680::endReading(void) {
 80816b4:	b530      	push	{r4, r5, lr}
 80816b6:	b089      	sub	sp, #36	; 0x24
 80816b8:	4605      	mov	r5, r0
  uint32_t meas_end = beginReading();
 80816ba:	f7ff ffc8 	bl	808164e <_ZN15Adafruit_BME68012beginReadingEv>
  if (meas_end == 0) {
 80816be:	b360      	cbz	r0, 808171a <_ZN15Adafruit_BME68010endReadingEv+0x66>
  int remaining_millis = remainingReadingMillis();
 80816c0:	4628      	mov	r0, r5
 80816c2:	f7ff ffe9 	bl	8081698 <_ZN15Adafruit_BME68022remainingReadingMillisEv>
  if (remaining_millis > 0) {
 80816c6:	2800      	cmp	r0, #0
 80816c8:	dd02      	ble.n	80816d0 <_ZN15Adafruit_BME68010endReadingEv+0x1c>
    delay(static_cast<unsigned int>(remaining_millis) *
 80816ca:	0040      	lsls	r0, r0, #1
 80816cc:	f001 fa4c 	bl	8082b68 <delay>
  _meas_start = 0; /* Allow new measurement to begin */
 80816d0:	2400      	movs	r4, #0
      bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &gas_sensor);
 80816d2:	2001      	movs	r0, #1
  _meas_start = 0; /* Allow new measurement to begin */
 80816d4:	622c      	str	r4, [r5, #32]
  _meas_period = 0;
 80816d6:	84ac      	strh	r4, [r5, #36]	; 0x24
      bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &gas_sensor);
 80816d8:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80816dc:	f10d 0207 	add.w	r2, sp, #7
 80816e0:	a902      	add	r1, sp, #8
 80816e2:	f7ff fa89 	bl	8080bf8 <bme68x_get_data>
  if (rslt != BME68X_OK)
 80816e6:	b9b8      	cbnz	r0, 8081718 <_ZN15Adafruit_BME68010endReadingEv+0x64>
  if (n_fields) {
 80816e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80816ec:	b183      	cbz	r3, 8081710 <_ZN15Adafruit_BME68010endReadingEv+0x5c>
    temperature = data.temperature;
 80816ee:	9b04      	ldr	r3, [sp, #16]
    pressure = data.pressure;
 80816f0:	9805      	ldr	r0, [sp, #20]
    temperature = data.temperature;
 80816f2:	602b      	str	r3, [r5, #0]
    humidity = data.humidity;
 80816f4:	9b06      	ldr	r3, [sp, #24]
 80816f6:	60ab      	str	r3, [r5, #8]
    pressure = data.pressure;
 80816f8:	f002 fe6c 	bl	80843d4 <__aeabi_f2uiz>
    if (data.status & (BME68X_HEAT_STAB_MSK | BME68X_GASM_VALID_MSK)) {
 80816fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
    pressure = data.pressure;
 8081700:	6068      	str	r0, [r5, #4]
    if (data.status & (BME68X_HEAT_STAB_MSK | BME68X_GASM_VALID_MSK)) {
 8081702:	f013 0330 	ands.w	r3, r3, #48	; 0x30
 8081706:	d005      	beq.n	8081714 <_ZN15Adafruit_BME68010endReadingEv+0x60>
      gas_resistance = data.gas_resistance;
 8081708:	9807      	ldr	r0, [sp, #28]
 808170a:	f002 fe63 	bl	80843d4 <__aeabi_f2uiz>
 808170e:	60e8      	str	r0, [r5, #12]
  return true;
 8081710:	2001      	movs	r0, #1
 8081712:	e002      	b.n	808171a <_ZN15Adafruit_BME68010endReadingEv+0x66>
      gas_resistance = 0;
 8081714:	60eb      	str	r3, [r5, #12]
 8081716:	e7fb      	b.n	8081710 <_ZN15Adafruit_BME68010endReadingEv+0x5c>
    return false;
 8081718:	4620      	mov	r0, r4
}
 808171a:	b009      	add	sp, #36	; 0x24
 808171c:	bd30      	pop	{r4, r5, pc}

0808171e <_ZN15Adafruit_BME68014performReadingEv>:
bool Adafruit_BME680::performReading(void) { return endReading(); }
 808171e:	f7ff bfc9 	b.w	80816b4 <_ZN15Adafruit_BME68010endReadingEv>

08081722 <_ZN15Adafruit_BME68015readTemperatureEv>:
float Adafruit_BME680::readTemperature(void) {
 8081722:	b510      	push	{r4, lr}
 8081724:	4604      	mov	r4, r0
  performReading();
 8081726:	f7ff fffa 	bl	808171e <_ZN15Adafruit_BME68014performReadingEv>
}
 808172a:	6820      	ldr	r0, [r4, #0]
 808172c:	bd10      	pop	{r4, pc}

0808172e <_ZN15Adafruit_BME68012readPressureEv>:
float Adafruit_BME680::readPressure(void) {
 808172e:	b510      	push	{r4, lr}
 8081730:	4604      	mov	r4, r0
  performReading();
 8081732:	f7ff fff4 	bl	808171e <_ZN15Adafruit_BME68014performReadingEv>
  return pressure;
 8081736:	6860      	ldr	r0, [r4, #4]
 8081738:	f002 fc08 	bl	8083f4c <__aeabi_ui2f>
}
 808173c:	bd10      	pop	{r4, pc}

0808173e <_ZN15Adafruit_BME68012readHumidityEv>:
float Adafruit_BME680::readHumidity(void) {
 808173e:	b510      	push	{r4, lr}
 8081740:	4604      	mov	r4, r0
  performReading();
 8081742:	f7ff ffec 	bl	808171e <_ZN15Adafruit_BME68014performReadingEv>
}
 8081746:	68a0      	ldr	r0, [r4, #8]
 8081748:	bd10      	pop	{r4, pc}

0808174a <_ZN15Adafruit_BME6807readGasEv>:
uint32_t Adafruit_BME680::readGas(void) {
 808174a:	b510      	push	{r4, lr}
 808174c:	4604      	mov	r4, r0
  performReading();
 808174e:	f7ff ffe6 	bl	808171e <_ZN15Adafruit_BME68014performReadingEv>
}
 8081752:	68e0      	ldr	r0, [r4, #12]
 8081754:	bd10      	pop	{r4, pc}

08081756 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
 8081756:	b508      	push	{r3, lr}
  if ((heaterTemp == 0) || (heaterTime == 0)) {
 8081758:	b101      	cbz	r1, 808175c <_ZN15Adafruit_BME68012setGasHeaterEtt+0x6>
 808175a:	b96a      	cbnz	r2, 8081778 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x22>
    gas_heatr_conf.enable = BME68X_DISABLE;
 808175c:	2300      	movs	r3, #0
 808175e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      bme68x_set_heatr_conf(BME68X_FORCED_MODE, &gas_heatr_conf, &gas_sensor);
 8081762:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8081766:	f100 0180 	add.w	r1, r0, #128	; 0x80
 808176a:	2001      	movs	r0, #1
 808176c:	f7ff fc6a 	bl	8081044 <bme68x_set_heatr_conf>
}
 8081770:	fab0 f080 	clz	r0, r0
 8081774:	0940      	lsrs	r0, r0, #5
 8081776:	bd08      	pop	{r3, pc}
    gas_heatr_conf.enable = BME68X_ENABLE;
 8081778:	2301      	movs	r3, #1
    gas_heatr_conf.heatr_temp = heaterTemp;
 808177a:	f8a0 1082 	strh.w	r1, [r0, #130]	; 0x82
    gas_heatr_conf.enable = BME68X_ENABLE;
 808177e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    gas_heatr_conf.heatr_dur = heaterTime;
 8081782:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 8081786:	e7ec      	b.n	8081762 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>

08081788 <_ZN15Adafruit_BME6806setODREh>:
  if (odr > BME68X_ODR_NONE)
 8081788:	2908      	cmp	r1, #8
bool Adafruit_BME680::setODR(uint8_t odr) {
 808178a:	b508      	push	{r3, lr}
  if (odr > BME68X_ODR_NONE)
 808178c:	d80a      	bhi.n	80817a4 <_ZN15Adafruit_BME6806setODREh+0x1c>
  gas_conf.odr = odr;
 808178e:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
  int8_t rslt = bme68x_set_conf(&gas_conf, &gas_sensor);
 8081792:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8081796:	3078      	adds	r0, #120	; 0x78
 8081798:	f7ff f952 	bl	8080a40 <bme68x_set_conf>
  return rslt == 0;
 808179c:	fab0 f080 	clz	r0, r0
 80817a0:	0940      	lsrs	r0, r0, #5
}
 80817a2:	bd08      	pop	{r3, pc}
    return false;
 80817a4:	2000      	movs	r0, #0
 80817a6:	e7fc      	b.n	80817a2 <_ZN15Adafruit_BME6806setODREh+0x1a>

080817a8 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
  if (oversample > BME68X_OS_16X)
 80817a8:	2905      	cmp	r1, #5
bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
 80817aa:	b508      	push	{r3, lr}
  if (oversample > BME68X_OS_16X)
 80817ac:	d80a      	bhi.n	80817c4 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x1c>
  gas_conf.os_temp = oversample;
 80817ae:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
  int8_t rslt = bme68x_set_conf(&gas_conf, &gas_sensor);
 80817b2:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80817b6:	3078      	adds	r0, #120	; 0x78
 80817b8:	f7ff f942 	bl	8080a40 <bme68x_set_conf>
  return rslt == 0;
 80817bc:	fab0 f080 	clz	r0, r0
 80817c0:	0940      	lsrs	r0, r0, #5
}
 80817c2:	bd08      	pop	{r3, pc}
    return false;
 80817c4:	2000      	movs	r0, #0
 80817c6:	e7fc      	b.n	80817c2 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x1a>

080817c8 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
  if (oversample > BME68X_OS_16X)
 80817c8:	2905      	cmp	r1, #5
bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
 80817ca:	b508      	push	{r3, lr}
  if (oversample > BME68X_OS_16X)
 80817cc:	d80a      	bhi.n	80817e4 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x1c>
  gas_conf.os_hum = oversample;
 80817ce:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
  int8_t rslt = bme68x_set_conf(&gas_conf, &gas_sensor);
 80817d2:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80817d6:	3078      	adds	r0, #120	; 0x78
 80817d8:	f7ff f932 	bl	8080a40 <bme68x_set_conf>
  return rslt == 0;
 80817dc:	fab0 f080 	clz	r0, r0
 80817e0:	0940      	lsrs	r0, r0, #5
}
 80817e2:	bd08      	pop	{r3, pc}
    return false;
 80817e4:	2000      	movs	r0, #0
 80817e6:	e7fc      	b.n	80817e2 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x1a>

080817e8 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
  if (oversample > BME68X_OS_16X)
 80817e8:	2905      	cmp	r1, #5
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
 80817ea:	b508      	push	{r3, lr}
  if (oversample > BME68X_OS_16X)
 80817ec:	d80a      	bhi.n	8081804 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x1c>
  gas_conf.os_pres = oversample;
 80817ee:	f880 107a 	strb.w	r1, [r0, #122]	; 0x7a
  int8_t rslt = bme68x_set_conf(&gas_conf, &gas_sensor);
 80817f2:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80817f6:	3078      	adds	r0, #120	; 0x78
 80817f8:	f7ff f922 	bl	8080a40 <bme68x_set_conf>
  return rslt == 0;
 80817fc:	fab0 f080 	clz	r0, r0
 8081800:	0940      	lsrs	r0, r0, #5
}
 8081802:	bd08      	pop	{r3, pc}
    return false;
 8081804:	2000      	movs	r0, #0
 8081806:	e7fc      	b.n	8081802 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x1a>

08081808 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
  if (filtersize > BME68X_FILTER_SIZE_127)
 8081808:	2907      	cmp	r1, #7
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
 808180a:	b508      	push	{r3, lr}
  if (filtersize > BME68X_FILTER_SIZE_127)
 808180c:	d80a      	bhi.n	8081824 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x1c>
  gas_conf.filter = filtersize;
 808180e:	f880 107b 	strb.w	r1, [r0, #123]	; 0x7b
  int8_t rslt = bme68x_set_conf(&gas_conf, &gas_sensor);
 8081812:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8081816:	3078      	adds	r0, #120	; 0x78
 8081818:	f7ff f912 	bl	8080a40 <bme68x_set_conf>
  return rslt == 0;
 808181c:	fab0 f080 	clz	r0, r0
 8081820:	0940      	lsrs	r0, r0, #5
}
 8081822:	bd08      	pop	{r3, pc}
    return false;
 8081824:	2000      	movs	r0, #0
 8081826:	e7fc      	b.n	8081822 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x1a>

08081828 <_ZN15Adafruit_BME6805beginEhb>:
bool Adafruit_BME680::begin(uint8_t addr, bool initSettings) {
 8081828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808182a:	4604      	mov	r4, r0
  if (!_spidev) { // i2c
 808182c:	6940      	ldr	r0, [r0, #20]
bool Adafruit_BME680::begin(uint8_t addr, bool initSettings) {
 808182e:	460f      	mov	r7, r1
 8081830:	4616      	mov	r6, r2
  if (!_spidev) { // i2c
 8081832:	2800      	cmp	r0, #0
 8081834:	d14f      	bne.n	80818d6 <_ZN15Adafruit_BME6805beginEhb+0xae>
    if (_i2cdev) {
 8081836:	6920      	ldr	r0, [r4, #16]
 8081838:	b110      	cbz	r0, 8081840 <_ZN15Adafruit_BME6805beginEhb+0x18>
      delete _i2cdev;
 808183a:	2110      	movs	r1, #16
 808183c:	f7fe fc2f 	bl	808009e <_ZdlPvj>
    _i2cdev = new Adafruit_I2CDevice(addr, _wire);
 8081840:	2010      	movs	r0, #16
 8081842:	f7fe fc28 	bl	8080096 <_Znwj>
 8081846:	4605      	mov	r5, r0
 8081848:	b118      	cbz	r0, 8081852 <_ZN15Adafruit_BME6805beginEhb+0x2a>
 808184a:	4639      	mov	r1, r7
 808184c:	69a2      	ldr	r2, [r4, #24]
 808184e:	f000 fc9f 	bl	8082190 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
    if (!_i2cdev->begin()) {
 8081852:	2101      	movs	r1, #1
 8081854:	4628      	mov	r0, r5
    _i2cdev = new Adafruit_I2CDevice(addr, _wire);
 8081856:	6125      	str	r5, [r4, #16]
    if (!_i2cdev->begin()) {
 8081858:	f000 fcb6 	bl	80821c8 <_ZN18Adafruit_I2CDevice5beginEb>
 808185c:	b908      	cbnz	r0, 8081862 <_ZN15Adafruit_BME6805beginEhb+0x3a>
      return false;
 808185e:	2000      	movs	r0, #0
}
 8081860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    gas_sensor.intf = BME68X_I2C_INTF;
 8081862:	2301      	movs	r3, #1
 8081864:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    gas_sensor.intf_ptr = (void *)_i2cdev;
 8081868:	6923      	ldr	r3, [r4, #16]
    gas_sensor.chip_id = addr;
 808186a:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
    gas_sensor.intf_ptr = (void *)_i2cdev;
 808186e:	62e3      	str	r3, [r4, #44]	; 0x2c
    gas_sensor.read = &i2c_read;
 8081870:	4b22      	ldr	r3, [pc, #136]	; (80818fc <_ZN15Adafruit_BME6805beginEhb+0xd4>)
 8081872:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &i2c_write;
 8081874:	4b22      	ldr	r3, [pc, #136]	; (8081900 <_ZN15Adafruit_BME6805beginEhb+0xd8>)
    gas_sensor.write = &spi_write;
 8081876:	66e3      	str	r3, [r4, #108]	; 0x6c
  gas_sensor.amb_temp = 25; /* The ambient temperature in deg C is used for
 8081878:	2319      	movs	r3, #25
 808187a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  gas_sensor.delay_us = delay_usec;
 808187e:	4b21      	ldr	r3, [pc, #132]	; (8081904 <_ZN15Adafruit_BME6805beginEhb+0xdc>)
  rslt = bme68x_init(&gas_sensor);
 8081880:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8081884:	4628      	mov	r0, r5
  gas_sensor.delay_us = delay_usec;
 8081886:	6723      	str	r3, [r4, #112]	; 0x70
  rslt = bme68x_init(&gas_sensor);
 8081888:	f7fe ffdf 	bl	808084a <bme68x_init>
  if (rslt != BME68X_OK)
 808188c:	2800      	cmp	r0, #0
 808188e:	d1e6      	bne.n	808185e <_ZN15Adafruit_BME6805beginEhb+0x36>
  if (initSettings) {
 8081890:	b386      	cbz	r6, 80818f4 <_ZN15Adafruit_BME6805beginEhb+0xcc>
    setIIRFilterSize(BME68X_FILTER_SIZE_3);
 8081892:	2102      	movs	r1, #2
 8081894:	4620      	mov	r0, r4
 8081896:	f7ff ffb7 	bl	8081808 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
    setODR(BME68X_ODR_NONE);
 808189a:	2108      	movs	r1, #8
 808189c:	4620      	mov	r0, r4
 808189e:	f7ff ff73 	bl	8081788 <_ZN15Adafruit_BME6806setODREh>
    setHumidityOversampling(BME68X_OS_2X);
 80818a2:	2102      	movs	r1, #2
 80818a4:	4620      	mov	r0, r4
 80818a6:	f7ff ff8f 	bl	80817c8 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
    setPressureOversampling(BME68X_OS_4X);
 80818aa:	2103      	movs	r1, #3
 80818ac:	4620      	mov	r0, r4
 80818ae:	f7ff ff9b 	bl	80817e8 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
    setTemperatureOversampling(BME68X_OS_8X);
 80818b2:	2104      	movs	r1, #4
 80818b4:	4620      	mov	r0, r4
 80818b6:	f7ff ff77 	bl	80817a8 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
    setGasHeater(320, 150); // 320*C for 150 ms
 80818ba:	2296      	movs	r2, #150	; 0x96
 80818bc:	f44f 71a0 	mov.w	r1, #320	; 0x140
    setGasHeater(0, 0);
 80818c0:	4620      	mov	r0, r4
 80818c2:	f7ff ff48 	bl	8081756 <_ZN15Adafruit_BME68012setGasHeaterEtt>
  rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &gas_sensor);
 80818c6:	4629      	mov	r1, r5
 80818c8:	2001      	movs	r0, #1
 80818ca:	f7ff f868 	bl	808099e <bme68x_set_op_mode>
  if (rslt != BME68X_OK)
 80818ce:	fab0 f080 	clz	r0, r0
 80818d2:	0940      	lsrs	r0, r0, #5
 80818d4:	e7c4      	b.n	8081860 <_ZN15Adafruit_BME6805beginEhb+0x38>
    if (!_spidev->begin()) {
 80818d6:	f000 fa2f 	bl	8081d38 <_ZN18Adafruit_SPIDevice5beginEv>
 80818da:	2800      	cmp	r0, #0
 80818dc:	d0bf      	beq.n	808185e <_ZN15Adafruit_BME6805beginEhb+0x36>
    gas_sensor.chip_id = 0;
 80818de:	2300      	movs	r3, #0
 80818e0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    gas_sensor.intf = BME68X_SPI_INTF;
 80818e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    gas_sensor.intf_ptr = (void *)_spidev;
 80818e8:	6963      	ldr	r3, [r4, #20]
 80818ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    gas_sensor.read = &spi_read;
 80818ec:	4b06      	ldr	r3, [pc, #24]	; (8081908 <_ZN15Adafruit_BME6805beginEhb+0xe0>)
 80818ee:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
 80818f0:	4b06      	ldr	r3, [pc, #24]	; (808190c <_ZN15Adafruit_BME6805beginEhb+0xe4>)
 80818f2:	e7c0      	b.n	8081876 <_ZN15Adafruit_BME6805beginEhb+0x4e>
    setGasHeater(0, 0);
 80818f4:	4632      	mov	r2, r6
 80818f6:	4631      	mov	r1, r6
 80818f8:	e7e2      	b.n	80818c0 <_ZN15Adafruit_BME6805beginEhb+0x98>
 80818fa:	bf00      	nop
 80818fc:	08081617 	.word	0x08081617
 8081900:	080815f3 	.word	0x080815f3
 8081904:	08081597 	.word	0x08081597
 8081908:	080815c7 	.word	0x080815c7
 808190c:	080815a5 	.word	0x080815a5

08081910 <setup>:
#if BME_ENABLED
  Adafruit_BME680 bme680;
#endif

// setup() runs once, when the device is first turned on
void setup() {
 8081910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Put initialization like pinMode and begin functions here
  #if SERIAL_ENABLED
    Serial.begin(9600);
 8081912:	f001 faab 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081916:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808191a:	f001 fa8d 	bl	8082e38 <_ZN9USBSerial5beginEl>
  #endif

  #if DS3231_ENABLED
    ds3231.begin();
 808191e:	f001 fd85 	bl	808342c <_Z19__fetch_global_Wirev>
 8081922:	4601      	mov	r1, r0
 8081924:	481e      	ldr	r0, [pc, #120]	; (80819a0 <setup+0x90>)
 8081926:	f000 fb67 	bl	8081ff8 <_ZN10RTC_DS32315beginEP7TwoWire>
      DateTime firsttime = ds3231.now();
 808192a:	4668      	mov	r0, sp
 808192c:	491c      	ldr	r1, [pc, #112]	; (80819a0 <setup+0x90>)
 808192e:	f000 fbdc 	bl	80820ea <_ZN10RTC_DS32313nowEv>
      ds3231.adjust(DateTime(F(__DATE__), F(__TIME__))); 
 8081932:	4a1c      	ldr	r2, [pc, #112]	; (80819a4 <setup+0x94>)
 8081934:	491c      	ldr	r1, [pc, #112]	; (80819a8 <setup+0x98>)
 8081936:	a802      	add	r0, sp, #8
 8081938:	f7ff fdbe 	bl	80814b8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
 808193c:	a902      	add	r1, sp, #8
 808193e:	4818      	ldr	r0, [pc, #96]	; (80819a0 <setup+0x90>)
 8081940:	f000 fb72 	bl	8082028 <_ZN10RTC_DS32316adjustERK8DateTime>
  #endif //DS3231_ENABLED
  
  #if ADS_ENABLED
    ads_module.begin();
 8081944:	4819      	ldr	r0, [pc, #100]	; (80819ac <setup+0x9c>)
 8081946:	f000 f991 	bl	8081c6c <_ZN10ADS_Module5beginEv>
  #endif  //ADS_ENABLED

  #if BME_ENABLED    
    bme680.begin(BME_SENSOR_ADDR);
 808194a:	2201      	movs	r2, #1
 808194c:	2176      	movs	r1, #118	; 0x76
 808194e:	4818      	ldr	r0, [pc, #96]	; (80819b0 <setup+0xa0>)
 8081950:	f7ff ff6a 	bl	8081828 <_ZN15Adafruit_BME6805beginEhb>
    if (!bme680.begin(BME_SENSOR_ADDR)) {
 8081954:	2201      	movs	r2, #1
 8081956:	2176      	movs	r1, #118	; 0x76
 8081958:	4815      	ldr	r0, [pc, #84]	; (80819b0 <setup+0xa0>)
 808195a:	f7ff ff65 	bl	8081828 <_ZN15Adafruit_BME6805beginEhb>
 808195e:	b928      	cbnz	r0, 808196c <setup+0x5c>
      Serial.println(F("Could not find a valid BME680 sensor, check wiring!"));
 8081960:	f001 fa84 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081964:	4913      	ldr	r1, [pc, #76]	; (80819b4 <setup+0xa4>)
 8081966:	f000 fffc 	bl	8082962 <_ZN5Print7printlnEPK19__FlashStringHelper>
      while (1);
 808196a:	e7fe      	b.n	808196a <setup+0x5a>
    } //if(!bme680.begin(BME680_CS))
    //Set up oversampling an initialize filter
    bme680.setTemperatureOversampling(BME680_OS_8X);
 808196c:	2104      	movs	r1, #4
 808196e:	4810      	ldr	r0, [pc, #64]	; (80819b0 <setup+0xa0>)
 8081970:	f7ff ff1a 	bl	80817a8 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
    bme680.setHumidityOversampling(BME680_OS_2X);
 8081974:	2102      	movs	r1, #2
 8081976:	480e      	ldr	r0, [pc, #56]	; (80819b0 <setup+0xa0>)
 8081978:	f7ff ff26 	bl	80817c8 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
    bme680.setPressureOversampling(BME680_OS_4X);
 808197c:	2103      	movs	r1, #3
 808197e:	480c      	ldr	r0, [pc, #48]	; (80819b0 <setup+0xa0>)
 8081980:	f7ff ff32 	bl	80817e8 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
    bme680.setIIRFilterSize(BME680_FILTER_SIZE_3);
 8081984:	2102      	movs	r1, #2
 8081986:	480a      	ldr	r0, [pc, #40]	; (80819b0 <setup+0xa0>)
 8081988:	f7ff ff3e 	bl	8081808 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
    bme680.setGasHeater(320, 150);
 808198c:	2296      	movs	r2, #150	; 0x96
 808198e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8081992:	4807      	ldr	r0, [pc, #28]	; (80819b0 <setup+0xa0>)
 8081994:	f7ff fedf 	bl	8081756 <_ZN15Adafruit_BME68012setGasHeaterEtt>
  #endif  //BME_ENABLED
}
 8081998:	b005      	add	sp, #20
 808199a:	f85d fb04 	ldr.w	pc, [sp], #4
 808199e:	bf00      	nop
 80819a0:	200001d8 	.word	0x200001d8
 80819a4:	08084647 	.word	0x08084647
 80819a8:	08084650 	.word	0x08084650
 80819ac:	200000a4 	.word	0x200000a4
 80819b0:	20000144 	.word	0x20000144
 80819b4:	0808465c 	.word	0x0808465c

080819b8 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80819b8:	b570      	push	{r4, r5, r6, lr}
 80819ba:	b08a      	sub	sp, #40	; 0x28
  //     // output by USB serial, because it can conflict with
  //     // serial commands.
  //     return;
  // }
  #if DS3231_ENABLED
    DateTime now = ds3231.now();
 80819bc:	4970      	ldr	r1, [pc, #448]	; (8081b80 <loop+0x1c8>)
 80819be:	a808      	add	r0, sp, #32
 80819c0:	f000 fb93 	bl	80820ea <_ZN10RTC_DS32313nowEv>

  /*!
      @brief  Return the year.
      @return Year (range: 2000--2099).
  */
  uint16_t year() const { return 2000U + yOff; }
 80819c4:	f89d 2020 	ldrb.w	r2, [sp, #32]
    Y = now.year();  M = now.month();  D = now.day();  h = now.hour();  m = now.minute();  s = now.second();
 80819c8:	4b6e      	ldr	r3, [pc, #440]	; (8081b84 <loop+0x1cc>)
 80819ca:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80819ce:	601a      	str	r2, [r3, #0]
 80819d0:	496d      	ldr	r1, [pc, #436]	; (8081b88 <loop+0x1d0>)
 80819d2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80819d6:	486d      	ldr	r0, [pc, #436]	; (8081b8c <loop+0x1d4>)
 80819d8:	600b      	str	r3, [r1, #0]
 80819da:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
 80819de:	4c6c      	ldr	r4, [pc, #432]	; (8081b90 <loop+0x1d8>)
 80819e0:	6001      	str	r1, [r0, #0]
 80819e2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 80819e6:	4d6b      	ldr	r5, [pc, #428]	; (8081b94 <loop+0x1dc>)
 80819e8:	6020      	str	r0, [r4, #0]
 80819ea:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80819ee:	4e6a      	ldr	r6, [pc, #424]	; (8081b98 <loop+0x1e0>)
 80819f0:	602c      	str	r4, [r5, #0]
 80819f2:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
    sprintf(bufftime, "%04u-%02u-%02uT%02u:%02u:%02u", Y, M, D, h, m, s);
 80819f6:	e9cd 1000 	strd	r1, r0, [sp]
 80819fa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80819fe:	4967      	ldr	r1, [pc, #412]	; (8081b9c <loop+0x1e4>)
 8081a00:	4867      	ldr	r0, [pc, #412]	; (8081ba0 <loop+0x1e8>)
    Y = now.year();  M = now.month();  D = now.day();  h = now.hour();  m = now.minute();  s = now.second();
 8081a02:	6035      	str	r5, [r6, #0]
    sprintf(bufftime, "%04u-%02u-%02uT%02u:%02u:%02u", Y, M, D, h, m, s);
 8081a04:	f000 fe80 	bl	8082708 <sprintf>
  #endif  //DS3231_ENABLED
  
  #if ADS_ENABLED
    ads = ads_module.return_updated();
 8081a08:	a804      	add	r0, sp, #16
 8081a0a:	4966      	ldr	r1, [pc, #408]	; (8081ba4 <loop+0x1ec>)
 8081a0c:	f000 f95e 	bl	8081ccc <_ZN10ADS_Module14return_updatedEv>
 8081a10:	4c65      	ldr	r4, [pc, #404]	; (8081ba8 <loop+0x1f0>)
 8081a12:	9b04      	ldr	r3, [sp, #16]
    // Serial.println(F("you did it"));
  #endif  //ADS_ENABLED

  #if BME_ENABLED
    if(!bme680.performReading())  {
 8081a14:	4865      	ldr	r0, [pc, #404]	; (8081bac <loop+0x1f4>)
    ads = ads_module.return_updated();
 8081a16:	6023      	str	r3, [r4, #0]
 8081a18:	9b05      	ldr	r3, [sp, #20]
 8081a1a:	6063      	str	r3, [r4, #4]
 8081a1c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8081a20:	8123      	strh	r3, [r4, #8]
    if(!bme680.performReading())  {
 8081a22:	f7ff fe7c 	bl	808171e <_ZN15Adafruit_BME68014performReadingEv>
 8081a26:	b930      	cbnz	r0, 8081a36 <loop+0x7e>
      Serial.println(F("Failed to perform reading :("));
 8081a28:	f001 fa20 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081a2c:	4960      	ldr	r1, [pc, #384]	; (8081bb0 <loop+0x1f8>)
 8081a2e:	f000 ff98 	bl	8082962 <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
  // Example: Publish event to cloud every 10 seconds. Uncomment the next 3 lines to try it!
  // Log.info("Sending Hello World to the cloud!");
  // Particle.publish("Hello world!");
  // delay( 10 * 1000 ); // milliseconds and blocking - see docs for more info!
}
 8081a32:	b00a      	add	sp, #40	; 0x28
 8081a34:	bd70      	pop	{r4, r5, r6, pc}
 8081a36:	f000 fc83 	bl	8082340 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastLog >= logPeriod.count())
 8081a3a:	4d5e      	ldr	r5, [pc, #376]	; (8081bb4 <loop+0x1fc>)
 8081a3c:	682b      	ldr	r3, [r5, #0]
 8081a3e:	1ac0      	subs	r0, r0, r3
 8081a40:	f241 3387 	movw	r3, #4999	; 0x1387
 8081a44:	4298      	cmp	r0, r3
 8081a46:	d9f4      	bls.n	8081a32 <loop+0x7a>
 8081a48:	f000 fc7a 	bl	8082340 <HAL_Timer_Get_Milli_Seconds>
    lastLog = millis();
 8081a4c:	6028      	str	r0, [r5, #0]
      Serial.println();
 8081a4e:	f001 fa0d 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081a52:	f000 ff70 	bl	8082936 <_ZN5Print7printlnEv>
        Serial.print(bufftime);
 8081a56:	f001 fa09 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081a5a:	4951      	ldr	r1, [pc, #324]	; (8081ba0 <loop+0x1e8>)
 8081a5c:	f000 ff60 	bl	8082920 <_ZN5Print5printEPKc>
        Serial.print(F(","));
 8081a60:	f001 fa04 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081a64:	4954      	ldr	r1, [pc, #336]	; (8081bb8 <loop+0x200>)
 8081a66:	f000 ff62 	bl	808292e <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(ads.Fig1); 
 8081a6a:	f001 f9ff 	bl	8082e6c <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8081a6e:	220a      	movs	r2, #10
 8081a70:	8821      	ldrh	r1, [r4, #0]
 8081a72:	f000 ff78 	bl	8082966 <_ZN5Print11printNumberEmh>
        Serial.print(F(","));
 8081a76:	f001 f9f9 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081a7a:	494f      	ldr	r1, [pc, #316]	; (8081bb8 <loop+0x200>)
 8081a7c:	f000 ff57 	bl	808292e <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 8081a80:	2064      	movs	r0, #100	; 0x64
 8081a82:	f001 f871 	bl	8082b68 <delay>
        Serial.print(ads.Fig2); 
 8081a86:	f001 f9f1 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081a8a:	220a      	movs	r2, #10
 8081a8c:	8861      	ldrh	r1, [r4, #2]
 8081a8e:	f000 ff6a 	bl	8082966 <_ZN5Print11printNumberEmh>
        Serial.print(F(","));
 8081a92:	f001 f9eb 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081a96:	4948      	ldr	r1, [pc, #288]	; (8081bb8 <loop+0x200>)
 8081a98:	f000 ff49 	bl	808292e <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 8081a9c:	2064      	movs	r0, #100	; 0x64
 8081a9e:	f001 f863 	bl	8082b68 <delay>
        Serial.print(ads.Fig3); 
 8081aa2:	f001 f9e3 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081aa6:	220a      	movs	r2, #10
 8081aa8:	88a1      	ldrh	r1, [r4, #4]
 8081aaa:	f000 ff5c 	bl	8082966 <_ZN5Print11printNumberEmh>
        Serial.print(F(","));
 8081aae:	f001 f9dd 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081ab2:	4941      	ldr	r1, [pc, #260]	; (8081bb8 <loop+0x200>)
 8081ab4:	f000 ff3b 	bl	808292e <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 8081ab8:	2064      	movs	r0, #100	; 0x64
 8081aba:	f001 f855 	bl	8082b68 <delay>
        Serial.print(ads.Worker); 
 8081abe:	f001 f9d5 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081ac2:	220a      	movs	r2, #10
 8081ac4:	88e1      	ldrh	r1, [r4, #6]
 8081ac6:	f000 ff4e 	bl	8082966 <_ZN5Print11printNumberEmh>
        Serial.print(F(","));
 8081aca:	f001 f9cf 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081ace:	493a      	ldr	r1, [pc, #232]	; (8081bb8 <loop+0x200>)
 8081ad0:	f000 ff2d 	bl	808292e <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 8081ad4:	2064      	movs	r0, #100	; 0x64
 8081ad6:	f001 f847 	bl	8082b68 <delay>
        Serial.print(ads.Auxiliary); 
 8081ada:	f001 f9c7 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081ade:	220a      	movs	r2, #10
 8081ae0:	8921      	ldrh	r1, [r4, #8]
 8081ae2:	f000 ff40 	bl	8082966 <_ZN5Print11printNumberEmh>
        Serial.print(F(","));
 8081ae6:	f001 f9c1 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081aea:	4933      	ldr	r1, [pc, #204]	; (8081bb8 <loop+0x200>)
 8081aec:	f000 ff1f 	bl	808292e <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 8081af0:	2064      	movs	r0, #100	; 0x64
 8081af2:	f001 f839 	bl	8082b68 <delay>
        Serial.print(bme680.readTemperature());
 8081af6:	f001 f9b9 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081afa:	4604      	mov	r4, r0
 8081afc:	482b      	ldr	r0, [pc, #172]	; (8081bac <loop+0x1f4>)
 8081afe:	f7ff fe10 	bl	8081722 <_ZN15Adafruit_BME68015readTemperatureEv>
 8081b02:	2202      	movs	r2, #2
 8081b04:	4601      	mov	r1, r0
 8081b06:	4620      	mov	r0, r4
 8081b08:	f001 f80c 	bl	8082b24 <_ZN5Print5printEfi>
        Serial.print(F(","));
 8081b0c:	f001 f9ae 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081b10:	4929      	ldr	r1, [pc, #164]	; (8081bb8 <loop+0x200>)
 8081b12:	f000 ff0c 	bl	808292e <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(bme680.readPressure());
 8081b16:	f001 f9a9 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081b1a:	4604      	mov	r4, r0
 8081b1c:	4823      	ldr	r0, [pc, #140]	; (8081bac <loop+0x1f4>)
 8081b1e:	f7ff fe06 	bl	808172e <_ZN15Adafruit_BME68012readPressureEv>
 8081b22:	2202      	movs	r2, #2
 8081b24:	4601      	mov	r1, r0
 8081b26:	4620      	mov	r0, r4
 8081b28:	f000 fffc 	bl	8082b24 <_ZN5Print5printEfi>
        Serial.print(F(","));
 8081b2c:	f001 f99e 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081b30:	4921      	ldr	r1, [pc, #132]	; (8081bb8 <loop+0x200>)
 8081b32:	f000 fefc 	bl	808292e <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(bme680.readHumidity());
 8081b36:	f001 f999 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081b3a:	4604      	mov	r4, r0
 8081b3c:	481b      	ldr	r0, [pc, #108]	; (8081bac <loop+0x1f4>)
 8081b3e:	f7ff fdfe 	bl	808173e <_ZN15Adafruit_BME68012readHumidityEv>
 8081b42:	2202      	movs	r2, #2
 8081b44:	4601      	mov	r1, r0
 8081b46:	4620      	mov	r0, r4
 8081b48:	f000 ffec 	bl	8082b24 <_ZN5Print5printEfi>
        Serial.print(F(","));
 8081b4c:	f001 f98e 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081b50:	4919      	ldr	r1, [pc, #100]	; (8081bb8 <loop+0x200>)
 8081b52:	f000 feec 	bl	808292e <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(bme680.readGas());
 8081b56:	f001 f989 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081b5a:	4604      	mov	r4, r0
 8081b5c:	4813      	ldr	r0, [pc, #76]	; (8081bac <loop+0x1f4>)
 8081b5e:	f7ff fdf4 	bl	808174a <_ZN15Adafruit_BME6807readGasEv>
 8081b62:	220a      	movs	r2, #10
 8081b64:	4601      	mov	r1, r0
 8081b66:	4620      	mov	r0, r4
 8081b68:	f000 fefd 	bl	8082966 <_ZN5Print11printNumberEmh>
        Serial.print(F(","));
 8081b6c:	f001 f97e 	bl	8082e6c <_Z16_fetch_usbserialv>
 8081b70:	4911      	ldr	r1, [pc, #68]	; (8081bb8 <loop+0x200>)
 8081b72:	f000 fedc 	bl	808292e <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 8081b76:	2064      	movs	r0, #100	; 0x64
 8081b78:	f000 fff6 	bl	8082b68 <delay>
 8081b7c:	e759      	b.n	8081a32 <loop+0x7a>
 8081b7e:	bf00      	nop
 8081b80:	200001d8 	.word	0x200001d8
 8081b84:	20000094 	.word	0x20000094
 8081b88:	20000084 	.word	0x20000084
 8081b8c:	20000080 	.word	0x20000080
 8081b90:	200001dc 	.word	0x200001dc
 8081b94:	200001e4 	.word	0x200001e4
 8081b98:	200001e8 	.word	0x200001e8
 8081b9c:	08084690 	.word	0x08084690
 8081ba0:	20000000 	.word	0x20000000
 8081ba4:	200000a4 	.word	0x200000a4
 8081ba8:	20000098 	.word	0x20000098
 8081bac:	20000144 	.word	0x20000144
 8081bb0:	080846ae 	.word	0x080846ae
 8081bb4:	200001e0 	.word	0x200001e0
 8081bb8:	080846cb 	.word	0x080846cb

08081bbc <_GLOBAL__sub_I_SystemMode>:
}
 8081bbc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8081bbe:	2400      	movs	r4, #0
 8081bc0:	4b0b      	ldr	r3, [pc, #44]	; (8081bf0 <_GLOBAL__sub_I_SystemMode+0x34>)
    SleepResult() {}
 8081bc2:	4a0c      	ldr	r2, [pc, #48]	; (8081bf4 <_GLOBAL__sub_I_SystemMode+0x38>)
              error_(SYSTEM_ERROR_NONE) {
 8081bc4:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 8081bc8:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081bca:	2001      	movs	r0, #1
 8081bcc:	f000 fcf8 	bl	80825c0 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 8081bd0:	4621      	mov	r1, r4
 8081bd2:	2001      	movs	r0, #1
 8081bd4:	f000 fd04 	bl	80825e0 <system_thread_set_state>
  ADS_Module ads_module;
 8081bd8:	4807      	ldr	r0, [pc, #28]	; (8081bf8 <_GLOBAL__sub_I_SystemMode+0x3c>)
 8081bda:	f000 f811 	bl	8081c00 <_ZN10ADS_ModuleC1Ev>
  Adafruit_BME680 bme680;
 8081bde:	f001 fc25 	bl	808342c <_Z19__fetch_global_Wirev>
}
 8081be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Adafruit_BME680 bme680;
 8081be6:	4601      	mov	r1, r0
 8081be8:	4804      	ldr	r0, [pc, #16]	; (8081bfc <_GLOBAL__sub_I_SystemMode+0x40>)
 8081bea:	f7ff bd29 	b.w	8081640 <_ZN15Adafruit_BME680C1EP7TwoWire>
 8081bee:	bf00      	nop
 8081bf0:	20000088 	.word	0x20000088
 8081bf4:	ffff0000 	.word	0xffff0000
 8081bf8:	200000a4 	.word	0x200000a4
 8081bfc:	20000144 	.word	0x20000144

08081c00 <_ZN10ADS_ModuleC1Ev>:
 /*!
 *    @brief  ADS_Module object; Assigns addresses & channels to ADS1115 modules
 *            Addresses include: GND 0x48 & 5V 0x49
 */
/**************************************************************************/
ADS_Module::ADS_Module()
 8081c00:	b570      	push	{r4, r5, r6, lr}
 8081c02:	4604      	mov	r4, r0
 8081c04:	1d05      	adds	r5, r0, #4
 8081c06:	f100 06a4 	add.w	r6, r0, #164	; 0xa4
  VOLT_REF2,
  ADS_SENSOR_COUNT
};  //enum ads_sensor_id_e

/*! (per each sensor) addr, channel, status, module (ADS1115) */
struct ads_module_t
 8081c0a:	4628      	mov	r0, r5
 8081c0c:	3514      	adds	r5, #20
 8081c0e:	f7ff fb51 	bl	80812b4 <_ZN16Adafruit_ADS1115C1Ev>
 8081c12:	42b5      	cmp	r5, r6
 8081c14:	d1f9      	bne.n	8081c0a <_ZN10ADS_ModuleC1Ev+0xa>
{
  ads_module[FIG1].addr = 0x48;
  ads_module[FIG1].channel = 0;

  ads_module[FIG2].addr = 0x48;
 8081c16:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8081c1a:	82a2      	strh	r2, [r4, #20]
  ads_module[FIG2].channel = 1;

  ads_module[FIG3].addr = 0x48;
 8081c1c:	f44f 7212 	mov.w	r2, #584	; 0x248
 8081c20:	8522      	strh	r2, [r4, #40]	; 0x28
  ads_module[FIG3].channel = 2;

  ads_module[OPEN_CHANNEL].addr = 0x48;
 8081c22:	f44f 7252 	mov.w	r2, #840	; 0x348
 8081c26:	87a2      	strh	r2, [r4, #60]	; 0x3c
  ads_module[OPEN_CHANNEL].channel = 3;

  ads_module[B4_WORKER].addr = 0x49;
 8081c28:	2249      	movs	r2, #73	; 0x49
 8081c2a:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
  ads_module[B4_WORKER].channel = 0;

  ads_module[VOLT_REF1].addr = 0x49;
 8081c2e:	f240 1249 	movw	r2, #329	; 0x149
  ads_module[FIG1].addr = 0x48;
 8081c32:	2348      	movs	r3, #72	; 0x48
  ads_module[VOLT_REF1].addr = 0x49;
 8081c34:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  ads_module[VOLT_REF1].channel = 1;

  ads_module[B4_AUXILIARY].addr = 0x49;
 8081c38:	f240 2249 	movw	r2, #585	; 0x249
  ads_module[FIG1].addr = 0x48;
 8081c3c:	8023      	strh	r3, [r4, #0]
  ads_module[B4_AUXILIARY].addr = 0x49;
 8081c3e:	f8a4 2078 	strh.w	r2, [r4, #120]	; 0x78

  ads_module[VOLT_REF2].addr = 0x49;
  ads_module[VOLT_REF2].channel = 3;

  for (int i = 0; i < ADS_SENSOR_COUNT; i++)
    ads_module[i].status = false;
 8081c42:	2300      	movs	r3, #0
  ads_module[VOLT_REF2].addr = 0x49;
 8081c44:	f240 3249 	movw	r2, #841	; 0x349
} //ADS_Module()
 8081c48:	4620      	mov	r0, r4
    ads_module[i].status = false;
 8081c4a:	70a3      	strb	r3, [r4, #2]
 8081c4c:	75a3      	strb	r3, [r4, #22]
 8081c4e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 8081c52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8081c56:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 8081c5a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 8081c5e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
  ads_module[VOLT_REF2].addr = 0x49;
 8081c62:	f8a4 208c 	strh.w	r2, [r4, #140]	; 0x8c
    ads_module[i].status = false;
 8081c66:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
} //ADS_Module()
 8081c6a:	bd70      	pop	{r4, r5, r6, pc}

08081c6c <_ZN10ADS_Module5beginEv>:
 *   @return True if find ADS1115 channels (4 & 4), 
 *           False if status of channels is false
 */
/**************************************************************************/
bool ADS_Module::begin()
{
 8081c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8081c70:	4604      	mov	r4, r0
 8081c72:	4606      	mov	r6, r0
  for (int i = 0; i < ADS_SENSOR_COUNT; i++)
  {
    if (ads_module[i].module.begin(ads_module[i].addr))
      ads_module[i].status = true;
 8081c74:	f04f 0801 	mov.w	r8, #1
 8081c78:	1d05      	adds	r5, r0, #4
 8081c7a:	f100 07a4 	add.w	r7, r0, #164	; 0xa4
    if (ads_module[i].module.begin(ads_module[i].addr))
 8081c7e:	f815 9c04 	ldrb.w	r9, [r5, #-4]
 8081c82:	f001 fbd3 	bl	808342c <_Z19__fetch_global_Wirev>
 8081c86:	4649      	mov	r1, r9
 8081c88:	4602      	mov	r2, r0
 8081c8a:	4628      	mov	r0, r5
 8081c8c:	f7ff fb18 	bl	80812c0 <_ZN16Adafruit_ADS1X155beginEhP7TwoWire>
 8081c90:	b108      	cbz	r0, 8081c96 <_ZN10ADS_Module5beginEv+0x2a>
      ads_module[i].status = true;
 8081c92:	f805 8c02 	strb.w	r8, [r5, #-2]
  for (int i = 0; i < ADS_SENSOR_COUNT; i++)
 8081c96:	3514      	adds	r5, #20
 8081c98:	42bd      	cmp	r5, r7
 8081c9a:	d1f0      	bne.n	8081c7e <_ZN10ADS_Module5beginEv+0x12>
 8081c9c:	34a0      	adds	r4, #160	; 0xa0
  }

  for (int i = 0; i < ADS_SENSOR_COUNT; i++)
  {
    if (ads_module[i].status == false)
 8081c9e:	78b0      	ldrb	r0, [r6, #2]
 8081ca0:	b110      	cbz	r0, 8081ca8 <_ZN10ADS_Module5beginEv+0x3c>
  for (int i = 0; i < ADS_SENSOR_COUNT; i++)
 8081ca2:	3614      	adds	r6, #20
 8081ca4:	42a6      	cmp	r6, r4
 8081ca6:	d1fa      	bne.n	8081c9e <_ZN10ADS_Module5beginEv+0x32>
      return false;
  }

  return true;
} //bool ADS_Module::begin()
 8081ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08081cac <_ZN10ADS_Module8read_rawE15ads_sensor_id_e>:
 *        @param  ads_sensor_id index of the sensor to be read (in id_e form)
 *    @return Raw ADS1115 reading for relevant channel (or -999 for error)
 */
/**************************************************************************/
uint16_t ADS_Module::read_raw(ads_sensor_id_e ads_sensor_id)
{
 8081cac:	b508      	push	{r3, lr}
 8081cae:	2314      	movs	r3, #20
 8081cb0:	4359      	muls	r1, r3
 8081cb2:	1842      	adds	r2, r0, r1
  ads_module_t *sensor = &ads_module[ads_sensor_id];

  if (!sensor->status)
 8081cb4:	7893      	ldrb	r3, [r2, #2]
 8081cb6:	b133      	cbz	r3, 8081cc6 <_ZN10ADS_Module8read_rawE15ads_sensor_id_e+0x1a>
    return -999;

  return sensor->module.readADC_SingleEnded(sensor->channel);
 8081cb8:	1d0b      	adds	r3, r1, #4
 8081cba:	4418      	add	r0, r3
 8081cbc:	7851      	ldrb	r1, [r2, #1]
 8081cbe:	f7ff fb75 	bl	80813ac <_ZN16Adafruit_ADS1X1519readADC_SingleEndedEh>
 8081cc2:	b280      	uxth	r0, r0
} //uint16_t ADS_Module::read_raw(ads_sensor_id_e ads_sensor_id)
 8081cc4:	bd08      	pop	{r3, pc}
    return -999;
 8081cc6:	f64f 4019 	movw	r0, #64537	; 0xfc19
 8081cca:	e7fb      	b.n	8081cc4 <_ZN10ADS_Module8read_rawE15ads_sensor_id_e+0x18>

08081ccc <_ZN10ADS_Module14return_updatedEv>:
 *    @brief  Updates values and returns structured dataset
 *    @return ads_data structured dataset (w/o heaters)
 */
/**************************************************************************/
ads_data ADS_Module::return_updated()
{
 8081ccc:	b538      	push	{r3, r4, r5, lr}
 8081cce:	460d      	mov	r5, r1
 8081cd0:	4604      	mov	r4, r0
  ads_data dataset;
  dataset.Fig1 = read_raw(FIG1);
 8081cd2:	2100      	movs	r1, #0
 8081cd4:	4628      	mov	r0, r5
 8081cd6:	f7ff ffe9 	bl	8081cac <_ZN10ADS_Module8read_rawE15ads_sensor_id_e>
 8081cda:	8020      	strh	r0, [r4, #0]
  delay(100);
 8081cdc:	2064      	movs	r0, #100	; 0x64
 8081cde:	f000 ff43 	bl	8082b68 <delay>
  dataset.Fig2 = read_raw(FIG2);
 8081ce2:	2101      	movs	r1, #1
 8081ce4:	4628      	mov	r0, r5
 8081ce6:	f7ff ffe1 	bl	8081cac <_ZN10ADS_Module8read_rawE15ads_sensor_id_e>
 8081cea:	8060      	strh	r0, [r4, #2]
  delay(100);
 8081cec:	2064      	movs	r0, #100	; 0x64
 8081cee:	f000 ff3b 	bl	8082b68 <delay>
  dataset.Fig3 = read_raw(FIG3);
 8081cf2:	2102      	movs	r1, #2
 8081cf4:	4628      	mov	r0, r5
 8081cf6:	f7ff ffd9 	bl	8081cac <_ZN10ADS_Module8read_rawE15ads_sensor_id_e>
 8081cfa:	80a0      	strh	r0, [r4, #4]
  delay(100);
 8081cfc:	2064      	movs	r0, #100	; 0x64
 8081cfe:	f000 ff33 	bl	8082b68 <delay>
  // dataset.Unused = read_raw(OPEN_CHANNEL);
  delay(100);
 8081d02:	2064      	movs	r0, #100	; 0x64
 8081d04:	f000 ff30 	bl	8082b68 <delay>
  dataset.Worker = read_raw(B4_WORKER);
 8081d08:	2104      	movs	r1, #4
 8081d0a:	4628      	mov	r0, r5
 8081d0c:	f7ff ffce 	bl	8081cac <_ZN10ADS_Module8read_rawE15ads_sensor_id_e>
 8081d10:	80e0      	strh	r0, [r4, #6]
  delay(100);
 8081d12:	2064      	movs	r0, #100	; 0x64
 8081d14:	f000 ff28 	bl	8082b68 <delay>
  // dataset.Unused2 = read_raw(VOLT_REF1);
  delay(100);
 8081d18:	2064      	movs	r0, #100	; 0x64
 8081d1a:	f000 ff25 	bl	8082b68 <delay>
  dataset.Auxiliary = read_raw(B4_AUXILIARY);
 8081d1e:	2106      	movs	r1, #6
 8081d20:	4628      	mov	r0, r5
 8081d22:	f7ff ffc3 	bl	8081cac <_ZN10ADS_Module8read_rawE15ads_sensor_id_e>
 8081d26:	8120      	strh	r0, [r4, #8]
  delay(100);
 8081d28:	2064      	movs	r0, #100	; 0x64
 8081d2a:	f000 ff1d 	bl	8082b68 <delay>
  // dataset.Unused3 = read_raw(VOLT_REF2);
  delay(100);
 8081d2e:	2064      	movs	r0, #100	; 0x64
 8081d30:	f000 ff1a 	bl	8082b68 <delay>

  return dataset;
} //ads_data ADS_Module::return_updated()
 8081d34:	4620      	mov	r0, r4
 8081d36:	bd38      	pop	{r3, r4, r5, pc}

08081d38 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
 8081d38:	b538      	push	{r3, r4, r5, lr}
 8081d3a:	4604      	mov	r4, r0
  if (_cs != -1) {
 8081d3c:	f990 000e 	ldrsb.w	r0, [r0, #14]
 8081d40:	1c41      	adds	r1, r0, #1
 8081d42:	d009      	beq.n	8081d58 <_ZN18Adafruit_SPIDevice5beginEv+0x20>
    pinMode(_cs, OUTPUT);
 8081d44:	2101      	movs	r1, #1
 8081d46:	b280      	uxth	r0, r0
 8081d48:	f001 fad4 	bl	80832f4 <pinMode>
    digitalWrite(_cs, HIGH);
 8081d4c:	f994 000e 	ldrsb.w	r0, [r4, #14]
 8081d50:	2101      	movs	r1, #1
 8081d52:	b280      	uxth	r0, r0
 8081d54:	f001 fadf 	bl	8083316 <digitalWrite>
  }

  if (_spi) { // hardware SPI
 8081d58:	6825      	ldr	r5, [r4, #0]
 8081d5a:	b135      	cbz	r5, 8081d6a <_ZN18Adafruit_SPIDevice5beginEv+0x32>
#ifdef BUSIO_HAS_HW_SPI
    _spi->begin();
 8081d5c:	4628      	mov	r0, r5
 8081d5e:	f000 fcfe 	bl	808275e <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
 8081d62:	2001      	movs	r0, #1
 8081d64:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
 8081d68:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
 8081d6a:	f994 000f 	ldrsb.w	r0, [r4, #15]
 8081d6e:	2101      	movs	r1, #1
 8081d70:	b280      	uxth	r0, r0
 8081d72:	f001 fabf 	bl	80832f4 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
 8081d76:	7b63      	ldrb	r3, [r4, #13]
 8081d78:	f994 000f 	ldrsb.w	r0, [r4, #15]
 8081d7c:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
 8081d7e:	bf94      	ite	ls
 8081d80:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
 8081d82:	2101      	movhi	r1, #1
 8081d84:	b280      	uxth	r0, r0
 8081d86:	f001 fac6 	bl	8083316 <digitalWrite>
    if (_mosi != -1) {
 8081d8a:	f994 0010 	ldrsb.w	r0, [r4, #16]
 8081d8e:	1c42      	adds	r2, r0, #1
 8081d90:	d009      	beq.n	8081da6 <_ZN18Adafruit_SPIDevice5beginEv+0x6e>
      pinMode(_mosi, OUTPUT);
 8081d92:	2101      	movs	r1, #1
 8081d94:	b280      	uxth	r0, r0
 8081d96:	f001 faad 	bl	80832f4 <pinMode>
      digitalWrite(_mosi, HIGH);
 8081d9a:	f994 0010 	ldrsb.w	r0, [r4, #16]
 8081d9e:	2101      	movs	r1, #1
 8081da0:	b280      	uxth	r0, r0
 8081da2:	f001 fab8 	bl	8083316 <digitalWrite>
    if (_miso != -1) {
 8081da6:	f994 0011 	ldrsb.w	r0, [r4, #17]
 8081daa:	1c43      	adds	r3, r0, #1
 8081dac:	d0d9      	beq.n	8081d62 <_ZN18Adafruit_SPIDevice5beginEv+0x2a>
      pinMode(_miso, INPUT);
 8081dae:	2100      	movs	r1, #0
 8081db0:	b280      	uxth	r0, r0
 8081db2:	f001 fa9f 	bl	80832f4 <pinMode>
 8081db6:	e7d4      	b.n	8081d62 <_ZN18Adafruit_SPIDevice5beginEv+0x2a>

08081db8 <_ZN18Adafruit_SPIDevice8transferEPhj>:
 *    @brief  Transfer (send/receive) a buffer over hard/soft SPI, without
 * transaction management
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 8081db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081dbc:	4604      	mov	r4, r0
  //
  // HARDWARE SPI
  //
  if (_spi) {
 8081dbe:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 8081dc0:	460d      	mov	r5, r1
 8081dc2:	4613      	mov	r3, r2
 8081dc4:	b085      	sub	sp, #20
  if (_spi) {
 8081dc6:	b138      	cbz	r0, 8081dd8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
#ifdef BUSIO_HAS_HW_SPI
#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, nullptr);
 8081dc8:	2200      	movs	r2, #0
 8081dca:	9200      	str	r2, [sp, #0]
 8081dcc:	460a      	mov	r2, r1
 8081dce:	f000 fd5b 	bl	8082888 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
 8081dd2:	b005      	add	sp, #20
 8081dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
 8081dd8:	7b22      	ldrb	r2, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 8081dda:	68a0      	ldr	r0, [r4, #8]
    startbit = 0x80;
 8081ddc:	2a00      	cmp	r2, #0
 8081dde:	bf0c      	ite	eq
 8081de0:	f04f 0b01 	moveq.w	fp, #1
 8081de4:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
 8081de8:	780a      	ldrb	r2, [r1, #0]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 8081dea:	4f44      	ldr	r7, [pc, #272]	; (8081efc <_ZN18Adafruit_SPIDevice8transferEPhj+0x144>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
 8081dec:	ea1b 0f02 	tst.w	fp, r2
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 8081df0:	fbb7 f7f0 	udiv	r7, r7, r0
  bool towrite, lastmosi = !(buffer[0] & startbit);
 8081df4:	bf0c      	ite	eq
 8081df6:	f04f 0901 	moveq.w	r9, #1
 8081dfa:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 8081dfe:	18cb      	adds	r3, r1, r3
 8081e00:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
 8081e02:	9303      	str	r3, [sp, #12]
 8081e04:	9b03      	ldr	r3, [sp, #12]
 8081e06:	42ab      	cmp	r3, r5
 8081e08:	d0e3      	beq.n	8081dd2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    for (uint8_t b = startbit; b != 0;
 8081e0a:	465e      	mov	r6, fp
    uint8_t reply = 0;
 8081e0c:	f04f 0800 	mov.w	r8, #0
    uint8_t send = buffer[i];
 8081e10:	f895 a000 	ldrb.w	sl, [r5]
      if (bitdelay_us) {
 8081e14:	b117      	cbz	r7, 8081e1c <_ZN18Adafruit_SPIDevice8transferEPhj+0x64>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8081e16:	4638      	mov	r0, r7
 8081e18:	f000 fa8a 	bl	8082330 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
 8081e1c:	7b63      	ldrb	r3, [r4, #13]
 8081e1e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8081e22:	d141      	bne.n	8081ea8 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf0>
        if ((_mosi != -1) && (lastmosi != towrite)) {
 8081e24:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8081e28:	1c5a      	adds	r2, r3, #1
 8081e2a:	d00f      	beq.n	8081e4c <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        towrite = send & b;
 8081e2c:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
 8081e30:	bf14      	ite	ne
 8081e32:	2301      	movne	r3, #1
 8081e34:	2300      	moveq	r3, #0
 8081e36:	454b      	cmp	r3, r9
 8081e38:	d008      	beq.n	8081e4c <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
            *mosiPort = *mosiPort | mosiPinMask;
 8081e3a:	6963      	ldr	r3, [r4, #20]
 8081e3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8081e3e:	681a      	ldr	r2, [r3, #0]
          if (towrite)
 8081e40:	2900      	cmp	r1, #0
 8081e42:	d02c      	beq.n	8081e9e <_ZN18Adafruit_SPIDevice8transferEPhj+0xe6>
            *mosiPort = *mosiPort | mosiPinMask;
 8081e44:	f04f 0901 	mov.w	r9, #1
 8081e48:	4302      	orrs	r2, r0
 8081e4a:	601a      	str	r2, [r3, #0]
        *clkPort = *clkPort | clkPinMask; // Clock high
 8081e4c:	69a1      	ldr	r1, [r4, #24]
 8081e4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8081e50:	680a      	ldr	r2, [r1, #0]
 8081e52:	4313      	orrs	r3, r2
 8081e54:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 8081e56:	b117      	cbz	r7, 8081e5e <_ZN18Adafruit_SPIDevice8transferEPhj+0xa6>
 8081e58:	4638      	mov	r0, r7
 8081e5a:	f000 fa69 	bl	8082330 <HAL_Delay_Microseconds>
        if (_miso != -1) {
 8081e5e:	f994 3011 	ldrsb.w	r3, [r4, #17]
 8081e62:	3301      	adds	r3, #1
 8081e64:	d006      	beq.n	8081e74 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbc>
          if (*misoPort & misoPinMask) {
 8081e66:	69e3      	ldr	r3, [r4, #28]
 8081e68:	681a      	ldr	r2, [r3, #0]
 8081e6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8081e6c:	421a      	tst	r2, r3
            reply |= b;
 8081e6e:	bf18      	it	ne
 8081e70:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort = *clkPort & ~clkPinMask; // Clock low
 8081e74:	69a1      	ldr	r1, [r4, #24]
 8081e76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8081e78:	680a      	ldr	r2, [r1, #0]
 8081e7a:	ea22 0303 	bic.w	r3, r2, r3
 8081e7e:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
 8081e80:	f994 3011 	ldrsb.w	r3, [r4, #17]
 8081e84:	3301      	adds	r3, #1
        buffer[i] = reply;
 8081e86:	bf18      	it	ne
 8081e88:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
 8081e8c:	7b23      	ldrb	r3, [r4, #12]
 8081e8e:	2b00      	cmp	r3, #0
 8081e90:	d132      	bne.n	8081ef8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x140>
 8081e92:	0076      	lsls	r6, r6, #1
 8081e94:	b2f6      	uxtb	r6, r6
 8081e96:	2e00      	cmp	r6, #0
 8081e98:	d1bc      	bne.n	8081e14 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5c>
  for (size_t i = 0; i < len; i++) {
 8081e9a:	3501      	adds	r5, #1
 8081e9c:	e7b2      	b.n	8081e04 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4c>
            *mosiPort = *mosiPort & ~mosiPinMask;
 8081e9e:	ea22 0200 	bic.w	r2, r2, r0
 8081ea2:	4689      	mov	r9, r1
 8081ea4:	601a      	str	r2, [r3, #0]
 8081ea6:	e7d1      	b.n	8081e4c <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        *clkPort = *clkPort | clkPinMask; // Clock high
 8081ea8:	69a1      	ldr	r1, [r4, #24]
 8081eaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8081eac:	680a      	ldr	r2, [r1, #0]
 8081eae:	4313      	orrs	r3, r2
 8081eb0:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 8081eb2:	b117      	cbz	r7, 8081eba <_ZN18Adafruit_SPIDevice8transferEPhj+0x102>
 8081eb4:	4638      	mov	r0, r7
 8081eb6:	f000 fa3b 	bl	8082330 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
 8081eba:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8081ebe:	3301      	adds	r3, #1
 8081ec0:	d008      	beq.n	8081ed4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11c>
            *mosiPort = *mosiPort | mosiPinMask;
 8081ec2:	6963      	ldr	r3, [r4, #20]
 8081ec4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8081ec6:	681a      	ldr	r2, [r3, #0]
          if (send & b)
 8081ec8:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort = *mosiPort | mosiPinMask;
 8081ecc:	bf14      	ite	ne
 8081ece:	430a      	orrne	r2, r1
            *mosiPort = *mosiPort & ~mosiPinMask;
 8081ed0:	438a      	biceq	r2, r1
 8081ed2:	601a      	str	r2, [r3, #0]
        *clkPort = *clkPort & ~clkPinMask; // Clock low
 8081ed4:	69a1      	ldr	r1, [r4, #24]
 8081ed6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8081ed8:	680a      	ldr	r2, [r1, #0]
 8081eda:	ea22 0303 	bic.w	r3, r2, r3
 8081ede:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
 8081ee0:	f994 3011 	ldrsb.w	r3, [r4, #17]
 8081ee4:	3301      	adds	r3, #1
 8081ee6:	d0cb      	beq.n	8081e80 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
          if (*misoPort & misoPinMask) {
 8081ee8:	69e3      	ldr	r3, [r4, #28]
 8081eea:	681a      	ldr	r2, [r3, #0]
 8081eec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8081eee:	421a      	tst	r2, r3
            reply |= b;
 8081ef0:	bf18      	it	ne
 8081ef2:	ea46 0808 	orrne.w	r8, r6, r8
 8081ef6:	e7c3      	b.n	8081e80 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
    for (uint8_t b = startbit; b != 0;
 8081ef8:	0876      	lsrs	r6, r6, #1
 8081efa:	e7cc      	b.n	8081e96 <_ZN18Adafruit_SPIDevice8transferEPhj+0xde>
 8081efc:	0007a120 	.word	0x0007a120

08081f00 <_ZN18Adafruit_SPIDevice8transferEh>:
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI, without
 * transaction management
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
 8081f00:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
 8081f02:	2201      	movs	r2, #1
  uint8_t data = send;
 8081f04:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
 8081f08:	f10d 0107 	add.w	r1, sp, #7
 8081f0c:	f7ff ff54 	bl	8081db8 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
 8081f10:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8081f14:	b003      	add	sp, #12
 8081f16:	f85d fb04 	ldr.w	pc, [sp], #4

08081f1a <_ZN18Adafruit_SPIDevice16beginTransactionEv>:

/*!
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 * SPI)
 */
void Adafruit_SPIDevice::beginTransaction(void) {
 8081f1a:	4603      	mov	r3, r0
  if (_spi) {
 8081f1c:	6800      	ldr	r0, [r0, #0]
 8081f1e:	b110      	cbz	r0, 8081f26 <_ZN18Adafruit_SPIDevice16beginTransactionEv+0xc>
#ifdef BUSIO_HAS_HW_SPI
    _spi->beginTransaction(*_spiSetting);
 8081f20:	6859      	ldr	r1, [r3, #4]
 8081f22:	f000 bc45 	b.w	80827b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
#endif
  }
}
 8081f26:	4770      	bx	lr

08081f28 <_ZN18Adafruit_SPIDevice14endTransactionEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 */
void Adafruit_SPIDevice::endTransaction(void) {
  if (_spi) {
 8081f28:	6800      	ldr	r0, [r0, #0]
 8081f2a:	b108      	cbz	r0, 8081f30 <_ZN18Adafruit_SPIDevice14endTransactionEv+0x8>
#ifdef BUSIO_HAS_HW_SPI
    _spi->endTransaction();
 8081f2c:	f000 bc26 	b.w	808277c <_ZN8SPIClass14endTransactionEv>
#endif
  }
}
 8081f30:	4770      	bx	lr

08081f32 <_ZN18Adafruit_SPIDevice13setChipSelectEi>:
/*!
 *    @brief  Assert/Deassert the CS pin if it is defined
 *    @param  value The state the CS is set to
 */
void Adafruit_SPIDevice::setChipSelect(int value) {
  if (_cs != -1) {
 8081f32:	f990 000e 	ldrsb.w	r0, [r0, #14]
 8081f36:	1c43      	adds	r3, r0, #1
 8081f38:	d003      	beq.n	8081f42 <_ZN18Adafruit_SPIDevice13setChipSelectEi+0x10>
    digitalWrite(_cs, value);
 8081f3a:	b2c9      	uxtb	r1, r1
 8081f3c:	b280      	uxth	r0, r0
 8081f3e:	f001 b9ea 	b.w	8083316 <digitalWrite>
  }
}
 8081f42:	4770      	bx	lr

08081f44 <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>:
 *    @brief  Write a buffer or two to the SPI device, with transaction
 * management.
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 *            SPI) with asserting the CS pin
 */
void Adafruit_SPIDevice::beginTransactionWithAssertingCS() {
 8081f44:	b510      	push	{r4, lr}
 8081f46:	4604      	mov	r4, r0
  beginTransaction();
 8081f48:	f7ff ffe7 	bl	8081f1a <_ZN18Adafruit_SPIDevice16beginTransactionEv>
  setChipSelect(LOW);
 8081f4c:	4620      	mov	r0, r4
}
 8081f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setChipSelect(LOW);
 8081f52:	2100      	movs	r1, #0
 8081f54:	f7ff bfed 	b.w	8081f32 <_ZN18Adafruit_SPIDevice13setChipSelectEi>

08081f58 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
 8081f58:	b510      	push	{r4, lr}
 8081f5a:	4604      	mov	r4, r0
  setChipSelect(HIGH);
 8081f5c:	2101      	movs	r1, #1
 8081f5e:	f7ff ffe8 	bl	8081f32 <_ZN18Adafruit_SPIDevice13setChipSelectEi>
  endTransaction();
 8081f62:	4620      	mov	r0, r4
}
 8081f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  endTransaction();
 8081f68:	f7ff bfde 	b.w	8081f28 <_ZN18Adafruit_SPIDevice14endTransactionEv>

08081f6c <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 8081f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081f70:	461c      	mov	r4, r3
 8081f72:	4606      	mov	r6, r0
 8081f74:	460d      	mov	r5, r1
 8081f76:	4617      	mov	r7, r2
  beginTransactionWithAssertingCS();
 8081f78:	f7ff ffe4 	bl	8081f44 <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>
      _spi->transferBytes((uint8_t *)buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
 8081f7c:	9b06      	ldr	r3, [sp, #24]
 8081f7e:	eb04 0803 	add.w	r8, r4, r3
 8081f82:	4544      	cmp	r4, r8
 8081f84:	d108      	bne.n	8081f98 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x2c>
 8081f86:	442f      	add	r7, r5
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
 8081f88:	42bd      	cmp	r5, r7
 8081f8a:	d00b      	beq.n	8081fa4 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x38>
      transfer(buffer[i]);
 8081f8c:	4630      	mov	r0, r6
 8081f8e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8081f92:	f7ff ffb5 	bl	8081f00 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < len; i++) {
 8081f96:	e7f7      	b.n	8081f88 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x1c>
      transfer(prefix_buffer[i]);
 8081f98:	4630      	mov	r0, r6
 8081f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8081f9e:	f7ff ffaf 	bl	8081f00 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < prefix_len; i++) {
 8081fa2:	e7ee      	b.n	8081f82 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x16>
    }
  }
  endTransactionWithDeassertingCS();
 8081fa4:	4630      	mov	r0, r6
 8081fa6:	f7ff ffd7 	bl	8081f58 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 8081faa:	2001      	movs	r0, #1
 8081fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081fb0 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
 8081fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081fb4:	460d      	mov	r5, r1
 8081fb6:	4617      	mov	r7, r2
 8081fb8:	4606      	mov	r6, r0
 8081fba:	461c      	mov	r4, r3
 8081fbc:	f89d 801c 	ldrb.w	r8, [sp, #28]
  beginTransactionWithAssertingCS();
 8081fc0:	f7ff ffc0 	bl	8081f44 <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>
      _spi->transferBytes((uint8_t *)write_buffer, nullptr, write_len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
 8081fc4:	442f      	add	r7, r5
 8081fc6:	42bd      	cmp	r5, r7
 8081fc8:	d10a      	bne.n	8081fe0 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x30>
 8081fca:	9b06      	ldr	r3, [sp, #24]
 8081fcc:	18e5      	adds	r5, r4, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
 8081fce:	42ac      	cmp	r4, r5
 8081fd0:	d00c      	beq.n	8081fec <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x3c>
    read_buffer[i] = transfer(sendvalue);
 8081fd2:	4641      	mov	r1, r8
 8081fd4:	4630      	mov	r0, r6
 8081fd6:	f7ff ff93 	bl	8081f00 <_ZN18Adafruit_SPIDevice8transferEh>
 8081fda:	f804 0b01 	strb.w	r0, [r4], #1
  for (size_t i = 0; i < read_len; i++) {
 8081fde:	e7f6      	b.n	8081fce <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x1e>
      transfer(write_buffer[i]);
 8081fe0:	4630      	mov	r0, r6
 8081fe2:	f815 1b01 	ldrb.w	r1, [r5], #1
 8081fe6:	f7ff ff8b 	bl	8081f00 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < write_len; i++) {
 8081fea:	e7ec      	b.n	8081fc6 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x16>
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
 8081fec:	4630      	mov	r0, r6
 8081fee:	f7ff ffb3 	bl	8081f58 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>

  return true;
}
 8081ff2:	2001      	movs	r0, #1
 8081ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081ff8 <_ZN10RTC_DS32315beginEP7TwoWire>:
    @brief  Start I2C for the DS3231 and test succesful connection
    @param  wireInstance pointer to the I2C bus
    @return True if Wire can find DS3231 or false otherwise.
*/
/**************************************************************************/
bool RTC_DS3231::begin(TwoWire *wireInstance) {
 8081ff8:	b570      	push	{r4, r5, r6, lr}
 8081ffa:	4605      	mov	r5, r0
  if (i2c_dev)
 8081ffc:	6800      	ldr	r0, [r0, #0]
bool RTC_DS3231::begin(TwoWire *wireInstance) {
 8081ffe:	460e      	mov	r6, r1
  if (i2c_dev)
 8082000:	b110      	cbz	r0, 8082008 <_ZN10RTC_DS32315beginEP7TwoWire+0x10>
    delete i2c_dev;
 8082002:	2110      	movs	r1, #16
 8082004:	f7fe f84b 	bl	808009e <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(DS3231_ADDRESS, wireInstance);
 8082008:	2010      	movs	r0, #16
 808200a:	f7fe f844 	bl	8080096 <_Znwj>
 808200e:	4604      	mov	r4, r0
 8082010:	b118      	cbz	r0, 808201a <_ZN10RTC_DS32315beginEP7TwoWire+0x22>
 8082012:	4632      	mov	r2, r6
 8082014:	2168      	movs	r1, #104	; 0x68
 8082016:	f000 f8bb 	bl	8082190 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin())
 808201a:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(DS3231_ADDRESS, wireInstance);
 808201c:	602c      	str	r4, [r5, #0]
  if (!i2c_dev->begin())
 808201e:	2101      	movs	r1, #1
    return false;
  return true;
}
 8082020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (!i2c_dev->begin())
 8082024:	f000 b8d0 	b.w	80821c8 <_ZN18Adafruit_I2CDevice5beginEb>

08082028 <_ZN10RTC_DS32316adjustERK8DateTime>:
/*!
    @brief  Set the date and flip the Oscillator Stop Flag
    @param dt DateTime object containing the date/time to set
*/
/**************************************************************************/
void RTC_DS3231::adjust(const DateTime &dt) {
 8082028:	b5f0      	push	{r4, r5, r6, r7, lr}
  /*!
      @brief  Convert a binary value to BCD format for the RTC registers
      @param val Binary value
      @return BCD value
  */
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 808202a:	240a      	movs	r4, #10
  uint8_t second() const { return ss; }
 808202c:	794b      	ldrb	r3, [r1, #5]
  uint8_t buffer[8] = {DS3231_TIME,
 808202e:	2700      	movs	r7, #0
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 8082030:	fbb3 f2f4 	udiv	r2, r3, r4
 8082034:	eb02 0242 	add.w	r2, r2, r2, lsl #1
void RTC_DS3231::adjust(const DateTime &dt) {
 8082038:	b085      	sub	sp, #20
 808203a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  uint8_t buffer[8] = {DS3231_TIME,
 808203e:	e9cd 7702 	strd	r7, r7, [sp, #8]
                       bin2bcd(dt.minute()),
                       bin2bcd(dt.hour()),
                       bin2bcd(dowToDS3231(dt.dayOfTheWeek())),
                       bin2bcd(dt.day()),
                       bin2bcd(dt.month()),
                       bin2bcd(dt.year() - 2000U)};
 8082042:	f88d 3009 	strb.w	r3, [sp, #9]
  uint8_t minute() const { return mm; }
 8082046:	790b      	ldrb	r3, [r1, #4]
void RTC_DS3231::adjust(const DateTime &dt) {
 8082048:	4606      	mov	r6, r0
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 808204a:	fbb3 f2f4 	udiv	r2, r3, r4
 808204e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8082052:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                       bin2bcd(dt.year() - 2000U)};
 8082056:	f88d 300a 	strb.w	r3, [sp, #10]
  uint8_t hour() const { return hh; }
 808205a:	78cb      	ldrb	r3, [r1, #3]
                       bin2bcd(dowToDS3231(dt.dayOfTheWeek())),
 808205c:	4608      	mov	r0, r1
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 808205e:	fbb3 f2f4 	udiv	r2, r3, r4
 8082062:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8082066:	eb03 0342 	add.w	r3, r3, r2, lsl #1
void RTC_DS3231::adjust(const DateTime &dt) {
 808206a:	460d      	mov	r5, r1
                       bin2bcd(dt.year() - 2000U)};
 808206c:	f88d 300b 	strb.w	r3, [sp, #11]
                       bin2bcd(dowToDS3231(dt.dayOfTheWeek())),
 8082070:	f7ff fa82 	bl	8081578 <_ZNK8DateTime12dayOfTheWeekEv>
              storing in the DS3231: from 1 (Monday) to 7 (Sunday).
      @param  d Day of the week as represented by the library:
              from 0 (Sunday) to 6 (Saturday).
      @return the converted value
  */
  static uint8_t dowToDS3231(uint8_t d) { return d == 0 ? 7 : d; }
 8082074:	1e03      	subs	r3, r0, #0
 8082076:	bf08      	it	eq
 8082078:	2307      	moveq	r3, #7
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 808207a:	fbb3 f0f4 	udiv	r0, r3, r4
 808207e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8082082:	eb03 0340 	add.w	r3, r3, r0, lsl #1
                       bin2bcd(dt.year() - 2000U)};
 8082086:	f88d 300c 	strb.w	r3, [sp, #12]
  uint8_t day() const { return d; }
 808208a:	78ab      	ldrb	r3, [r5, #2]
  i2c_dev->write(buffer, 8);
 808208c:	e9cd 7700 	strd	r7, r7, [sp]
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 8082090:	fbb3 f2f4 	udiv	r2, r3, r4
 8082094:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8082098:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                       bin2bcd(dt.year() - 2000U)};
 808209c:	f88d 300d 	strb.w	r3, [sp, #13]
  uint8_t month() const { return m; }
 80820a0:	786b      	ldrb	r3, [r5, #1]
  i2c_dev->write(buffer, 8);
 80820a2:	6830      	ldr	r0, [r6, #0]
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 80820a4:	fbb3 f2f4 	udiv	r2, r3, r4
 80820a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80820ac:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                       bin2bcd(dt.year() - 2000U)};
 80820b0:	f88d 300e 	strb.w	r3, [sp, #14]
  uint16_t year() const { return 2000U + yOff; }
 80820b4:	782b      	ldrb	r3, [r5, #0]
  i2c_dev->write(buffer, 8);
 80820b6:	2208      	movs	r2, #8
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 80820b8:	fbb3 f4f4 	udiv	r4, r3, r4
 80820bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80820c0:	eb0d 0102 	add.w	r1, sp, r2
 80820c4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80820c8:	2301      	movs	r3, #1
                       bin2bcd(dt.year() - 2000U)};
 80820ca:	f88d 400f 	strb.w	r4, [sp, #15]
  i2c_dev->write(buffer, 8);
 80820ce:	f000 f88a 	bl	80821e6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

  uint8_t statreg = read_register(DS3231_STATUSREG);
 80820d2:	210f      	movs	r1, #15
 80820d4:	4630      	mov	r0, r6
 80820d6:	f7ff f9c2 	bl	808145e <_ZN7RTC_I2C13read_registerEh>
  statreg &= ~0x80; // flip OSF bit
  write_register(DS3231_STATUSREG, statreg);
 80820da:	210f      	movs	r1, #15
 80820dc:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80820e0:	4630      	mov	r0, r6
 80820e2:	f7ff f9ab 	bl	808143c <_ZN7RTC_I2C14write_registerEhh>
}
 80820e6:	b005      	add	sp, #20
 80820e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080820ea <_ZN10RTC_DS32313nowEv>:
    @return DateTime object with the current date/time
*/
/**************************************************************************/
DateTime RTC_DS3231::now() {
  uint8_t buffer[7];
  buffer[0] = 0;
 80820ea:	2300      	movs	r3, #0
DateTime RTC_DS3231::now() {
 80820ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80820ee:	b087      	sub	sp, #28
  i2c_dev->write_then_read(buffer, 1, buffer, 7);
 80820f0:	9301      	str	r3, [sp, #4]
  buffer[0] = 0;
 80820f2:	f88d 3010 	strb.w	r3, [sp, #16]
  i2c_dev->write_then_read(buffer, 1, buffer, 7);
 80820f6:	2307      	movs	r3, #7
DateTime RTC_DS3231::now() {
 80820f8:	4605      	mov	r5, r0
 80820fa:	4608      	mov	r0, r1
  i2c_dev->write_then_read(buffer, 1, buffer, 7);
 80820fc:	9300      	str	r3, [sp, #0]
 80820fe:	ab04      	add	r3, sp, #16
 8082100:	4619      	mov	r1, r3
 8082102:	2201      	movs	r2, #1
 8082104:	6800      	ldr	r0, [r0, #0]
 8082106:	f000 f8dc 	bl	80822c2 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>

  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5] & 0x7F),
                  bcd2bin(buffer[4]), bcd2bin(buffer[2]), bcd2bin(buffer[1]),
                  bcd2bin(buffer[0] & 0x7F));
 808210a:	f89d 4010 	ldrb.w	r4, [sp, #16]
 808210e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8082112:	f004 077f 	and.w	r7, r4, #127	; 0x7f
  static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 8082116:	f3c4 1402 	ubfx	r4, r4, #4, #3
 808211a:	eba4 0484 	sub.w	r4, r4, r4, lsl #2
 808211e:	f89d 6011 	ldrb.w	r6, [sp, #17]
 8082122:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8082126:	b2e4      	uxtb	r4, r4
  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5] & 0x7F),
 8082128:	f89d 1016 	ldrb.w	r1, [sp, #22]
                  bcd2bin(buffer[0] & 0x7F));
 808212c:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8082130:	9402      	str	r4, [sp, #8]
 8082132:	ea4f 1c13 	mov.w	ip, r3, lsr #4
 8082136:	0934      	lsrs	r4, r6, #4
 8082138:	f89d 2015 	ldrb.w	r2, [sp, #21]
 808213c:	ebac 0c8c 	sub.w	ip, ip, ip, lsl #2
 8082140:	eba4 0484 	sub.w	r4, r4, r4, lsl #2
 8082144:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 8082148:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 808214c:	ea4f 1c11 	mov.w	ip, r1, lsr #4
 8082150:	0904      	lsrs	r4, r0, #4
 8082152:	f002 0e7f 	and.w	lr, r2, #127	; 0x7f
 8082156:	ebac 0c8c 	sub.w	ip, ip, ip, lsl #2
 808215a:	eba4 0484 	sub.w	r4, r4, r4, lsl #2
 808215e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8082162:	eb01 014c 	add.w	r1, r1, ip, lsl #1
 8082166:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 808216a:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 808216e:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8082172:	b2f6      	uxtb	r6, r6
 8082174:	b2c0      	uxtb	r0, r0
  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5] & 0x7F),
 8082176:	b2c9      	uxtb	r1, r1
                  bcd2bin(buffer[0] & 0x7F));
 8082178:	9000      	str	r0, [sp, #0]
 808217a:	9601      	str	r6, [sp, #4]
 808217c:	4628      	mov	r0, r5
 808217e:	b2db      	uxtb	r3, r3
 8082180:	b2d2      	uxtb	r2, r2
 8082182:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
 8082186:	f7ff f983 	bl	8081490 <_ZN8DateTimeC1Ethhhhh>
}
 808218a:	4628      	mov	r0, r5
 808218c:	b007      	add	sp, #28
 808218e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082190 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 8082190:	6042      	str	r2, [r0, #4]
  _begun = false;
 8082192:	2200      	movs	r2, #0
 8082194:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
 8082196:	2220      	movs	r2, #32
  _addr = addr;
 8082198:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 808219a:	60c2      	str	r2, [r0, #12]
#endif
}
 808219c:	4770      	bx	lr

0808219e <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 808219e:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 80821a0:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 80821a2:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 80821a4:	b153      	cbz	r3, 80821bc <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 80821a6:	7821      	ldrb	r1, [r4, #0]
 80821a8:	6860      	ldr	r0, [r4, #4]
 80821aa:	f000 ffe4 	bl	8083176 <_ZN7TwoWire17beginTransmissionEh>
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.print(F("Address 0x"));
  DEBUG_SERIAL.print(_addr);
#endif
  if (_wire->endTransmission() == 0) {
 80821ae:	6860      	ldr	r0, [r4, #4]
 80821b0:	f000 ffe9 	bl	8083186 <_ZN7TwoWire15endTransmissionEv>
 80821b4:	fab0 f080 	clz	r0, r0
 80821b8:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
 80821ba:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 80821bc:	2101      	movs	r1, #1
 80821be:	f000 f803 	bl	80821c8 <_ZN18Adafruit_I2CDevice5beginEb>
 80821c2:	2800      	cmp	r0, #0
 80821c4:	d1ef      	bne.n	80821a6 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 80821c6:	e7f8      	b.n	80821ba <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

080821c8 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80821c8:	b538      	push	{r3, r4, r5, lr}
 80821ca:	4604      	mov	r4, r0
  _wire->begin();
 80821cc:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80821ce:	460d      	mov	r5, r1
  _wire->begin();
 80821d0:	f000 ffa2 	bl	8083118 <_ZN7TwoWire5beginEv>
  _begun = true;
 80821d4:	2001      	movs	r0, #1
 80821d6:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 80821d8:	b125      	cbz	r5, 80821e4 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 80821da:	4620      	mov	r0, r4
}
 80821dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 80821e0:	f7ff bfdd 	b.w	808219e <_ZN18Adafruit_I2CDevice8detectedEv>
}
 80821e4:	bd38      	pop	{r3, r4, r5, pc}

080821e6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 80821e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80821ea:	461f      	mov	r7, r3
 80821ec:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 80821f0:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 80821f2:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 80821f4:	4432      	add	r2, r6
 80821f6:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 80821f8:	4604      	mov	r4, r0
 80821fa:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 80821fc:	d902      	bls.n	8082204 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 80821fe:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
 8082200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 8082204:	7801      	ldrb	r1, [r0, #0]
 8082206:	6840      	ldr	r0, [r0, #4]
 8082208:	f000 ffb5 	bl	8083176 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
 808220c:	b97e      	cbnz	r6, 808222e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 808220e:	6860      	ldr	r0, [r4, #4]
 8082210:	462a      	mov	r2, r5
 8082212:	6803      	ldr	r3, [r0, #0]
 8082214:	4641      	mov	r1, r8
 8082216:	68db      	ldr	r3, [r3, #12]
 8082218:	4798      	blx	r3
 808221a:	4285      	cmp	r5, r0
 808221c:	d1ef      	bne.n	80821fe <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 808221e:	4639      	mov	r1, r7
 8082220:	6860      	ldr	r0, [r4, #4]
 8082222:	f000 ffac 	bl	808317e <_ZN7TwoWire15endTransmissionEh>
 8082226:	fab0 f080 	clz	r0, r0
 808222a:	0940      	lsrs	r0, r0, #5
 808222c:	e7e8      	b.n	8082200 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
 808222e:	f1b9 0f00 	cmp.w	r9, #0
 8082232:	d0ec      	beq.n	808220e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 8082234:	6860      	ldr	r0, [r4, #4]
 8082236:	4632      	mov	r2, r6
 8082238:	6803      	ldr	r3, [r0, #0]
 808223a:	4649      	mov	r1, r9
 808223c:	68db      	ldr	r3, [r3, #12]
 808223e:	4798      	blx	r3
 8082240:	4286      	cmp	r6, r0
 8082242:	d1dc      	bne.n	80821fe <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 8082244:	e7e3      	b.n	808220e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

08082246 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
 8082246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808224a:	4615      	mov	r5, r2
 808224c:	4604      	mov	r4, r0
 808224e:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 8082250:	b2d2      	uxtb	r2, r2
 8082252:	7801      	ldrb	r1, [r0, #0]
 8082254:	6840      	ldr	r0, [r0, #4]
 8082256:	f000 ff7c 	bl	8083152 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 808225a:	4285      	cmp	r5, r0
 808225c:	d10d      	bne.n	808227a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
 808225e:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 8082260:	fa1f f887 	uxth.w	r8, r7
 8082264:	45a8      	cmp	r8, r5
 8082266:	f107 0701 	add.w	r7, r7, #1
 808226a:	d209      	bcs.n	8082280 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
 808226c:	6860      	ldr	r0, [r4, #4]
 808226e:	6803      	ldr	r3, [r0, #0]
 8082270:	695b      	ldr	r3, [r3, #20]
 8082272:	4798      	blx	r3
 8082274:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 8082278:	e7f2      	b.n	8082260 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
 808227a:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 808227c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082280:	2001      	movs	r0, #1
 8082282:	e7fb      	b.n	808227c <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

08082284 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 8082284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8082288:	4607      	mov	r7, r0
 808228a:	4688      	mov	r8, r1
 808228c:	4616      	mov	r6, r2
 808228e:	4699      	mov	r9, r3
  size_t pos = 0;
 8082290:	2500      	movs	r5, #0
  while (pos < len) {
 8082292:	42b5      	cmp	r5, r6
 8082294:	d212      	bcs.n	80822bc <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
 8082296:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
 8082298:	1b74      	subs	r4, r6, r5
 808229a:	4294      	cmp	r4, r2
 808229c:	bf28      	it	cs
 808229e:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
 80822a0:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
 80822a2:	42ab      	cmp	r3, r5
 80822a4:	bf94      	ite	ls
 80822a6:	464b      	movls	r3, r9
 80822a8:	2300      	movhi	r3, #0
 80822aa:	4622      	mov	r2, r4
 80822ac:	4638      	mov	r0, r7
 80822ae:	eb08 0105 	add.w	r1, r8, r5
 80822b2:	f7ff ffc8 	bl	8082246 <_ZN18Adafruit_I2CDevice5_readEPhjb>
 80822b6:	b110      	cbz	r0, 80822be <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
 80822b8:	4425      	add	r5, r4
  while (pos < len) {
 80822ba:	e7ea      	b.n	8082292 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
 80822bc:	2001      	movs	r0, #1
}
 80822be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080822c2 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
 80822c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80822c4:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
 80822c6:	2300      	movs	r3, #0
 80822c8:	e9cd 3300 	strd	r3, r3, [sp]
 80822cc:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
 80822d0:	4604      	mov	r4, r0
 80822d2:	9e06      	ldr	r6, [sp, #24]
  if (!write(write_buffer, write_len, stop)) {
 80822d4:	f7ff ff87 	bl	80821e6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 80822d8:	b140      	cbz	r0, 80822ec <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
 80822da:	2301      	movs	r3, #1
 80822dc:	4632      	mov	r2, r6
 80822de:	4629      	mov	r1, r5
 80822e0:	4620      	mov	r0, r4
}
 80822e2:	b002      	add	sp, #8
 80822e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
 80822e8:	f7ff bfcc 	b.w	8082284 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
 80822ec:	b002      	add	sp, #8
 80822ee:	bd70      	pop	{r4, r5, r6, pc}

080822f0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80822f0:	b508      	push	{r3, lr}
 80822f2:	4b02      	ldr	r3, [pc, #8]	; (80822fc <HAL_Pin_Mode+0xc>)
 80822f4:	681b      	ldr	r3, [r3, #0]
 80822f6:	689b      	ldr	r3, [r3, #8]
 80822f8:	9301      	str	r3, [sp, #4]
 80822fa:	bd08      	pop	{r3, pc}
 80822fc:	080401b0 	.word	0x080401b0

08082300 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8082300:	b508      	push	{r3, lr}
 8082302:	4b02      	ldr	r3, [pc, #8]	; (808230c <HAL_Get_Pin_Mode+0xc>)
 8082304:	681b      	ldr	r3, [r3, #0]
 8082306:	68db      	ldr	r3, [r3, #12]
 8082308:	9301      	str	r3, [sp, #4]
 808230a:	bd08      	pop	{r3, pc}
 808230c:	080401b0 	.word	0x080401b0

08082310 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8082310:	b508      	push	{r3, lr}
 8082312:	4b02      	ldr	r3, [pc, #8]	; (808231c <HAL_GPIO_Write+0xc>)
 8082314:	681b      	ldr	r3, [r3, #0]
 8082316:	691b      	ldr	r3, [r3, #16]
 8082318:	9301      	str	r3, [sp, #4]
 808231a:	bd08      	pop	{r3, pc}
 808231c:	080401b0 	.word	0x080401b0

08082320 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8082320:	b508      	push	{r3, lr}
 8082322:	4b02      	ldr	r3, [pc, #8]	; (808232c <HAL_RNG_GetRandomNumber+0xc>)
 8082324:	681b      	ldr	r3, [r3, #0]
 8082326:	685b      	ldr	r3, [r3, #4]
 8082328:	9301      	str	r3, [sp, #4]
 808232a:	bd08      	pop	{r3, pc}
 808232c:	0804019c 	.word	0x0804019c

08082330 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8082330:	b508      	push	{r3, lr}
 8082332:	4b02      	ldr	r3, [pc, #8]	; (808233c <HAL_Delay_Microseconds+0xc>)
 8082334:	681b      	ldr	r3, [r3, #0]
 8082336:	68db      	ldr	r3, [r3, #12]
 8082338:	9301      	str	r3, [sp, #4]
 808233a:	bd08      	pop	{r3, pc}
 808233c:	0804019c 	.word	0x0804019c

08082340 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8082340:	b508      	push	{r3, lr}
 8082342:	4b02      	ldr	r3, [pc, #8]	; (808234c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8082344:	681b      	ldr	r3, [r3, #0]
 8082346:	695b      	ldr	r3, [r3, #20]
 8082348:	9301      	str	r3, [sp, #4]
 808234a:	bd08      	pop	{r3, pc}
 808234c:	0804019c 	.word	0x0804019c

08082350 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 8082350:	b508      	push	{r3, lr}
 8082352:	4b02      	ldr	r3, [pc, #8]	; (808235c <os_thread_yield+0xc>)
 8082354:	681b      	ldr	r3, [r3, #0]
 8082356:	68db      	ldr	r3, [r3, #12]
 8082358:	9301      	str	r3, [sp, #4]
 808235a:	bd08      	pop	{r3, pc}
 808235c:	080401d0 	.word	0x080401d0

08082360 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8082360:	b508      	push	{r3, lr}
 8082362:	4b02      	ldr	r3, [pc, #8]	; (808236c <os_mutex_recursive_create+0xc>)
 8082364:	681b      	ldr	r3, [r3, #0]
 8082366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082368:	9301      	str	r3, [sp, #4]
 808236a:	bd08      	pop	{r3, pc}
 808236c:	080401d0 	.word	0x080401d0

08082370 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8082370:	b508      	push	{r3, lr}
 8082372:	4b02      	ldr	r3, [pc, #8]	; (808237c <os_mutex_recursive_destroy+0xc>)
 8082374:	681b      	ldr	r3, [r3, #0]
 8082376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082378:	9301      	str	r3, [sp, #4]
 808237a:	bd08      	pop	{r3, pc}
 808237c:	080401d0 	.word	0x080401d0

08082380 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8082380:	b508      	push	{r3, lr}
 8082382:	4b02      	ldr	r3, [pc, #8]	; (808238c <os_mutex_recursive_lock+0xc>)
 8082384:	681b      	ldr	r3, [r3, #0]
 8082386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8082388:	9301      	str	r3, [sp, #4]
 808238a:	bd08      	pop	{r3, pc}
 808238c:	080401d0 	.word	0x080401d0

08082390 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8082390:	b508      	push	{r3, lr}
 8082392:	4b02      	ldr	r3, [pc, #8]	; (808239c <os_mutex_recursive_unlock+0xc>)
 8082394:	681b      	ldr	r3, [r3, #0]
 8082396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8082398:	9301      	str	r3, [sp, #4]
 808239a:	bd08      	pop	{r3, pc}
 808239c:	080401d0 	.word	0x080401d0

080823a0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80823a0:	b508      	push	{r3, lr}
 80823a2:	4b02      	ldr	r3, [pc, #8]	; (80823ac <hal_usart_write+0xc>)
 80823a4:	681b      	ldr	r3, [r3, #0]
 80823a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80823a8:	9301      	str	r3, [sp, #4]
 80823aa:	bd08      	pop	{r3, pc}
 80823ac:	080401c4 	.word	0x080401c4

080823b0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80823b0:	b508      	push	{r3, lr}
 80823b2:	4b02      	ldr	r3, [pc, #8]	; (80823bc <hal_usart_available+0xc>)
 80823b4:	681b      	ldr	r3, [r3, #0]
 80823b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80823b8:	9301      	str	r3, [sp, #4]
 80823ba:	bd08      	pop	{r3, pc}
 80823bc:	080401c4 	.word	0x080401c4

080823c0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80823c0:	b508      	push	{r3, lr}
 80823c2:	4b02      	ldr	r3, [pc, #8]	; (80823cc <hal_usart_read+0xc>)
 80823c4:	681b      	ldr	r3, [r3, #0]
 80823c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80823c8:	9301      	str	r3, [sp, #4]
 80823ca:	bd08      	pop	{r3, pc}
 80823cc:	080401c4 	.word	0x080401c4

080823d0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80823d0:	b508      	push	{r3, lr}
 80823d2:	4b02      	ldr	r3, [pc, #8]	; (80823dc <hal_usart_peek+0xc>)
 80823d4:	681b      	ldr	r3, [r3, #0]
 80823d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80823d8:	9301      	str	r3, [sp, #4]
 80823da:	bd08      	pop	{r3, pc}
 80823dc:	080401c4 	.word	0x080401c4

080823e0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80823e0:	b508      	push	{r3, lr}
 80823e2:	4b02      	ldr	r3, [pc, #8]	; (80823ec <hal_usart_flush+0xc>)
 80823e4:	681b      	ldr	r3, [r3, #0]
 80823e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80823e8:	9301      	str	r3, [sp, #4]
 80823ea:	bd08      	pop	{r3, pc}
 80823ec:	080401c4 	.word	0x080401c4

080823f0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80823f0:	b508      	push	{r3, lr}
 80823f2:	4b02      	ldr	r3, [pc, #8]	; (80823fc <hal_usart_is_enabled+0xc>)
 80823f4:	681b      	ldr	r3, [r3, #0]
 80823f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80823f8:	9301      	str	r3, [sp, #4]
 80823fa:	bd08      	pop	{r3, pc}
 80823fc:	080401c4 	.word	0x080401c4

08082400 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8082400:	b508      	push	{r3, lr}
 8082402:	4b02      	ldr	r3, [pc, #8]	; (808240c <hal_usart_available_data_for_write+0xc>)
 8082404:	681b      	ldr	r3, [r3, #0]
 8082406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082408:	9301      	str	r3, [sp, #4]
 808240a:	bd08      	pop	{r3, pc}
 808240c:	080401c4 	.word	0x080401c4

08082410 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 8082410:	b508      	push	{r3, lr}
 8082412:	4b02      	ldr	r3, [pc, #8]	; (808241c <hal_usart_init_ex+0xc>)
 8082414:	681b      	ldr	r3, [r3, #0]
 8082416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8082418:	9301      	str	r3, [sp, #4]
 808241a:	bd08      	pop	{r3, pc}
 808241c:	080401c4 	.word	0x080401c4

08082420 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 8082420:	b508      	push	{r3, lr}
 8082422:	4b02      	ldr	r3, [pc, #8]	; (808242c <hal_i2c_begin+0xc>)
 8082424:	681b      	ldr	r3, [r3, #0]
 8082426:	68db      	ldr	r3, [r3, #12]
 8082428:	9301      	str	r3, [sp, #4]
 808242a:	bd08      	pop	{r3, pc}
 808242c:	080401ac 	.word	0x080401ac

08082430 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 8082430:	b508      	push	{r3, lr}
 8082432:	4b02      	ldr	r3, [pc, #8]	; (808243c <hal_i2c_begin_transmission+0xc>)
 8082434:	681b      	ldr	r3, [r3, #0]
 8082436:	699b      	ldr	r3, [r3, #24]
 8082438:	9301      	str	r3, [sp, #4]
 808243a:	bd08      	pop	{r3, pc}
 808243c:	080401ac 	.word	0x080401ac

08082440 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 8082440:	b508      	push	{r3, lr}
 8082442:	4b02      	ldr	r3, [pc, #8]	; (808244c <hal_i2c_end_transmission+0xc>)
 8082444:	681b      	ldr	r3, [r3, #0]
 8082446:	69db      	ldr	r3, [r3, #28]
 8082448:	9301      	str	r3, [sp, #4]
 808244a:	bd08      	pop	{r3, pc}
 808244c:	080401ac 	.word	0x080401ac

08082450 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8082450:	b508      	push	{r3, lr}
 8082452:	4b02      	ldr	r3, [pc, #8]	; (808245c <hal_i2c_write+0xc>)
 8082454:	681b      	ldr	r3, [r3, #0]
 8082456:	6a1b      	ldr	r3, [r3, #32]
 8082458:	9301      	str	r3, [sp, #4]
 808245a:	bd08      	pop	{r3, pc}
 808245c:	080401ac 	.word	0x080401ac

08082460 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8082460:	b508      	push	{r3, lr}
 8082462:	4b02      	ldr	r3, [pc, #8]	; (808246c <hal_i2c_available+0xc>)
 8082464:	681b      	ldr	r3, [r3, #0]
 8082466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082468:	9301      	str	r3, [sp, #4]
 808246a:	bd08      	pop	{r3, pc}
 808246c:	080401ac 	.word	0x080401ac

08082470 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8082470:	b508      	push	{r3, lr}
 8082472:	4b02      	ldr	r3, [pc, #8]	; (808247c <hal_i2c_read+0xc>)
 8082474:	681b      	ldr	r3, [r3, #0]
 8082476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8082478:	9301      	str	r3, [sp, #4]
 808247a:	bd08      	pop	{r3, pc}
 808247c:	080401ac 	.word	0x080401ac

08082480 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8082480:	b508      	push	{r3, lr}
 8082482:	4b02      	ldr	r3, [pc, #8]	; (808248c <hal_i2c_peek+0xc>)
 8082484:	681b      	ldr	r3, [r3, #0]
 8082486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082488:	9301      	str	r3, [sp, #4]
 808248a:	bd08      	pop	{r3, pc}
 808248c:	080401ac 	.word	0x080401ac

08082490 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8082490:	b508      	push	{r3, lr}
 8082492:	4b02      	ldr	r3, [pc, #8]	; (808249c <hal_i2c_flush+0xc>)
 8082494:	681b      	ldr	r3, [r3, #0]
 8082496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082498:	9301      	str	r3, [sp, #4]
 808249a:	bd08      	pop	{r3, pc}
 808249c:	080401ac 	.word	0x080401ac

080824a0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80824a0:	b508      	push	{r3, lr}
 80824a2:	4b02      	ldr	r3, [pc, #8]	; (80824ac <hal_i2c_is_enabled+0xc>)
 80824a4:	681b      	ldr	r3, [r3, #0]
 80824a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80824a8:	9301      	str	r3, [sp, #4]
 80824aa:	bd08      	pop	{r3, pc}
 80824ac:	080401ac 	.word	0x080401ac

080824b0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80824b0:	b508      	push	{r3, lr}
 80824b2:	4b02      	ldr	r3, [pc, #8]	; (80824bc <hal_i2c_init+0xc>)
 80824b4:	681b      	ldr	r3, [r3, #0]
 80824b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80824b8:	9301      	str	r3, [sp, #4]
 80824ba:	bd08      	pop	{r3, pc}
 80824bc:	080401ac 	.word	0x080401ac

080824c0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80824c0:	b508      	push	{r3, lr}
 80824c2:	4b02      	ldr	r3, [pc, #8]	; (80824cc <hal_i2c_request_ex+0xc>)
 80824c4:	681b      	ldr	r3, [r3, #0]
 80824c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80824c8:	9301      	str	r3, [sp, #4]
 80824ca:	bd08      	pop	{r3, pc}
 80824cc:	080401ac 	.word	0x080401ac

080824d0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80824d0:	b508      	push	{r3, lr}
 80824d2:	4b02      	ldr	r3, [pc, #8]	; (80824dc <hal_spi_begin+0xc>)
 80824d4:	681b      	ldr	r3, [r3, #0]
 80824d6:	681b      	ldr	r3, [r3, #0]
 80824d8:	9301      	str	r3, [sp, #4]
 80824da:	bd08      	pop	{r3, pc}
 80824dc:	080401b4 	.word	0x080401b4

080824e0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80824e0:	b508      	push	{r3, lr}
 80824e2:	4b02      	ldr	r3, [pc, #8]	; (80824ec <hal_spi_init+0xc>)
 80824e4:	681b      	ldr	r3, [r3, #0]
 80824e6:	69db      	ldr	r3, [r3, #28]
 80824e8:	9301      	str	r3, [sp, #4]
 80824ea:	bd08      	pop	{r3, pc}
 80824ec:	080401b4 	.word	0x080401b4

080824f0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80824f0:	b508      	push	{r3, lr}
 80824f2:	4b02      	ldr	r3, [pc, #8]	; (80824fc <hal_spi_is_enabled+0xc>)
 80824f4:	681b      	ldr	r3, [r3, #0]
 80824f6:	6a1b      	ldr	r3, [r3, #32]
 80824f8:	9301      	str	r3, [sp, #4]
 80824fa:	bd08      	pop	{r3, pc}
 80824fc:	080401b4 	.word	0x080401b4

08082500 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 8082500:	b508      	push	{r3, lr}
 8082502:	4b02      	ldr	r3, [pc, #8]	; (808250c <hal_spi_info+0xc>)
 8082504:	681b      	ldr	r3, [r3, #0]
 8082506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082508:	9301      	str	r3, [sp, #4]
 808250a:	bd08      	pop	{r3, pc}
 808250c:	080401b4 	.word	0x080401b4

08082510 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 8082510:	b508      	push	{r3, lr}
 8082512:	4b02      	ldr	r3, [pc, #8]	; (808251c <hal_spi_transfer_dma+0xc>)
 8082514:	681b      	ldr	r3, [r3, #0]
 8082516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8082518:	9301      	str	r3, [sp, #4]
 808251a:	bd08      	pop	{r3, pc}
 808251c:	080401b4 	.word	0x080401b4

08082520 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 8082520:	b508      	push	{r3, lr}
 8082522:	4b02      	ldr	r3, [pc, #8]	; (808252c <hal_spi_transfer_dma_status+0xc>)
 8082524:	681b      	ldr	r3, [r3, #0]
 8082526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8082528:	9301      	str	r3, [sp, #4]
 808252a:	bd08      	pop	{r3, pc}
 808252c:	080401b4 	.word	0x080401b4

08082530 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 8082530:	b508      	push	{r3, lr}
 8082532:	4b02      	ldr	r3, [pc, #8]	; (808253c <hal_spi_set_settings+0xc>)
 8082534:	681b      	ldr	r3, [r3, #0]
 8082536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082538:	9301      	str	r3, [sp, #4]
 808253a:	bd08      	pop	{r3, pc}
 808253c:	080401b4 	.word	0x080401b4

08082540 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8082540:	b508      	push	{r3, lr}
 8082542:	4b02      	ldr	r3, [pc, #8]	; (808254c <inet_gethostbyname+0xc>)
 8082544:	681b      	ldr	r3, [r3, #0]
 8082546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082548:	9301      	str	r3, [sp, #4]
 808254a:	bd08      	pop	{r3, pc}
 808254c:	08060020 	.word	0x08060020

08082550 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8082550:	b508      	push	{r3, lr}
 8082552:	4b02      	ldr	r3, [pc, #8]	; (808255c <HAL_USB_USART_Init+0xc>)
 8082554:	681b      	ldr	r3, [r3, #0]
 8082556:	681b      	ldr	r3, [r3, #0]
 8082558:	9301      	str	r3, [sp, #4]
 808255a:	bd08      	pop	{r3, pc}
 808255c:	0806001c 	.word	0x0806001c

08082560 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8082560:	b508      	push	{r3, lr}
 8082562:	4b02      	ldr	r3, [pc, #8]	; (808256c <HAL_USB_USART_Begin+0xc>)
 8082564:	681b      	ldr	r3, [r3, #0]
 8082566:	685b      	ldr	r3, [r3, #4]
 8082568:	9301      	str	r3, [sp, #4]
 808256a:	bd08      	pop	{r3, pc}
 808256c:	0806001c 	.word	0x0806001c

08082570 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8082570:	b508      	push	{r3, lr}
 8082572:	4b02      	ldr	r3, [pc, #8]	; (808257c <HAL_USB_USART_Available_Data+0xc>)
 8082574:	681b      	ldr	r3, [r3, #0]
 8082576:	691b      	ldr	r3, [r3, #16]
 8082578:	9301      	str	r3, [sp, #4]
 808257a:	bd08      	pop	{r3, pc}
 808257c:	0806001c 	.word	0x0806001c

08082580 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8082580:	b508      	push	{r3, lr}
 8082582:	4b02      	ldr	r3, [pc, #8]	; (808258c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8082584:	681b      	ldr	r3, [r3, #0]
 8082586:	695b      	ldr	r3, [r3, #20]
 8082588:	9301      	str	r3, [sp, #4]
 808258a:	bd08      	pop	{r3, pc}
 808258c:	0806001c 	.word	0x0806001c

08082590 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8082590:	b508      	push	{r3, lr}
 8082592:	4b02      	ldr	r3, [pc, #8]	; (808259c <HAL_USB_USART_Receive_Data+0xc>)
 8082594:	681b      	ldr	r3, [r3, #0]
 8082596:	699b      	ldr	r3, [r3, #24]
 8082598:	9301      	str	r3, [sp, #4]
 808259a:	bd08      	pop	{r3, pc}
 808259c:	0806001c 	.word	0x0806001c

080825a0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80825a0:	b508      	push	{r3, lr}
 80825a2:	4b02      	ldr	r3, [pc, #8]	; (80825ac <HAL_USB_USART_Send_Data+0xc>)
 80825a4:	681b      	ldr	r3, [r3, #0]
 80825a6:	69db      	ldr	r3, [r3, #28]
 80825a8:	9301      	str	r3, [sp, #4]
 80825aa:	bd08      	pop	{r3, pc}
 80825ac:	0806001c 	.word	0x0806001c

080825b0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80825b0:	b508      	push	{r3, lr}
 80825b2:	4b02      	ldr	r3, [pc, #8]	; (80825bc <HAL_USB_USART_Flush_Data+0xc>)
 80825b4:	681b      	ldr	r3, [r3, #0]
 80825b6:	6a1b      	ldr	r3, [r3, #32]
 80825b8:	9301      	str	r3, [sp, #4]
 80825ba:	bd08      	pop	{r3, pc}
 80825bc:	0806001c 	.word	0x0806001c

080825c0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80825c0:	b508      	push	{r3, lr}
 80825c2:	4b02      	ldr	r3, [pc, #8]	; (80825cc <set_system_mode+0xc>)
 80825c4:	681b      	ldr	r3, [r3, #0]
 80825c6:	685b      	ldr	r3, [r3, #4]
 80825c8:	9301      	str	r3, [sp, #4]
 80825ca:	bd08      	pop	{r3, pc}
 80825cc:	080401a4 	.word	0x080401a4

080825d0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80825d0:	b508      	push	{r3, lr}
 80825d2:	4b02      	ldr	r3, [pc, #8]	; (80825dc <system_delay_ms+0xc>)
 80825d4:	681b      	ldr	r3, [r3, #0]
 80825d6:	695b      	ldr	r3, [r3, #20]
 80825d8:	9301      	str	r3, [sp, #4]
 80825da:	bd08      	pop	{r3, pc}
 80825dc:	080401a4 	.word	0x080401a4

080825e0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80825e0:	b508      	push	{r3, lr}
 80825e2:	4b02      	ldr	r3, [pc, #8]	; (80825ec <system_thread_set_state+0xc>)
 80825e4:	681b      	ldr	r3, [r3, #0]
 80825e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80825e8:	9301      	str	r3, [sp, #4]
 80825ea:	bd08      	pop	{r3, pc}
 80825ec:	080401a4 	.word	0x080401a4

080825f0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80825f0:	b508      	push	{r3, lr}
 80825f2:	4b03      	ldr	r3, [pc, #12]	; (8082600 <system_ctrl_set_app_request_handler+0x10>)
 80825f4:	681b      	ldr	r3, [r3, #0]
 80825f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80825fa:	9301      	str	r3, [sp, #4]
 80825fc:	bd08      	pop	{r3, pc}
 80825fe:	0000      	.short	0x0000
 8082600:	080401a4 	.word	0x080401a4

08082604 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8082604:	b508      	push	{r3, lr}
 8082606:	4b03      	ldr	r3, [pc, #12]	; (8082614 <system_ctrl_set_result+0x10>)
 8082608:	681b      	ldr	r3, [r3, #0]
 808260a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808260e:	9301      	str	r3, [sp, #4]
 8082610:	bd08      	pop	{r3, pc}
 8082612:	0000      	.short	0x0000
 8082614:	080401a4 	.word	0x080401a4

08082618 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8082618:	b508      	push	{r3, lr}
 808261a:	4b02      	ldr	r3, [pc, #8]	; (8082624 <network_connect+0xc>)
 808261c:	681b      	ldr	r3, [r3, #0]
 808261e:	685b      	ldr	r3, [r3, #4]
 8082620:	9301      	str	r3, [sp, #4]
 8082622:	bd08      	pop	{r3, pc}
 8082624:	080401c8 	.word	0x080401c8

08082628 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8082628:	b508      	push	{r3, lr}
 808262a:	4b02      	ldr	r3, [pc, #8]	; (8082634 <network_connecting+0xc>)
 808262c:	681b      	ldr	r3, [r3, #0]
 808262e:	689b      	ldr	r3, [r3, #8]
 8082630:	9301      	str	r3, [sp, #4]
 8082632:	bd08      	pop	{r3, pc}
 8082634:	080401c8 	.word	0x080401c8

08082638 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8082638:	b508      	push	{r3, lr}
 808263a:	4b02      	ldr	r3, [pc, #8]	; (8082644 <network_disconnect+0xc>)
 808263c:	681b      	ldr	r3, [r3, #0]
 808263e:	68db      	ldr	r3, [r3, #12]
 8082640:	9301      	str	r3, [sp, #4]
 8082642:	bd08      	pop	{r3, pc}
 8082644:	080401c8 	.word	0x080401c8

08082648 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8082648:	b508      	push	{r3, lr}
 808264a:	4b02      	ldr	r3, [pc, #8]	; (8082654 <network_ready+0xc>)
 808264c:	681b      	ldr	r3, [r3, #0]
 808264e:	691b      	ldr	r3, [r3, #16]
 8082650:	9301      	str	r3, [sp, #4]
 8082652:	bd08      	pop	{r3, pc}
 8082654:	080401c8 	.word	0x080401c8

08082658 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8082658:	b508      	push	{r3, lr}
 808265a:	4b02      	ldr	r3, [pc, #8]	; (8082664 <network_on+0xc>)
 808265c:	681b      	ldr	r3, [r3, #0]
 808265e:	695b      	ldr	r3, [r3, #20]
 8082660:	9301      	str	r3, [sp, #4]
 8082662:	bd08      	pop	{r3, pc}
 8082664:	080401c8 	.word	0x080401c8

08082668 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8082668:	b508      	push	{r3, lr}
 808266a:	4b02      	ldr	r3, [pc, #8]	; (8082674 <network_off+0xc>)
 808266c:	681b      	ldr	r3, [r3, #0]
 808266e:	699b      	ldr	r3, [r3, #24]
 8082670:	9301      	str	r3, [sp, #4]
 8082672:	bd08      	pop	{r3, pc}
 8082674:	080401c8 	.word	0x080401c8

08082678 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8082678:	b508      	push	{r3, lr}
 808267a:	4b02      	ldr	r3, [pc, #8]	; (8082684 <network_listen+0xc>)
 808267c:	681b      	ldr	r3, [r3, #0]
 808267e:	69db      	ldr	r3, [r3, #28]
 8082680:	9301      	str	r3, [sp, #4]
 8082682:	bd08      	pop	{r3, pc}
 8082684:	080401c8 	.word	0x080401c8

08082688 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8082688:	b508      	push	{r3, lr}
 808268a:	4b02      	ldr	r3, [pc, #8]	; (8082694 <network_listening+0xc>)
 808268c:	681b      	ldr	r3, [r3, #0]
 808268e:	6a1b      	ldr	r3, [r3, #32]
 8082690:	9301      	str	r3, [sp, #4]
 8082692:	bd08      	pop	{r3, pc}
 8082694:	080401c8 	.word	0x080401c8

08082698 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8082698:	b508      	push	{r3, lr}
 808269a:	4b02      	ldr	r3, [pc, #8]	; (80826a4 <network_set_listen_timeout+0xc>)
 808269c:	681b      	ldr	r3, [r3, #0]
 808269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80826a0:	9301      	str	r3, [sp, #4]
 80826a2:	bd08      	pop	{r3, pc}
 80826a4:	080401c8 	.word	0x080401c8

080826a8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80826a8:	b508      	push	{r3, lr}
 80826aa:	4b02      	ldr	r3, [pc, #8]	; (80826b4 <network_get_listen_timeout+0xc>)
 80826ac:	681b      	ldr	r3, [r3, #0]
 80826ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80826b0:	9301      	str	r3, [sp, #4]
 80826b2:	bd08      	pop	{r3, pc}
 80826b4:	080401c8 	.word	0x080401c8

080826b8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80826b8:	b508      	push	{r3, lr}
 80826ba:	4b02      	ldr	r3, [pc, #8]	; (80826c4 <network_is_on+0xc>)
 80826bc:	681b      	ldr	r3, [r3, #0]
 80826be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80826c0:	9301      	str	r3, [sp, #4]
 80826c2:	bd08      	pop	{r3, pc}
 80826c4:	080401c8 	.word	0x080401c8

080826c8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80826c8:	b508      	push	{r3, lr}
 80826ca:	4b02      	ldr	r3, [pc, #8]	; (80826d4 <network_is_off+0xc>)
 80826cc:	681b      	ldr	r3, [r3, #0]
 80826ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80826d0:	9301      	str	r3, [sp, #4]
 80826d2:	bd08      	pop	{r3, pc}
 80826d4:	080401c8 	.word	0x080401c8

080826d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80826d8:	b508      	push	{r3, lr}
 80826da:	4b02      	ldr	r3, [pc, #8]	; (80826e4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80826dc:	681b      	ldr	r3, [r3, #0]
 80826de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80826e0:	9301      	str	r3, [sp, #4]
 80826e2:	bd08      	pop	{r3, pc}
 80826e4:	080401cc 	.word	0x080401cc

080826e8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80826e8:	b508      	push	{r3, lr}
 80826ea:	4b02      	ldr	r3, [pc, #8]	; (80826f4 <malloc+0xc>)
 80826ec:	681b      	ldr	r3, [r3, #0]
 80826ee:	681b      	ldr	r3, [r3, #0]
 80826f0:	9301      	str	r3, [sp, #4]
 80826f2:	bd08      	pop	{r3, pc}
 80826f4:	080401a0 	.word	0x080401a0

080826f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80826f8:	b508      	push	{r3, lr}
 80826fa:	4b02      	ldr	r3, [pc, #8]	; (8082704 <free+0xc>)
 80826fc:	681b      	ldr	r3, [r3, #0]
 80826fe:	685b      	ldr	r3, [r3, #4]
 8082700:	9301      	str	r3, [sp, #4]
 8082702:	bd08      	pop	{r3, pc}
 8082704:	080401a0 	.word	0x080401a0

08082708 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 8082708:	b508      	push	{r3, lr}
 808270a:	4b02      	ldr	r3, [pc, #8]	; (8082714 <sprintf+0xc>)
 808270c:	681b      	ldr	r3, [r3, #0]
 808270e:	68db      	ldr	r3, [r3, #12]
 8082710:	9301      	str	r3, [sp, #4]
 8082712:	bd08      	pop	{r3, pc}
 8082714:	080401a0 	.word	0x080401a0

08082718 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 8082718:	b508      	push	{r3, lr}
 808271a:	4b02      	ldr	r3, [pc, #8]	; (8082724 <__assert_func+0xc>)
 808271c:	681b      	ldr	r3, [r3, #0]
 808271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082720:	9301      	str	r3, [sp, #4]
 8082722:	bd08      	pop	{r3, pc}
 8082724:	080401a0 	.word	0x080401a0

08082728 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8082728:	b508      	push	{r3, lr}
 808272a:	4b02      	ldr	r3, [pc, #8]	; (8082734 <newlib_impure_ptr_callback+0xc>)
 808272c:	681b      	ldr	r3, [r3, #0]
 808272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082730:	9301      	str	r3, [sp, #4]
 8082732:	bd08      	pop	{r3, pc}
 8082734:	080401a0 	.word	0x080401a0

08082738 <_ZN14RecursiveMutex6unlockEv.isra.0>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8082738:	f7ff be2a 	b.w	8082390 <os_mutex_recursive_unlock>

0808273c <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
 808273c:	f7ff be20 	b.w	8082380 <os_mutex_recursive_lock>

08082740 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8082740:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 8082742:	2600      	movs	r6, #0
 8082744:	4604      	mov	r4, r0
 8082746:	460d      	mov	r5, r1
 8082748:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 808274c:	f7ff fe08 	bl	8082360 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8082750:	4628      	mov	r0, r5
    _spi = spi;
 8082752:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8082754:	f7ff fec4 	bl	80824e0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8082758:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 808275a:	6066      	str	r6, [r4, #4]
}
 808275c:	bd70      	pop	{r4, r5, r6, pc}

0808275e <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 808275e:	b510      	push	{r4, lr}
 8082760:	4604      	mov	r4, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8082762:	6880      	ldr	r0, [r0, #8]
 8082764:	f7ff ffea 	bl	808273c <_ZN14RecursiveMutex4lockEv.isra.0>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 8082768:	7820      	ldrb	r0, [r4, #0]
 808276a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 808276e:	f7ff feaf 	bl	80824d0 <hal_spi_begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8082772:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 8082774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082778:	f7ff bfde 	b.w	8082738 <_ZN14RecursiveMutex6unlockEv.isra.0>

0808277c <_ZN8SPIClass14endTransactionEv>:
 808277c:	6880      	ldr	r0, [r0, #8]
 808277e:	f7ff bfdb 	b.w	8082738 <_ZN14RecursiveMutex6unlockEv.isra.0>
	...

08082784 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 8082784:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8082786:	2400      	movs	r4, #0
 8082788:	0840      	lsrs	r0, r0, #1
 808278a:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 808278c:	6818      	ldr	r0, [r3, #0]
 808278e:	b2e5      	uxtb	r5, r4
 8082790:	4288      	cmp	r0, r1
 8082792:	d906      	bls.n	80827a2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8082794:	3401      	adds	r4, #1
 8082796:	2c08      	cmp	r4, #8
 8082798:	d002      	beq.n	80827a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 808279a:	0840      	lsrs	r0, r0, #1
 808279c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 808279e:	e7f5      	b.n	808278c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80827a0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 80827a2:	4b02      	ldr	r3, [pc, #8]	; (80827ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80827a4:	5d5b      	ldrb	r3, [r3, r5]
 80827a6:	7013      	strb	r3, [r2, #0]
}
 80827a8:	bd30      	pop	{r4, r5, pc}
 80827aa:	bf00      	nop
 80827ac:	080846cd 	.word	0x080846cd

080827b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 80827b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80827b4:	4606      	mov	r6, r0
 80827b6:	b08f      	sub	sp, #60	; 0x3c
    _mutex.lock();
 80827b8:	6880      	ldr	r0, [r0, #8]
 80827ba:	460c      	mov	r4, r1
 80827bc:	f7ff ffbe 	bl	808273c <_ZN14RecursiveMutex4lockEv.isra.0>
    memset(info, 0, sizeof(hal_spi_info_t));
 80827c0:	2214      	movs	r2, #20
 80827c2:	2100      	movs	r1, #0
 80827c4:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 80827c6:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 80827c8:	f001 fe38 	bl	808443c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80827cc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 80827ce:	2200      	movs	r2, #0
 80827d0:	4628      	mov	r0, r5
 80827d2:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 80827d4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 80827d8:	f7ff fe92 	bl	8082500 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 80827dc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80827e0:	b113      	cbz	r3, 80827e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x38>
 80827e2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80827e6:	b155      	cbz	r5, 80827fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4e>
  {
 80827e8:	2700      	movs	r7, #0
 80827ea:	2501      	movs	r5, #1
 80827ec:	46b9      	mov	r9, r7
 80827ee:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 80827f0:	7923      	ldrb	r3, [r4, #4]
 80827f2:	b15d      	cbz	r5, 808280c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x5c>
 80827f4:	b1c3      	cbz	r3, 8082828 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
}
 80827f6:	2000      	movs	r0, #0
 80827f8:	b00f      	add	sp, #60	; 0x3c
 80827fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 80827fe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8082802:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8082806:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 808280a:	e7f1      	b.n	80827f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x40>
    if (default_ == other.default_ &&
 808280c:	2b00      	cmp	r3, #0
 808280e:	d135      	bne.n	808287c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xcc>
 8082810:	68a3      	ldr	r3, [r4, #8]
 8082812:	4543      	cmp	r3, r8
 8082814:	d108      	bne.n	8082828 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
        bitOrder_ == other.bitOrder_ &&
 8082816:	f88d 9020 	strb.w	r9, [sp, #32]
 808281a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 808281e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8082822:	89a3      	ldrh	r3, [r4, #12]
 8082824:	429a      	cmp	r2, r3
 8082826:	d0e6      	beq.n	80827f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            uint8_t divisor = 0;
 8082828:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 808282a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 808282c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 8082830:	980a      	ldr	r0, [sp, #40]	; 0x28
 8082832:	ab04      	add	r3, sp, #16
 8082834:	f10d 020f 	add.w	r2, sp, #15
 8082838:	f7ff ffa4 	bl	8082784 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 808283c:	7921      	ldrb	r1, [r4, #4]
 808283e:	b985      	cbnz	r5, 8082862 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb2>
    if (default_ == other.default_ &&
 8082840:	b989      	cbnz	r1, 8082866 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 8082842:	68a3      	ldr	r3, [r4, #8]
 8082844:	4543      	cmp	r3, r8
 8082846:	d30e      	bcc.n	8082866 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
        bitOrder_ == other.bitOrder_ &&
 8082848:	f88d 9020 	strb.w	r9, [sp, #32]
 808284c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8082850:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8082854:	89a3      	ldrh	r3, [r4, #12]
 8082856:	429a      	cmp	r2, r3
 8082858:	d105      	bne.n	8082866 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 808285a:	9b04      	ldr	r3, [sp, #16]
 808285c:	4543      	cmp	r3, r8
 808285e:	d102      	bne.n	8082866 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 8082860:	e7c9      	b.n	80827f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
    if (default_ && other.default_)
 8082862:	2900      	cmp	r1, #0
 8082864:	d1f9      	bne.n	808285a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xaa>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 8082866:	2300      	movs	r3, #0
 8082868:	9301      	str	r3, [sp, #4]
 808286a:	7b63      	ldrb	r3, [r4, #13]
 808286c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8082870:	9300      	str	r3, [sp, #0]
 8082872:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 8082874:	7830      	ldrb	r0, [r6, #0]
 8082876:	f7ff fe5b 	bl	8082530 <hal_spi_set_settings>
    return 0;
 808287a:	e7bc      	b.n	80827f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 808287c:	462b      	mov	r3, r5
 808287e:	462a      	mov	r2, r5
 8082880:	2101      	movs	r1, #1
 8082882:	e9cd 5500 	strd	r5, r5, [sp]
 8082886:	e7f5      	b.n	8082874 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc4>

08082888 <_ZN8SPIClass8transferEPKvPvjPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8082888:	b530      	push	{r4, r5, lr}
 808288a:	b087      	sub	sp, #28
 808288c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808288e:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 8082890:	9500      	str	r5, [sp, #0]
 8082892:	7800      	ldrb	r0, [r0, #0]
 8082894:	f7ff fe3c 	bl	8082510 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 8082898:	b93d      	cbnz	r5, 80828aa <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 808289a:	7820      	ldrb	r0, [r4, #0]
 808289c:	a902      	add	r1, sp, #8
 808289e:	f7ff fe3f 	bl	8082520 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 80828a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80828a6:	07db      	lsls	r3, r3, #31
 80828a8:	d4f7      	bmi.n	808289a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 80828aa:	b007      	add	sp, #28
 80828ac:	bd30      	pop	{r4, r5, pc}
	...

080828b0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80828b0:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80828b2:	2000      	movs	r0, #0
 80828b4:	4b04      	ldr	r3, [pc, #16]	; (80828c8 <_GLOBAL__sub_I_System+0x18>)
 80828b6:	601a      	str	r2, [r3, #0]
 80828b8:	4b04      	ldr	r3, [pc, #16]	; (80828cc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80828ba:	4a05      	ldr	r2, [pc, #20]	; (80828d0 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80828bc:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80828c0:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80828c2:	f7ff be7d 	b.w	80825c0 <set_system_mode>
 80828c6:	bf00      	nop
 80828c8:	200001f8 	.word	0x200001f8
 80828cc:	200001ec 	.word	0x200001ec
 80828d0:	ffff0000 	.word	0xffff0000

080828d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80828d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80828d6:	4606      	mov	r6, r0
 80828d8:	460d      	mov	r5, r1
  size_t n = 0;
 80828da:	2400      	movs	r4, #0
 80828dc:	188f      	adds	r7, r1, r2
  while (size--) {
 80828de:	42bd      	cmp	r5, r7
 80828e0:	d00c      	beq.n	80828fc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80828e2:	6833      	ldr	r3, [r6, #0]
 80828e4:	4630      	mov	r0, r6
 80828e6:	689b      	ldr	r3, [r3, #8]
 80828e8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80828ec:	4798      	blx	r3
     if (chunk>=0)
 80828ee:	1e03      	subs	r3, r0, #0
 80828f0:	db01      	blt.n	80828f6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80828f2:	441c      	add	r4, r3
  while (size--) {
 80828f4:	e7f3      	b.n	80828de <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80828f6:	2c00      	cmp	r4, #0
 80828f8:	bf08      	it	eq
 80828fa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80828fc:	4620      	mov	r0, r4
 80828fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082900 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082900:	b570      	push	{r4, r5, r6, lr}
 8082902:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8082904:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8082906:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8082908:	b149      	cbz	r1, 808291e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808290a:	f001 fdcd 	bl	80844a8 <strlen>
 808290e:	682b      	ldr	r3, [r5, #0]
 8082910:	4602      	mov	r2, r0
 8082912:	4621      	mov	r1, r4
 8082914:	4628      	mov	r0, r5
    }
 8082916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 808291a:	68db      	ldr	r3, [r3, #12]
 808291c:	4718      	bx	r3
    }
 808291e:	bd70      	pop	{r4, r5, r6, pc}

08082920 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 8082920:	b508      	push	{r3, lr}
  return write(str);
 8082922:	f7ff ffed 	bl	8082900 <_ZN5Print5writeEPKc>
}
 8082926:	bd08      	pop	{r3, pc}

08082928 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 8082928:	6803      	ldr	r3, [r0, #0]
 808292a:	689b      	ldr	r3, [r3, #8]
 808292c:	4718      	bx	r3

0808292e <_ZN5Print5printEPK19__FlashStringHelper>:
 808292e:	b508      	push	{r3, lr}
 8082930:	f7ff ffe6 	bl	8082900 <_ZN5Print5writeEPKc>
 8082934:	bd08      	pop	{r3, pc}

08082936 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082936:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8082938:	210d      	movs	r1, #13
{
 808293a:	4605      	mov	r5, r0
  size_t n = print('\r');
 808293c:	f7ff fff4 	bl	8082928 <_ZN5Print5printEc>
  n += print('\n');
 8082940:	210a      	movs	r1, #10
  size_t n = print('\r');
 8082942:	4604      	mov	r4, r0
  n += print('\n');
 8082944:	4628      	mov	r0, r5
 8082946:	f7ff ffef 	bl	8082928 <_ZN5Print5printEc>
  return n;
}
 808294a:	4420      	add	r0, r4
 808294c:	bd38      	pop	{r3, r4, r5, pc}

0808294e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808294e:	b538      	push	{r3, r4, r5, lr}
 8082950:	4605      	mov	r5, r0
  return write(str);
 8082952:	f7ff ffd5 	bl	8082900 <_ZN5Print5writeEPKc>
 8082956:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 8082958:	4628      	mov	r0, r5
 808295a:	f7ff ffec 	bl	8082936 <_ZN5Print7printlnEv>
  return n;
}
 808295e:	4420      	add	r0, r4
 8082960:	bd38      	pop	{r3, r4, r5, pc}

08082962 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 8082962:	f7ff bff4 	b.w	808294e <_ZN5Print7printlnEPKc>

08082966 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082966:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8082968:	2a01      	cmp	r2, #1
 808296a:	bf98      	it	ls
 808296c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 808296e:	b530      	push	{r4, r5, lr}
 8082970:	b08b      	sub	sp, #44	; 0x2c
 8082972:	460c      	mov	r4, r1
  *str = '\0';
 8082974:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8082978:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 808297a:	4625      	mov	r5, r4
 808297c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8082980:	fb04 5312 	mls	r3, r4, r2, r5
 8082984:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082986:	2b09      	cmp	r3, #9
 8082988:	bf94      	ite	ls
 808298a:	3330      	addls	r3, #48	; 0x30
 808298c:	3337      	addhi	r3, #55	; 0x37
 808298e:	b2db      	uxtb	r3, r3
  } while(n);
 8082990:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082992:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8082996:	d9f0      	bls.n	808297a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8082998:	f7ff ffb2 	bl	8082900 <_ZN5Print5writeEPKc>
}
 808299c:	b00b      	add	sp, #44	; 0x2c
 808299e:	bd30      	pop	{r4, r5, pc}

080829a0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80829a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80829a4:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80829a6:	4619      	mov	r1, r3
 80829a8:	4610      	mov	r0, r2
{
 80829aa:	4692      	mov	sl, r2
 80829ac:	461f      	mov	r7, r3
 80829ae:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80829b2:	f001 f9b7 	bl	8083d24 <__aeabi_dcmpun>
 80829b6:	b140      	cbz	r0, 80829ca <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80829b8:	4951      	ldr	r1, [pc, #324]	; (8082b00 <_ZN5Print10printFloatEdh+0x160>)
 80829ba:	4628      	mov	r0, r5
 80829bc:	f7ff ffa0 	bl	8082900 <_ZN5Print5writeEPKc>
 80829c0:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80829c2:	4620      	mov	r0, r4
 80829c4:	b003      	add	sp, #12
 80829c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80829ca:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80829ce:	f04f 32ff 	mov.w	r2, #4294967295
 80829d2:	4650      	mov	r0, sl
 80829d4:	4621      	mov	r1, r4
 80829d6:	4b4b      	ldr	r3, [pc, #300]	; (8082b04 <_ZN5Print10printFloatEdh+0x164>)
 80829d8:	f001 f9a4 	bl	8083d24 <__aeabi_dcmpun>
 80829dc:	b948      	cbnz	r0, 80829f2 <_ZN5Print10printFloatEdh+0x52>
 80829de:	f04f 32ff 	mov.w	r2, #4294967295
 80829e2:	4650      	mov	r0, sl
 80829e4:	4621      	mov	r1, r4
 80829e6:	4b47      	ldr	r3, [pc, #284]	; (8082b04 <_ZN5Print10printFloatEdh+0x164>)
 80829e8:	f001 f97e 	bl	8083ce8 <__aeabi_dcmple>
 80829ec:	b908      	cbnz	r0, 80829f2 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80829ee:	4946      	ldr	r1, [pc, #280]	; (8082b08 <_ZN5Print10printFloatEdh+0x168>)
 80829f0:	e7e3      	b.n	80829ba <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80829f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80829f6:	4650      	mov	r0, sl
 80829f8:	4639      	mov	r1, r7
 80829fa:	4b44      	ldr	r3, [pc, #272]	; (8082b0c <_ZN5Print10printFloatEdh+0x16c>)
 80829fc:	f001 f988 	bl	8083d10 <__aeabi_dcmpgt>
 8082a00:	b108      	cbz	r0, 8082a06 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 8082a02:	4943      	ldr	r1, [pc, #268]	; (8082b10 <_ZN5Print10printFloatEdh+0x170>)
 8082a04:	e7d9      	b.n	80829ba <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8082a06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8082a0a:	4650      	mov	r0, sl
 8082a0c:	4639      	mov	r1, r7
 8082a0e:	4b41      	ldr	r3, [pc, #260]	; (8082b14 <_ZN5Print10printFloatEdh+0x174>)
 8082a10:	f001 f960 	bl	8083cd4 <__aeabi_dcmplt>
 8082a14:	2800      	cmp	r0, #0
 8082a16:	d1f4      	bne.n	8082a02 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 8082a18:	2200      	movs	r2, #0
 8082a1a:	2300      	movs	r3, #0
 8082a1c:	4650      	mov	r0, sl
 8082a1e:	4639      	mov	r1, r7
 8082a20:	f001 f958 	bl	8083cd4 <__aeabi_dcmplt>
 8082a24:	4604      	mov	r4, r0
 8082a26:	b130      	cbz	r0, 8082a36 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 8082a28:	212d      	movs	r1, #45	; 0x2d
 8082a2a:	4628      	mov	r0, r5
 8082a2c:	f7ff ff7c 	bl	8082928 <_ZN5Print5printEc>
 8082a30:	4604      	mov	r4, r0
     number = -number;
 8082a32:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 8082a36:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 8082a3a:	2000      	movs	r0, #0
    rounding /= 10.0;
 8082a3c:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 8082a40:	4935      	ldr	r1, [pc, #212]	; (8082b18 <_ZN5Print10printFloatEdh+0x178>)
    rounding /= 10.0;
 8082a42:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8082b1c <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 8082a46:	fa5f f38b 	uxtb.w	r3, fp
 8082a4a:	429e      	cmp	r6, r3
 8082a4c:	d906      	bls.n	8082a5c <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 8082a4e:	4642      	mov	r2, r8
 8082a50:	464b      	mov	r3, r9
 8082a52:	f000 fff7 	bl	8083a44 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 8082a56:	f10b 0b01 	add.w	fp, fp, #1
 8082a5a:	e7f4      	b.n	8082a46 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 8082a5c:	463b      	mov	r3, r7
 8082a5e:	4652      	mov	r2, sl
 8082a60:	f000 fd10 	bl	8083484 <__adddf3>
 8082a64:	4689      	mov	r9, r1
 8082a66:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 8082a68:	f001 f99a 	bl	8083da0 <__aeabi_d2uiz>
 8082a6c:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 8082a6e:	f000 fe45 	bl	80836fc <__aeabi_ui2d>
 8082a72:	4602      	mov	r2, r0
 8082a74:	460b      	mov	r3, r1
 8082a76:	4640      	mov	r0, r8
 8082a78:	4649      	mov	r1, r9
 8082a7a:	f000 fd01 	bl	8083480 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8082a7e:	220a      	movs	r2, #10
 8082a80:	4680      	mov	r8, r0
 8082a82:	4689      	mov	r9, r1
 8082a84:	4628      	mov	r0, r5
 8082a86:	4639      	mov	r1, r7
 8082a88:	f7ff ff6d 	bl	8082966 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 8082a8c:	4404      	add	r4, r0
  if (digits > 0) {
 8082a8e:	2e00      	cmp	r6, #0
 8082a90:	d097      	beq.n	80829c2 <_ZN5Print10printFloatEdh+0x22>
  return write(str);
 8082a92:	4628      	mov	r0, r5
 8082a94:	4922      	ldr	r1, [pc, #136]	; (8082b20 <_ZN5Print10printFloatEdh+0x180>)
 8082a96:	f7ff ff33 	bl	8082900 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 8082a9a:	f04f 0a00 	mov.w	sl, #0
 8082a9e:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8082b1c <_ZN5Print10printFloatEdh+0x17c>
    n += print(".");
 8082aa2:	4404      	add	r4, r0
  while (digits-- > 0)
 8082aa4:	2e00      	cmp	r6, #0
 8082aa6:	d08c      	beq.n	80829c2 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 8082aa8:	4652      	mov	r2, sl
 8082aaa:	465b      	mov	r3, fp
 8082aac:	4640      	mov	r0, r8
 8082aae:	4649      	mov	r1, r9
 8082ab0:	f000 fe9e 	bl	80837f0 <__aeabi_dmul>
 8082ab4:	4680      	mov	r8, r0
 8082ab6:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 8082ab8:	f001 f94a 	bl	8083d50 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 8082abc:	1e07      	subs	r7, r0, #0
 8082abe:	da1b      	bge.n	8082af8 <_ZN5Print10printFloatEdh+0x158>
            t = print('-');
 8082ac0:	212d      	movs	r1, #45	; 0x2d
 8082ac2:	4628      	mov	r0, r5
 8082ac4:	f7ff ff30 	bl	8082928 <_ZN5Print5printEc>
 8082ac8:	4603      	mov	r3, r0
            val = -n;
 8082aca:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 8082acc:	220a      	movs	r2, #10
 8082ace:	4628      	mov	r0, r5
 8082ad0:	9301      	str	r3, [sp, #4]
 8082ad2:	f7ff ff48 	bl	8082966 <_ZN5Print11printNumberEmh>
 8082ad6:	9b01      	ldr	r3, [sp, #4]
 8082ad8:	3e01      	subs	r6, #1
 8082ada:	4403      	add	r3, r0
    remainder -= toPrint;
 8082adc:	4638      	mov	r0, r7
    n += print(toPrint);
 8082ade:	441c      	add	r4, r3
    remainder -= toPrint;
 8082ae0:	f000 fe1c 	bl	808371c <__aeabi_i2d>
 8082ae4:	4602      	mov	r2, r0
 8082ae6:	460b      	mov	r3, r1
 8082ae8:	4640      	mov	r0, r8
 8082aea:	4649      	mov	r1, r9
 8082aec:	f000 fcc8 	bl	8083480 <__aeabi_dsub>
 8082af0:	b2f6      	uxtb	r6, r6
 8082af2:	4680      	mov	r8, r0
 8082af4:	4689      	mov	r9, r1
  while (digits-- > 0)
 8082af6:	e7d5      	b.n	8082aa4 <_ZN5Print10printFloatEdh+0x104>
            val = n;
 8082af8:	4639      	mov	r1, r7
        size_t t = 0;
 8082afa:	2300      	movs	r3, #0
 8082afc:	e7e6      	b.n	8082acc <_ZN5Print10printFloatEdh+0x12c>
 8082afe:	bf00      	nop
 8082b00:	080846d5 	.word	0x080846d5
 8082b04:	7fefffff 	.word	0x7fefffff
 8082b08:	080846d9 	.word	0x080846d9
 8082b0c:	41efffff 	.word	0x41efffff
 8082b10:	080846dd 	.word	0x080846dd
 8082b14:	c1efffff 	.word	0xc1efffff
 8082b18:	3fe00000 	.word	0x3fe00000
 8082b1c:	40240000 	.word	0x40240000
 8082b20:	080846e1 	.word	0x080846e1

08082b24 <_ZN5Print5printEfi>:
{
 8082b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082b26:	4605      	mov	r5, r0
 8082b28:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 8082b2a:	4608      	mov	r0, r1
 8082b2c:	f000 fe08 	bl	8083740 <__aeabi_f2d>
 8082b30:	b2e4      	uxtb	r4, r4
 8082b32:	4602      	mov	r2, r0
 8082b34:	460b      	mov	r3, r1
 8082b36:	4628      	mov	r0, r5
 8082b38:	9400      	str	r4, [sp, #0]
 8082b3a:	f7ff ff31 	bl	80829a0 <_ZN5Print10printFloatEdh>
}
 8082b3e:	b003      	add	sp, #12
 8082b40:	bd30      	pop	{r4, r5, pc}
	...

08082b44 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082b44:	4b01      	ldr	r3, [pc, #4]	; (8082b4c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8082b46:	4a02      	ldr	r2, [pc, #8]	; (8082b50 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082b48:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8082b4a:	4770      	bx	lr
 8082b4c:	200001fc 	.word	0x200001fc
 8082b50:	080846e3 	.word	0x080846e3

08082b54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8082b54:	4b02      	ldr	r3, [pc, #8]	; (8082b60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8082b56:	681a      	ldr	r2, [r3, #0]
 8082b58:	4b02      	ldr	r3, [pc, #8]	; (8082b64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8082b5a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8082b5c:	4770      	bx	lr
 8082b5e:	bf00      	nop
 8082b60:	20000014 	.word	0x20000014
 8082b64:	20000200 	.word	0x20000200

08082b68 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8082b68:	2100      	movs	r1, #0
 8082b6a:	f7ff bd31 	b.w	80825d0 <system_delay_ms>
	...

08082b70 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8082b70:	2200      	movs	r2, #0
 8082b72:	4b01      	ldr	r3, [pc, #4]	; (8082b78 <_GLOBAL__sub_I_RGB+0x8>)
 8082b74:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 8082b76:	4770      	bx	lr
 8082b78:	20000204 	.word	0x20000204

08082b7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8082b7c:	4b01      	ldr	r3, [pc, #4]	; (8082b84 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8082b7e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8082b80:	4770      	bx	lr
 8082b82:	bf00      	nop
 8082b84:	20000018 	.word	0x20000018

08082b88 <serialEventRun>:
{
 8082b88:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8082b8a:	4b17      	ldr	r3, [pc, #92]	; (8082be8 <serialEventRun+0x60>)
 8082b8c:	b143      	cbz	r3, 8082ba0 <serialEventRun+0x18>
 8082b8e:	f000 f96d 	bl	8082e6c <_Z16_fetch_usbserialv>
 8082b92:	6803      	ldr	r3, [r0, #0]
 8082b94:	691b      	ldr	r3, [r3, #16]
 8082b96:	4798      	blx	r3
 8082b98:	2800      	cmp	r0, #0
 8082b9a:	dd01      	ble.n	8082ba0 <serialEventRun+0x18>
        serialEvent();
 8082b9c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8082ba0:	4b12      	ldr	r3, [pc, #72]	; (8082bec <serialEventRun+0x64>)
 8082ba2:	b143      	cbz	r3, 8082bb6 <serialEventRun+0x2e>
 8082ba4:	f000 fbf2 	bl	808338c <_Z22__fetch_global_Serial1v>
 8082ba8:	6803      	ldr	r3, [r0, #0]
 8082baa:	691b      	ldr	r3, [r3, #16]
 8082bac:	4798      	blx	r3
 8082bae:	2800      	cmp	r0, #0
 8082bb0:	dd01      	ble.n	8082bb6 <serialEventRun+0x2e>
        serialEvent1();
 8082bb2:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8082bb6:	4b0e      	ldr	r3, [pc, #56]	; (8082bf0 <serialEventRun+0x68>)
 8082bb8:	b10b      	cbz	r3, 8082bbe <serialEventRun+0x36>
 8082bba:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8082bbe:	4b0d      	ldr	r3, [pc, #52]	; (8082bf4 <serialEventRun+0x6c>)
 8082bc0:	b10b      	cbz	r3, 8082bc6 <serialEventRun+0x3e>
 8082bc2:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8082bc6:	4b0c      	ldr	r3, [pc, #48]	; (8082bf8 <serialEventRun+0x70>)
 8082bc8:	b10b      	cbz	r3, 8082bce <serialEventRun+0x46>
 8082bca:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8082bce:	4b0b      	ldr	r3, [pc, #44]	; (8082bfc <serialEventRun+0x74>)
 8082bd0:	b143      	cbz	r3, 8082be4 <serialEventRun+0x5c>
 8082bd2:	f000 f985 	bl	8082ee0 <_Z17_fetch_usbserial1v>
 8082bd6:	6803      	ldr	r3, [r0, #0]
 8082bd8:	691b      	ldr	r3, [r3, #16]
 8082bda:	4798      	blx	r3
 8082bdc:	2800      	cmp	r0, #0
 8082bde:	dd01      	ble.n	8082be4 <serialEventRun+0x5c>
        usbSerialEvent1();
 8082be0:	f3af 8000 	nop.w
}
 8082be4:	bd08      	pop	{r3, pc}
 8082be6:	bf00      	nop
	...

08082c00 <_post_loop>:
{
 8082c00:	b508      	push	{r3, lr}
	serialEventRun();
 8082c02:	f7ff ffc1 	bl	8082b88 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082c06:	f7ff fb9b 	bl	8082340 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082c0a:	4b01      	ldr	r3, [pc, #4]	; (8082c10 <_post_loop+0x10>)
 8082c0c:	6018      	str	r0, [r3, #0]
}
 8082c0e:	bd08      	pop	{r3, pc}
 8082c10:	200005b0 	.word	0x200005b0

08082c14 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082c14:	4805      	ldr	r0, [pc, #20]	; (8082c2c <_Z33system_initialize_user_backup_ramv+0x18>)
 8082c16:	4a06      	ldr	r2, [pc, #24]	; (8082c30 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 8082c18:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082c1a:	1a12      	subs	r2, r2, r0
 8082c1c:	4905      	ldr	r1, [pc, #20]	; (8082c34 <_Z33system_initialize_user_backup_ramv+0x20>)
 8082c1e:	f001 fbff 	bl	8084420 <memcpy>
    __backup_sram_signature = signature;
 8082c22:	4b05      	ldr	r3, [pc, #20]	; (8082c38 <_Z33system_initialize_user_backup_ramv+0x24>)
 8082c24:	4a05      	ldr	r2, [pc, #20]	; (8082c3c <_Z33system_initialize_user_backup_ramv+0x28>)
 8082c26:	601a      	str	r2, [r3, #0]
}
 8082c28:	bd08      	pop	{r3, pc}
 8082c2a:	bf00      	nop
 8082c2c:	40024000 	.word	0x40024000
 8082c30:	40024004 	.word	0x40024004
 8082c34:	080848d0 	.word	0x080848d0
 8082c38:	40024000 	.word	0x40024000
 8082c3c:	9a271c1e 	.word	0x9a271c1e

08082c40 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082c40:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8082c42:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082c44:	461a      	mov	r2, r3
 8082c46:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082c4a:	9300      	str	r3, [sp, #0]
 8082c4c:	f7ff fcda 	bl	8082604 <system_ctrl_set_result>
}
 8082c50:	b003      	add	sp, #12
 8082c52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082c58 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8082c58:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8082c5a:	8843      	ldrh	r3, [r0, #2]
 8082c5c:	2b0a      	cmp	r3, #10
 8082c5e:	d008      	beq.n	8082c72 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8082c60:	2b50      	cmp	r3, #80	; 0x50
 8082c62:	d10b      	bne.n	8082c7c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8082c64:	4b09      	ldr	r3, [pc, #36]	; (8082c8c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8082c66:	681b      	ldr	r3, [r3, #0]
 8082c68:	b14b      	cbz	r3, 8082c7e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8082c6a:	b003      	add	sp, #12
 8082c6c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8082c70:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8082c72:	f7ff ffe5 	bl	8082c40 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8082c76:	b003      	add	sp, #12
 8082c78:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082c7c:	2300      	movs	r3, #0
 8082c7e:	461a      	mov	r2, r3
 8082c80:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082c84:	9300      	str	r3, [sp, #0]
 8082c86:	f7ff fcbd 	bl	8082604 <system_ctrl_set_result>
}
 8082c8a:	e7f4      	b.n	8082c76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8082c8c:	20000218 	.word	0x20000218

08082c90 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8082c90:	2100      	movs	r1, #0
{
 8082c92:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8082c94:	4811      	ldr	r0, [pc, #68]	; (8082cdc <module_user_init_hook+0x4c>)
 8082c96:	f7ff fd47 	bl	8082728 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 8082c9a:	4b11      	ldr	r3, [pc, #68]	; (8082ce0 <module_user_init_hook+0x50>)
 8082c9c:	681a      	ldr	r2, [r3, #0]
 8082c9e:	4b11      	ldr	r3, [pc, #68]	; (8082ce4 <module_user_init_hook+0x54>)
 8082ca0:	429a      	cmp	r2, r3
 8082ca2:	bf0c      	ite	eq
 8082ca4:	2201      	moveq	r2, #1
 8082ca6:	2200      	movne	r2, #0
 8082ca8:	4b0f      	ldr	r3, [pc, #60]	; (8082ce8 <module_user_init_hook+0x58>)
 8082caa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8082cac:	d001      	beq.n	8082cb2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 8082cae:	f7ff ffb1 	bl	8082c14 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8082cb2:	f7ff fb35 	bl	8082320 <HAL_RNG_GetRandomNumber>
 8082cb6:	4604      	mov	r4, r0
    srand(seed);
 8082cb8:	f001 fbc8 	bl	808444c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8082cbc:	4b0b      	ldr	r3, [pc, #44]	; (8082cec <module_user_init_hook+0x5c>)
 8082cbe:	b113      	cbz	r3, 8082cc6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 8082cc0:	4620      	mov	r0, r4
 8082cc2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8082cc6:	2100      	movs	r1, #0
 8082cc8:	4808      	ldr	r0, [pc, #32]	; (8082cec <module_user_init_hook+0x5c>)
 8082cca:	f7ff fd05 	bl	80826d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8082cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8082cd2:	2100      	movs	r1, #0
 8082cd4:	4806      	ldr	r0, [pc, #24]	; (8082cf0 <module_user_init_hook+0x60>)
 8082cd6:	f7ff bc8b 	b.w	80825f0 <system_ctrl_set_app_request_handler>
 8082cda:	bf00      	nop
 8082cdc:	08082b7d 	.word	0x08082b7d
 8082ce0:	40024000 	.word	0x40024000
 8082ce4:	9a271c1e 	.word	0x9a271c1e
 8082ce8:	20000214 	.word	0x20000214
 8082cec:	00000000 	.word	0x00000000
 8082cf0:	08082c59 	.word	0x08082c59

08082cf4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082cf4:	4770      	bx	lr

08082cf6 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082cf8:	460e      	mov	r6, r1
 8082cfa:	2400      	movs	r4, #0
 8082cfc:	f100 0708 	add.w	r7, r0, #8
 8082d00:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 8082d02:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8082d06:	220a      	movs	r2, #10
 8082d08:	4630      	mov	r0, r6
 8082d0a:	f7ff fe2c 	bl	8082966 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082d0e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082d10:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8082d12:	d101      	bne.n	8082d18 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8082d14:	4620      	mov	r0, r4
 8082d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8082d18:	2c00      	cmp	r4, #0
 8082d1a:	d0f2      	beq.n	8082d02 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082d1c:	212e      	movs	r1, #46	; 0x2e
 8082d1e:	4630      	mov	r0, r6
 8082d20:	f7ff fe02 	bl	8082928 <_ZN5Print5printEc>
 8082d24:	4404      	add	r4, r0
 8082d26:	e7ec      	b.n	8082d02 <_ZNK9IPAddress7printToER5Print+0xc>

08082d28 <_ZN9IPAddressD0Ev>:
 8082d28:	b510      	push	{r4, lr}
 8082d2a:	4604      	mov	r4, r0
 8082d2c:	2108      	movs	r1, #8
 8082d2e:	f7fd f9b6 	bl	808009e <_ZdlPvj>
 8082d32:	4620      	mov	r0, r4
 8082d34:	bd10      	pop	{r4, pc}
	...

08082d38 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8082d38:	4a02      	ldr	r2, [pc, #8]	; (8082d44 <_ZN9IPAddressC1Ev+0xc>)
 8082d3a:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082d3c:	2200      	movs	r2, #0
 8082d3e:	6042      	str	r2, [r0, #4]
}
 8082d40:	4770      	bx	lr
 8082d42:	bf00      	nop
 8082d44:	0808470c 	.word	0x0808470c

08082d48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8082d48:	4a02      	ldr	r2, [pc, #8]	; (8082d54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8082d4a:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8082d4c:	680a      	ldr	r2, [r1, #0]
 8082d4e:	6042      	str	r2, [r0, #4]
}
 8082d50:	4770      	bx	lr
 8082d52:	bf00      	nop
 8082d54:	0808470c 	.word	0x0808470c

08082d58 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 8082d58:	4a01      	ldr	r2, [pc, #4]	; (8082d60 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = addr;
 8082d5a:	e9c0 2100 	strd	r2, r1, [r0]
}
 8082d5e:	4770      	bx	lr
 8082d60:	0808470c 	.word	0x0808470c

08082d64 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8082d64:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8082d66:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8082d6a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8082d6e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8082d72:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8082d76:	6044      	str	r4, [r0, #4]
}
 8082d78:	bd10      	pop	{r4, pc}
	...

08082d7c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082d7c:	b513      	push	{r0, r1, r4, lr}
 8082d7e:	4c04      	ldr	r4, [pc, #16]	; (8082d90 <_ZN9IPAddressC1Ehhhh+0x14>)
 8082d80:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8082d82:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8082d86:	9400      	str	r4, [sp, #0]
 8082d88:	f7ff ffec 	bl	8082d64 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082d8c:	b002      	add	sp, #8
 8082d8e:	bd10      	pop	{r4, pc}
 8082d90:	0808470c 	.word	0x0808470c

08082d94 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082d94:	7441      	strb	r1, [r0, #17]
}
 8082d96:	4770      	bx	lr

08082d98 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082d98:	4770      	bx	lr

08082d9a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8082d9a:	4770      	bx	lr

08082d9c <_ZN9USBSerial4readEv>:
{
 8082d9c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8082d9e:	2100      	movs	r1, #0
 8082da0:	7c00      	ldrb	r0, [r0, #16]
 8082da2:	f7ff fbf5 	bl	8082590 <HAL_USB_USART_Receive_Data>
}
 8082da6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082daa:	bd08      	pop	{r3, pc}

08082dac <_ZN9USBSerial4peekEv>:
{
 8082dac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8082dae:	2101      	movs	r1, #1
 8082db0:	7c00      	ldrb	r0, [r0, #16]
 8082db2:	f7ff fbed 	bl	8082590 <HAL_USB_USART_Receive_Data>
}
 8082db6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082dba:	bd08      	pop	{r3, pc}

08082dbc <_ZN9USBSerial17availableForWriteEv>:
{
 8082dbc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8082dbe:	7c00      	ldrb	r0, [r0, #16]
 8082dc0:	f7ff fbde 	bl	8082580 <HAL_USB_USART_Available_Data_For_Write>
}
 8082dc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082dc8:	bd08      	pop	{r3, pc}

08082dca <_ZN9USBSerial9availableEv>:
{
 8082dca:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8082dcc:	7c00      	ldrb	r0, [r0, #16]
 8082dce:	f7ff fbcf 	bl	8082570 <HAL_USB_USART_Available_Data>
}
 8082dd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082dd6:	bd08      	pop	{r3, pc}

08082dd8 <_ZN9USBSerial5writeEh>:
{
 8082dd8:	b538      	push	{r3, r4, r5, lr}
 8082dda:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082ddc:	7c00      	ldrb	r0, [r0, #16]
{
 8082dde:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082de0:	f7ff fbce 	bl	8082580 <HAL_USB_USART_Available_Data_For_Write>
 8082de4:	2800      	cmp	r0, #0
 8082de6:	dc01      	bgt.n	8082dec <_ZN9USBSerial5writeEh+0x14>
 8082de8:	7c60      	ldrb	r0, [r4, #17]
 8082dea:	b128      	cbz	r0, 8082df8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8082dec:	4629      	mov	r1, r5
 8082dee:	7c20      	ldrb	r0, [r4, #16]
 8082df0:	f7ff fbd6 	bl	80825a0 <HAL_USB_USART_Send_Data>
 8082df4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8082df8:	bd38      	pop	{r3, r4, r5, pc}

08082dfa <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8082dfa:	7c00      	ldrb	r0, [r0, #16]
 8082dfc:	f7ff bbd8 	b.w	80825b0 <HAL_USB_USART_Flush_Data>

08082e00 <_ZN9USBSerialD0Ev>:
 8082e00:	b510      	push	{r4, lr}
 8082e02:	4604      	mov	r4, r0
 8082e04:	2114      	movs	r1, #20
 8082e06:	f7fd f94a 	bl	808009e <_ZdlPvj>
 8082e0a:	4620      	mov	r0, r4
 8082e0c:	bd10      	pop	{r4, pc}

08082e0e <__tcf_1>:
 8082e0e:	4770      	bx	lr

08082e10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082e10:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8082e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082e16:	4604      	mov	r4, r0
 8082e18:	4608      	mov	r0, r1
 8082e1a:	2100      	movs	r1, #0
 8082e1c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8082e20:	4b04      	ldr	r3, [pc, #16]	; (8082e34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8082e22:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082e24:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8082e26:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8082e28:	4611      	mov	r1, r2
  _blocking = true;
 8082e2a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8082e2c:	f7ff fb90 	bl	8082550 <HAL_USB_USART_Init>
}
 8082e30:	4620      	mov	r0, r4
 8082e32:	bd10      	pop	{r4, pc}
 8082e34:	08084720 	.word	0x08084720

08082e38 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8082e38:	2200      	movs	r2, #0
 8082e3a:	7c00      	ldrb	r0, [r0, #16]
 8082e3c:	f7ff bb90 	b.w	8082560 <HAL_USB_USART_Begin>

08082e40 <_Z19acquireSerialBufferv>:
{
 8082e40:	b510      	push	{r4, lr}
 8082e42:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 8082e44:	2214      	movs	r2, #20
 8082e46:	2100      	movs	r1, #0
 8082e48:	f001 faf8 	bl	808443c <memset>
  conf.rx_buffer = serial_rx_buffer;
 8082e4c:	4b05      	ldr	r3, [pc, #20]	; (8082e64 <_Z19acquireSerialBufferv+0x24>)
}
 8082e4e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8082e50:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8082e52:	4b05      	ldr	r3, [pc, #20]	; (8082e68 <_Z19acquireSerialBufferv+0x28>)
 8082e54:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082e56:	f240 1301 	movw	r3, #257	; 0x101
 8082e5a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082e5c:	2381      	movs	r3, #129	; 0x81
 8082e5e:	8223      	strh	r3, [r4, #16]
}
 8082e60:	bd10      	pop	{r4, pc}
 8082e62:	bf00      	nop
 8082e64:	2000024c 	.word	0x2000024c
 8082e68:	2000034d 	.word	0x2000034d

08082e6c <_Z16_fetch_usbserialv>:
{
 8082e6c:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082e6e:	4d0e      	ldr	r5, [pc, #56]	; (8082ea8 <_Z16_fetch_usbserialv+0x3c>)
{
 8082e70:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8082e72:	a801      	add	r0, sp, #4
 8082e74:	f7ff ffe4 	bl	8082e40 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082e78:	7829      	ldrb	r1, [r5, #0]
 8082e7a:	f3bf 8f5b 	dmb	ish
 8082e7e:	f011 0401 	ands.w	r4, r1, #1
 8082e82:	d10e      	bne.n	8082ea2 <_Z16_fetch_usbserialv+0x36>
 8082e84:	4628      	mov	r0, r5
 8082e86:	f7fd f90c 	bl	80800a2 <__cxa_guard_acquire>
 8082e8a:	b150      	cbz	r0, 8082ea2 <_Z16_fetch_usbserialv+0x36>
 8082e8c:	4621      	mov	r1, r4
 8082e8e:	aa01      	add	r2, sp, #4
 8082e90:	4806      	ldr	r0, [pc, #24]	; (8082eac <_Z16_fetch_usbserialv+0x40>)
 8082e92:	f7ff ffbd 	bl	8082e10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082e96:	4628      	mov	r0, r5
 8082e98:	f7fd f908 	bl	80800ac <__cxa_guard_release>
 8082e9c:	4804      	ldr	r0, [pc, #16]	; (8082eb0 <_Z16_fetch_usbserialv+0x44>)
 8082e9e:	f001 fab9 	bl	8084414 <atexit>
	return _usbserial;
}
 8082ea2:	4802      	ldr	r0, [pc, #8]	; (8082eac <_Z16_fetch_usbserialv+0x40>)
 8082ea4:	b007      	add	sp, #28
 8082ea6:	bd30      	pop	{r4, r5, pc}
 8082ea8:	2000021c 	.word	0x2000021c
 8082eac:	20000224 	.word	0x20000224
 8082eb0:	08082d99 	.word	0x08082d99

08082eb4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082eb4:	b510      	push	{r4, lr}
 8082eb6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 8082eb8:	2214      	movs	r2, #20
 8082eba:	2100      	movs	r1, #0
 8082ebc:	f001 fabe 	bl	808443c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082ec0:	4b05      	ldr	r3, [pc, #20]	; (8082ed8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082ec2:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8082ec4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8082ec6:	4b05      	ldr	r3, [pc, #20]	; (8082edc <_Z23acquireUSBSerial1Bufferv+0x28>)
 8082ec8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082eca:	f240 1301 	movw	r3, #257	; 0x101
 8082ece:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082ed0:	2381      	movs	r3, #129	; 0x81
 8082ed2:	8223      	strh	r3, [r4, #16]
}
 8082ed4:	bd10      	pop	{r4, pc}
 8082ed6:	bf00      	nop
 8082ed8:	200003ce 	.word	0x200003ce
 8082edc:	200004cf 	.word	0x200004cf

08082ee0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8082ee0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082ee2:	4c0e      	ldr	r4, [pc, #56]	; (8082f1c <_Z17_fetch_usbserial1v+0x3c>)
{
 8082ee4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8082ee6:	a801      	add	r0, sp, #4
 8082ee8:	f7ff ffe4 	bl	8082eb4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082eec:	7823      	ldrb	r3, [r4, #0]
 8082eee:	f3bf 8f5b 	dmb	ish
 8082ef2:	07db      	lsls	r3, r3, #31
 8082ef4:	d40e      	bmi.n	8082f14 <_Z17_fetch_usbserial1v+0x34>
 8082ef6:	4620      	mov	r0, r4
 8082ef8:	f7fd f8d3 	bl	80800a2 <__cxa_guard_acquire>
 8082efc:	b150      	cbz	r0, 8082f14 <_Z17_fetch_usbserial1v+0x34>
 8082efe:	2101      	movs	r1, #1
 8082f00:	aa01      	add	r2, sp, #4
 8082f02:	4807      	ldr	r0, [pc, #28]	; (8082f20 <_Z17_fetch_usbserial1v+0x40>)
 8082f04:	f7ff ff84 	bl	8082e10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082f08:	4620      	mov	r0, r4
 8082f0a:	f7fd f8cf 	bl	80800ac <__cxa_guard_release>
 8082f0e:	4805      	ldr	r0, [pc, #20]	; (8082f24 <_Z17_fetch_usbserial1v+0x44>)
 8082f10:	f001 fa80 	bl	8084414 <atexit>
  return _usbserial1;
}
 8082f14:	4802      	ldr	r0, [pc, #8]	; (8082f20 <_Z17_fetch_usbserial1v+0x40>)
 8082f16:	b006      	add	sp, #24
 8082f18:	bd10      	pop	{r4, pc}
 8082f1a:	bf00      	nop
 8082f1c:	20000220 	.word	0x20000220
 8082f20:	20000238 	.word	0x20000238
 8082f24:	08082e0f 	.word	0x08082e0f

08082f28 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8082f28:	2200      	movs	r2, #0
 8082f2a:	6840      	ldr	r0, [r0, #4]
 8082f2c:	4611      	mov	r1, r2
 8082f2e:	f7ff bb8b 	b.w	8082648 <network_ready>

08082f32 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082f32:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8082f34:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8082f36:	b085      	sub	sp, #20
 8082f38:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082f3a:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8082f3c:	460f      	mov	r7, r1
 8082f3e:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8082f40:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082f42:	f001 fab1 	bl	80844a8 <strlen>
 8082f46:	687b      	ldr	r3, [r7, #4]
 8082f48:	b281      	uxth	r1, r0
 8082f4a:	9600      	str	r6, [sp, #0]
 8082f4c:	4628      	mov	r0, r5
 8082f4e:	aa03      	add	r2, sp, #12
 8082f50:	f7ff faf6 	bl	8082540 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082f54:	b130      	cbz	r0, 8082f64 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8082f56:	4631      	mov	r1, r6
 8082f58:	4620      	mov	r0, r4
 8082f5a:	f7ff fefd 	bl	8082d58 <_ZN9IPAddressC1Em>
    }
 8082f5e:	4620      	mov	r0, r4
 8082f60:	b005      	add	sp, #20
 8082f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082f64:	4620      	mov	r0, r4
 8082f66:	a903      	add	r1, sp, #12
 8082f68:	f7ff feee 	bl	8082d48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8082f6c:	e7f7      	b.n	8082f5e <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08082f6e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8082f6e:	2200      	movs	r2, #0
 8082f70:	6840      	ldr	r0, [r0, #4]
 8082f72:	4611      	mov	r1, r2
 8082f74:	f7ff bb88 	b.w	8082688 <network_listening>

08082f78 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8082f78:	2200      	movs	r2, #0
 8082f7a:	6840      	ldr	r0, [r0, #4]
 8082f7c:	4611      	mov	r1, r2
 8082f7e:	f7ff bb93 	b.w	80826a8 <network_get_listen_timeout>

08082f82 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8082f82:	2200      	movs	r2, #0
 8082f84:	6840      	ldr	r0, [r0, #4]
 8082f86:	f7ff bb87 	b.w	8082698 <network_set_listen_timeout>

08082f8a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 8082f8a:	2200      	movs	r2, #0
 8082f8c:	6840      	ldr	r0, [r0, #4]
 8082f8e:	f081 0101 	eor.w	r1, r1, #1
 8082f92:	f7ff bb71 	b.w	8082678 <network_listen>

08082f96 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 8082f96:	2300      	movs	r3, #0
 8082f98:	6840      	ldr	r0, [r0, #4]
 8082f9a:	461a      	mov	r2, r3
 8082f9c:	4619      	mov	r1, r3
 8082f9e:	f7ff bb63 	b.w	8082668 <network_off>

08082fa2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8082fa2:	2300      	movs	r3, #0
 8082fa4:	6840      	ldr	r0, [r0, #4]
 8082fa6:	461a      	mov	r2, r3
 8082fa8:	4619      	mov	r1, r3
 8082faa:	f7ff bb55 	b.w	8082658 <network_on>

08082fae <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8082fae:	2200      	movs	r2, #0
 8082fb0:	6840      	ldr	r0, [r0, #4]
 8082fb2:	4611      	mov	r1, r2
 8082fb4:	f7ff bb38 	b.w	8082628 <network_connecting>

08082fb8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8082fb8:	2200      	movs	r2, #0
 8082fba:	2102      	movs	r1, #2
 8082fbc:	6840      	ldr	r0, [r0, #4]
 8082fbe:	f7ff bb3b 	b.w	8082638 <network_disconnect>

08082fc2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8082fc2:	2300      	movs	r3, #0
 8082fc4:	6840      	ldr	r0, [r0, #4]
 8082fc6:	461a      	mov	r2, r3
 8082fc8:	f7ff bb26 	b.w	8082618 <network_connect>

08082fcc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8082fcc:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8082fce:	2428      	movs	r4, #40	; 0x28
 8082fd0:	4b07      	ldr	r3, [pc, #28]	; (8082ff0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8082fd2:	4622      	mov	r2, r4
 8082fd4:	4618      	mov	r0, r3
 8082fd6:	2100      	movs	r1, #0
 8082fd8:	f001 fa30 	bl	808443c <memset>
        cid = -1;
 8082fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8082fe0:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8082fe2:	2204      	movs	r2, #4
 8082fe4:	4b03      	ldr	r3, [pc, #12]	; (8082ff4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 8082fe6:	8004      	strh	r4, [r0, #0]
 8082fe8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8082fea:	4a03      	ldr	r2, [pc, #12]	; (8082ff8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8082fec:	601a      	str	r2, [r3, #0]
 8082fee:	bd10      	pop	{r4, pc}
 8082ff0:	20000558 	.word	0x20000558
 8082ff4:	20000550 	.word	0x20000550
 8082ff8:	08084750 	.word	0x08084750

08082ffc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 8082ffc:	4770      	bx	lr

08082ffe <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082ffe:	7441      	strb	r1, [r0, #17]
}
 8083000:	4770      	bx	lr

08083002 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 8083002:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8083004:	7c00      	ldrb	r0, [r0, #16]
 8083006:	f7ff f9fb 	bl	8082400 <hal_usart_available_data_for_write>
}
 808300a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808300e:	bd08      	pop	{r3, pc}

08083010 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8083010:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8083012:	7c00      	ldrb	r0, [r0, #16]
 8083014:	f7ff f9cc 	bl	80823b0 <hal_usart_available>
}
 8083018:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808301c:	bd08      	pop	{r3, pc}

0808301e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808301e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8083020:	7c00      	ldrb	r0, [r0, #16]
 8083022:	f7ff f9d5 	bl	80823d0 <hal_usart_peek>
}
 8083026:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808302a:	bd08      	pop	{r3, pc}

0808302c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808302c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 808302e:	7c00      	ldrb	r0, [r0, #16]
 8083030:	f7ff f9c6 	bl	80823c0 <hal_usart_read>
}
 8083034:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8083038:	bd08      	pop	{r3, pc}

0808303a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 808303a:	7c00      	ldrb	r0, [r0, #16]
 808303c:	f7ff b9d0 	b.w	80823e0 <hal_usart_flush>

08083040 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8083040:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8083042:	7c46      	ldrb	r6, [r0, #17]
{
 8083044:	4604      	mov	r4, r0
 8083046:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8083048:	b12e      	cbz	r6, 8083056 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 808304a:	4629      	mov	r1, r5
 808304c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808304e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8083052:	f7ff b9a5 	b.w	80823a0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8083056:	7c00      	ldrb	r0, [r0, #16]
 8083058:	f7ff f9d2 	bl	8082400 <hal_usart_available_data_for_write>
 808305c:	2800      	cmp	r0, #0
 808305e:	dcf4      	bgt.n	808304a <_ZN11USARTSerial5writeEh+0xa>
}
 8083060:	4630      	mov	r0, r6
 8083062:	bd70      	pop	{r4, r5, r6, pc}

08083064 <_ZN11USARTSerialD0Ev>:
 8083064:	b510      	push	{r4, lr}
 8083066:	4604      	mov	r4, r0
 8083068:	2114      	movs	r1, #20
 808306a:	f7fd f818 	bl	808009e <_ZdlPvj>
 808306e:	4620      	mov	r0, r4
 8083070:	bd10      	pop	{r4, pc}
	...

08083074 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 8083074:	b510      	push	{r4, lr}
 8083076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808307a:	4604      	mov	r4, r0
 808307c:	4608      	mov	r0, r1
 808307e:	4611      	mov	r1, r2
 8083080:	2200      	movs	r2, #0
 8083082:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8083086:	4b04      	ldr	r3, [pc, #16]	; (8083098 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 8083088:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 808308a:	6023      	str	r3, [r4, #0]
  _blocking = true;
 808308c:	2301      	movs	r3, #1
 808308e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 8083090:	f7ff f9be 	bl	8082410 <hal_usart_init_ex>
}
 8083094:	4620      	mov	r0, r4
 8083096:	bd10      	pop	{r4, pc}
 8083098:	0808478c 	.word	0x0808478c

0808309c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 808309c:	4770      	bx	lr

0808309e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808309e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80830a0:	4606      	mov	r6, r0
 80830a2:	4615      	mov	r5, r2
 80830a4:	460c      	mov	r4, r1
 80830a6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80830a8:	42bc      	cmp	r4, r7
 80830aa:	d006      	beq.n	80830ba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80830ac:	6833      	ldr	r3, [r6, #0]
 80830ae:	4630      	mov	r0, r6
 80830b0:	689b      	ldr	r3, [r3, #8]
 80830b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80830b6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80830b8:	e7f6      	b.n	80830a8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80830ba:	4628      	mov	r0, r5
 80830bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080830be <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80830be:	2200      	movs	r2, #0
 80830c0:	7c00      	ldrb	r0, [r0, #16]
 80830c2:	f7ff b9c5 	b.w	8082450 <hal_i2c_write>

080830c6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80830c6:	2100      	movs	r1, #0
 80830c8:	7c00      	ldrb	r0, [r0, #16]
 80830ca:	f7ff b9c9 	b.w	8082460 <hal_i2c_available>

080830ce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80830ce:	2100      	movs	r1, #0
 80830d0:	7c00      	ldrb	r0, [r0, #16]
 80830d2:	f7ff b9cd 	b.w	8082470 <hal_i2c_read>

080830d6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80830d6:	2100      	movs	r1, #0
 80830d8:	7c00      	ldrb	r0, [r0, #16]
 80830da:	f7ff b9d1 	b.w	8082480 <hal_i2c_peek>

080830de <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80830de:	2100      	movs	r1, #0
 80830e0:	7c00      	ldrb	r0, [r0, #16]
 80830e2:	f7ff b9d5 	b.w	8082490 <hal_i2c_flush>

080830e6 <_ZN7TwoWireD0Ev>:
 80830e6:	b510      	push	{r4, lr}
 80830e8:	4604      	mov	r4, r0
 80830ea:	2114      	movs	r1, #20
 80830ec:	f7fc ffd7 	bl	808009e <_ZdlPvj>
 80830f0:	4620      	mov	r0, r4
 80830f2:	bd10      	pop	{r4, pc}

080830f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80830f4:	b510      	push	{r4, lr}
 80830f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80830fa:	4604      	mov	r4, r0
 80830fc:	4608      	mov	r0, r1
 80830fe:	2100      	movs	r1, #0
 8083100:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8083104:	4b03      	ldr	r3, [pc, #12]	; (8083114 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 8083106:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8083108:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 808310a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 808310c:	f7ff f9d0 	bl	80824b0 <hal_i2c_init>
}
 8083110:	4620      	mov	r0, r4
 8083112:	bd10      	pop	{r4, pc}
 8083114:	080847bc 	.word	0x080847bc

08083118 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8083118:	2300      	movs	r3, #0
 808311a:	7c00      	ldrb	r0, [r0, #16]
 808311c:	461a      	mov	r2, r3
 808311e:	4619      	mov	r1, r3
 8083120:	f7ff b97e 	b.w	8082420 <hal_i2c_begin>

08083124 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8083124:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8083126:	2200      	movs	r2, #0
 8083128:	2314      	movs	r3, #20
 808312a:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808312e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 8083132:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 8083134:	7c00      	ldrb	r0, [r0, #16]
 8083136:	f88d 3008 	strb.w	r3, [sp, #8]
 808313a:	684b      	ldr	r3, [r1, #4]
 808313c:	9303      	str	r3, [sp, #12]
 808313e:	68cb      	ldr	r3, [r1, #12]
 8083140:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8083142:	7a0b      	ldrb	r3, [r1, #8]
 8083144:	a901      	add	r1, sp, #4
 8083146:	9305      	str	r3, [sp, #20]
 8083148:	f7ff f9ba 	bl	80824c0 <hal_i2c_request_ex>
}
 808314c:	b007      	add	sp, #28
 808314e:	f85d fb04 	ldr.w	pc, [sp], #4

08083152 <_ZN7TwoWire11requestFromEhjh>:
{
 8083152:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8083154:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8083156:	f88d 1000 	strb.w	r1, [sp]
 808315a:	f04f 0164 	mov.w	r1, #100	; 0x64
 808315e:	bf18      	it	ne
 8083160:	2301      	movne	r3, #1
 8083162:	9103      	str	r1, [sp, #12]
 8083164:	4669      	mov	r1, sp
    size_ = size;
 8083166:	9201      	str	r2, [sp, #4]
 8083168:	f88d 3008 	strb.w	r3, [sp, #8]
 808316c:	f7ff ffda 	bl	8083124 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8083170:	b005      	add	sp, #20
 8083172:	f85d fb04 	ldr.w	pc, [sp], #4

08083176 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 8083176:	2200      	movs	r2, #0
 8083178:	7c00      	ldrb	r0, [r0, #16]
 808317a:	f7ff b959 	b.w	8082430 <hal_i2c_begin_transmission>

0808317e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 808317e:	2200      	movs	r2, #0
 8083180:	7c00      	ldrb	r0, [r0, #16]
 8083182:	f7ff b95d 	b.w	8082440 <hal_i2c_end_transmission>

08083186 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 8083186:	2101      	movs	r1, #1
 8083188:	f7ff bff9 	b.w	808317e <_ZN7TwoWire15endTransmissionEh>

0808318c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808318c:	2300      	movs	r3, #0
 808318e:	6840      	ldr	r0, [r0, #4]
 8083190:	461a      	mov	r2, r3
 8083192:	f7ff ba41 	b.w	8082618 <network_connect>

08083196 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8083196:	2200      	movs	r2, #0
 8083198:	2102      	movs	r1, #2
 808319a:	6840      	ldr	r0, [r0, #4]
 808319c:	f7ff ba4c 	b.w	8082638 <network_disconnect>

080831a0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80831a0:	2200      	movs	r2, #0
 80831a2:	6840      	ldr	r0, [r0, #4]
 80831a4:	4611      	mov	r1, r2
 80831a6:	f7ff ba3f 	b.w	8082628 <network_connecting>

080831aa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80831aa:	2200      	movs	r2, #0
 80831ac:	6840      	ldr	r0, [r0, #4]
 80831ae:	4611      	mov	r1, r2
 80831b0:	f7ff ba4a 	b.w	8082648 <network_ready>

080831b4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80831b4:	2300      	movs	r3, #0
 80831b6:	6840      	ldr	r0, [r0, #4]
 80831b8:	461a      	mov	r2, r3
 80831ba:	4619      	mov	r1, r3
 80831bc:	f7ff ba4c 	b.w	8082658 <network_on>

080831c0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80831c0:	2300      	movs	r3, #0
 80831c2:	6840      	ldr	r0, [r0, #4]
 80831c4:	461a      	mov	r2, r3
 80831c6:	4619      	mov	r1, r3
 80831c8:	f7ff ba4e 	b.w	8082668 <network_off>

080831cc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80831cc:	2100      	movs	r1, #0
 80831ce:	6840      	ldr	r0, [r0, #4]
 80831d0:	f7ff ba72 	b.w	80826b8 <network_is_on>

080831d4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80831d4:	2100      	movs	r1, #0
 80831d6:	6840      	ldr	r0, [r0, #4]
 80831d8:	f7ff ba76 	b.w	80826c8 <network_is_off>

080831dc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80831dc:	2200      	movs	r2, #0
 80831de:	6840      	ldr	r0, [r0, #4]
 80831e0:	f081 0101 	eor.w	r1, r1, #1
 80831e4:	f7ff ba48 	b.w	8082678 <network_listen>

080831e8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80831e8:	2200      	movs	r2, #0
 80831ea:	6840      	ldr	r0, [r0, #4]
 80831ec:	f7ff ba54 	b.w	8082698 <network_set_listen_timeout>

080831f0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80831f0:	2200      	movs	r2, #0
 80831f2:	6840      	ldr	r0, [r0, #4]
 80831f4:	4611      	mov	r1, r2
 80831f6:	f7ff ba57 	b.w	80826a8 <network_get_listen_timeout>

080831fa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80831fa:	2200      	movs	r2, #0
 80831fc:	6840      	ldr	r0, [r0, #4]
 80831fe:	4611      	mov	r1, r2
 8083200:	f7ff ba42 	b.w	8082688 <network_listening>

08083204 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8083204:	b570      	push	{r4, r5, r6, lr}
 8083206:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8083208:	2600      	movs	r6, #0
 808320a:	b086      	sub	sp, #24
 808320c:	4604      	mov	r4, r0
    IPAddress addr;
 808320e:	a804      	add	r0, sp, #16
 8083210:	f7ff fd92 	bl	8082d38 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8083214:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 8083216:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8083218:	f001 f946 	bl	80844a8 <strlen>
 808321c:	4b0a      	ldr	r3, [pc, #40]	; (8083248 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 808321e:	9600      	str	r6, [sp, #0]
 8083220:	b281      	uxth	r1, r0
 8083222:	685b      	ldr	r3, [r3, #4]
 8083224:	4628      	mov	r0, r5
 8083226:	aa03      	add	r2, sp, #12
 8083228:	f7ff f98a 	bl	8082540 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808322c:	b130      	cbz	r0, 808323c <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808322e:	4631      	mov	r1, r6
 8083230:	4620      	mov	r0, r4
 8083232:	f7ff fd91 	bl	8082d58 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8083236:	4620      	mov	r0, r4
 8083238:	b006      	add	sp, #24
 808323a:	bd70      	pop	{r4, r5, r6, pc}
 808323c:	4620      	mov	r0, r4
 808323e:	a903      	add	r1, sp, #12
 8083240:	f7ff fd82 	bl	8082d48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8083244:	e7f7      	b.n	8083236 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 8083246:	bf00      	nop
 8083248:	20000550 	.word	0x20000550

0808324c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808324c:	4b02      	ldr	r3, [pc, #8]	; (8083258 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808324e:	4a03      	ldr	r2, [pc, #12]	; (808325c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8083250:	601a      	str	r2, [r3, #0]
 8083252:	2200      	movs	r2, #0
 8083254:	605a      	str	r2, [r3, #4]

} // spark
 8083256:	4770      	bx	lr
 8083258:	20000580 	.word	0x20000580
 808325c:	080847e4 	.word	0x080847e4

08083260 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8083260:	4b02      	ldr	r3, [pc, #8]	; (808326c <__tcf_0+0xc>)
 8083262:	6898      	ldr	r0, [r3, #8]
 8083264:	b108      	cbz	r0, 808326a <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 8083266:	f7ff b883 	b.w	8082370 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 808326a:	4770      	bx	lr
 808326c:	2000058c 	.word	0x2000058c

08083270 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 8083270:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 8083272:	b570      	push	{r4, r5, r6, lr}
 8083274:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 8083276:	d901      	bls.n	808327c <pinAvailable+0xc>
    return false;
 8083278:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 808327a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808327c:	f1a0 030d 	sub.w	r3, r0, #13
 8083280:	2b02      	cmp	r3, #2
 8083282:	d90b      	bls.n	808329c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 8083284:	2801      	cmp	r0, #1
 8083286:	d824      	bhi.n	80832d2 <pinAvailable+0x62>
 8083288:	f000 f8d0 	bl	808342c <_Z19__fetch_global_Wirev>
 808328c:	2100      	movs	r1, #0
 808328e:	7c00      	ldrb	r0, [r0, #16]
 8083290:	f7ff f906 	bl	80824a0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8083294:	f080 0001 	eor.w	r0, r0, #1
 8083298:	b2c0      	uxtb	r0, r0
 808329a:	e7ee      	b.n	808327a <pinAvailable+0xa>
 808329c:	4e12      	ldr	r6, [pc, #72]	; (80832e8 <pinAvailable+0x78>)
 808329e:	7831      	ldrb	r1, [r6, #0]
 80832a0:	f3bf 8f5b 	dmb	ish
 80832a4:	f011 0501 	ands.w	r5, r1, #1
 80832a8:	d10d      	bne.n	80832c6 <pinAvailable+0x56>
 80832aa:	4630      	mov	r0, r6
 80832ac:	f7fc fef9 	bl	80800a2 <__cxa_guard_acquire>
 80832b0:	b148      	cbz	r0, 80832c6 <pinAvailable+0x56>
 80832b2:	4629      	mov	r1, r5
 80832b4:	480d      	ldr	r0, [pc, #52]	; (80832ec <pinAvailable+0x7c>)
 80832b6:	f7ff fa43 	bl	8082740 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80832ba:	4630      	mov	r0, r6
 80832bc:	f7fc fef6 	bl	80800ac <__cxa_guard_release>
 80832c0:	480b      	ldr	r0, [pc, #44]	; (80832f0 <pinAvailable+0x80>)
 80832c2:	f001 f8a7 	bl	8084414 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80832c6:	4b09      	ldr	r3, [pc, #36]	; (80832ec <pinAvailable+0x7c>)
 80832c8:	7818      	ldrb	r0, [r3, #0]
 80832ca:	f7ff f911 	bl	80824f0 <hal_spi_is_enabled>
 80832ce:	2800      	cmp	r0, #0
 80832d0:	d1d2      	bne.n	8083278 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80832d2:	3c12      	subs	r4, #18
 80832d4:	2c01      	cmp	r4, #1
 80832d6:	d805      	bhi.n	80832e4 <pinAvailable+0x74>
 80832d8:	f000 f858 	bl	808338c <_Z22__fetch_global_Serial1v>
 80832dc:	7c00      	ldrb	r0, [r0, #16]
 80832de:	f7ff f887 	bl	80823f0 <hal_usart_is_enabled>
 80832e2:	e7d7      	b.n	8083294 <pinAvailable+0x24>
  return true; // 'pin' is available
 80832e4:	2001      	movs	r0, #1
 80832e6:	e7c8      	b.n	808327a <pinAvailable+0xa>
 80832e8:	20000588 	.word	0x20000588
 80832ec:	2000058c 	.word	0x2000058c
 80832f0:	08083261 	.word	0x08083261

080832f4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80832f4:	282e      	cmp	r0, #46	; 0x2e
{
 80832f6:	b538      	push	{r3, r4, r5, lr}
 80832f8:	4604      	mov	r4, r0
 80832fa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80832fc:	d80a      	bhi.n	8083314 <pinMode+0x20>
 80832fe:	29ff      	cmp	r1, #255	; 0xff
 8083300:	d008      	beq.n	8083314 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8083302:	f7ff ffb5 	bl	8083270 <pinAvailable>
 8083306:	b128      	cbz	r0, 8083314 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8083308:	4629      	mov	r1, r5
 808330a:	4620      	mov	r0, r4
}
 808330c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8083310:	f7fe bfee 	b.w	80822f0 <HAL_Pin_Mode>
}
 8083314:	bd38      	pop	{r3, r4, r5, pc}

08083316 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8083316:	b538      	push	{r3, r4, r5, lr}
 8083318:	4604      	mov	r4, r0
 808331a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808331c:	f7fe fff0 	bl	8082300 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8083320:	28ff      	cmp	r0, #255	; 0xff
 8083322:	d010      	beq.n	8083346 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 8083324:	2806      	cmp	r0, #6
 8083326:	d804      	bhi.n	8083332 <digitalWrite+0x1c>
 8083328:	234d      	movs	r3, #77	; 0x4d
 808332a:	fa23 f000 	lsr.w	r0, r3, r0
 808332e:	07c3      	lsls	r3, r0, #31
 8083330:	d409      	bmi.n	8083346 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8083332:	4620      	mov	r0, r4
 8083334:	f7ff ff9c 	bl	8083270 <pinAvailable>
 8083338:	b128      	cbz	r0, 8083346 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808333a:	4629      	mov	r1, r5
 808333c:	4620      	mov	r0, r4
}
 808333e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 8083342:	f7fe bfe5 	b.w	8082310 <HAL_GPIO_Write>
}
 8083346:	bd38      	pop	{r3, r4, r5, pc}

08083348 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 8083348:	4770      	bx	lr
	...

0808334c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 808334c:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 808334e:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 8083350:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 8083352:	462a      	mov	r2, r5
 8083354:	2100      	movs	r1, #0
 8083356:	f001 f871 	bl	808443c <memset>
 808335a:	8025      	strh	r5, [r4, #0]
 808335c:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 808335e:	4e07      	ldr	r6, [pc, #28]	; (808337c <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 8083360:	4628      	mov	r0, r5
 8083362:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 8083364:	8125      	strh	r5, [r4, #8]
 8083366:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 8083368:	f000 f884 	bl	8083474 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 808336c:	4631      	mov	r1, r6
    };
 808336e:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 8083370:	4628      	mov	r0, r5
 8083372:	f000 f87f 	bl	8083474 <_ZnajRKSt9nothrow_t>
    };
 8083376:	60e0      	str	r0, [r4, #12]
}
 8083378:	4620      	mov	r0, r4
 808337a:	bd70      	pop	{r4, r5, r6, pc}
 808337c:	08084818 	.word	0x08084818

08083380 <_Z20acquireSerial1Bufferv>:
{
 8083380:	b510      	push	{r4, lr}
 8083382:	4604      	mov	r4, r0
    return defaultUsartConfig();
 8083384:	f7ff ffe2 	bl	808334c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 8083388:	4620      	mov	r0, r4
 808338a:	bd10      	pop	{r4, pc}

0808338c <_Z22__fetch_global_Serial1v>:
{
 808338c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 808338e:	4d0e      	ldr	r5, [pc, #56]	; (80833c8 <_Z22__fetch_global_Serial1v+0x3c>)
{
 8083390:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 8083392:	7829      	ldrb	r1, [r5, #0]
 8083394:	f3bf 8f5b 	dmb	ish
 8083398:	f011 0401 	ands.w	r4, r1, #1
 808339c:	d111      	bne.n	80833c2 <_Z22__fetch_global_Serial1v+0x36>
 808339e:	4628      	mov	r0, r5
 80833a0:	f7fc fe7f 	bl	80800a2 <__cxa_guard_acquire>
 80833a4:	b168      	cbz	r0, 80833c2 <_Z22__fetch_global_Serial1v+0x36>
 80833a6:	a801      	add	r0, sp, #4
 80833a8:	f7ff ffea 	bl	8083380 <_Z20acquireSerial1Bufferv>
 80833ac:	4621      	mov	r1, r4
 80833ae:	aa01      	add	r2, sp, #4
 80833b0:	4806      	ldr	r0, [pc, #24]	; (80833cc <_Z22__fetch_global_Serial1v+0x40>)
 80833b2:	f7ff fe5f 	bl	8083074 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80833b6:	4628      	mov	r0, r5
 80833b8:	f7fc fe78 	bl	80800ac <__cxa_guard_release>
 80833bc:	4804      	ldr	r0, [pc, #16]	; (80833d0 <_Z22__fetch_global_Serial1v+0x44>)
 80833be:	f001 f829 	bl	8084414 <atexit>
    return serial1;
}
 80833c2:	4802      	ldr	r0, [pc, #8]	; (80833cc <_Z22__fetch_global_Serial1v+0x40>)
 80833c4:	b007      	add	sp, #28
 80833c6:	bd30      	pop	{r4, r5, pc}
 80833c8:	20000598 	.word	0x20000598
 80833cc:	2000059c 	.word	0x2000059c
 80833d0:	08083349 	.word	0x08083349

080833d4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80833d4:	2300      	movs	r3, #0
 80833d6:	b507      	push	{r0, r1, r2, lr}
 80833d8:	461a      	mov	r2, r3
 80833da:	4619      	mov	r1, r3
 80833dc:	9300      	str	r3, [sp, #0]
 80833de:	4803      	ldr	r0, [pc, #12]	; (80833ec <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80833e0:	f7ff fccc 	bl	8082d7c <_ZN9IPAddressC1Ehhhh>
 80833e4:	b003      	add	sp, #12
 80833e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80833ea:	bf00      	nop
 80833ec:	200005b4 	.word	0x200005b4

080833f0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80833f0:	4770      	bx	lr
	...

080833f4 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
hal_i2c_config_t defaultWireConfig() {
 80833f4:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80833f6:	2314      	movs	r3, #20
 80833f8:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80833fa:	4e08      	ldr	r6, [pc, #32]	; (808341c <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x28>)
hal_i2c_config_t defaultWireConfig() {
 80833fc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80833fe:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083400:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 8083402:	6085      	str	r5, [r0, #8]
 8083404:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083406:	4628      	mov	r0, r5
 8083408:	f000 f834 	bl	8083474 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808340c:	4631      	mov	r1, r6
	};
 808340e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083410:	4628      	mov	r0, r5
 8083412:	f000 f82f 	bl	8083474 <_ZnajRKSt9nothrow_t>
	};
 8083416:	60e0      	str	r0, [r4, #12]
}
 8083418:	4620      	mov	r0, r4
 808341a:	bd70      	pop	{r4, r5, r6, pc}
 808341c:	08084818 	.word	0x08084818

08083420 <_Z17acquireWireBufferv>:
{
 8083420:	b510      	push	{r4, lr}
 8083422:	4604      	mov	r4, r0
	return defaultWireConfig();
 8083424:	f7ff ffe6 	bl	80833f4 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8083428:	4620      	mov	r0, r4
 808342a:	bd10      	pop	{r4, pc}

0808342c <_Z19__fetch_global_Wirev>:
{
 808342c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808342e:	4d0e      	ldr	r5, [pc, #56]	; (8083468 <_Z19__fetch_global_Wirev+0x3c>)
{
 8083430:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8083432:	7829      	ldrb	r1, [r5, #0]
 8083434:	f3bf 8f5b 	dmb	ish
 8083438:	f011 0401 	ands.w	r4, r1, #1
 808343c:	d111      	bne.n	8083462 <_Z19__fetch_global_Wirev+0x36>
 808343e:	4628      	mov	r0, r5
 8083440:	f7fc fe2f 	bl	80800a2 <__cxa_guard_acquire>
 8083444:	b168      	cbz	r0, 8083462 <_Z19__fetch_global_Wirev+0x36>
 8083446:	a801      	add	r0, sp, #4
 8083448:	f7ff ffea 	bl	8083420 <_Z17acquireWireBufferv>
 808344c:	4621      	mov	r1, r4
 808344e:	aa01      	add	r2, sp, #4
 8083450:	4806      	ldr	r0, [pc, #24]	; (808346c <_Z19__fetch_global_Wirev+0x40>)
 8083452:	f7ff fe4f 	bl	80830f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8083456:	4628      	mov	r0, r5
 8083458:	f7fc fe28 	bl	80800ac <__cxa_guard_release>
 808345c:	4804      	ldr	r0, [pc, #16]	; (8083470 <_Z19__fetch_global_Wirev+0x44>)
 808345e:	f000 ffd9 	bl	8084414 <atexit>
	return wire;
}
 8083462:	4802      	ldr	r0, [pc, #8]	; (808346c <_Z19__fetch_global_Wirev+0x40>)
 8083464:	b007      	add	sp, #28
 8083466:	bd30      	pop	{r4, r5, pc}
 8083468:	200005bc 	.word	0x200005bc
 808346c:	200005c0 	.word	0x200005c0
 8083470:	080833f1 	.word	0x080833f1

08083474 <_ZnajRKSt9nothrow_t>:
 8083474:	f7fc be11 	b.w	808009a <_Znaj>

08083478 <__aeabi_drsub>:
 8083478:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808347c:	e002      	b.n	8083484 <__adddf3>
 808347e:	bf00      	nop

08083480 <__aeabi_dsub>:
 8083480:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08083484 <__adddf3>:
 8083484:	b530      	push	{r4, r5, lr}
 8083486:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808348a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808348e:	ea94 0f05 	teq	r4, r5
 8083492:	bf08      	it	eq
 8083494:	ea90 0f02 	teqeq	r0, r2
 8083498:	bf1f      	itttt	ne
 808349a:	ea54 0c00 	orrsne.w	ip, r4, r0
 808349e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80834a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80834a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80834aa:	f000 80e2 	beq.w	8083672 <__adddf3+0x1ee>
 80834ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80834b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80834b6:	bfb8      	it	lt
 80834b8:	426d      	neglt	r5, r5
 80834ba:	dd0c      	ble.n	80834d6 <__adddf3+0x52>
 80834bc:	442c      	add	r4, r5
 80834be:	ea80 0202 	eor.w	r2, r0, r2
 80834c2:	ea81 0303 	eor.w	r3, r1, r3
 80834c6:	ea82 0000 	eor.w	r0, r2, r0
 80834ca:	ea83 0101 	eor.w	r1, r3, r1
 80834ce:	ea80 0202 	eor.w	r2, r0, r2
 80834d2:	ea81 0303 	eor.w	r3, r1, r3
 80834d6:	2d36      	cmp	r5, #54	; 0x36
 80834d8:	bf88      	it	hi
 80834da:	bd30      	pophi	{r4, r5, pc}
 80834dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80834e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80834e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80834e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80834ec:	d002      	beq.n	80834f4 <__adddf3+0x70>
 80834ee:	4240      	negs	r0, r0
 80834f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80834f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80834f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80834fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8083500:	d002      	beq.n	8083508 <__adddf3+0x84>
 8083502:	4252      	negs	r2, r2
 8083504:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8083508:	ea94 0f05 	teq	r4, r5
 808350c:	f000 80a7 	beq.w	808365e <__adddf3+0x1da>
 8083510:	f1a4 0401 	sub.w	r4, r4, #1
 8083514:	f1d5 0e20 	rsbs	lr, r5, #32
 8083518:	db0d      	blt.n	8083536 <__adddf3+0xb2>
 808351a:	fa02 fc0e 	lsl.w	ip, r2, lr
 808351e:	fa22 f205 	lsr.w	r2, r2, r5
 8083522:	1880      	adds	r0, r0, r2
 8083524:	f141 0100 	adc.w	r1, r1, #0
 8083528:	fa03 f20e 	lsl.w	r2, r3, lr
 808352c:	1880      	adds	r0, r0, r2
 808352e:	fa43 f305 	asr.w	r3, r3, r5
 8083532:	4159      	adcs	r1, r3
 8083534:	e00e      	b.n	8083554 <__adddf3+0xd0>
 8083536:	f1a5 0520 	sub.w	r5, r5, #32
 808353a:	f10e 0e20 	add.w	lr, lr, #32
 808353e:	2a01      	cmp	r2, #1
 8083540:	fa03 fc0e 	lsl.w	ip, r3, lr
 8083544:	bf28      	it	cs
 8083546:	f04c 0c02 	orrcs.w	ip, ip, #2
 808354a:	fa43 f305 	asr.w	r3, r3, r5
 808354e:	18c0      	adds	r0, r0, r3
 8083550:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8083554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083558:	d507      	bpl.n	808356a <__adddf3+0xe6>
 808355a:	f04f 0e00 	mov.w	lr, #0
 808355e:	f1dc 0c00 	rsbs	ip, ip, #0
 8083562:	eb7e 0000 	sbcs.w	r0, lr, r0
 8083566:	eb6e 0101 	sbc.w	r1, lr, r1
 808356a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808356e:	d31b      	bcc.n	80835a8 <__adddf3+0x124>
 8083570:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8083574:	d30c      	bcc.n	8083590 <__adddf3+0x10c>
 8083576:	0849      	lsrs	r1, r1, #1
 8083578:	ea5f 0030 	movs.w	r0, r0, rrx
 808357c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8083580:	f104 0401 	add.w	r4, r4, #1
 8083584:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8083588:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808358c:	f080 809a 	bcs.w	80836c4 <__adddf3+0x240>
 8083590:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083594:	bf08      	it	eq
 8083596:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808359a:	f150 0000 	adcs.w	r0, r0, #0
 808359e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80835a2:	ea41 0105 	orr.w	r1, r1, r5
 80835a6:	bd30      	pop	{r4, r5, pc}
 80835a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80835ac:	4140      	adcs	r0, r0
 80835ae:	eb41 0101 	adc.w	r1, r1, r1
 80835b2:	3c01      	subs	r4, #1
 80835b4:	bf28      	it	cs
 80835b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80835ba:	d2e9      	bcs.n	8083590 <__adddf3+0x10c>
 80835bc:	f091 0f00 	teq	r1, #0
 80835c0:	bf04      	itt	eq
 80835c2:	4601      	moveq	r1, r0
 80835c4:	2000      	moveq	r0, #0
 80835c6:	fab1 f381 	clz	r3, r1
 80835ca:	bf08      	it	eq
 80835cc:	3320      	addeq	r3, #32
 80835ce:	f1a3 030b 	sub.w	r3, r3, #11
 80835d2:	f1b3 0220 	subs.w	r2, r3, #32
 80835d6:	da0c      	bge.n	80835f2 <__adddf3+0x16e>
 80835d8:	320c      	adds	r2, #12
 80835da:	dd08      	ble.n	80835ee <__adddf3+0x16a>
 80835dc:	f102 0c14 	add.w	ip, r2, #20
 80835e0:	f1c2 020c 	rsb	r2, r2, #12
 80835e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80835e8:	fa21 f102 	lsr.w	r1, r1, r2
 80835ec:	e00c      	b.n	8083608 <__adddf3+0x184>
 80835ee:	f102 0214 	add.w	r2, r2, #20
 80835f2:	bfd8      	it	le
 80835f4:	f1c2 0c20 	rsble	ip, r2, #32
 80835f8:	fa01 f102 	lsl.w	r1, r1, r2
 80835fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083600:	bfdc      	itt	le
 8083602:	ea41 010c 	orrle.w	r1, r1, ip
 8083606:	4090      	lslle	r0, r2
 8083608:	1ae4      	subs	r4, r4, r3
 808360a:	bfa2      	ittt	ge
 808360c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8083610:	4329      	orrge	r1, r5
 8083612:	bd30      	popge	{r4, r5, pc}
 8083614:	ea6f 0404 	mvn.w	r4, r4
 8083618:	3c1f      	subs	r4, #31
 808361a:	da1c      	bge.n	8083656 <__adddf3+0x1d2>
 808361c:	340c      	adds	r4, #12
 808361e:	dc0e      	bgt.n	808363e <__adddf3+0x1ba>
 8083620:	f104 0414 	add.w	r4, r4, #20
 8083624:	f1c4 0220 	rsb	r2, r4, #32
 8083628:	fa20 f004 	lsr.w	r0, r0, r4
 808362c:	fa01 f302 	lsl.w	r3, r1, r2
 8083630:	ea40 0003 	orr.w	r0, r0, r3
 8083634:	fa21 f304 	lsr.w	r3, r1, r4
 8083638:	ea45 0103 	orr.w	r1, r5, r3
 808363c:	bd30      	pop	{r4, r5, pc}
 808363e:	f1c4 040c 	rsb	r4, r4, #12
 8083642:	f1c4 0220 	rsb	r2, r4, #32
 8083646:	fa20 f002 	lsr.w	r0, r0, r2
 808364a:	fa01 f304 	lsl.w	r3, r1, r4
 808364e:	ea40 0003 	orr.w	r0, r0, r3
 8083652:	4629      	mov	r1, r5
 8083654:	bd30      	pop	{r4, r5, pc}
 8083656:	fa21 f004 	lsr.w	r0, r1, r4
 808365a:	4629      	mov	r1, r5
 808365c:	bd30      	pop	{r4, r5, pc}
 808365e:	f094 0f00 	teq	r4, #0
 8083662:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8083666:	bf06      	itte	eq
 8083668:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808366c:	3401      	addeq	r4, #1
 808366e:	3d01      	subne	r5, #1
 8083670:	e74e      	b.n	8083510 <__adddf3+0x8c>
 8083672:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083676:	bf18      	it	ne
 8083678:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808367c:	d029      	beq.n	80836d2 <__adddf3+0x24e>
 808367e:	ea94 0f05 	teq	r4, r5
 8083682:	bf08      	it	eq
 8083684:	ea90 0f02 	teqeq	r0, r2
 8083688:	d005      	beq.n	8083696 <__adddf3+0x212>
 808368a:	ea54 0c00 	orrs.w	ip, r4, r0
 808368e:	bf04      	itt	eq
 8083690:	4619      	moveq	r1, r3
 8083692:	4610      	moveq	r0, r2
 8083694:	bd30      	pop	{r4, r5, pc}
 8083696:	ea91 0f03 	teq	r1, r3
 808369a:	bf1e      	ittt	ne
 808369c:	2100      	movne	r1, #0
 808369e:	2000      	movne	r0, #0
 80836a0:	bd30      	popne	{r4, r5, pc}
 80836a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80836a6:	d105      	bne.n	80836b4 <__adddf3+0x230>
 80836a8:	0040      	lsls	r0, r0, #1
 80836aa:	4149      	adcs	r1, r1
 80836ac:	bf28      	it	cs
 80836ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80836b2:	bd30      	pop	{r4, r5, pc}
 80836b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80836b8:	bf3c      	itt	cc
 80836ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80836be:	bd30      	popcc	{r4, r5, pc}
 80836c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80836c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80836c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80836cc:	f04f 0000 	mov.w	r0, #0
 80836d0:	bd30      	pop	{r4, r5, pc}
 80836d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80836d6:	bf1a      	itte	ne
 80836d8:	4619      	movne	r1, r3
 80836da:	4610      	movne	r0, r2
 80836dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80836e0:	bf1c      	itt	ne
 80836e2:	460b      	movne	r3, r1
 80836e4:	4602      	movne	r2, r0
 80836e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80836ea:	bf06      	itte	eq
 80836ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80836f0:	ea91 0f03 	teqeq	r1, r3
 80836f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80836f8:	bd30      	pop	{r4, r5, pc}
 80836fa:	bf00      	nop

080836fc <__aeabi_ui2d>:
 80836fc:	f090 0f00 	teq	r0, #0
 8083700:	bf04      	itt	eq
 8083702:	2100      	moveq	r1, #0
 8083704:	4770      	bxeq	lr
 8083706:	b530      	push	{r4, r5, lr}
 8083708:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808370c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083710:	f04f 0500 	mov.w	r5, #0
 8083714:	f04f 0100 	mov.w	r1, #0
 8083718:	e750      	b.n	80835bc <__adddf3+0x138>
 808371a:	bf00      	nop

0808371c <__aeabi_i2d>:
 808371c:	f090 0f00 	teq	r0, #0
 8083720:	bf04      	itt	eq
 8083722:	2100      	moveq	r1, #0
 8083724:	4770      	bxeq	lr
 8083726:	b530      	push	{r4, r5, lr}
 8083728:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808372c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083730:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8083734:	bf48      	it	mi
 8083736:	4240      	negmi	r0, r0
 8083738:	f04f 0100 	mov.w	r1, #0
 808373c:	e73e      	b.n	80835bc <__adddf3+0x138>
 808373e:	bf00      	nop

08083740 <__aeabi_f2d>:
 8083740:	0042      	lsls	r2, r0, #1
 8083742:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8083746:	ea4f 0131 	mov.w	r1, r1, rrx
 808374a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808374e:	bf1f      	itttt	ne
 8083750:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8083754:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083758:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808375c:	4770      	bxne	lr
 808375e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8083762:	bf08      	it	eq
 8083764:	4770      	bxeq	lr
 8083766:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 808376a:	bf04      	itt	eq
 808376c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8083770:	4770      	bxeq	lr
 8083772:	b530      	push	{r4, r5, lr}
 8083774:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083778:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808377c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083780:	e71c      	b.n	80835bc <__adddf3+0x138>
 8083782:	bf00      	nop

08083784 <__aeabi_ul2d>:
 8083784:	ea50 0201 	orrs.w	r2, r0, r1
 8083788:	bf08      	it	eq
 808378a:	4770      	bxeq	lr
 808378c:	b530      	push	{r4, r5, lr}
 808378e:	f04f 0500 	mov.w	r5, #0
 8083792:	e00a      	b.n	80837aa <__aeabi_l2d+0x16>

08083794 <__aeabi_l2d>:
 8083794:	ea50 0201 	orrs.w	r2, r0, r1
 8083798:	bf08      	it	eq
 808379a:	4770      	bxeq	lr
 808379c:	b530      	push	{r4, r5, lr}
 808379e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80837a2:	d502      	bpl.n	80837aa <__aeabi_l2d+0x16>
 80837a4:	4240      	negs	r0, r0
 80837a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80837aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80837ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80837b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80837b6:	f43f aed8 	beq.w	808356a <__adddf3+0xe6>
 80837ba:	f04f 0203 	mov.w	r2, #3
 80837be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80837c2:	bf18      	it	ne
 80837c4:	3203      	addne	r2, #3
 80837c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80837ca:	bf18      	it	ne
 80837cc:	3203      	addne	r2, #3
 80837ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80837d2:	f1c2 0320 	rsb	r3, r2, #32
 80837d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80837da:	fa20 f002 	lsr.w	r0, r0, r2
 80837de:	fa01 fe03 	lsl.w	lr, r1, r3
 80837e2:	ea40 000e 	orr.w	r0, r0, lr
 80837e6:	fa21 f102 	lsr.w	r1, r1, r2
 80837ea:	4414      	add	r4, r2
 80837ec:	e6bd      	b.n	808356a <__adddf3+0xe6>
 80837ee:	bf00      	nop

080837f0 <__aeabi_dmul>:
 80837f0:	b570      	push	{r4, r5, r6, lr}
 80837f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80837f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80837fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80837fe:	bf1d      	ittte	ne
 8083800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083804:	ea94 0f0c 	teqne	r4, ip
 8083808:	ea95 0f0c 	teqne	r5, ip
 808380c:	f000 f8de 	bleq	80839cc <__aeabi_dmul+0x1dc>
 8083810:	442c      	add	r4, r5
 8083812:	ea81 0603 	eor.w	r6, r1, r3
 8083816:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808381a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808381e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8083822:	bf18      	it	ne
 8083824:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808382c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083830:	d038      	beq.n	80838a4 <__aeabi_dmul+0xb4>
 8083832:	fba0 ce02 	umull	ip, lr, r0, r2
 8083836:	f04f 0500 	mov.w	r5, #0
 808383a:	fbe1 e502 	umlal	lr, r5, r1, r2
 808383e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8083842:	fbe0 e503 	umlal	lr, r5, r0, r3
 8083846:	f04f 0600 	mov.w	r6, #0
 808384a:	fbe1 5603 	umlal	r5, r6, r1, r3
 808384e:	f09c 0f00 	teq	ip, #0
 8083852:	bf18      	it	ne
 8083854:	f04e 0e01 	orrne.w	lr, lr, #1
 8083858:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808385c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083860:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8083864:	d204      	bcs.n	8083870 <__aeabi_dmul+0x80>
 8083866:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808386a:	416d      	adcs	r5, r5
 808386c:	eb46 0606 	adc.w	r6, r6, r6
 8083870:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8083874:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8083878:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808387c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8083880:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8083884:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083888:	bf88      	it	hi
 808388a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808388e:	d81e      	bhi.n	80838ce <__aeabi_dmul+0xde>
 8083890:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8083894:	bf08      	it	eq
 8083896:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808389a:	f150 0000 	adcs.w	r0, r0, #0
 808389e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80838a2:	bd70      	pop	{r4, r5, r6, pc}
 80838a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80838a8:	ea46 0101 	orr.w	r1, r6, r1
 80838ac:	ea40 0002 	orr.w	r0, r0, r2
 80838b0:	ea81 0103 	eor.w	r1, r1, r3
 80838b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80838b8:	bfc2      	ittt	gt
 80838ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80838be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80838c2:	bd70      	popgt	{r4, r5, r6, pc}
 80838c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80838c8:	f04f 0e00 	mov.w	lr, #0
 80838cc:	3c01      	subs	r4, #1
 80838ce:	f300 80ab 	bgt.w	8083a28 <__aeabi_dmul+0x238>
 80838d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80838d6:	bfde      	ittt	le
 80838d8:	2000      	movle	r0, #0
 80838da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80838de:	bd70      	pople	{r4, r5, r6, pc}
 80838e0:	f1c4 0400 	rsb	r4, r4, #0
 80838e4:	3c20      	subs	r4, #32
 80838e6:	da35      	bge.n	8083954 <__aeabi_dmul+0x164>
 80838e8:	340c      	adds	r4, #12
 80838ea:	dc1b      	bgt.n	8083924 <__aeabi_dmul+0x134>
 80838ec:	f104 0414 	add.w	r4, r4, #20
 80838f0:	f1c4 0520 	rsb	r5, r4, #32
 80838f4:	fa00 f305 	lsl.w	r3, r0, r5
 80838f8:	fa20 f004 	lsr.w	r0, r0, r4
 80838fc:	fa01 f205 	lsl.w	r2, r1, r5
 8083900:	ea40 0002 	orr.w	r0, r0, r2
 8083904:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083908:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808390c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083910:	fa21 f604 	lsr.w	r6, r1, r4
 8083914:	eb42 0106 	adc.w	r1, r2, r6
 8083918:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808391c:	bf08      	it	eq
 808391e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083922:	bd70      	pop	{r4, r5, r6, pc}
 8083924:	f1c4 040c 	rsb	r4, r4, #12
 8083928:	f1c4 0520 	rsb	r5, r4, #32
 808392c:	fa00 f304 	lsl.w	r3, r0, r4
 8083930:	fa20 f005 	lsr.w	r0, r0, r5
 8083934:	fa01 f204 	lsl.w	r2, r1, r4
 8083938:	ea40 0002 	orr.w	r0, r0, r2
 808393c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083940:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083944:	f141 0100 	adc.w	r1, r1, #0
 8083948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808394c:	bf08      	it	eq
 808394e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083952:	bd70      	pop	{r4, r5, r6, pc}
 8083954:	f1c4 0520 	rsb	r5, r4, #32
 8083958:	fa00 f205 	lsl.w	r2, r0, r5
 808395c:	ea4e 0e02 	orr.w	lr, lr, r2
 8083960:	fa20 f304 	lsr.w	r3, r0, r4
 8083964:	fa01 f205 	lsl.w	r2, r1, r5
 8083968:	ea43 0302 	orr.w	r3, r3, r2
 808396c:	fa21 f004 	lsr.w	r0, r1, r4
 8083970:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083974:	fa21 f204 	lsr.w	r2, r1, r4
 8083978:	ea20 0002 	bic.w	r0, r0, r2
 808397c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8083980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083984:	bf08      	it	eq
 8083986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808398a:	bd70      	pop	{r4, r5, r6, pc}
 808398c:	f094 0f00 	teq	r4, #0
 8083990:	d10f      	bne.n	80839b2 <__aeabi_dmul+0x1c2>
 8083992:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083996:	0040      	lsls	r0, r0, #1
 8083998:	eb41 0101 	adc.w	r1, r1, r1
 808399c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80839a0:	bf08      	it	eq
 80839a2:	3c01      	subeq	r4, #1
 80839a4:	d0f7      	beq.n	8083996 <__aeabi_dmul+0x1a6>
 80839a6:	ea41 0106 	orr.w	r1, r1, r6
 80839aa:	f095 0f00 	teq	r5, #0
 80839ae:	bf18      	it	ne
 80839b0:	4770      	bxne	lr
 80839b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80839b6:	0052      	lsls	r2, r2, #1
 80839b8:	eb43 0303 	adc.w	r3, r3, r3
 80839bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80839c0:	bf08      	it	eq
 80839c2:	3d01      	subeq	r5, #1
 80839c4:	d0f7      	beq.n	80839b6 <__aeabi_dmul+0x1c6>
 80839c6:	ea43 0306 	orr.w	r3, r3, r6
 80839ca:	4770      	bx	lr
 80839cc:	ea94 0f0c 	teq	r4, ip
 80839d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80839d4:	bf18      	it	ne
 80839d6:	ea95 0f0c 	teqne	r5, ip
 80839da:	d00c      	beq.n	80839f6 <__aeabi_dmul+0x206>
 80839dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80839e0:	bf18      	it	ne
 80839e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80839e6:	d1d1      	bne.n	808398c <__aeabi_dmul+0x19c>
 80839e8:	ea81 0103 	eor.w	r1, r1, r3
 80839ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80839f0:	f04f 0000 	mov.w	r0, #0
 80839f4:	bd70      	pop	{r4, r5, r6, pc}
 80839f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80839fa:	bf06      	itte	eq
 80839fc:	4610      	moveq	r0, r2
 80839fe:	4619      	moveq	r1, r3
 8083a00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083a04:	d019      	beq.n	8083a3a <__aeabi_dmul+0x24a>
 8083a06:	ea94 0f0c 	teq	r4, ip
 8083a0a:	d102      	bne.n	8083a12 <__aeabi_dmul+0x222>
 8083a0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083a10:	d113      	bne.n	8083a3a <__aeabi_dmul+0x24a>
 8083a12:	ea95 0f0c 	teq	r5, ip
 8083a16:	d105      	bne.n	8083a24 <__aeabi_dmul+0x234>
 8083a18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083a1c:	bf1c      	itt	ne
 8083a1e:	4610      	movne	r0, r2
 8083a20:	4619      	movne	r1, r3
 8083a22:	d10a      	bne.n	8083a3a <__aeabi_dmul+0x24a>
 8083a24:	ea81 0103 	eor.w	r1, r1, r3
 8083a28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083a2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083a30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083a34:	f04f 0000 	mov.w	r0, #0
 8083a38:	bd70      	pop	{r4, r5, r6, pc}
 8083a3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083a3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8083a42:	bd70      	pop	{r4, r5, r6, pc}

08083a44 <__aeabi_ddiv>:
 8083a44:	b570      	push	{r4, r5, r6, lr}
 8083a46:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083a4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083a4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083a52:	bf1d      	ittte	ne
 8083a54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083a58:	ea94 0f0c 	teqne	r4, ip
 8083a5c:	ea95 0f0c 	teqne	r5, ip
 8083a60:	f000 f8a7 	bleq	8083bb2 <__aeabi_ddiv+0x16e>
 8083a64:	eba4 0405 	sub.w	r4, r4, r5
 8083a68:	ea81 0e03 	eor.w	lr, r1, r3
 8083a6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083a70:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083a74:	f000 8088 	beq.w	8083b88 <__aeabi_ddiv+0x144>
 8083a78:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083a7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083a80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083a84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083a88:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083a8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083a90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083a94:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083a98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083a9c:	429d      	cmp	r5, r3
 8083a9e:	bf08      	it	eq
 8083aa0:	4296      	cmpeq	r6, r2
 8083aa2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083aa6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083aaa:	d202      	bcs.n	8083ab2 <__aeabi_ddiv+0x6e>
 8083aac:	085b      	lsrs	r3, r3, #1
 8083aae:	ea4f 0232 	mov.w	r2, r2, rrx
 8083ab2:	1ab6      	subs	r6, r6, r2
 8083ab4:	eb65 0503 	sbc.w	r5, r5, r3
 8083ab8:	085b      	lsrs	r3, r3, #1
 8083aba:	ea4f 0232 	mov.w	r2, r2, rrx
 8083abe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083ac2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083ac6:	ebb6 0e02 	subs.w	lr, r6, r2
 8083aca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083ace:	bf22      	ittt	cs
 8083ad0:	1ab6      	subcs	r6, r6, r2
 8083ad2:	4675      	movcs	r5, lr
 8083ad4:	ea40 000c 	orrcs.w	r0, r0, ip
 8083ad8:	085b      	lsrs	r3, r3, #1
 8083ada:	ea4f 0232 	mov.w	r2, r2, rrx
 8083ade:	ebb6 0e02 	subs.w	lr, r6, r2
 8083ae2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083ae6:	bf22      	ittt	cs
 8083ae8:	1ab6      	subcs	r6, r6, r2
 8083aea:	4675      	movcs	r5, lr
 8083aec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083af0:	085b      	lsrs	r3, r3, #1
 8083af2:	ea4f 0232 	mov.w	r2, r2, rrx
 8083af6:	ebb6 0e02 	subs.w	lr, r6, r2
 8083afa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083afe:	bf22      	ittt	cs
 8083b00:	1ab6      	subcs	r6, r6, r2
 8083b02:	4675      	movcs	r5, lr
 8083b04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083b08:	085b      	lsrs	r3, r3, #1
 8083b0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8083b0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8083b12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083b16:	bf22      	ittt	cs
 8083b18:	1ab6      	subcs	r6, r6, r2
 8083b1a:	4675      	movcs	r5, lr
 8083b1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083b20:	ea55 0e06 	orrs.w	lr, r5, r6
 8083b24:	d018      	beq.n	8083b58 <__aeabi_ddiv+0x114>
 8083b26:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083b2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083b2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083b32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083b36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083b3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083b3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8083b42:	d1c0      	bne.n	8083ac6 <__aeabi_ddiv+0x82>
 8083b44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083b48:	d10b      	bne.n	8083b62 <__aeabi_ddiv+0x11e>
 8083b4a:	ea41 0100 	orr.w	r1, r1, r0
 8083b4e:	f04f 0000 	mov.w	r0, #0
 8083b52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8083b56:	e7b6      	b.n	8083ac6 <__aeabi_ddiv+0x82>
 8083b58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083b5c:	bf04      	itt	eq
 8083b5e:	4301      	orreq	r1, r0
 8083b60:	2000      	moveq	r0, #0
 8083b62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083b66:	bf88      	it	hi
 8083b68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083b6c:	f63f aeaf 	bhi.w	80838ce <__aeabi_dmul+0xde>
 8083b70:	ebb5 0c03 	subs.w	ip, r5, r3
 8083b74:	bf04      	itt	eq
 8083b76:	ebb6 0c02 	subseq.w	ip, r6, r2
 8083b7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083b7e:	f150 0000 	adcs.w	r0, r0, #0
 8083b82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083b86:	bd70      	pop	{r4, r5, r6, pc}
 8083b88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083b8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8083b90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8083b94:	bfc2      	ittt	gt
 8083b96:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083b9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083b9e:	bd70      	popgt	{r4, r5, r6, pc}
 8083ba0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083ba4:	f04f 0e00 	mov.w	lr, #0
 8083ba8:	3c01      	subs	r4, #1
 8083baa:	e690      	b.n	80838ce <__aeabi_dmul+0xde>
 8083bac:	ea45 0e06 	orr.w	lr, r5, r6
 8083bb0:	e68d      	b.n	80838ce <__aeabi_dmul+0xde>
 8083bb2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083bb6:	ea94 0f0c 	teq	r4, ip
 8083bba:	bf08      	it	eq
 8083bbc:	ea95 0f0c 	teqeq	r5, ip
 8083bc0:	f43f af3b 	beq.w	8083a3a <__aeabi_dmul+0x24a>
 8083bc4:	ea94 0f0c 	teq	r4, ip
 8083bc8:	d10a      	bne.n	8083be0 <__aeabi_ddiv+0x19c>
 8083bca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083bce:	f47f af34 	bne.w	8083a3a <__aeabi_dmul+0x24a>
 8083bd2:	ea95 0f0c 	teq	r5, ip
 8083bd6:	f47f af25 	bne.w	8083a24 <__aeabi_dmul+0x234>
 8083bda:	4610      	mov	r0, r2
 8083bdc:	4619      	mov	r1, r3
 8083bde:	e72c      	b.n	8083a3a <__aeabi_dmul+0x24a>
 8083be0:	ea95 0f0c 	teq	r5, ip
 8083be4:	d106      	bne.n	8083bf4 <__aeabi_ddiv+0x1b0>
 8083be6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083bea:	f43f aefd 	beq.w	80839e8 <__aeabi_dmul+0x1f8>
 8083bee:	4610      	mov	r0, r2
 8083bf0:	4619      	mov	r1, r3
 8083bf2:	e722      	b.n	8083a3a <__aeabi_dmul+0x24a>
 8083bf4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083bf8:	bf18      	it	ne
 8083bfa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083bfe:	f47f aec5 	bne.w	808398c <__aeabi_dmul+0x19c>
 8083c02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8083c06:	f47f af0d 	bne.w	8083a24 <__aeabi_dmul+0x234>
 8083c0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8083c0e:	f47f aeeb 	bne.w	80839e8 <__aeabi_dmul+0x1f8>
 8083c12:	e712      	b.n	8083a3a <__aeabi_dmul+0x24a>

08083c14 <__gedf2>:
 8083c14:	f04f 3cff 	mov.w	ip, #4294967295
 8083c18:	e006      	b.n	8083c28 <__cmpdf2+0x4>
 8083c1a:	bf00      	nop

08083c1c <__ledf2>:
 8083c1c:	f04f 0c01 	mov.w	ip, #1
 8083c20:	e002      	b.n	8083c28 <__cmpdf2+0x4>
 8083c22:	bf00      	nop

08083c24 <__cmpdf2>:
 8083c24:	f04f 0c01 	mov.w	ip, #1
 8083c28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8083c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083c34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083c38:	bf18      	it	ne
 8083c3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8083c3e:	d01b      	beq.n	8083c78 <__cmpdf2+0x54>
 8083c40:	b001      	add	sp, #4
 8083c42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8083c46:	bf0c      	ite	eq
 8083c48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8083c4c:	ea91 0f03 	teqne	r1, r3
 8083c50:	bf02      	ittt	eq
 8083c52:	ea90 0f02 	teqeq	r0, r2
 8083c56:	2000      	moveq	r0, #0
 8083c58:	4770      	bxeq	lr
 8083c5a:	f110 0f00 	cmn.w	r0, #0
 8083c5e:	ea91 0f03 	teq	r1, r3
 8083c62:	bf58      	it	pl
 8083c64:	4299      	cmppl	r1, r3
 8083c66:	bf08      	it	eq
 8083c68:	4290      	cmpeq	r0, r2
 8083c6a:	bf2c      	ite	cs
 8083c6c:	17d8      	asrcs	r0, r3, #31
 8083c6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8083c72:	f040 0001 	orr.w	r0, r0, #1
 8083c76:	4770      	bx	lr
 8083c78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083c7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083c80:	d102      	bne.n	8083c88 <__cmpdf2+0x64>
 8083c82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8083c86:	d107      	bne.n	8083c98 <__cmpdf2+0x74>
 8083c88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083c8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083c90:	d1d6      	bne.n	8083c40 <__cmpdf2+0x1c>
 8083c92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8083c96:	d0d3      	beq.n	8083c40 <__cmpdf2+0x1c>
 8083c98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8083c9c:	4770      	bx	lr
 8083c9e:	bf00      	nop

08083ca0 <__aeabi_cdrcmple>:
 8083ca0:	4684      	mov	ip, r0
 8083ca2:	4610      	mov	r0, r2
 8083ca4:	4662      	mov	r2, ip
 8083ca6:	468c      	mov	ip, r1
 8083ca8:	4619      	mov	r1, r3
 8083caa:	4663      	mov	r3, ip
 8083cac:	e000      	b.n	8083cb0 <__aeabi_cdcmpeq>
 8083cae:	bf00      	nop

08083cb0 <__aeabi_cdcmpeq>:
 8083cb0:	b501      	push	{r0, lr}
 8083cb2:	f7ff ffb7 	bl	8083c24 <__cmpdf2>
 8083cb6:	2800      	cmp	r0, #0
 8083cb8:	bf48      	it	mi
 8083cba:	f110 0f00 	cmnmi.w	r0, #0
 8083cbe:	bd01      	pop	{r0, pc}

08083cc0 <__aeabi_dcmpeq>:
 8083cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083cc4:	f7ff fff4 	bl	8083cb0 <__aeabi_cdcmpeq>
 8083cc8:	bf0c      	ite	eq
 8083cca:	2001      	moveq	r0, #1
 8083ccc:	2000      	movne	r0, #0
 8083cce:	f85d fb08 	ldr.w	pc, [sp], #8
 8083cd2:	bf00      	nop

08083cd4 <__aeabi_dcmplt>:
 8083cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083cd8:	f7ff ffea 	bl	8083cb0 <__aeabi_cdcmpeq>
 8083cdc:	bf34      	ite	cc
 8083cde:	2001      	movcc	r0, #1
 8083ce0:	2000      	movcs	r0, #0
 8083ce2:	f85d fb08 	ldr.w	pc, [sp], #8
 8083ce6:	bf00      	nop

08083ce8 <__aeabi_dcmple>:
 8083ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083cec:	f7ff ffe0 	bl	8083cb0 <__aeabi_cdcmpeq>
 8083cf0:	bf94      	ite	ls
 8083cf2:	2001      	movls	r0, #1
 8083cf4:	2000      	movhi	r0, #0
 8083cf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8083cfa:	bf00      	nop

08083cfc <__aeabi_dcmpge>:
 8083cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083d00:	f7ff ffce 	bl	8083ca0 <__aeabi_cdrcmple>
 8083d04:	bf94      	ite	ls
 8083d06:	2001      	movls	r0, #1
 8083d08:	2000      	movhi	r0, #0
 8083d0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8083d0e:	bf00      	nop

08083d10 <__aeabi_dcmpgt>:
 8083d10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083d14:	f7ff ffc4 	bl	8083ca0 <__aeabi_cdrcmple>
 8083d18:	bf34      	ite	cc
 8083d1a:	2001      	movcc	r0, #1
 8083d1c:	2000      	movcs	r0, #0
 8083d1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8083d22:	bf00      	nop

08083d24 <__aeabi_dcmpun>:
 8083d24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083d28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083d2c:	d102      	bne.n	8083d34 <__aeabi_dcmpun+0x10>
 8083d2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8083d32:	d10a      	bne.n	8083d4a <__aeabi_dcmpun+0x26>
 8083d34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083d38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083d3c:	d102      	bne.n	8083d44 <__aeabi_dcmpun+0x20>
 8083d3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8083d42:	d102      	bne.n	8083d4a <__aeabi_dcmpun+0x26>
 8083d44:	f04f 0000 	mov.w	r0, #0
 8083d48:	4770      	bx	lr
 8083d4a:	f04f 0001 	mov.w	r0, #1
 8083d4e:	4770      	bx	lr

08083d50 <__aeabi_d2iz>:
 8083d50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083d54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8083d58:	d215      	bcs.n	8083d86 <__aeabi_d2iz+0x36>
 8083d5a:	d511      	bpl.n	8083d80 <__aeabi_d2iz+0x30>
 8083d5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8083d60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8083d64:	d912      	bls.n	8083d8c <__aeabi_d2iz+0x3c>
 8083d66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083d6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8083d6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8083d72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083d76:	fa23 f002 	lsr.w	r0, r3, r2
 8083d7a:	bf18      	it	ne
 8083d7c:	4240      	negne	r0, r0
 8083d7e:	4770      	bx	lr
 8083d80:	f04f 0000 	mov.w	r0, #0
 8083d84:	4770      	bx	lr
 8083d86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8083d8a:	d105      	bne.n	8083d98 <__aeabi_d2iz+0x48>
 8083d8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8083d90:	bf08      	it	eq
 8083d92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8083d96:	4770      	bx	lr
 8083d98:	f04f 0000 	mov.w	r0, #0
 8083d9c:	4770      	bx	lr
 8083d9e:	bf00      	nop

08083da0 <__aeabi_d2uiz>:
 8083da0:	004a      	lsls	r2, r1, #1
 8083da2:	d211      	bcs.n	8083dc8 <__aeabi_d2uiz+0x28>
 8083da4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8083da8:	d211      	bcs.n	8083dce <__aeabi_d2uiz+0x2e>
 8083daa:	d50d      	bpl.n	8083dc8 <__aeabi_d2uiz+0x28>
 8083dac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8083db0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8083db4:	d40e      	bmi.n	8083dd4 <__aeabi_d2uiz+0x34>
 8083db6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083dba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8083dbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8083dc2:	fa23 f002 	lsr.w	r0, r3, r2
 8083dc6:	4770      	bx	lr
 8083dc8:	f04f 0000 	mov.w	r0, #0
 8083dcc:	4770      	bx	lr
 8083dce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8083dd2:	d102      	bne.n	8083dda <__aeabi_d2uiz+0x3a>
 8083dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8083dd8:	4770      	bx	lr
 8083dda:	f04f 0000 	mov.w	r0, #0
 8083dde:	4770      	bx	lr

08083de0 <__aeabi_frsub>:
 8083de0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8083de4:	e002      	b.n	8083dec <__addsf3>
 8083de6:	bf00      	nop

08083de8 <__aeabi_fsub>:
 8083de8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08083dec <__addsf3>:
 8083dec:	0042      	lsls	r2, r0, #1
 8083dee:	bf1f      	itttt	ne
 8083df0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8083df4:	ea92 0f03 	teqne	r2, r3
 8083df8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8083dfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083e00:	d06a      	beq.n	8083ed8 <__addsf3+0xec>
 8083e02:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8083e06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8083e0a:	bfc1      	itttt	gt
 8083e0c:	18d2      	addgt	r2, r2, r3
 8083e0e:	4041      	eorgt	r1, r0
 8083e10:	4048      	eorgt	r0, r1
 8083e12:	4041      	eorgt	r1, r0
 8083e14:	bfb8      	it	lt
 8083e16:	425b      	neglt	r3, r3
 8083e18:	2b19      	cmp	r3, #25
 8083e1a:	bf88      	it	hi
 8083e1c:	4770      	bxhi	lr
 8083e1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8083e22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083e26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8083e2a:	bf18      	it	ne
 8083e2c:	4240      	negne	r0, r0
 8083e2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083e32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8083e36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8083e3a:	bf18      	it	ne
 8083e3c:	4249      	negne	r1, r1
 8083e3e:	ea92 0f03 	teq	r2, r3
 8083e42:	d03f      	beq.n	8083ec4 <__addsf3+0xd8>
 8083e44:	f1a2 0201 	sub.w	r2, r2, #1
 8083e48:	fa41 fc03 	asr.w	ip, r1, r3
 8083e4c:	eb10 000c 	adds.w	r0, r0, ip
 8083e50:	f1c3 0320 	rsb	r3, r3, #32
 8083e54:	fa01 f103 	lsl.w	r1, r1, r3
 8083e58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083e5c:	d502      	bpl.n	8083e64 <__addsf3+0x78>
 8083e5e:	4249      	negs	r1, r1
 8083e60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8083e64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8083e68:	d313      	bcc.n	8083e92 <__addsf3+0xa6>
 8083e6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8083e6e:	d306      	bcc.n	8083e7e <__addsf3+0x92>
 8083e70:	0840      	lsrs	r0, r0, #1
 8083e72:	ea4f 0131 	mov.w	r1, r1, rrx
 8083e76:	f102 0201 	add.w	r2, r2, #1
 8083e7a:	2afe      	cmp	r2, #254	; 0xfe
 8083e7c:	d251      	bcs.n	8083f22 <__addsf3+0x136>
 8083e7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8083e82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083e86:	bf08      	it	eq
 8083e88:	f020 0001 	biceq.w	r0, r0, #1
 8083e8c:	ea40 0003 	orr.w	r0, r0, r3
 8083e90:	4770      	bx	lr
 8083e92:	0049      	lsls	r1, r1, #1
 8083e94:	eb40 0000 	adc.w	r0, r0, r0
 8083e98:	3a01      	subs	r2, #1
 8083e9a:	bf28      	it	cs
 8083e9c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8083ea0:	d2ed      	bcs.n	8083e7e <__addsf3+0x92>
 8083ea2:	fab0 fc80 	clz	ip, r0
 8083ea6:	f1ac 0c08 	sub.w	ip, ip, #8
 8083eaa:	ebb2 020c 	subs.w	r2, r2, ip
 8083eae:	fa00 f00c 	lsl.w	r0, r0, ip
 8083eb2:	bfaa      	itet	ge
 8083eb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8083eb8:	4252      	neglt	r2, r2
 8083eba:	4318      	orrge	r0, r3
 8083ebc:	bfbc      	itt	lt
 8083ebe:	40d0      	lsrlt	r0, r2
 8083ec0:	4318      	orrlt	r0, r3
 8083ec2:	4770      	bx	lr
 8083ec4:	f092 0f00 	teq	r2, #0
 8083ec8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8083ecc:	bf06      	itte	eq
 8083ece:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8083ed2:	3201      	addeq	r2, #1
 8083ed4:	3b01      	subne	r3, #1
 8083ed6:	e7b5      	b.n	8083e44 <__addsf3+0x58>
 8083ed8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8083edc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083ee0:	bf18      	it	ne
 8083ee2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083ee6:	d021      	beq.n	8083f2c <__addsf3+0x140>
 8083ee8:	ea92 0f03 	teq	r2, r3
 8083eec:	d004      	beq.n	8083ef8 <__addsf3+0x10c>
 8083eee:	f092 0f00 	teq	r2, #0
 8083ef2:	bf08      	it	eq
 8083ef4:	4608      	moveq	r0, r1
 8083ef6:	4770      	bx	lr
 8083ef8:	ea90 0f01 	teq	r0, r1
 8083efc:	bf1c      	itt	ne
 8083efe:	2000      	movne	r0, #0
 8083f00:	4770      	bxne	lr
 8083f02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8083f06:	d104      	bne.n	8083f12 <__addsf3+0x126>
 8083f08:	0040      	lsls	r0, r0, #1
 8083f0a:	bf28      	it	cs
 8083f0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8083f10:	4770      	bx	lr
 8083f12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8083f16:	bf3c      	itt	cc
 8083f18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8083f1c:	4770      	bxcc	lr
 8083f1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083f22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8083f26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083f2a:	4770      	bx	lr
 8083f2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8083f30:	bf16      	itet	ne
 8083f32:	4608      	movne	r0, r1
 8083f34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8083f38:	4601      	movne	r1, r0
 8083f3a:	0242      	lsls	r2, r0, #9
 8083f3c:	bf06      	itte	eq
 8083f3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8083f42:	ea90 0f01 	teqeq	r0, r1
 8083f46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8083f4a:	4770      	bx	lr

08083f4c <__aeabi_ui2f>:
 8083f4c:	f04f 0300 	mov.w	r3, #0
 8083f50:	e004      	b.n	8083f5c <__aeabi_i2f+0x8>
 8083f52:	bf00      	nop

08083f54 <__aeabi_i2f>:
 8083f54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8083f58:	bf48      	it	mi
 8083f5a:	4240      	negmi	r0, r0
 8083f5c:	ea5f 0c00 	movs.w	ip, r0
 8083f60:	bf08      	it	eq
 8083f62:	4770      	bxeq	lr
 8083f64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8083f68:	4601      	mov	r1, r0
 8083f6a:	f04f 0000 	mov.w	r0, #0
 8083f6e:	e01c      	b.n	8083faa <__aeabi_l2f+0x2a>

08083f70 <__aeabi_ul2f>:
 8083f70:	ea50 0201 	orrs.w	r2, r0, r1
 8083f74:	bf08      	it	eq
 8083f76:	4770      	bxeq	lr
 8083f78:	f04f 0300 	mov.w	r3, #0
 8083f7c:	e00a      	b.n	8083f94 <__aeabi_l2f+0x14>
 8083f7e:	bf00      	nop

08083f80 <__aeabi_l2f>:
 8083f80:	ea50 0201 	orrs.w	r2, r0, r1
 8083f84:	bf08      	it	eq
 8083f86:	4770      	bxeq	lr
 8083f88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8083f8c:	d502      	bpl.n	8083f94 <__aeabi_l2f+0x14>
 8083f8e:	4240      	negs	r0, r0
 8083f90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083f94:	ea5f 0c01 	movs.w	ip, r1
 8083f98:	bf02      	ittt	eq
 8083f9a:	4684      	moveq	ip, r0
 8083f9c:	4601      	moveq	r1, r0
 8083f9e:	2000      	moveq	r0, #0
 8083fa0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8083fa4:	bf08      	it	eq
 8083fa6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8083faa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8083fae:	fabc f28c 	clz	r2, ip
 8083fb2:	3a08      	subs	r2, #8
 8083fb4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8083fb8:	db10      	blt.n	8083fdc <__aeabi_l2f+0x5c>
 8083fba:	fa01 fc02 	lsl.w	ip, r1, r2
 8083fbe:	4463      	add	r3, ip
 8083fc0:	fa00 fc02 	lsl.w	ip, r0, r2
 8083fc4:	f1c2 0220 	rsb	r2, r2, #32
 8083fc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083fcc:	fa20 f202 	lsr.w	r2, r0, r2
 8083fd0:	eb43 0002 	adc.w	r0, r3, r2
 8083fd4:	bf08      	it	eq
 8083fd6:	f020 0001 	biceq.w	r0, r0, #1
 8083fda:	4770      	bx	lr
 8083fdc:	f102 0220 	add.w	r2, r2, #32
 8083fe0:	fa01 fc02 	lsl.w	ip, r1, r2
 8083fe4:	f1c2 0220 	rsb	r2, r2, #32
 8083fe8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8083fec:	fa21 f202 	lsr.w	r2, r1, r2
 8083ff0:	eb43 0002 	adc.w	r0, r3, r2
 8083ff4:	bf08      	it	eq
 8083ff6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8083ffa:	4770      	bx	lr

08083ffc <__aeabi_fmul>:
 8083ffc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084000:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084004:	bf1e      	ittt	ne
 8084006:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808400a:	ea92 0f0c 	teqne	r2, ip
 808400e:	ea93 0f0c 	teqne	r3, ip
 8084012:	d06f      	beq.n	80840f4 <__aeabi_fmul+0xf8>
 8084014:	441a      	add	r2, r3
 8084016:	ea80 0c01 	eor.w	ip, r0, r1
 808401a:	0240      	lsls	r0, r0, #9
 808401c:	bf18      	it	ne
 808401e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8084022:	d01e      	beq.n	8084062 <__aeabi_fmul+0x66>
 8084024:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8084028:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808402c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8084030:	fba0 3101 	umull	r3, r1, r0, r1
 8084034:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084038:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808403c:	bf3e      	ittt	cc
 808403e:	0049      	lslcc	r1, r1, #1
 8084040:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8084044:	005b      	lslcc	r3, r3, #1
 8084046:	ea40 0001 	orr.w	r0, r0, r1
 808404a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808404e:	2afd      	cmp	r2, #253	; 0xfd
 8084050:	d81d      	bhi.n	808408e <__aeabi_fmul+0x92>
 8084052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8084056:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808405a:	bf08      	it	eq
 808405c:	f020 0001 	biceq.w	r0, r0, #1
 8084060:	4770      	bx	lr
 8084062:	f090 0f00 	teq	r0, #0
 8084066:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808406a:	bf08      	it	eq
 808406c:	0249      	lsleq	r1, r1, #9
 808406e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8084072:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8084076:	3a7f      	subs	r2, #127	; 0x7f
 8084078:	bfc2      	ittt	gt
 808407a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808407e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8084082:	4770      	bxgt	lr
 8084084:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084088:	f04f 0300 	mov.w	r3, #0
 808408c:	3a01      	subs	r2, #1
 808408e:	dc5d      	bgt.n	808414c <__aeabi_fmul+0x150>
 8084090:	f112 0f19 	cmn.w	r2, #25
 8084094:	bfdc      	itt	le
 8084096:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808409a:	4770      	bxle	lr
 808409c:	f1c2 0200 	rsb	r2, r2, #0
 80840a0:	0041      	lsls	r1, r0, #1
 80840a2:	fa21 f102 	lsr.w	r1, r1, r2
 80840a6:	f1c2 0220 	rsb	r2, r2, #32
 80840aa:	fa00 fc02 	lsl.w	ip, r0, r2
 80840ae:	ea5f 0031 	movs.w	r0, r1, rrx
 80840b2:	f140 0000 	adc.w	r0, r0, #0
 80840b6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80840ba:	bf08      	it	eq
 80840bc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80840c0:	4770      	bx	lr
 80840c2:	f092 0f00 	teq	r2, #0
 80840c6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80840ca:	bf02      	ittt	eq
 80840cc:	0040      	lsleq	r0, r0, #1
 80840ce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80840d2:	3a01      	subeq	r2, #1
 80840d4:	d0f9      	beq.n	80840ca <__aeabi_fmul+0xce>
 80840d6:	ea40 000c 	orr.w	r0, r0, ip
 80840da:	f093 0f00 	teq	r3, #0
 80840de:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80840e2:	bf02      	ittt	eq
 80840e4:	0049      	lsleq	r1, r1, #1
 80840e6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80840ea:	3b01      	subeq	r3, #1
 80840ec:	d0f9      	beq.n	80840e2 <__aeabi_fmul+0xe6>
 80840ee:	ea41 010c 	orr.w	r1, r1, ip
 80840f2:	e78f      	b.n	8084014 <__aeabi_fmul+0x18>
 80840f4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80840f8:	ea92 0f0c 	teq	r2, ip
 80840fc:	bf18      	it	ne
 80840fe:	ea93 0f0c 	teqne	r3, ip
 8084102:	d00a      	beq.n	808411a <__aeabi_fmul+0x11e>
 8084104:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084108:	bf18      	it	ne
 808410a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808410e:	d1d8      	bne.n	80840c2 <__aeabi_fmul+0xc6>
 8084110:	ea80 0001 	eor.w	r0, r0, r1
 8084114:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8084118:	4770      	bx	lr
 808411a:	f090 0f00 	teq	r0, #0
 808411e:	bf17      	itett	ne
 8084120:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8084124:	4608      	moveq	r0, r1
 8084126:	f091 0f00 	teqne	r1, #0
 808412a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808412e:	d014      	beq.n	808415a <__aeabi_fmul+0x15e>
 8084130:	ea92 0f0c 	teq	r2, ip
 8084134:	d101      	bne.n	808413a <__aeabi_fmul+0x13e>
 8084136:	0242      	lsls	r2, r0, #9
 8084138:	d10f      	bne.n	808415a <__aeabi_fmul+0x15e>
 808413a:	ea93 0f0c 	teq	r3, ip
 808413e:	d103      	bne.n	8084148 <__aeabi_fmul+0x14c>
 8084140:	024b      	lsls	r3, r1, #9
 8084142:	bf18      	it	ne
 8084144:	4608      	movne	r0, r1
 8084146:	d108      	bne.n	808415a <__aeabi_fmul+0x15e>
 8084148:	ea80 0001 	eor.w	r0, r0, r1
 808414c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8084150:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084154:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084158:	4770      	bx	lr
 808415a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808415e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8084162:	4770      	bx	lr

08084164 <__aeabi_fdiv>:
 8084164:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084168:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808416c:	bf1e      	ittt	ne
 808416e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8084172:	ea92 0f0c 	teqne	r2, ip
 8084176:	ea93 0f0c 	teqne	r3, ip
 808417a:	d069      	beq.n	8084250 <__aeabi_fdiv+0xec>
 808417c:	eba2 0203 	sub.w	r2, r2, r3
 8084180:	ea80 0c01 	eor.w	ip, r0, r1
 8084184:	0249      	lsls	r1, r1, #9
 8084186:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808418a:	d037      	beq.n	80841fc <__aeabi_fdiv+0x98>
 808418c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8084190:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8084194:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8084198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808419c:	428b      	cmp	r3, r1
 808419e:	bf38      	it	cc
 80841a0:	005b      	lslcc	r3, r3, #1
 80841a2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80841a6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80841aa:	428b      	cmp	r3, r1
 80841ac:	bf24      	itt	cs
 80841ae:	1a5b      	subcs	r3, r3, r1
 80841b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80841b4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80841b8:	bf24      	itt	cs
 80841ba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80841be:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80841c2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80841c6:	bf24      	itt	cs
 80841c8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80841cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80841d0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80841d4:	bf24      	itt	cs
 80841d6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80841da:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80841de:	011b      	lsls	r3, r3, #4
 80841e0:	bf18      	it	ne
 80841e2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80841e6:	d1e0      	bne.n	80841aa <__aeabi_fdiv+0x46>
 80841e8:	2afd      	cmp	r2, #253	; 0xfd
 80841ea:	f63f af50 	bhi.w	808408e <__aeabi_fmul+0x92>
 80841ee:	428b      	cmp	r3, r1
 80841f0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80841f4:	bf08      	it	eq
 80841f6:	f020 0001 	biceq.w	r0, r0, #1
 80841fa:	4770      	bx	lr
 80841fc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8084200:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8084204:	327f      	adds	r2, #127	; 0x7f
 8084206:	bfc2      	ittt	gt
 8084208:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808420c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8084210:	4770      	bxgt	lr
 8084212:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084216:	f04f 0300 	mov.w	r3, #0
 808421a:	3a01      	subs	r2, #1
 808421c:	e737      	b.n	808408e <__aeabi_fmul+0x92>
 808421e:	f092 0f00 	teq	r2, #0
 8084222:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8084226:	bf02      	ittt	eq
 8084228:	0040      	lsleq	r0, r0, #1
 808422a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808422e:	3a01      	subeq	r2, #1
 8084230:	d0f9      	beq.n	8084226 <__aeabi_fdiv+0xc2>
 8084232:	ea40 000c 	orr.w	r0, r0, ip
 8084236:	f093 0f00 	teq	r3, #0
 808423a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808423e:	bf02      	ittt	eq
 8084240:	0049      	lsleq	r1, r1, #1
 8084242:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8084246:	3b01      	subeq	r3, #1
 8084248:	d0f9      	beq.n	808423e <__aeabi_fdiv+0xda>
 808424a:	ea41 010c 	orr.w	r1, r1, ip
 808424e:	e795      	b.n	808417c <__aeabi_fdiv+0x18>
 8084250:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084254:	ea92 0f0c 	teq	r2, ip
 8084258:	d108      	bne.n	808426c <__aeabi_fdiv+0x108>
 808425a:	0242      	lsls	r2, r0, #9
 808425c:	f47f af7d 	bne.w	808415a <__aeabi_fmul+0x15e>
 8084260:	ea93 0f0c 	teq	r3, ip
 8084264:	f47f af70 	bne.w	8084148 <__aeabi_fmul+0x14c>
 8084268:	4608      	mov	r0, r1
 808426a:	e776      	b.n	808415a <__aeabi_fmul+0x15e>
 808426c:	ea93 0f0c 	teq	r3, ip
 8084270:	d104      	bne.n	808427c <__aeabi_fdiv+0x118>
 8084272:	024b      	lsls	r3, r1, #9
 8084274:	f43f af4c 	beq.w	8084110 <__aeabi_fmul+0x114>
 8084278:	4608      	mov	r0, r1
 808427a:	e76e      	b.n	808415a <__aeabi_fmul+0x15e>
 808427c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084280:	bf18      	it	ne
 8084282:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8084286:	d1ca      	bne.n	808421e <__aeabi_fdiv+0xba>
 8084288:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808428c:	f47f af5c 	bne.w	8084148 <__aeabi_fmul+0x14c>
 8084290:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8084294:	f47f af3c 	bne.w	8084110 <__aeabi_fmul+0x114>
 8084298:	e75f      	b.n	808415a <__aeabi_fmul+0x15e>
 808429a:	bf00      	nop

0808429c <__gesf2>:
 808429c:	f04f 3cff 	mov.w	ip, #4294967295
 80842a0:	e006      	b.n	80842b0 <__cmpsf2+0x4>
 80842a2:	bf00      	nop

080842a4 <__lesf2>:
 80842a4:	f04f 0c01 	mov.w	ip, #1
 80842a8:	e002      	b.n	80842b0 <__cmpsf2+0x4>
 80842aa:	bf00      	nop

080842ac <__cmpsf2>:
 80842ac:	f04f 0c01 	mov.w	ip, #1
 80842b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80842b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80842b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80842bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80842c0:	bf18      	it	ne
 80842c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80842c6:	d011      	beq.n	80842ec <__cmpsf2+0x40>
 80842c8:	b001      	add	sp, #4
 80842ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80842ce:	bf18      	it	ne
 80842d0:	ea90 0f01 	teqne	r0, r1
 80842d4:	bf58      	it	pl
 80842d6:	ebb2 0003 	subspl.w	r0, r2, r3
 80842da:	bf88      	it	hi
 80842dc:	17c8      	asrhi	r0, r1, #31
 80842de:	bf38      	it	cc
 80842e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80842e4:	bf18      	it	ne
 80842e6:	f040 0001 	orrne.w	r0, r0, #1
 80842ea:	4770      	bx	lr
 80842ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80842f0:	d102      	bne.n	80842f8 <__cmpsf2+0x4c>
 80842f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80842f6:	d105      	bne.n	8084304 <__cmpsf2+0x58>
 80842f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80842fc:	d1e4      	bne.n	80842c8 <__cmpsf2+0x1c>
 80842fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8084302:	d0e1      	beq.n	80842c8 <__cmpsf2+0x1c>
 8084304:	f85d 0b04 	ldr.w	r0, [sp], #4
 8084308:	4770      	bx	lr
 808430a:	bf00      	nop

0808430c <__aeabi_cfrcmple>:
 808430c:	4684      	mov	ip, r0
 808430e:	4608      	mov	r0, r1
 8084310:	4661      	mov	r1, ip
 8084312:	e7ff      	b.n	8084314 <__aeabi_cfcmpeq>

08084314 <__aeabi_cfcmpeq>:
 8084314:	b50f      	push	{r0, r1, r2, r3, lr}
 8084316:	f7ff ffc9 	bl	80842ac <__cmpsf2>
 808431a:	2800      	cmp	r0, #0
 808431c:	bf48      	it	mi
 808431e:	f110 0f00 	cmnmi.w	r0, #0
 8084322:	bd0f      	pop	{r0, r1, r2, r3, pc}

08084324 <__aeabi_fcmpeq>:
 8084324:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084328:	f7ff fff4 	bl	8084314 <__aeabi_cfcmpeq>
 808432c:	bf0c      	ite	eq
 808432e:	2001      	moveq	r0, #1
 8084330:	2000      	movne	r0, #0
 8084332:	f85d fb08 	ldr.w	pc, [sp], #8
 8084336:	bf00      	nop

08084338 <__aeabi_fcmplt>:
 8084338:	f84d ed08 	str.w	lr, [sp, #-8]!
 808433c:	f7ff ffea 	bl	8084314 <__aeabi_cfcmpeq>
 8084340:	bf34      	ite	cc
 8084342:	2001      	movcc	r0, #1
 8084344:	2000      	movcs	r0, #0
 8084346:	f85d fb08 	ldr.w	pc, [sp], #8
 808434a:	bf00      	nop

0808434c <__aeabi_fcmple>:
 808434c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084350:	f7ff ffe0 	bl	8084314 <__aeabi_cfcmpeq>
 8084354:	bf94      	ite	ls
 8084356:	2001      	movls	r0, #1
 8084358:	2000      	movhi	r0, #0
 808435a:	f85d fb08 	ldr.w	pc, [sp], #8
 808435e:	bf00      	nop

08084360 <__aeabi_fcmpge>:
 8084360:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084364:	f7ff ffd2 	bl	808430c <__aeabi_cfrcmple>
 8084368:	bf94      	ite	ls
 808436a:	2001      	movls	r0, #1
 808436c:	2000      	movhi	r0, #0
 808436e:	f85d fb08 	ldr.w	pc, [sp], #8
 8084372:	bf00      	nop

08084374 <__aeabi_fcmpgt>:
 8084374:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084378:	f7ff ffc8 	bl	808430c <__aeabi_cfrcmple>
 808437c:	bf34      	ite	cc
 808437e:	2001      	movcc	r0, #1
 8084380:	2000      	movcs	r0, #0
 8084382:	f85d fb08 	ldr.w	pc, [sp], #8
 8084386:	bf00      	nop

08084388 <__aeabi_f2iz>:
 8084388:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808438c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8084390:	d30f      	bcc.n	80843b2 <__aeabi_f2iz+0x2a>
 8084392:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8084396:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808439a:	d90d      	bls.n	80843b8 <__aeabi_f2iz+0x30>
 808439c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80843a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80843a4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80843a8:	fa23 f002 	lsr.w	r0, r3, r2
 80843ac:	bf18      	it	ne
 80843ae:	4240      	negne	r0, r0
 80843b0:	4770      	bx	lr
 80843b2:	f04f 0000 	mov.w	r0, #0
 80843b6:	4770      	bx	lr
 80843b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80843bc:	d101      	bne.n	80843c2 <__aeabi_f2iz+0x3a>
 80843be:	0242      	lsls	r2, r0, #9
 80843c0:	d105      	bne.n	80843ce <__aeabi_f2iz+0x46>
 80843c2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80843c6:	bf08      	it	eq
 80843c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80843cc:	4770      	bx	lr
 80843ce:	f04f 0000 	mov.w	r0, #0
 80843d2:	4770      	bx	lr

080843d4 <__aeabi_f2uiz>:
 80843d4:	0042      	lsls	r2, r0, #1
 80843d6:	d20e      	bcs.n	80843f6 <__aeabi_f2uiz+0x22>
 80843d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80843dc:	d30b      	bcc.n	80843f6 <__aeabi_f2uiz+0x22>
 80843de:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80843e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80843e6:	d409      	bmi.n	80843fc <__aeabi_f2uiz+0x28>
 80843e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80843ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80843f0:	fa23 f002 	lsr.w	r0, r3, r2
 80843f4:	4770      	bx	lr
 80843f6:	f04f 0000 	mov.w	r0, #0
 80843fa:	4770      	bx	lr
 80843fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8084400:	d101      	bne.n	8084406 <__aeabi_f2uiz+0x32>
 8084402:	0242      	lsls	r2, r0, #9
 8084404:	d102      	bne.n	808440c <__aeabi_f2uiz+0x38>
 8084406:	f04f 30ff 	mov.w	r0, #4294967295
 808440a:	4770      	bx	lr
 808440c:	f04f 0000 	mov.w	r0, #0
 8084410:	4770      	bx	lr
 8084412:	bf00      	nop

08084414 <atexit>:
 8084414:	2300      	movs	r3, #0
 8084416:	4601      	mov	r1, r0
 8084418:	461a      	mov	r2, r3
 808441a:	4618      	mov	r0, r3
 808441c:	f000 b84c 	b.w	80844b8 <__register_exitproc>

08084420 <memcpy>:
 8084420:	440a      	add	r2, r1
 8084422:	4291      	cmp	r1, r2
 8084424:	f100 33ff 	add.w	r3, r0, #4294967295
 8084428:	d100      	bne.n	808442c <memcpy+0xc>
 808442a:	4770      	bx	lr
 808442c:	b510      	push	{r4, lr}
 808442e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084432:	4291      	cmp	r1, r2
 8084434:	f803 4f01 	strb.w	r4, [r3, #1]!
 8084438:	d1f9      	bne.n	808442e <memcpy+0xe>
 808443a:	bd10      	pop	{r4, pc}

0808443c <memset>:
 808443c:	4603      	mov	r3, r0
 808443e:	4402      	add	r2, r0
 8084440:	4293      	cmp	r3, r2
 8084442:	d100      	bne.n	8084446 <memset+0xa>
 8084444:	4770      	bx	lr
 8084446:	f803 1b01 	strb.w	r1, [r3], #1
 808444a:	e7f9      	b.n	8084440 <memset+0x4>

0808444c <srand>:
 808444c:	b538      	push	{r3, r4, r5, lr}
 808444e:	4b10      	ldr	r3, [pc, #64]	; (8084490 <srand+0x44>)
 8084450:	4604      	mov	r4, r0
 8084452:	681d      	ldr	r5, [r3, #0]
 8084454:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8084456:	b9b3      	cbnz	r3, 8084486 <srand+0x3a>
 8084458:	2018      	movs	r0, #24
 808445a:	f7fe f945 	bl	80826e8 <malloc>
 808445e:	4602      	mov	r2, r0
 8084460:	63a8      	str	r0, [r5, #56]	; 0x38
 8084462:	b920      	cbnz	r0, 808446e <srand+0x22>
 8084464:	2142      	movs	r1, #66	; 0x42
 8084466:	4b0b      	ldr	r3, [pc, #44]	; (8084494 <srand+0x48>)
 8084468:	480b      	ldr	r0, [pc, #44]	; (8084498 <srand+0x4c>)
 808446a:	f7fe f955 	bl	8082718 <__assert_func>
 808446e:	490b      	ldr	r1, [pc, #44]	; (808449c <srand+0x50>)
 8084470:	4b0b      	ldr	r3, [pc, #44]	; (80844a0 <srand+0x54>)
 8084472:	e9c0 1300 	strd	r1, r3, [r0]
 8084476:	4b0b      	ldr	r3, [pc, #44]	; (80844a4 <srand+0x58>)
 8084478:	2100      	movs	r1, #0
 808447a:	6083      	str	r3, [r0, #8]
 808447c:	230b      	movs	r3, #11
 808447e:	8183      	strh	r3, [r0, #12]
 8084480:	2001      	movs	r0, #1
 8084482:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8084486:	2200      	movs	r2, #0
 8084488:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808448a:	611c      	str	r4, [r3, #16]
 808448c:	615a      	str	r2, [r3, #20]
 808448e:	bd38      	pop	{r3, r4, r5, pc}
 8084490:	20000018 	.word	0x20000018
 8084494:	08084819 	.word	0x08084819
 8084498:	08084830 	.word	0x08084830
 808449c:	abcd330e 	.word	0xabcd330e
 80844a0:	e66d1234 	.word	0xe66d1234
 80844a4:	0005deec 	.word	0x0005deec

080844a8 <strlen>:
 80844a8:	4603      	mov	r3, r0
 80844aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80844ae:	2a00      	cmp	r2, #0
 80844b0:	d1fb      	bne.n	80844aa <strlen+0x2>
 80844b2:	1a18      	subs	r0, r3, r0
 80844b4:	3801      	subs	r0, #1
 80844b6:	4770      	bx	lr

080844b8 <__register_exitproc>:
 80844b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80844bc:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 808456c <__register_exitproc+0xb4>
 80844c0:	4606      	mov	r6, r0
 80844c2:	f8d8 0000 	ldr.w	r0, [r8]
 80844c6:	461f      	mov	r7, r3
 80844c8:	460d      	mov	r5, r1
 80844ca:	4691      	mov	r9, r2
 80844cc:	f000 f858 	bl	8084580 <__retarget_lock_acquire_recursive>
 80844d0:	4b27      	ldr	r3, [pc, #156]	; (8084570 <__register_exitproc+0xb8>)
 80844d2:	681c      	ldr	r4, [r3, #0]
 80844d4:	b934      	cbnz	r4, 80844e4 <__register_exitproc+0x2c>
 80844d6:	4c27      	ldr	r4, [pc, #156]	; (8084574 <__register_exitproc+0xbc>)
 80844d8:	601c      	str	r4, [r3, #0]
 80844da:	4b27      	ldr	r3, [pc, #156]	; (8084578 <__register_exitproc+0xc0>)
 80844dc:	b113      	cbz	r3, 80844e4 <__register_exitproc+0x2c>
 80844de:	681b      	ldr	r3, [r3, #0]
 80844e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80844e4:	6863      	ldr	r3, [r4, #4]
 80844e6:	2b1f      	cmp	r3, #31
 80844e8:	dd07      	ble.n	80844fa <__register_exitproc+0x42>
 80844ea:	f8d8 0000 	ldr.w	r0, [r8]
 80844ee:	f000 f849 	bl	8084584 <__retarget_lock_release_recursive>
 80844f2:	f04f 30ff 	mov.w	r0, #4294967295
 80844f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80844fa:	b35e      	cbz	r6, 8084554 <__register_exitproc+0x9c>
 80844fc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8084500:	b988      	cbnz	r0, 8084526 <__register_exitproc+0x6e>
 8084502:	4b1e      	ldr	r3, [pc, #120]	; (808457c <__register_exitproc+0xc4>)
 8084504:	b923      	cbnz	r3, 8084510 <__register_exitproc+0x58>
 8084506:	f8d8 0000 	ldr.w	r0, [r8]
 808450a:	f000 f83a 	bl	8084582 <__retarget_lock_release>
 808450e:	e7f0      	b.n	80844f2 <__register_exitproc+0x3a>
 8084510:	f44f 7084 	mov.w	r0, #264	; 0x108
 8084514:	f7fe f8e8 	bl	80826e8 <malloc>
 8084518:	2800      	cmp	r0, #0
 808451a:	d0f4      	beq.n	8084506 <__register_exitproc+0x4e>
 808451c:	2300      	movs	r3, #0
 808451e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8084522:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8084526:	2201      	movs	r2, #1
 8084528:	6863      	ldr	r3, [r4, #4]
 808452a:	2e02      	cmp	r6, #2
 808452c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8084530:	fa02 f203 	lsl.w	r2, r2, r3
 8084534:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8084538:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 808453c:	ea43 0302 	orr.w	r3, r3, r2
 8084540:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8084544:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8084548:	bf02      	ittt	eq
 808454a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 808454e:	4313      	orreq	r3, r2
 8084550:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8084554:	6863      	ldr	r3, [r4, #4]
 8084556:	f8d8 0000 	ldr.w	r0, [r8]
 808455a:	1c5a      	adds	r2, r3, #1
 808455c:	3302      	adds	r3, #2
 808455e:	6062      	str	r2, [r4, #4]
 8084560:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8084564:	f000 f80e 	bl	8084584 <__retarget_lock_release_recursive>
 8084568:	2000      	movs	r0, #0
 808456a:	e7c4      	b.n	80844f6 <__register_exitproc+0x3e>
 808456c:	2000007c 	.word	0x2000007c
 8084570:	20000660 	.word	0x20000660
 8084574:	200005d4 	.word	0x200005d4
 8084578:	00000000 	.word	0x00000000
 808457c:	080826e9 	.word	0x080826e9

08084580 <__retarget_lock_acquire_recursive>:
 8084580:	4770      	bx	lr

08084582 <__retarget_lock_release>:
 8084582:	4770      	bx	lr

08084584 <__retarget_lock_release_recursive>:
 8084584:	4770      	bx	lr

08084586 <link_code_end>:
	...

08084588 <dynalib_user>:
 8084588:	001d 0808 005d 0808 0085 0808 0089 0808     ....]...........
 8084598:	0000 0000 7271 7473 0075 0000 0000 0000     ....qrstu.......
	...
 80845b8:	0000 bf80 0000 0000 cccd bf4c 0000 0000     ..........L.....
 80845c8:	0000 0000 cccd be4c 0000 bf00 0000 0000     ......L.........
 80845d8:	0000 bf80 0000 0000 0000 0000 0000 0000     ................
	...
 80845f4:	cccd 3dcc 3333 3f33 0000 0000 cccd bf4c     ...=333?......L.
 8084604:	cccd bdcc 0000 0000 0000 0000 0000 0000     ................
	...
 8084624:	0100 0402 1008 0000 0000 0000 0000 0000     ................

08084634 <_ZL14MUX_BY_CHANNEL>:
 8084634:	4000 5000 6000 7000                         .@.P.`.p

0808463c <_ZL11daysInMonth>:
 808463c:	1c1f 1e1f 1e1f 1f1f 1f1e 301e 3a38 3131     ...........08:11
 808464c:	343a 0038 7541 2067 3332 3220 3230 0034     :48.Aug 23 2024.
 808465c:	6f43 6c75 2064 6f6e 2074 6966 646e 6120     Could not find a
 808466c:	7620 6c61 6469 4220 454d 3836 2030 6573      valid BME680 se
 808467c:	736e 726f 202c 6863 6365 206b 6977 6972     nsor, check wiri
 808468c:	676e 0021 3025 7534 252d 3230 2d75 3025     ng!.%04u-%02u-%0
 808469c:	7532 2554 3230 3a75 3025 7532 253a 3230     2uT%02u:%02u:%02
 80846ac:	0075 6146 6c69 6465 7420 206f 6570 6672     u.Failed to perf
 80846bc:	726f 206d 6572 6461 6e69 2067 283a 2c00     orm reading :(.,
	...

080846cd <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80846cd:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
 80846dd:	766f 0066 002e 7061 0070 5925 252d 2d6d     ovf...app.%Y-%m-
 80846ed:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
 80846fd:	7463 6d69 0065                               ctime..

08084704 <_ZTV9IPAddress>:
	...
 808470c:	2cf7 0808 2cf5 0808 2d29 0808               .,...,..)-..

08084718 <_ZTV9USBSerial>:
	...
 8084720:	2d9b 0808 2e01 0808 2dd9 0808 28d5 0808     .-.......-...(..
 8084730:	2dcb 0808 2d9d 0808 2dad 0808 2dfb 0808     .-...-...-...-..
 8084740:	2dbd 0808 2d95 0808                         .-...-..

08084748 <_ZTVN5spark13CellularClassE>:
	...
 8084750:	2fc3 0808 2fb9 0808 2faf 0808 2f29 0808     ./.../.../..)/..
 8084760:	2fa3 0808 2f97 0808 31cd 0808 31d5 0808     ./.../...1...1..
 8084770:	2f8b 0808 2f83 0808 2f79 0808 2f6f 0808     ./.../..y/..o/..
 8084780:	2f33 0808                                   3/..

08084784 <_ZTV11USARTSerial>:
	...
 808478c:	2ffd 0808 3065 0808 3041 0808 28d5 0808     ./..e0..A0...(..
 808479c:	3011 0808 302d 0808 301f 0808 303b 0808     .0..-0...0..;0..
 80847ac:	2fff 0808 3003 0808                         ./...0..

080847b4 <_ZTV7TwoWire>:
	...
 80847bc:	309d 0808 30e7 0808 30bf 0808 309f 0808     .0...0...0...0..
 80847cc:	30c7 0808 30cf 0808 30d7 0808 30df 0808     .0...0...0...0..

080847dc <_ZTVN5spark12NetworkClassE>:
	...
 80847e4:	318d 0808 3197 0808 31a1 0808 31ab 0808     .1...1...1...1..
 80847f4:	31b5 0808 31c1 0808 31cd 0808 31d5 0808     .1...1...1...1..
 8084804:	31dd 0808 31e9 0808 31f1 0808 31fb 0808     .1...1...1...1..
 8084814:	3205 0808                                   .2..

08084818 <_ZSt7nothrow>:
 8084818:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 8084828:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 8084838:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 8084848:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 8084858:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 8084868:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 8084878:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 8084888:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 8084898:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 80848a8:	646e 632e                                    nd.c.

080848ad <link_const_variable_data_end>:
 80848ad:	00          	.byte	0x00
	...

080848b0 <link_constructors_location>:
 80848b0:	08081bbd 	.word	0x08081bbd
 80848b4:	080828b1 	.word	0x080828b1
 80848b8:	08082b45 	.word	0x08082b45
 80848bc:	08082b55 	.word	0x08082b55
 80848c0:	08082b71 	.word	0x08082b71
 80848c4:	08082fcd 	.word	0x08082fcd
 80848c8:	0808324d 	.word	0x0808324d
 80848cc:	080833d5 	.word	0x080833d5
