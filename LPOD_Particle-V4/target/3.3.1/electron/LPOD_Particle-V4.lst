
c:/Users/percy/Documents/Particle/LPOD_Particle-V4/target/3.3.1/electron/LPOD_Particle-V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006c14  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08086c30  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000009c  20000000  08086c34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000ac8  2000009c  2000009c  0004009c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08086cd0  08086cd0  00036cd0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08086cf8  08086cf8  00036cf8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0013a865  00000000  00000000  00036cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001b53f  00000000  00000000  00171561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00028b83  00000000  00000000  0018caa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002610  00000000  00000000  001b5623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000066d8  00000000  00000000  001b7c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038fca  00000000  00000000  001be30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00051559  00000000  00000000  001f72d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000c4dab  00000000  00000000  0024882e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00006ab4  00000000  00000000  0030d5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f006 fb15 	bl	808665c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f006 fb1d 	bl	8086678 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000000 	.word	0x20000000
 8080048:	08086c34 	.word	0x08086c34
 808004c:	2000009c 	.word	0x2000009c
 8080050:	2000009c 	.word	0x2000009c
 8080054:	20000b61 	.word	0x20000b61
 8080058:	20000b61 	.word	0x20000b61

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f004 fc71 	bl	8084944 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080062:	2500      	movs	r5, #0
 8080064:	4e05      	ldr	r6, [pc, #20]	; (808007c <module_user_init+0x20>)
 8080066:	4c06      	ldr	r4, [pc, #24]	; (8080080 <module_user_init+0x24>)
 8080068:	1ba4      	subs	r4, r4, r6
 808006a:	08a4      	lsrs	r4, r4, #2
 808006c:	42ac      	cmp	r4, r5
 808006e:	d100      	bne.n	8080072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080072:	f856 3b04 	ldr.w	r3, [r6], #4
 8080076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f7      	b.n	808006c <module_user_init+0x10>
 808007c:	08086c0c 	.word	0x08086c0c
 8080080:	08086c30 	.word	0x08086c30

08080084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080084:	f001 bf62 	b.w	8081f4c <setup>

08080088 <module_user_loop>:
}

void module_user_loop() {
 8080088:	b508      	push	{r3, lr}
    loop();
 808008a:	f002 f815 	bl	80820b8 <loop>
    _post_loop();
}
 808008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 8080092:	f004 bc0f 	b.w	80848b4 <_post_loop>

08080096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 8080096:	f004 b8c7 	b.w	8084228 <malloc>

0808009a <_Znaj>:
 808009a:	f004 b8c5 	b.w	8084228 <malloc>

0808009e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 808009e:	f004 b8cb 	b.w	8084238 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr
	...

080800b4 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80800b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80800b6:	460c      	mov	r4, r1
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80800b8:	f006 f856 	bl	8086168 <__aeabi_ui2f>
 80800bc:	4606      	mov	r6, r0
 80800be:	8be0      	ldrh	r0, [r4, #30]
 80800c0:	f006 f852 	bl	8086168 <__aeabi_ui2f>

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80800c4:	f04f 515c 	mov.w	r1, #922746880	; 0x37000000
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80800c8:	4605      	mov	r5, r0
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80800ca:	4630      	mov	r0, r6
 80800cc:	f006 f8a4 	bl	8086218 <__aeabi_fmul>
 80800d0:	f04f 5164 	mov.w	r1, #956301312	; 0x39000000
 80800d4:	4607      	mov	r7, r0
 80800d6:	4628      	mov	r0, r5
 80800d8:	f006 f89e 	bl	8086218 <__aeabi_fmul>
 80800dc:	4601      	mov	r1, r0
 80800de:	4638      	mov	r0, r7
 80800e0:	f005 ff90 	bl	8086004 <__aeabi_fsub>
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80800e4:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80800e8:	4607      	mov	r7, r0
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80800ea:	4630      	mov	r0, r6
 80800ec:	f006 f894 	bl	8086218 <__aeabi_fmul>
 80800f0:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80800f4:	4606      	mov	r6, r0
 80800f6:	4628      	mov	r0, r5
 80800f8:	f006 f88e 	bl	8086218 <__aeabi_fmul>
 80800fc:	4601      	mov	r1, r0
 80800fe:	4630      	mov	r0, r6
 8080100:	f005 ff80 	bl	8086004 <__aeabi_fsub>
 8080104:	4605      	mov	r5, r0
 8080106:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 808010a:	f006 f831 	bl	8086170 <__aeabi_i2f>
 808010e:	4601      	mov	r1, r0
 8080110:	4628      	mov	r0, r5
 8080112:	f006 f881 	bl	8086218 <__aeabi_fmul>
 8080116:	4605      	mov	r5, r0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8080118:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
 808011c:	f006 f828 	bl	8086170 <__aeabi_i2f>
 8080120:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8080124:	f006 f878 	bl	8086218 <__aeabi_fmul>
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8080128:	4639      	mov	r1, r7
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 808012a:	4606      	mov	r6, r0
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 808012c:	4638      	mov	r0, r7
 808012e:	f006 f873 	bl	8086218 <__aeabi_fmul>
 8080132:	4601      	mov	r1, r0
    var2 =
 8080134:	4630      	mov	r0, r6
 8080136:	f006 f86f 	bl	8086218 <__aeabi_fmul>
 808013a:	4601      	mov	r1, r0

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 808013c:	4628      	mov	r0, r5
 808013e:	f005 ff63 	bl	8086008 <__addsf3>

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 8080142:	4902      	ldr	r1, [pc, #8]	; (808014c <calc_temperature+0x98>)
    dev->calib.t_fine = (var1 + var2);
 8080144:	63a0      	str	r0, [r4, #56]	; 0x38
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 8080146:	f006 f91b 	bl	8086380 <__aeabi_fdiv>

    return calc_temp;
}
 808014a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808014c:	45a00000 	.word	0x45a00000

08080150 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 8080150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080154:	460c      	mov	r4, r1
 8080156:	4680      	mov	r8, r0
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8080158:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 808015c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808015e:	f006 f85b 	bl	8086218 <__aeabi_fmul>
 8080162:	4969      	ldr	r1, [pc, #420]	; (8080308 <calc_pressure+0x1b8>)
 8080164:	f005 ff4e 	bl	8086004 <__aeabi_fsub>
 8080168:	4605      	mov	r5, r0
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 808016a:	f994 0028 	ldrsb.w	r0, [r4, #40]	; 0x28
 808016e:	f005 ffff 	bl	8086170 <__aeabi_i2f>
 8080172:	4629      	mov	r1, r5
 8080174:	f006 f850 	bl	8086218 <__aeabi_fmul>
 8080178:	4629      	mov	r1, r5
 808017a:	f006 f84d 	bl	8086218 <__aeabi_fmul>
 808017e:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8080182:	f006 f849 	bl	8086218 <__aeabi_fmul>
 8080186:	4606      	mov	r6, r0
 8080188:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 808018c:	f005 fff0 	bl	8086170 <__aeabi_i2f>
 8080190:	4629      	mov	r1, r5
 8080192:	f006 f841 	bl	8086218 <__aeabi_fmul>
 8080196:	4601      	mov	r1, r0
 8080198:	4630      	mov	r0, r6
 808019a:	f005 ff35 	bl	8086008 <__addsf3>
 808019e:	f04f 5158 	mov.w	r1, #905969664	; 0x36000000
 80801a2:	f006 f839 	bl	8086218 <__aeabi_fmul>
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 80801a6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80801aa:	f006 f835 	bl	8086218 <__aeabi_fmul>
 80801ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80801b2:	f005 ff29 	bl	8086008 <__addsf3>
 80801b6:	4606      	mov	r6, r0
 80801b8:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80801ba:	f005 ffd5 	bl	8086168 <__aeabi_ui2f>
 80801be:	4631      	mov	r1, r6
 80801c0:	f006 f82a 	bl	8086218 <__aeabi_fmul>
 80801c4:	4606      	mov	r6, r0
    calc_pres = (1048576.0f - ((float)pres_adc));

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 80801c6:	f006 f9ed 	bl	80865a4 <__aeabi_f2iz>
 80801ca:	2800      	cmp	r0, #0
 80801cc:	f000 8099 	beq.w	8080302 <calc_pressure+0x1b2>
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 80801d0:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
 80801d4:	f005 ffcc 	bl	8086170 <__aeabi_i2f>
 80801d8:	f04f 515c 	mov.w	r1, #922746880	; 0x37000000
 80801dc:	f006 f81c 	bl	8086218 <__aeabi_fmul>
 80801e0:	4629      	mov	r1, r5
 80801e2:	4607      	mov	r7, r0
 80801e4:	4628      	mov	r0, r5
 80801e6:	f006 f817 	bl	8086218 <__aeabi_fmul>
 80801ea:	4601      	mov	r1, r0
 80801ec:	4638      	mov	r0, r7
 80801ee:	f006 f813 	bl	8086218 <__aeabi_fmul>
 80801f2:	4607      	mov	r7, r0
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 80801f4:	f9b4 002c 	ldrsh.w	r0, [r4, #44]	; 0x2c
 80801f8:	f005 ffba 	bl	8086170 <__aeabi_i2f>
 80801fc:	4629      	mov	r1, r5
 80801fe:	f006 f80b 	bl	8086218 <__aeabi_fmul>
 8080202:	4601      	mov	r1, r0
 8080204:	f005 ff00 	bl	8086008 <__addsf3>
 8080208:	4639      	mov	r1, r7
 808020a:	f005 fefd 	bl	8086008 <__addsf3>
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 808020e:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8080212:	f006 f801 	bl	8086218 <__aeabi_fmul>
 8080216:	4607      	mov	r7, r0
    calc_pres = (1048576.0f - ((float)pres_adc));
 8080218:	4640      	mov	r0, r8
 808021a:	f005 ffa5 	bl	8086168 <__aeabi_ui2f>
 808021e:	4601      	mov	r1, r0
 8080220:	f04f 4093 	mov.w	r0, #1233125376	; 0x49800000
 8080224:	f005 feee 	bl	8086004 <__aeabi_fsub>
 8080228:	4605      	mov	r5, r0
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 808022a:	f9b4 002a 	ldrsh.w	r0, [r4, #42]	; 0x2a
 808022e:	f005 ff9f 	bl	8086170 <__aeabi_i2f>
 8080232:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8080236:	f005 ffef 	bl	8086218 <__aeabi_fmul>
 808023a:	4639      	mov	r1, r7
 808023c:	f005 fee4 	bl	8086008 <__addsf3>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8080240:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 8080244:	f005 ffe8 	bl	8086218 <__aeabi_fmul>
 8080248:	4601      	mov	r1, r0
 808024a:	4628      	mov	r0, r5
 808024c:	f005 feda 	bl	8086004 <__aeabi_fsub>
 8080250:	492e      	ldr	r1, [pc, #184]	; (808030c <calc_pressure+0x1bc>)
 8080252:	f005 ffe1 	bl	8086218 <__aeabi_fmul>
 8080256:	4631      	mov	r1, r6
 8080258:	f006 f892 	bl	8086380 <__aeabi_fdiv>
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 808025c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8080260:	4605      	mov	r5, r0
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8080262:	f005 ffd9 	bl	8086218 <__aeabi_fmul>
 8080266:	4606      	mov	r6, r0
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8080268:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
 808026c:	f005 ff80 	bl	8086170 <__aeabi_i2f>
 8080270:	4629      	mov	r1, r5
 8080272:	f005 ffd1 	bl	8086218 <__aeabi_fmul>
 8080276:	4629      	mov	r1, r5
 8080278:	f005 ffce 	bl	8086218 <__aeabi_fmul>
 808027c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8080280:	f005 ffca 	bl	8086218 <__aeabi_fmul>
 8080284:	4607      	mov	r7, r0
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 8080286:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 808028a:	f005 ff71 	bl	8086170 <__aeabi_i2f>
 808028e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8080292:	f005 ffc1 	bl	8086218 <__aeabi_fmul>
 8080296:	4629      	mov	r1, r5
 8080298:	f005 ffbe 	bl	8086218 <__aeabi_fmul>
 808029c:	4601      	mov	r1, r0
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 808029e:	4638      	mov	r0, r7
 80802a0:	f005 feb2 	bl	8086008 <__addsf3>
 80802a4:	4607      	mov	r7, r0
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 80802a6:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80802aa:	f005 ff61 	bl	8086170 <__aeabi_i2f>
 80802ae:	f04f 515c 	mov.w	r1, #922746880	; 0x37000000
 80802b2:	f005 ffb1 	bl	8086218 <__aeabi_fmul>
 80802b6:	4631      	mov	r1, r6
 80802b8:	4680      	mov	r8, r0
 80802ba:	4630      	mov	r0, r6
 80802bc:	f005 ffac 	bl	8086218 <__aeabi_fmul>
 80802c0:	4631      	mov	r1, r6
 80802c2:	f005 ffa9 	bl	8086218 <__aeabi_fmul>
 80802c6:	4601      	mov	r1, r0
 80802c8:	4640      	mov	r0, r8
 80802ca:	f005 ffa5 	bl	8086218 <__aeabi_fmul>
 80802ce:	4601      	mov	r1, r0
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 80802d0:	4638      	mov	r0, r7
 80802d2:	f005 fe99 	bl	8086008 <__addsf3>
 80802d6:	4606      	mov	r6, r0
 80802d8:	f994 002f 	ldrsb.w	r0, [r4, #47]	; 0x2f
 80802dc:	f005 ff48 	bl	8086170 <__aeabi_i2f>
 80802e0:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80802e4:	f005 ff98 	bl	8086218 <__aeabi_fmul>
 80802e8:	4601      	mov	r1, r0
 80802ea:	4630      	mov	r0, r6
 80802ec:	f005 fe8c 	bl	8086008 <__addsf3>
 80802f0:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80802f4:	f005 ff90 	bl	8086218 <__aeabi_fmul>
 80802f8:	4629      	mov	r1, r5
 80802fa:	f005 fe85 	bl	8086008 <__addsf3>
    {
        calc_pres = 0;
    }

    return calc_pres;
}
 80802fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        calc_pres = 0;
 8080302:	2000      	movs	r0, #0
    return calc_pres;
 8080304:	e7fb      	b.n	80802fe <calc_pressure+0x1ae>
 8080306:	bf00      	nop
 8080308:	477a0000 	.word	0x477a0000
 808030c:	45c35000 	.word	0x45c35000

08080310 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8080310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080314:	460c      	mov	r4, r1
 8080316:	4607      	mov	r7, r0
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8080318:	4943      	ldr	r1, [pc, #268]	; (8080428 <calc_humidity+0x118>)
 808031a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808031c:	f006 f830 	bl	8086380 <__aeabi_fdiv>
 8080320:	4605      	mov	r5, r0
    var1 = (float)((float)hum_adc) -
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8080322:	f994 0015 	ldrsb.w	r0, [r4, #21]
 8080326:	f005 ff23 	bl	8086170 <__aeabi_i2f>
 808032a:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 808032e:	f005 ff73 	bl	8086218 <__aeabi_fmul>
 8080332:	4629      	mov	r1, r5
 8080334:	f005 ff70 	bl	8086218 <__aeabi_fmul>
 8080338:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 808033c:	f005 fe64 	bl	8086008 <__addsf3>
 8080340:	4606      	mov	r6, r0
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8080342:	f994 0016 	ldrsb.w	r0, [r4, #22]
 8080346:	f005 ff13 	bl	8086170 <__aeabi_i2f>
 808034a:	f04f 5156 	mov.w	r1, #897581056	; 0x35800000
 808034e:	f005 ff63 	bl	8086218 <__aeabi_fmul>
 8080352:	4629      	mov	r1, r5
 8080354:	f005 ff60 	bl	8086218 <__aeabi_fmul>
 8080358:	4629      	mov	r1, r5
 808035a:	f005 ff5d 	bl	8086218 <__aeabi_fmul>
 808035e:	4601      	mov	r1, r0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8080360:	4630      	mov	r0, r6
 8080362:	f005 fe51 	bl	8086008 <__addsf3>
 8080366:	4606      	mov	r6, r0
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8080368:	8a60      	ldrh	r0, [r4, #18]
 808036a:	f005 fefd 	bl	8086168 <__aeabi_ui2f>
 808036e:	f04f 515a 	mov.w	r1, #914358272	; 0x36800000
 8080372:	f005 ff51 	bl	8086218 <__aeabi_fmul>
 8080376:	4601      	mov	r1, r0
 8080378:	4630      	mov	r0, r6
 808037a:	f005 ff4d 	bl	8086218 <__aeabi_fmul>
 808037e:	4606      	mov	r6, r0
    var1 = (float)((float)hum_adc) -
 8080380:	4638      	mov	r0, r7
 8080382:	f005 fef1 	bl	8086168 <__aeabi_ui2f>
 8080386:	4607      	mov	r7, r0
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8080388:	f994 0014 	ldrsb.w	r0, [r4, #20]
 808038c:	f005 fef0 	bl	8086170 <__aeabi_i2f>
 8080390:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8080394:	f005 ff40 	bl	8086218 <__aeabi_fmul>
 8080398:	4629      	mov	r1, r5
 808039a:	f005 ff3d 	bl	8086218 <__aeabi_fmul>
 808039e:	4680      	mov	r8, r0
 80803a0:	8a20      	ldrh	r0, [r4, #16]
 80803a2:	f005 fee1 	bl	8086168 <__aeabi_ui2f>
 80803a6:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80803aa:	f005 ff35 	bl	8086218 <__aeabi_fmul>
 80803ae:	4601      	mov	r1, r0
 80803b0:	4640      	mov	r0, r8
 80803b2:	f005 fe29 	bl	8086008 <__addsf3>
 80803b6:	4601      	mov	r1, r0
    var1 = (float)((float)hum_adc) -
 80803b8:	4638      	mov	r0, r7
 80803ba:	f005 fe23 	bl	8086004 <__aeabi_fsub>
 80803be:	4601      	mov	r1, r0
    var2 = var1 *
 80803c0:	4630      	mov	r0, r6
 80803c2:	f005 ff29 	bl	8086218 <__aeabi_fmul>
 80803c6:	4606      	mov	r6, r0
    var3 = (float)dev->calib.par_h6 / 16384.0f;
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 80803c8:	f994 0018 	ldrsb.w	r0, [r4, #24]
 80803cc:	f005 fed0 	bl	8086170 <__aeabi_i2f>
 80803d0:	f04f 5154 	mov.w	r1, #889192448	; 0x35000000
 80803d4:	f005 ff20 	bl	8086218 <__aeabi_fmul>
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 80803d8:	4629      	mov	r1, r5
 80803da:	f005 ff1d 	bl	8086218 <__aeabi_fmul>
 80803de:	4605      	mov	r5, r0
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 80803e0:	7de0      	ldrb	r0, [r4, #23]
 80803e2:	f005 fec1 	bl	8086168 <__aeabi_ui2f>
 80803e6:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 80803ea:	f005 ff15 	bl	8086218 <__aeabi_fmul>
 80803ee:	4601      	mov	r1, r0
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 80803f0:	4628      	mov	r0, r5
 80803f2:	f005 fe09 	bl	8086008 <__addsf3>
 80803f6:	4631      	mov	r1, r6
 80803f8:	f005 ff0e 	bl	8086218 <__aeabi_fmul>
 80803fc:	4631      	mov	r1, r6
 80803fe:	f005 ff0b 	bl	8086218 <__aeabi_fmul>
 8080402:	4631      	mov	r1, r6
 8080404:	f005 fe00 	bl	8086008 <__addsf3>
    if (calc_hum > 100.0f)
 8080408:	4908      	ldr	r1, [pc, #32]	; (808042c <calc_humidity+0x11c>)
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 808040a:	4604      	mov	r4, r0
    if (calc_hum > 100.0f)
 808040c:	f006 f8c0 	bl	8086590 <__aeabi_fcmpgt>
 8080410:	b940      	cbnz	r0, 8080424 <calc_humidity+0x114>
    {
        calc_hum = 100.0f;
    }
    else if (calc_hum < 0.0f)
 8080412:	2100      	movs	r1, #0
 8080414:	4620      	mov	r0, r4
 8080416:	f006 f89d 	bl	8086554 <__aeabi_fcmplt>
 808041a:	b100      	cbz	r0, 808041e <calc_humidity+0x10e>
    {
        calc_hum = 0.0f;
 808041c:	2400      	movs	r4, #0
    }

    return calc_hum;
}
 808041e:	4620      	mov	r0, r4
 8080420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        calc_hum = 100.0f;
 8080424:	4c01      	ldr	r4, [pc, #4]	; (808042c <calc_humidity+0x11c>)
    return calc_hum;
 8080426:	e7fa      	b.n	808041e <calc_humidity+0x10e>
 8080428:	45a00000 	.word	0x45a00000
 808042c:	42c80000 	.word	0x42c80000

08080430 <calc_res_heat>:
    return calc_gas_res;
}

/* This internal API is used to calculate the heater resistance value */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8080430:	b570      	push	{r4, r5, r6, lr}
 8080432:	4606      	mov	r6, r0
    {
        temp = 400;
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8080434:	f9b1 001a 	ldrsh.w	r0, [r1, #26]
{
 8080438:	460c      	mov	r4, r1
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 808043a:	f005 fe99 	bl	8086170 <__aeabi_i2f>
 808043e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8080442:	f005 fee9 	bl	8086218 <__aeabi_fmul>
 8080446:	4937      	ldr	r1, [pc, #220]	; (8080524 <calc_res_heat+0xf4>)
 8080448:	f005 fee6 	bl	8086218 <__aeabi_fmul>
 808044c:	4936      	ldr	r1, [pc, #216]	; (8080528 <calc_res_heat+0xf8>)
 808044e:	f005 fddb 	bl	8086008 <__addsf3>
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8080452:	f5b6 7fc8 	cmp.w	r6, #400	; 0x190
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8080456:	4605      	mov	r5, r0
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8080458:	4630      	mov	r0, r6
 808045a:	bf28      	it	cs
 808045c:	f44f 70c8 	movcs.w	r0, #400	; 0x190
 8080460:	f005 fe82 	bl	8086168 <__aeabi_ui2f>
 8080464:	4601      	mov	r1, r0
 8080466:	4628      	mov	r0, r5
 8080468:	f005 fed6 	bl	8086218 <__aeabi_fmul>
 808046c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8080470:	f005 fdca 	bl	8086008 <__addsf3>
 8080474:	4605      	mov	r5, r0
    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8080476:	f994 0019 	ldrsb.w	r0, [r4, #25]
 808047a:	f005 fe79 	bl	8086170 <__aeabi_i2f>
 808047e:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8080482:	f005 fec9 	bl	8086218 <__aeabi_fmul>
 8080486:	4929      	ldr	r1, [pc, #164]	; (808052c <calc_res_heat+0xfc>)
 8080488:	f005 fdbe 	bl	8086008 <__addsf3>
 808048c:	4601      	mov	r1, r0
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 808048e:	4628      	mov	r0, r5
 8080490:	f005 fec2 	bl	8086218 <__aeabi_fmul>
 8080494:	4605      	mov	r5, r0
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8080496:	f994 001c 	ldrsb.w	r0, [r4, #28]
 808049a:	f005 fe69 	bl	8086170 <__aeabi_i2f>
 808049e:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80804a2:	f005 feb9 	bl	8086218 <__aeabi_fmul>
 80804a6:	4606      	mov	r6, r0
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 80804a8:	f994 000e 	ldrsb.w	r0, [r4, #14]
 80804ac:	f005 fe60 	bl	8086170 <__aeabi_i2f>
 80804b0:	4601      	mov	r1, r0
 80804b2:	4630      	mov	r0, r6
 80804b4:	f005 feb0 	bl	8086218 <__aeabi_fmul>
 80804b8:	4601      	mov	r1, r0
 80804ba:	4628      	mov	r0, r5
 80804bc:	f005 fda4 	bl	8086008 <__addsf3>
 80804c0:	4605      	mov	r5, r0
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80804c2:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80804c6:	f005 fe4f 	bl	8086168 <__aeabi_ui2f>
 80804ca:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80804ce:	f005 fd9b 	bl	8086008 <__addsf3>
 80804d2:	4601      	mov	r1, r0
 80804d4:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 80804d8:	f005 ff52 	bl	8086380 <__aeabi_fdiv>
 80804dc:	4601      	mov	r1, r0
 80804de:	4628      	mov	r0, r5
 80804e0:	f005 fe9a 	bl	8086218 <__aeabi_fmul>
 80804e4:	4605      	mov	r5, r0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80804e6:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 80804ea:	f005 fe41 	bl	8086170 <__aeabi_i2f>
 80804ee:	4910      	ldr	r1, [pc, #64]	; (8080530 <calc_res_heat+0x100>)
 80804f0:	f005 fe92 	bl	8086218 <__aeabi_fmul>
 80804f4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80804f8:	f005 fd86 	bl	8086008 <__addsf3>
 80804fc:	4601      	mov	r1, r0
 80804fe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8080502:	f005 ff3d 	bl	8086380 <__aeabi_fdiv>
 8080506:	4601      	mov	r1, r0
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8080508:	4628      	mov	r0, r5
 808050a:	f005 fe85 	bl	8086218 <__aeabi_fmul>
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 808050e:	4909      	ldr	r1, [pc, #36]	; (8080534 <calc_res_heat+0x104>)
 8080510:	f005 fd78 	bl	8086004 <__aeabi_fsub>
        (uint8_t)(3.4f *
 8080514:	4908      	ldr	r1, [pc, #32]	; (8080538 <calc_res_heat+0x108>)
 8080516:	f005 fe7f 	bl	8086218 <__aeabi_fmul>
    res_heat =
 808051a:	f006 f869 	bl	80865f0 <__aeabi_f2uiz>
                   25));

    return res_heat;
}
 808051e:	b2c0      	uxtb	r0, r0
 8080520:	bd70      	pop	{r4, r5, r6, pc}
 8080522:	bf00      	nop
 8080524:	3a03126f 	.word	0x3a03126f
 8080528:	3b1a0275 	.word	0x3b1a0275
 808052c:	42440000 	.word	0x42440000
 8080530:	3b03126f 	.word	0x3b03126f
 8080534:	41c80000 	.word	0x41c80000
 8080538:	4059999a 	.word	0x4059999a

0808053c <null_ptr_check>:
/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
    int8_t rslt = BME68X_OK;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 808053c:	b148      	cbz	r0, 8080552 <null_ptr_check+0x16>
 808053e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8080540:	b13b      	cbz	r3, 8080552 <null_ptr_check+0x16>
 8080542:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8080544:	b12b      	cbz	r3, 8080552 <null_ptr_check+0x16>
 8080546:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8080548:	fab0 f080 	clz	r0, r0
 808054c:	0940      	lsrs	r0, r0, #5
 808054e:	4240      	negs	r0, r0
 8080550:	4770      	bx	lr
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8080552:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return rslt;
}
 8080556:	4770      	bx	lr

08080558 <boundary_check>:
{
 8080558:	b510      	push	{r4, lr}
 808055a:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 808055c:	4610      	mov	r0, r2
 808055e:	f7ff ffed 	bl	808053c <null_ptr_check>
    if ((value != NULL) && (rslt == BME68X_OK))
 8080562:	b950      	cbnz	r0, 808057a <boundary_check+0x22>
        if (*value > max)
 8080564:	7823      	ldrb	r3, [r4, #0]
 8080566:	428b      	cmp	r3, r1
 8080568:	d906      	bls.n	8080578 <boundary_check+0x20>
            *value = max;
 808056a:	7021      	strb	r1, [r4, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 808056c:	f892 304d 	ldrb.w	r3, [r2, #77]	; 0x4d
 8080570:	f043 0301 	orr.w	r3, r3, #1
 8080574:	f882 304d 	strb.w	r3, [r2, #77]	; 0x4d
}
 8080578:	bd10      	pop	{r4, pc}
        rslt = BME68X_E_NULL_PTR;
 808057a:	f04f 30ff 	mov.w	r0, #4294967295
 808057e:	e7fb      	b.n	8080578 <boundary_check+0x20>

08080580 <set_mem_page>:
{
 8080580:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8080582:	4602      	mov	r2, r0
    rslt = null_ptr_check(dev);
 8080584:	4608      	mov	r0, r1
 8080586:	f7ff ffd9 	bl	808053c <null_ptr_check>
{
 808058a:	460c      	mov	r4, r1
    if (rslt == BME68X_OK)
 808058c:	4605      	mov	r5, r0
 808058e:	bb40      	cbnz	r0, 80805e2 <set_mem_page+0x62>
            mem_page = BME68X_MEM_PAGE0;
 8080590:	f012 0f80 	tst.w	r2, #128	; 0x80
 8080594:	bf14      	ite	ne
 8080596:	2300      	movne	r3, #0
 8080598:	2310      	moveq	r3, #16
        if (mem_page != dev->mem_page)
 808059a:	7b4a      	ldrb	r2, [r1, #13]
 808059c:	429a      	cmp	r2, r3
 808059e:	d020      	beq.n	80805e2 <set_mem_page+0x62>
            dev->mem_page = mem_page;
 80805a0:	734b      	strb	r3, [r1, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80805a2:	6c0e      	ldr	r6, [r1, #64]	; 0x40
 80805a4:	684b      	ldr	r3, [r1, #4]
 80805a6:	2201      	movs	r2, #1
 80805a8:	20f3      	movs	r0, #243	; 0xf3
 80805aa:	f10d 0107 	add.w	r1, sp, #7
 80805ae:	47b0      	blx	r6
 80805b0:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
            if (dev->intf_rslt != 0)
 80805b4:	b998      	cbnz	r0, 80805de <set_mem_page+0x5e>
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80805b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80805ba:	7b63      	ldrb	r3, [r4, #13]
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80805bc:	f022 0210 	bic.w	r2, r2, #16
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80805c0:	f003 0310 	and.w	r3, r3, #16
 80805c4:	4313      	orrs	r3, r2
 80805c6:	f88d 3007 	strb.w	r3, [sp, #7]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80805ca:	2201      	movs	r2, #1
 80805cc:	2073      	movs	r0, #115	; 0x73
 80805ce:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80805d0:	6863      	ldr	r3, [r4, #4]
 80805d2:	f10d 0107 	add.w	r1, sp, #7
 80805d6:	47b0      	blx	r6
 80805d8:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 80805dc:	b108      	cbz	r0, 80805e2 <set_mem_page+0x62>
                    rslt = BME68X_E_COM_FAIL;
 80805de:	f06f 0501 	mvn.w	r5, #1
}
 80805e2:	4628      	mov	r0, r5
 80805e4:	b002      	add	sp, #8
 80805e6:	bd70      	pop	{r4, r5, r6, pc}

080805e8 <get_mem_page>:
{
 80805e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80805ea:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 80805ec:	f7ff ffa6 	bl	808053c <null_ptr_check>
    if (rslt == BME68X_OK)
 80805f0:	b970      	cbnz	r0, 8080610 <get_mem_page+0x28>
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80805f2:	2201      	movs	r2, #1
 80805f4:	20f3      	movs	r0, #243	; 0xf3
 80805f6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80805f8:	6863      	ldr	r3, [r4, #4]
 80805fa:	f10d 0107 	add.w	r1, sp, #7
 80805fe:	47a8      	blx	r5
 8080600:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 8080604:	b930      	cbnz	r0, 8080614 <get_mem_page+0x2c>
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8080606:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808060a:	f003 0310 	and.w	r3, r3, #16
 808060e:	7363      	strb	r3, [r4, #13]
}
 8080610:	b003      	add	sp, #12
 8080612:	bd30      	pop	{r4, r5, pc}
            rslt = BME68X_E_COM_FAIL;
 8080614:	f06f 0001 	mvn.w	r0, #1
    return rslt;
 8080618:	e7fa      	b.n	8080610 <get_mem_page+0x28>
	...

0808061c <calc_gas_resistance_low.isra.0>:
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
 808061c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    const float lookup_k1_range[16] = {
 8080620:	4c34      	ldr	r4, [pc, #208]	; (80806f4 <calc_gas_resistance_low.isra.0+0xd8>)
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
 8080622:	b0a0      	sub	sp, #128	; 0x80
    const float lookup_k1_range[16] = {
 8080624:	466d      	mov	r5, sp
 8080626:	4626      	mov	r6, r4
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
 8080628:	4684      	mov	ip, r0
 808062a:	460f      	mov	r7, r1
 808062c:	4690      	mov	r8, r2
    const float lookup_k1_range[16] = {
 808062e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8080632:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8080636:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8080638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808063a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    const float lookup_k2_range[16] = {
 808063e:	3440      	adds	r4, #64	; 0x40
    const float lookup_k1_range[16] = {
 8080640:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const float lookup_k2_range[16] = {
 8080644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8080646:	ad10      	add	r5, sp, #64	; 0x40
 8080648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808064a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808064c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808064e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8080650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8080652:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8080656:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    float gas_res_f = gas_res_adc;
 808065a:	4660      	mov	r0, ip
 808065c:	f005 fd84 	bl	8086168 <__aeabi_ui2f>
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8080660:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 8080664:	f005 fcce 	bl	8086004 <__aeabi_fsub>
 8080668:	4604      	mov	r4, r0
    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 808066a:	4640      	mov	r0, r8
 808066c:	f005 fd80 	bl	8086170 <__aeabi_i2f>
 8080670:	4921      	ldr	r1, [pc, #132]	; (80806f8 <calc_gas_resistance_low.isra.0+0xdc>)
 8080672:	f005 fdd1 	bl	8086218 <__aeabi_fmul>
 8080676:	4921      	ldr	r1, [pc, #132]	; (80806fc <calc_gas_resistance_low.isra.0+0xe0>)
 8080678:	f005 fcc6 	bl	8086008 <__addsf3>
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 808067c:	ab20      	add	r3, sp, #128	; 0x80
 808067e:	eb03 0687 	add.w	r6, r3, r7, lsl #2
    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8080682:	4605      	mov	r5, r0
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8080684:	491e      	ldr	r1, [pc, #120]	; (8080700 <calc_gas_resistance_low.isra.0+0xe4>)
 8080686:	f856 0c80 	ldr.w	r0, [r6, #-128]
 808068a:	f005 fe79 	bl	8086380 <__aeabi_fdiv>
 808068e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8080692:	f005 fcb9 	bl	8086008 <__addsf3>
 8080696:	4601      	mov	r1, r0
 8080698:	4628      	mov	r0, r5
 808069a:	f005 fdbd 	bl	8086218 <__aeabi_fmul>
 808069e:	4601      	mov	r1, r0
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 80806a0:	4620      	mov	r0, r4
 80806a2:	f005 fe6d 	bl	8086380 <__aeabi_fdiv>
 80806a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80806aa:	f005 fcad 	bl	8086008 <__addsf3>
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 80806ae:	4914      	ldr	r1, [pc, #80]	; (8080700 <calc_gas_resistance_low.isra.0+0xe4>)
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 80806b0:	4604      	mov	r4, r0
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 80806b2:	f856 0c40 	ldr.w	r0, [r6, #-64]
 80806b6:	f005 fe63 	bl	8086380 <__aeabi_fdiv>
 80806ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80806be:	f005 fca3 	bl	8086008 <__addsf3>
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 80806c2:	4910      	ldr	r1, [pc, #64]	; (8080704 <calc_gas_resistance_low.isra.0+0xe8>)
 80806c4:	f005 fda8 	bl	8086218 <__aeabi_fmul>
 80806c8:	4605      	mov	r5, r0
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 80806ca:	2001      	movs	r0, #1
 80806cc:	40b8      	lsls	r0, r7
 80806ce:	f005 fd4b 	bl	8086168 <__aeabi_ui2f>
 80806d2:	4601      	mov	r1, r0
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 80806d4:	4628      	mov	r0, r5
 80806d6:	f005 fd9f 	bl	8086218 <__aeabi_fmul>
 80806da:	4601      	mov	r1, r0
 80806dc:	4620      	mov	r0, r4
 80806de:	f005 fd9b 	bl	8086218 <__aeabi_fmul>
 80806e2:	4601      	mov	r1, r0
 80806e4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80806e8:	f005 fe4a 	bl	8086380 <__aeabi_fdiv>
}
 80806ec:	b020      	add	sp, #128	; 0x80
 80806ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80806f2:	bf00      	nop
 80806f4:	08086818 	.word	0x08086818
 80806f8:	40a00000 	.word	0x40a00000
 80806fc:	44a78000 	.word	0x44a78000
 8080700:	42c80000 	.word	0x42c80000
 8080704:	340637bd 	.word	0x340637bd

08080708 <bme68x_set_regs>:
{
 8080708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808070c:	461c      	mov	r4, r3
 808070e:	460d      	mov	r5, r1
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8080710:	2100      	movs	r1, #0
{
 8080712:	b087      	sub	sp, #28
 8080714:	4607      	mov	r7, r0
 8080716:	4616      	mov	r6, r2
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8080718:	a802      	add	r0, sp, #8
 808071a:	2210      	movs	r2, #16
 808071c:	9101      	str	r1, [sp, #4]
 808071e:	f005 ffab 	bl	8086678 <memset>
    rslt = null_ptr_check(dev);
 8080722:	4620      	mov	r0, r4
 8080724:	f7ff ff0a 	bl	808053c <null_ptr_check>
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8080728:	bb90      	cbnz	r0, 8080790 <bme68x_set_regs+0x88>
 808072a:	b38f      	cbz	r7, 8080790 <bme68x_set_regs+0x88>
 808072c:	b385      	cbz	r5, 8080790 <bme68x_set_regs+0x88>
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 808072e:	1e73      	subs	r3, r6, #1
 8080730:	2b09      	cmp	r3, #9
 8080732:	d830      	bhi.n	8080796 <bme68x_set_regs+0x8e>
 8080734:	3d01      	subs	r5, #1
 8080736:	f10d 0804 	add.w	r8, sp, #4
 808073a:	eb07 0906 	add.w	r9, r7, r6
            for (index = 0; index < len; index++)
 808073e:	454f      	cmp	r7, r9
 8080740:	d112      	bne.n	8080768 <bme68x_set_regs+0x60>
            if (rslt == BME68X_OK)
 8080742:	b970      	cbnz	r0, 8080762 <bme68x_set_regs+0x5a>
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8080744:	0072      	lsls	r2, r6, #1
 8080746:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8080748:	6863      	ldr	r3, [r4, #4]
 808074a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 808074e:	3a01      	subs	r2, #1
 8080750:	f10d 0105 	add.w	r1, sp, #5
 8080754:	47a8      	blx	r5
                    rslt = BME68X_E_COM_FAIL;
 8080756:	2800      	cmp	r0, #0
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8080758:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
                    rslt = BME68X_E_COM_FAIL;
 808075c:	bf18      	it	ne
 808075e:	f06f 0001 	mvnne.w	r0, #1
}
 8080762:	b007      	add	sp, #28
 8080764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if (dev->intf == BME68X_SPI_INTF)
 8080768:	7b22      	ldrb	r2, [r4, #12]
                    rslt = set_mem_page(reg_addr[index], dev);
 808076a:	783b      	ldrb	r3, [r7, #0]
                if (dev->intf == BME68X_SPI_INTF)
 808076c:	b932      	cbnz	r2, 808077c <bme68x_set_regs+0x74>
                    rslt = set_mem_page(reg_addr[index], dev);
 808076e:	4618      	mov	r0, r3
 8080770:	4621      	mov	r1, r4
 8080772:	f7ff ff05 	bl	8080580 <set_mem_page>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8080776:	783b      	ldrb	r3, [r7, #0]
 8080778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
                    tmp_buff[(2 * index)] = reg_addr[index];
 808077c:	f888 3000 	strb.w	r3, [r8]
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8080780:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8080784:	f108 0802 	add.w	r8, r8, #2
 8080788:	f808 3c01 	strb.w	r3, [r8, #-1]
            for (index = 0; index < len; index++)
 808078c:	3701      	adds	r7, #1
 808078e:	e7d6      	b.n	808073e <bme68x_set_regs+0x36>
        rslt = BME68X_E_NULL_PTR;
 8080790:	f04f 30ff 	mov.w	r0, #4294967295
 8080794:	e7e5      	b.n	8080762 <bme68x_set_regs+0x5a>
            rslt = BME68X_E_INVALID_LENGTH;
 8080796:	f06f 0003 	mvn.w	r0, #3
 808079a:	e7e2      	b.n	8080762 <bme68x_set_regs+0x5a>

0808079c <bme68x_get_regs>:
{
 808079c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80807a0:	4606      	mov	r6, r0
    rslt = null_ptr_check(dev);
 80807a2:	4618      	mov	r0, r3
{
 80807a4:	461d      	mov	r5, r3
    rslt = null_ptr_check(dev);
 80807a6:	f7ff fec9 	bl	808053c <null_ptr_check>
{
 80807aa:	460f      	mov	r7, r1
 80807ac:	4691      	mov	r9, r2
    if ((rslt == BME68X_OK) && reg_data)
 80807ae:	4604      	mov	r4, r0
 80807b0:	b9c8      	cbnz	r0, 80807e6 <bme68x_get_regs+0x4a>
 80807b2:	b1c1      	cbz	r1, 80807e6 <bme68x_get_regs+0x4a>
        if (dev->intf == BME68X_SPI_INTF)
 80807b4:	7b2b      	ldrb	r3, [r5, #12]
 80807b6:	b93b      	cbnz	r3, 80807c8 <bme68x_get_regs+0x2c>
            rslt = set_mem_page(reg_addr, dev);
 80807b8:	4629      	mov	r1, r5
 80807ba:	4630      	mov	r0, r6
 80807bc:	f7ff fee0 	bl	8080580 <set_mem_page>
            if (rslt == BME68X_OK)
 80807c0:	4604      	mov	r4, r0
 80807c2:	b908      	cbnz	r0, 80807c8 <bme68x_get_regs+0x2c>
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 80807c4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80807c8:	4630      	mov	r0, r6
 80807ca:	464a      	mov	r2, r9
 80807cc:	4639      	mov	r1, r7
 80807ce:	686b      	ldr	r3, [r5, #4]
 80807d0:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 80807d2:	47b0      	blx	r6
            rslt = BME68X_E_COM_FAIL;
 80807d4:	2800      	cmp	r0, #0
 80807d6:	bf18      	it	ne
 80807d8:	f06f 0401 	mvnne.w	r4, #1
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80807dc:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
}
 80807e0:	4620      	mov	r0, r4
 80807e2:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
        rslt = BME68X_E_NULL_PTR;
 80807e6:	f04f 34ff 	mov.w	r4, #4294967295
 80807ea:	e7f9      	b.n	80807e0 <bme68x_get_regs+0x44>

080807ec <bme68x_soft_reset>:
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 80807ec:	23e0      	movs	r3, #224	; 0xe0
{
 80807ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 80807f0:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 80807f4:	23b6      	movs	r3, #182	; 0xb6
{
 80807f6:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 80807f8:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
 80807fc:	f7ff fe9e 	bl	808053c <null_ptr_check>
    if (rslt == BME68X_OK)
 8080800:	4604      	mov	r4, r0
 8080802:	b980      	cbnz	r0, 8080826 <bme68x_soft_reset+0x3a>
        if (dev->intf == BME68X_SPI_INTF)
 8080804:	7b2b      	ldrb	r3, [r5, #12]
 8080806:	b18b      	cbz	r3, 808082c <bme68x_soft_reset+0x40>
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8080808:	462b      	mov	r3, r5
 808080a:	f10d 0107 	add.w	r1, sp, #7
 808080e:	2201      	movs	r2, #1
 8080810:	f10d 0006 	add.w	r0, sp, #6
 8080814:	f7ff ff78 	bl	8080708 <bme68x_set_regs>
 8080818:	4604      	mov	r4, r0
            dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 808081a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 808081c:	f242 7010 	movw	r0, #10000	; 0x2710
 8080820:	6869      	ldr	r1, [r5, #4]
 8080822:	4798      	blx	r3
            if (rslt == BME68X_OK)
 8080824:	b14c      	cbz	r4, 808083a <bme68x_soft_reset+0x4e>
}
 8080826:	4620      	mov	r0, r4
 8080828:	b003      	add	sp, #12
 808082a:	bd30      	pop	{r4, r5, pc}
            rslt = get_mem_page(dev);
 808082c:	4628      	mov	r0, r5
 808082e:	f7ff fedb 	bl	80805e8 <get_mem_page>
        if (rslt == BME68X_OK)
 8080832:	4604      	mov	r4, r0
 8080834:	2800      	cmp	r0, #0
 8080836:	d1f6      	bne.n	8080826 <bme68x_soft_reset+0x3a>
 8080838:	e7e6      	b.n	8080808 <bme68x_soft_reset+0x1c>
                if (dev->intf == BME68X_SPI_INTF)
 808083a:	7b2b      	ldrb	r3, [r5, #12]
 808083c:	2b00      	cmp	r3, #0
 808083e:	d1f2      	bne.n	8080826 <bme68x_soft_reset+0x3a>
                    rslt = get_mem_page(dev);
 8080840:	4628      	mov	r0, r5
 8080842:	f7ff fed1 	bl	80805e8 <get_mem_page>
 8080846:	4604      	mov	r4, r0
 8080848:	e7ed      	b.n	8080826 <bme68x_soft_reset+0x3a>

0808084a <bme68x_init>:
{
 808084a:	b510      	push	{r4, lr}
 808084c:	b08c      	sub	sp, #48	; 0x30
 808084e:	4604      	mov	r4, r0
    rslt = bme68x_soft_reset(dev);
 8080850:	f7ff ffcc 	bl	80807ec <bme68x_soft_reset>
    if (rslt == BME68X_OK)
 8080854:	4603      	mov	r3, r0
 8080856:	2800      	cmp	r0, #0
 8080858:	f040 809b 	bne.w	8080992 <bme68x_init+0x148>
        rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 808085c:	4623      	mov	r3, r4
 808085e:	2201      	movs	r2, #1
 8080860:	4621      	mov	r1, r4
 8080862:	20d0      	movs	r0, #208	; 0xd0
 8080864:	f7ff ff9a 	bl	808079c <bme68x_get_regs>
        if (rslt == BME68X_OK)
 8080868:	4603      	mov	r3, r0
 808086a:	2800      	cmp	r0, #0
 808086c:	f040 8091 	bne.w	8080992 <bme68x_init+0x148>
            if (dev->chip_id == BME68X_CHIP_ID)
 8080870:	7822      	ldrb	r2, [r4, #0]
 8080872:	2a61      	cmp	r2, #97	; 0x61
 8080874:	f040 8090 	bne.w	8080998 <bme68x_init+0x14e>
{
    int8_t rslt;
    uint8_t reg_data = 0;

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8080878:	4623      	mov	r3, r4
    uint8_t reg_data = 0;
 808087a:	f88d 0004 	strb.w	r0, [sp, #4]
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 808087e:	2201      	movs	r2, #1
 8080880:	20f0      	movs	r0, #240	; 0xf0
 8080882:	a901      	add	r1, sp, #4
 8080884:	f7ff ff8a 	bl	808079c <bme68x_get_regs>

    if (rslt == BME68X_OK)
 8080888:	4603      	mov	r3, r0
 808088a:	2800      	cmp	r0, #0
 808088c:	f040 8081 	bne.w	8080992 <bme68x_init+0x148>
    {
        dev->variant_id = reg_data;
 8080890:	f89d 3004 	ldrb.w	r3, [sp, #4]
    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8080894:	2217      	movs	r2, #23
        dev->variant_id = reg_data;
 8080896:	60a3      	str	r3, [r4, #8]
    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8080898:	208a      	movs	r0, #138	; 0x8a
 808089a:	4623      	mov	r3, r4
 808089c:	a901      	add	r1, sp, #4
 808089e:	f7ff ff7d 	bl	808079c <bme68x_get_regs>
    if (rslt == BME68X_OK)
 80808a2:	4603      	mov	r3, r0
 80808a4:	2800      	cmp	r0, #0
 80808a6:	d174      	bne.n	8080992 <bme68x_init+0x148>
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 80808a8:	4623      	mov	r3, r4
 80808aa:	220e      	movs	r2, #14
 80808ac:	20e1      	movs	r0, #225	; 0xe1
 80808ae:	f10d 011b 	add.w	r1, sp, #27
 80808b2:	f7ff ff73 	bl	808079c <bme68x_get_regs>
    if (rslt == BME68X_OK)
 80808b6:	4603      	mov	r3, r0
 80808b8:	2800      	cmp	r0, #0
 80808ba:	d16a      	bne.n	8080992 <bme68x_init+0x148>
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 80808bc:	4623      	mov	r3, r4
 80808be:	2205      	movs	r2, #5
 80808c0:	f10d 0129 	add.w	r1, sp, #41	; 0x29
 80808c4:	f7ff ff6a 	bl	808079c <bme68x_get_regs>
    if (rslt == BME68X_OK)
 80808c8:	4603      	mov	r3, r0
 80808ca:	2800      	cmp	r0, #0
 80808cc:	d161      	bne.n	8080992 <bme68x_init+0x148>
        dev->calib.par_t1 =
 80808ce:	f8bd 2023 	ldrh.w	r2, [sp, #35]	; 0x23
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 80808d2:	f89d 001d 	ldrb.w	r0, [sp, #29]
        dev->calib.par_t1 =
 80808d6:	83e2      	strh	r2, [r4, #30]
        dev->calib.par_t2 =
 80808d8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80808dc:	8422      	strh	r2, [r4, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 80808de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80808e2:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
        dev->calib.par_p1 =
 80808e6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80808ea:	84a2      	strh	r2, [r4, #36]	; 0x24
        dev->calib.par_p2 =
 80808ec:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80808f0:	84e2      	strh	r2, [r4, #38]	; 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 80808f2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80808f6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        dev->calib.par_p4 =
 80808fa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80808fe:	8562      	strh	r2, [r4, #42]	; 0x2a
        dev->calib.par_p5 =
 8080900:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8080904:	85a2      	strh	r2, [r4, #44]	; 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8080906:	f89d 2013 	ldrb.w	r2, [sp, #19]
 808090a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 808090e:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8080912:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
        dev->calib.par_p8 =
 8080916:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 808091a:	8622      	strh	r2, [r4, #48]	; 0x30
        dev->calib.par_p9 =
 808091c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8080920:	8662      	strh	r2, [r4, #50]	; 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8080922:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8080926:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 808092a:	f89d 201c 	ldrb.w	r2, [sp, #28]
 808092e:	f002 010f 	and.w	r1, r2, #15
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8080932:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
        dev->calib.par_h1 =
 8080936:	8221      	strh	r1, [r4, #16]
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8080938:	f89d 101b 	ldrb.w	r1, [sp, #27]
 808093c:	0912      	lsrs	r2, r2, #4
 808093e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
        dev->calib.par_h2 =
 8080942:	8262      	strh	r2, [r4, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8080944:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8080948:	7522      	strb	r2, [r4, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 808094a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 808094e:	7562      	strb	r2, [r4, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8080950:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8080954:	75a2      	strb	r2, [r4, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8080956:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 808095a:	75e2      	strb	r2, [r4, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 808095c:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
 8080960:	7622      	strb	r2, [r4, #24]
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8080962:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8080966:	7662      	strb	r2, [r4, #25]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8080968:	f8bd 2025 	ldrh.w	r2, [sp, #37]	; 0x25
        dev->calib.par_gh2 =
 808096c:	8362      	strh	r2, [r4, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 808096e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8080972:	7722      	strb	r2, [r4, #28]
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8080974:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 8080978:	f3c2 1201 	ubfx	r2, r2, #4, #2
 808097c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8080980:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8080984:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8080988:	f99d 202d 	ldrsb.w	r2, [sp, #45]	; 0x2d
 808098c:	1112      	asrs	r2, r2, #4
 808098e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
}
 8080992:	4618      	mov	r0, r3
 8080994:	b00c      	add	sp, #48	; 0x30
 8080996:	bd10      	pop	{r4, pc}
                rslt = BME68X_E_DEV_NOT_FOUND;
 8080998:	f06f 0302 	mvn.w	r3, #2
 808099c:	e7f9      	b.n	8080992 <bme68x_init+0x148>

0808099e <bme68x_set_op_mode>:
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 808099e:	2374      	movs	r3, #116	; 0x74
{
 80809a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80809a2:	4606      	mov	r6, r0
 80809a4:	460d      	mov	r5, r1
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 80809a6:	f88d 3007 	strb.w	r3, [sp, #7]
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 80809aa:	462b      	mov	r3, r5
 80809ac:	2201      	movs	r2, #1
 80809ae:	2074      	movs	r0, #116	; 0x74
 80809b0:	f10d 0106 	add.w	r1, sp, #6
 80809b4:	f7ff fef2 	bl	808079c <bme68x_get_regs>
        if (rslt == BME68X_OK)
 80809b8:	4604      	mov	r4, r0
 80809ba:	b9b8      	cbnz	r0, 80809ec <bme68x_set_op_mode+0x4e>
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80809bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
            if (pow_mode != BME68X_SLEEP_MODE)
 80809c0:	0793      	lsls	r3, r2, #30
 80809c2:	d016      	beq.n	80809f2 <bme68x_set_op_mode+0x54>
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80809c4:	f022 0203 	bic.w	r2, r2, #3
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80809c8:	462b      	mov	r3, r5
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80809ca:	f88d 2006 	strb.w	r2, [sp, #6]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80809ce:	f10d 0106 	add.w	r1, sp, #6
 80809d2:	2201      	movs	r2, #1
 80809d4:	f10d 0007 	add.w	r0, sp, #7
 80809d8:	f7ff fe96 	bl	8080708 <bme68x_set_regs>
 80809dc:	4604      	mov	r4, r0
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80809de:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80809e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80809e4:	6869      	ldr	r1, [r5, #4]
 80809e6:	4798      	blx	r3
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 80809e8:	2c00      	cmp	r4, #0
 80809ea:	d0de      	beq.n	80809aa <bme68x_set_op_mode+0xc>
}
 80809ec:	4620      	mov	r0, r4
 80809ee:	b002      	add	sp, #8
 80809f0:	bd70      	pop	{r4, r5, r6, pc}
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 80809f2:	2e00      	cmp	r6, #0
 80809f4:	d0fa      	beq.n	80809ec <bme68x_set_op_mode+0x4e>
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 80809f6:	f022 0203 	bic.w	r2, r2, #3
 80809fa:	f006 0603 	and.w	r6, r6, #3
 80809fe:	4332      	orrs	r2, r6
 8080a00:	f88d 2006 	strb.w	r2, [sp, #6]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8080a04:	462b      	mov	r3, r5
 8080a06:	2201      	movs	r2, #1
 8080a08:	f10d 0106 	add.w	r1, sp, #6
 8080a0c:	f10d 0007 	add.w	r0, sp, #7
 8080a10:	f7ff fe7a 	bl	8080708 <bme68x_set_regs>
 8080a14:	4604      	mov	r4, r0
 8080a16:	e7e9      	b.n	80809ec <bme68x_set_op_mode+0x4e>

08080a18 <bme68x_get_op_mode>:
{
 8080a18:	b513      	push	{r0, r1, r4, lr}
 8080a1a:	460b      	mov	r3, r1
    if (op_mode)
 8080a1c:	4604      	mov	r4, r0
 8080a1e:	b160      	cbz	r0, 8080a3a <bme68x_get_op_mode+0x22>
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8080a20:	2201      	movs	r2, #1
 8080a22:	2074      	movs	r0, #116	; 0x74
 8080a24:	f10d 0107 	add.w	r1, sp, #7
 8080a28:	f7ff feb8 	bl	808079c <bme68x_get_regs>
        *op_mode = mode & BME68X_MODE_MSK;
 8080a2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080a30:	f003 0303 	and.w	r3, r3, #3
 8080a34:	7023      	strb	r3, [r4, #0]
}
 8080a36:	b002      	add	sp, #8
 8080a38:	bd10      	pop	{r4, pc}
        rslt = BME68X_E_NULL_PTR;
 8080a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8080a3e:	e7fa      	b.n	8080a36 <bme68x_get_op_mode+0x1e>

08080a40 <bme68x_set_conf>:
{
 8080a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8080a42:	4b4d      	ldr	r3, [pc, #308]	; (8080b78 <bme68x_set_conf+0x138>)
{
 8080a44:	4606      	mov	r6, r0
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8080a46:	6818      	ldr	r0, [r3, #0]
 8080a48:	791b      	ldrb	r3, [r3, #4]
{
 8080a4a:	b087      	sub	sp, #28
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8080a4c:	f88d 300c 	strb.w	r3, [sp, #12]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8080a50:	2300      	movs	r3, #0
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8080a52:	9002      	str	r0, [sp, #8]
    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8080a54:	f10d 0007 	add.w	r0, sp, #7
{
 8080a58:	460d      	mov	r5, r1
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8080a5a:	9304      	str	r3, [sp, #16]
 8080a5c:	f88d 3014 	strb.w	r3, [sp, #20]
    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8080a60:	f7ff ffda 	bl	8080a18 <bme68x_get_op_mode>
    if (rslt == BME68X_OK)
 8080a64:	4604      	mov	r4, r0
 8080a66:	2800      	cmp	r0, #0
 8080a68:	f040 8083 	bne.w	8080b72 <bme68x_set_conf+0x132>
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8080a6c:	4629      	mov	r1, r5
 8080a6e:	f7ff ff96 	bl	808099e <bme68x_set_op_mode>
 8080a72:	4607      	mov	r7, r0
 8080a74:	4604      	mov	r4, r0
    if (conf == NULL)
 8080a76:	b966      	cbnz	r6, 8080a92 <bme68x_set_conf+0x52>
        rslt = BME68X_E_NULL_PTR;
 8080a78:	f04f 34ff 	mov.w	r4, #4294967295
    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8080a7c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8080a80:	b120      	cbz	r0, 8080a8c <bme68x_set_conf+0x4c>
 8080a82:	b91c      	cbnz	r4, 8080a8c <bme68x_set_conf+0x4c>
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8080a84:	4629      	mov	r1, r5
 8080a86:	f7ff ff8a 	bl	808099e <bme68x_set_op_mode>
 8080a8a:	4604      	mov	r4, r0
}
 8080a8c:	4620      	mov	r0, r4
 8080a8e:	b007      	add	sp, #28
 8080a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (rslt == BME68X_OK)
 8080a92:	2800      	cmp	r0, #0
 8080a94:	d1f2      	bne.n	8080a7c <bme68x_set_conf+0x3c>
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8080a96:	462b      	mov	r3, r5
 8080a98:	2205      	movs	r2, #5
 8080a9a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8080a9e:	a904      	add	r1, sp, #16
 8080aa0:	f7ff fe7c 	bl	808079c <bme68x_get_regs>
        dev->info_msg = BME68X_OK;
 8080aa4:	f885 704d 	strb.w	r7, [r5, #77]	; 0x4d
        if (rslt == BME68X_OK)
 8080aa8:	4604      	mov	r4, r0
 8080aaa:	2800      	cmp	r0, #0
 8080aac:	d1e6      	bne.n	8080a7c <bme68x_set_conf+0x3c>
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8080aae:	462a      	mov	r2, r5
 8080ab0:	2107      	movs	r1, #7
 8080ab2:	1cf0      	adds	r0, r6, #3
 8080ab4:	f7ff fd50 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080ab8:	4604      	mov	r4, r0
 8080aba:	2800      	cmp	r0, #0
 8080abc:	d1de      	bne.n	8080a7c <bme68x_set_conf+0x3c>
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8080abe:	2105      	movs	r1, #5
 8080ac0:	1c70      	adds	r0, r6, #1
 8080ac2:	f7ff fd49 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080ac6:	4604      	mov	r4, r0
 8080ac8:	2800      	cmp	r0, #0
 8080aca:	d1d7      	bne.n	8080a7c <bme68x_set_conf+0x3c>
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8080acc:	1cb0      	adds	r0, r6, #2
 8080ace:	f7ff fd43 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080ad2:	4604      	mov	r4, r0
 8080ad4:	2800      	cmp	r0, #0
 8080ad6:	d1d1      	bne.n	8080a7c <bme68x_set_conf+0x3c>
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8080ad8:	4630      	mov	r0, r6
 8080ada:	f7ff fd3d 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080ade:	4604      	mov	r4, r0
 8080ae0:	2800      	cmp	r0, #0
 8080ae2:	d1cb      	bne.n	8080a7c <bme68x_set_conf+0x3c>
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8080ae4:	2108      	movs	r1, #8
 8080ae6:	1d30      	adds	r0, r6, #4
 8080ae8:	f7ff fd36 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080aec:	4604      	mov	r4, r0
 8080aee:	2800      	cmp	r0, #0
 8080af0:	d1c4      	bne.n	8080a7c <bme68x_set_conf+0x3c>
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8080af2:	78f3      	ldrb	r3, [r6, #3]
 8080af4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8080af8:	009b      	lsls	r3, r3, #2
 8080afa:	f022 021c 	bic.w	r2, r2, #28
 8080afe:	f003 031c 	and.w	r3, r3, #28
 8080b02:	4313      	orrs	r3, r2
 8080b04:	b25a      	sxtb	r2, r3
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8080b06:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8080b0a:	7871      	ldrb	r1, [r6, #1]
 8080b0c:	f003 031f 	and.w	r3, r3, #31
 8080b10:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8080b14:	78b1      	ldrb	r1, [r6, #2]
 8080b16:	f023 031c 	bic.w	r3, r3, #28
 8080b1a:	0089      	lsls	r1, r1, #2
 8080b1c:	f001 011c 	and.w	r1, r1, #28
 8080b20:	430b      	orrs	r3, r1
 8080b22:	f88d 3013 	strb.w	r3, [sp, #19]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8080b26:	7831      	ldrb	r1, [r6, #0]
 8080b28:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8080b2c:	f001 0107 	and.w	r1, r1, #7
 8080b30:	f023 0307 	bic.w	r3, r3, #7
 8080b34:	430b      	orrs	r3, r1
            if (conf->odr != BME68X_ODR_NONE)
 8080b36:	7931      	ldrb	r1, [r6, #4]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8080b38:	f88d 3011 	strb.w	r3, [sp, #17]
            if (conf->odr != BME68X_ODR_NONE)
 8080b3c:	2908      	cmp	r1, #8
                odr3 = 0;
 8080b3e:	bf12      	itee	ne
 8080b40:	2000      	movne	r0, #0
    uint8_t odr20 = 0, odr3 = 1;
 8080b42:	2001      	moveq	r0, #1
 8080b44:	2100      	moveq	r1, #0
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8080b46:	f89d 3010 	ldrb.w	r3, [sp, #16]
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8080b4a:	f002 021f 	and.w	r2, r2, #31
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8080b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8080b52:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8080b56:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8080b5a:	f88d 2014 	strb.w	r2, [sp, #20]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8080b5e:	f88d 3010 	strb.w	r3, [sp, #16]
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8080b62:	2205      	movs	r2, #5
 8080b64:	462b      	mov	r3, r5
 8080b66:	a904      	add	r1, sp, #16
 8080b68:	a802      	add	r0, sp, #8
 8080b6a:	f7ff fdcd 	bl	8080708 <bme68x_set_regs>
 8080b6e:	4604      	mov	r4, r0
 8080b70:	e784      	b.n	8080a7c <bme68x_set_conf+0x3c>
    if (conf == NULL)
 8080b72:	2e00      	cmp	r6, #0
 8080b74:	d182      	bne.n	8080a7c <bme68x_set_conf+0x3c>
 8080b76:	e77f      	b.n	8080a78 <bme68x_set_conf+0x38>
 8080b78:	08086810 	.word	0x08086810

08080b7c <bme68x_get_meas_dur>:
{
 8080b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8080b7e:	4b1d      	ldr	r3, [pc, #116]	; (8080bf4 <bme68x_get_meas_dur+0x78>)
{
 8080b80:	4605      	mov	r5, r0
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8080b82:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8080b86:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
    if (conf != NULL)
 8080b8a:	460c      	mov	r4, r1
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8080b8c:	9000      	str	r0, [sp, #0]
 8080b8e:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (conf != NULL)
 8080b92:	b911      	cbnz	r1, 8080b9a <bme68x_get_meas_dur+0x1e>
    uint32_t meas_dur = 0; /* Calculate in us */
 8080b94:	2000      	movs	r0, #0
}
 8080b96:	b003      	add	sp, #12
 8080b98:	bd30      	pop	{r4, r5, pc}
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8080b9a:	2105      	movs	r1, #5
 8080b9c:	1c60      	adds	r0, r4, #1
 8080b9e:	f7ff fcdb 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080ba2:	2800      	cmp	r0, #0
 8080ba4:	d1f6      	bne.n	8080b94 <bme68x_get_meas_dur+0x18>
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8080ba6:	1ca0      	adds	r0, r4, #2
 8080ba8:	f7ff fcd6 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080bac:	2800      	cmp	r0, #0
 8080bae:	d1f1      	bne.n	8080b94 <bme68x_get_meas_dur+0x18>
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8080bb0:	4620      	mov	r0, r4
 8080bb2:	f7ff fcd1 	bl	8080558 <boundary_check>
        if (rslt == BME68X_OK)
 8080bb6:	2800      	cmp	r0, #0
 8080bb8:	d1ec      	bne.n	8080b94 <bme68x_get_meas_dur+0x18>
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8080bba:	7863      	ldrb	r3, [r4, #1]
 8080bbc:	aa02      	add	r2, sp, #8
 8080bbe:	4413      	add	r3, r2
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8080bc0:	78a2      	ldrb	r2, [r4, #2]
 8080bc2:	a902      	add	r1, sp, #8
 8080bc4:	440a      	add	r2, r1
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8080bc6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8080bca:	f812 0c08 	ldrb.w	r0, [r2, #-8]
            if (op_mode != BME68X_PARALLEL_MODE)
 8080bce:	2d02      	cmp	r5, #2
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8080bd0:	4418      	add	r0, r3
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8080bd2:	7823      	ldrb	r3, [r4, #0]
 8080bd4:	440b      	add	r3, r1
 8080bd6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8080bda:	4403      	add	r3, r0
            meas_dur = meas_cycles * UINT32_C(1963);
 8080bdc:	f240 70ab 	movw	r0, #1963	; 0x7ab
 8080be0:	fb03 f000 	mul.w	r0, r3, r0
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8080be4:	bf0b      	itete	eq
 8080be6:	f500 5086 	addeq.w	r0, r0, #4288	; 0x10c0
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8080bea:	f500 50a5 	addne.w	r0, r0, #5280	; 0x14a0
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8080bee:	3005      	addeq	r0, #5
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8080bf0:	300d      	addne	r0, #13
    return meas_dur;
 8080bf2:	e7d0      	b.n	8080b96 <bme68x_get_meas_dur+0x1a>
 8080bf4:	08086818 	.word	0x08086818

08080bf8 <bme68x_get_data>:
{
 8080bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080bfc:	b0b5      	sub	sp, #212	; 0xd4
 8080bfe:	461d      	mov	r5, r3
    struct bme68x_data field_data[3] = { { 0 } };
 8080c00:	ab22      	add	r3, sp, #136	; 0x88
{
 8080c02:	9201      	str	r2, [sp, #4]
 8080c04:	4604      	mov	r4, r0
 8080c06:	460e      	mov	r6, r1
    struct bme68x_data field_data[3] = { { 0 } };
 8080c08:	4618      	mov	r0, r3
 8080c0a:	2248      	movs	r2, #72	; 0x48
 8080c0c:	2100      	movs	r1, #0
 8080c0e:	f005 fd33 	bl	8086678 <memset>
    field_ptr[1] = &field_data[1];
 8080c12:	ab28      	add	r3, sp, #160	; 0xa0
    field_ptr[0] = &field_data[0];
 8080c14:	900a      	str	r0, [sp, #40]	; 0x28
    field_ptr[1] = &field_data[1];
 8080c16:	930b      	str	r3, [sp, #44]	; 0x2c
    rslt = null_ptr_check(dev);
 8080c18:	4628      	mov	r0, r5
    field_ptr[2] = &field_data[2];
 8080c1a:	ab2e      	add	r3, sp, #184	; 0xb8
 8080c1c:	930c      	str	r3, [sp, #48]	; 0x30
    rslt = null_ptr_check(dev);
 8080c1e:	f7ff fc8d 	bl	808053c <null_ptr_check>
    if ((rslt == BME68X_OK) && (data != NULL))
 8080c22:	4607      	mov	r7, r0
 8080c24:	b128      	cbz	r0, 8080c32 <bme68x_get_data+0x3a>
        rslt = BME68X_E_NULL_PTR;
 8080c26:	f04f 34ff 	mov.w	r4, #4294967295
}
 8080c2a:	4620      	mov	r0, r4
 8080c2c:	b035      	add	sp, #212	; 0xd4
 8080c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((rslt == BME68X_OK) && (data != NULL))
 8080c32:	2e00      	cmp	r6, #0
 8080c34:	d0f7      	beq.n	8080c26 <bme68x_get_data+0x2e>
        if (op_mode == BME68X_FORCED_MODE)
 8080c36:	2c01      	cmp	r4, #1
 8080c38:	f040 80d8 	bne.w	8080dec <bme68x_get_data+0x1f4>
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8080c3c:	4601      	mov	r1, r0
 8080c3e:	9015      	str	r0, [sp, #84]	; 0x54
 8080c40:	220d      	movs	r2, #13
 8080c42:	a816      	add	r0, sp, #88	; 0x58
 8080c44:	f005 fd18 	bl	8086678 <memset>
 8080c48:	2705      	movs	r7, #5
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8080c4a:	462b      	mov	r3, r5
 8080c4c:	2211      	movs	r2, #17
 8080c4e:	201d      	movs	r0, #29
 8080c50:	a915      	add	r1, sp, #84	; 0x54
 8080c52:	f7ff fda3 	bl	808079c <bme68x_get_regs>
        data->meas_index = buff[1];
 8080c56:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8080c5a:	4604      	mov	r4, r0
        data->meas_index = buff[1];
 8080c5c:	70b2      	strb	r2, [r6, #2]
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8080c5e:	f89d 2056 	ldrb.w	r2, [sp, #86]	; 0x56
        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8080c62:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8080c66:	9202      	str	r2, [sp, #8]
 8080c68:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8080c6c:	f000 0380 	and.w	r3, r0, #128	; 0x80
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8080c70:	9203      	str	r2, [sp, #12]
 8080c72:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8080c76:	f000 000f 	and.w	r0, r0, #15
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8080c7a:	9204      	str	r2, [sp, #16]
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8080c7c:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8080c80:	7033      	strb	r3, [r6, #0]
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8080c82:	9205      	str	r2, [sp, #20]
 8080c84:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8080c88:	7070      	strb	r0, [r6, #1]
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8080c8a:	9206      	str	r2, [sp, #24]
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8080c8c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8080c90:	f89d a062 	ldrb.w	sl, [sp, #98]	; 0x62
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8080c94:	9207      	str	r2, [sp, #28]
 8080c96:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8080c9a:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8080c9e:	9208      	str	r2, [sp, #32]
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8080ca0:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8080ca4:	f89d 905b 	ldrb.w	r9, [sp, #91]	; 0x5b
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8080ca8:	9209      	str	r2, [sp, #36]	; 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8080caa:	68aa      	ldr	r2, [r5, #8]
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8080cac:	f89d b063 	ldrb.w	fp, [sp, #99]	; 0x63
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8080cb0:	2a01      	cmp	r2, #1
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8080cb2:	bf13      	iteet	ne
 8080cb4:	f00a 0220 	andne.w	r2, sl, #32
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8080cb8:	f008 0220 	andeq.w	r2, r8, #32
 8080cbc:	431a      	orreq	r2, r3
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8080cbe:	4313      	orrne	r3, r2
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8080cc0:	bf0c      	ite	eq
 8080cc2:	f008 0310 	andeq.w	r3, r8, #16
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8080cc6:	f00a 0210 	andne.w	r2, sl, #16
 8080cca:	4313      	orrs	r3, r2
 8080ccc:	7033      	strb	r3, [r6, #0]
        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8080cce:	061b      	lsls	r3, r3, #24
 8080cd0:	d575      	bpl.n	8080dbe <bme68x_get_data+0x1c6>
 8080cd2:	2c00      	cmp	r4, #0
 8080cd4:	d179      	bne.n	8080dca <bme68x_get_data+0x1d2>
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8080cd6:	462b      	mov	r3, r5
 8080cd8:	2201      	movs	r2, #1
 8080cda:	1cf1      	adds	r1, r6, #3
 8080cdc:	305a      	adds	r0, #90	; 0x5a
 8080cde:	f7ff fd5d 	bl	808079c <bme68x_get_regs>
            if (rslt == BME68X_OK)
 8080ce2:	4604      	mov	r4, r0
 8080ce4:	2800      	cmp	r0, #0
 8080ce6:	d170      	bne.n	8080dca <bme68x_get_data+0x1d2>
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8080ce8:	7870      	ldrb	r0, [r6, #1]
 8080cea:	462b      	mov	r3, r5
 8080cec:	3050      	adds	r0, #80	; 0x50
 8080cee:	2201      	movs	r2, #1
 8080cf0:	1d31      	adds	r1, r6, #4
 8080cf2:	b2c0      	uxtb	r0, r0
 8080cf4:	f7ff fd52 	bl	808079c <bme68x_get_regs>
            if (rslt == BME68X_OK)
 8080cf8:	4604      	mov	r4, r0
 8080cfa:	2800      	cmp	r0, #0
 8080cfc:	d165      	bne.n	8080dca <bme68x_get_data+0x1d2>
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8080cfe:	7870      	ldrb	r0, [r6, #1]
 8080d00:	462b      	mov	r3, r5
 8080d02:	3064      	adds	r0, #100	; 0x64
 8080d04:	2201      	movs	r2, #1
 8080d06:	1d71      	adds	r1, r6, #5
 8080d08:	b2c0      	uxtb	r0, r0
 8080d0a:	f7ff fd47 	bl	808079c <bme68x_get_regs>
            if (rslt == BME68X_OK)
 8080d0e:	4604      	mov	r4, r0
 8080d10:	2800      	cmp	r0, #0
 8080d12:	d15a      	bne.n	8080dca <bme68x_get_data+0x1d2>
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8080d14:	9b06      	ldr	r3, [sp, #24]
 8080d16:	ea4f 1019 	mov.w	r0, r9, lsr #4
 8080d1a:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
                data->temperature = calc_temperature(adc_temp, dev);
 8080d1e:	9b05      	ldr	r3, [sp, #20]
 8080d20:	4629      	mov	r1, r5
 8080d22:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
 8080d26:	f7ff f9c5 	bl	80800b4 <calc_temperature>
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8080d2a:	9b04      	ldr	r3, [sp, #16]
                data->temperature = calc_temperature(adc_temp, dev);
 8080d2c:	60b0      	str	r0, [r6, #8]
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8080d2e:	0918      	lsrs	r0, r3, #4
 8080d30:	9b03      	ldr	r3, [sp, #12]
                data->pressure = calc_pressure(adc_pres, dev);
 8080d32:	4629      	mov	r1, r5
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8080d34:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
                data->pressure = calc_pressure(adc_pres, dev);
 8080d38:	9b02      	ldr	r3, [sp, #8]
 8080d3a:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
 8080d3e:	f7ff fa07 	bl	8080150 <calc_pressure>
                data->humidity = calc_humidity(adc_hum, dev);
 8080d42:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
                data->pressure = calc_pressure(adc_pres, dev);
 8080d46:	60f0      	str	r0, [r6, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 8080d48:	4629      	mov	r1, r5
 8080d4a:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
 8080d4e:	f7ff fadf 	bl	8080310 <calc_humidity>
 8080d52:	6130      	str	r0, [r6, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8080d54:	68ab      	ldr	r3, [r5, #8]
 8080d56:	2b01      	cmp	r3, #1
 8080d58:	d125      	bne.n	8080da6 <bme68x_get_data+0x1ae>
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8080d5a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8080d5e:	ea4f 1398 	mov.w	r3, r8, lsr #6
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8080d62:	f008 080f 	and.w	r8, r8, #15
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8080d66:	fa20 f008 	lsr.w	r0, r0, r8
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8080d6a:	ea43 0b8b 	orr.w	fp, r3, fp, lsl #2
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8080d6e:	f005 f9fb 	bl	8086168 <__aeabi_ui2f>
 8080d72:	49b3      	ldr	r1, [pc, #716]	; (8081040 <bme68x_get_data+0x448>)
 8080d74:	f005 fa50 	bl	8086218 <__aeabi_fmul>
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8080d78:	f5ab 7b00 	sub.w	fp, fp, #512	; 0x200
    var2 *= INT32_C(3);
 8080d7c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8080d80:	4604      	mov	r4, r0
 8080d82:	f50b 5080 	add.w	r0, fp, #4096	; 0x1000
 8080d86:	f005 f9f3 	bl	8086170 <__aeabi_i2f>
 8080d8a:	4601      	mov	r1, r0
 8080d8c:	4620      	mov	r0, r4
 8080d8e:	f005 faf7 	bl	8086380 <__aeabi_fdiv>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8080d92:	6170      	str	r0, [r6, #20]
                if (data->status & BME68X_NEW_DATA_MSK)
 8080d94:	f996 3000 	ldrsb.w	r3, [r6]
                    new_fields = 0;
 8080d98:	2b00      	cmp	r3, #0
 8080d9a:	bfb5      	itete	lt
 8080d9c:	2701      	movlt	r7, #1
 8080d9e:	2700      	movge	r7, #0
 8080da0:	2400      	movlt	r4, #0
 8080da2:	2402      	movge	r4, #2
 8080da4:	e01c      	b.n	8080de0 <bme68x_get_data+0x1e8>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8080da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8080da8:	ea4f 109a 	mov.w	r0, sl, lsr #6
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8080dac:	f995 203e 	ldrsb.w	r2, [r5, #62]	; 0x3e
 8080db0:	f00a 010f 	and.w	r1, sl, #15
 8080db4:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
 8080db8:	f7ff fc30 	bl	808061c <calc_gas_resistance_low.isra.0>
 8080dbc:	e7e9      	b.n	8080d92 <bme68x_get_data+0x19a>
        if (rslt == BME68X_OK)
 8080dbe:	b924      	cbnz	r4, 8080dca <bme68x_get_data+0x1d2>
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8080dc0:	f242 7010 	movw	r0, #10000	; 0x2710
 8080dc4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8080dc6:	6869      	ldr	r1, [r5, #4]
 8080dc8:	4798      	blx	r3
    while ((tries) && (rslt == BME68X_OK))
 8080dca:	3f01      	subs	r7, #1
 8080dcc:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8080dd0:	d004      	beq.n	8080ddc <bme68x_get_data+0x1e4>
 8080dd2:	2c00      	cmp	r4, #0
 8080dd4:	f43f af39 	beq.w	8080c4a <bme68x_get_data+0x52>
    uint8_t i = 0, j = 0, new_fields = 0;
 8080dd8:	2700      	movs	r7, #0
 8080dda:	e001      	b.n	8080de0 <bme68x_get_data+0x1e8>
            if (rslt == BME68X_OK)
 8080ddc:	2c00      	cmp	r4, #0
 8080dde:	d0d9      	beq.n	8080d94 <bme68x_get_data+0x19c>
        if (n_data == NULL)
 8080de0:	9b01      	ldr	r3, [sp, #4]
 8080de2:	2b00      	cmp	r3, #0
 8080de4:	f43f af1f 	beq.w	8080c26 <bme68x_get_data+0x2e>
            *n_data = new_fields;
 8080de8:	701f      	strb	r7, [r3, #0]
    return rslt;
 8080dea:	e71e      	b.n	8080c2a <bme68x_get_data+0x32>
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8080dec:	3c02      	subs	r4, #2
 8080dee:	2c01      	cmp	r4, #1
 8080df0:	f200 8123 	bhi.w	808103a <bme68x_get_data+0x442>
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8080df4:	4601      	mov	r1, r0
 8080df6:	222f      	movs	r2, #47	; 0x2f
 8080df8:	9015      	str	r0, [sp, #84]	; 0x54
 8080dfa:	a816      	add	r0, sp, #88	; 0x58
 8080dfc:	f005 fc3c 	bl	8086678 <memset>
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8080e00:	221a      	movs	r2, #26
 8080e02:	4639      	mov	r1, r7
 8080e04:	a80e      	add	r0, sp, #56	; 0x38
 8080e06:	970d      	str	r7, [sp, #52]	; 0x34
 8080e08:	f005 fc36 	bl	8086678 <memset>
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 8080e0c:	462b      	mov	r3, r5
 8080e0e:	2233      	movs	r2, #51	; 0x33
 8080e10:	201d      	movs	r0, #29
 8080e12:	a915      	add	r1, sp, #84	; 0x54
 8080e14:	f7ff fcc2 	bl	808079c <bme68x_get_regs>
 8080e18:	4604      	mov	r4, r0
 8080e1a:	4682      	mov	sl, r0
    if (rslt == BME68X_OK)
 8080e1c:	2800      	cmp	r0, #0
 8080e1e:	f040 809d 	bne.w	8080f5c <bme68x_get_data+0x364>
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8080e22:	462b      	mov	r3, r5
 8080e24:	221e      	movs	r2, #30
 8080e26:	2050      	movs	r0, #80	; 0x50
 8080e28:	a90d      	add	r1, sp, #52	; 0x34
 8080e2a:	f7ff fcb7 	bl	808079c <bme68x_get_regs>
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8080e2e:	af15      	add	r7, sp, #84	; 0x54
 8080e30:	4604      	mov	r4, r0
 8080e32:	2800      	cmp	r0, #0
 8080e34:	f040 8092 	bne.w	8080f5c <bme68x_get_data+0x364>
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8080e38:	ab0a      	add	r3, sp, #40	; 0x28
 8080e3a:	f853 802a 	ldr.w	r8, [r3, sl, lsl #2]
        data[i]->meas_index = buff[off + 1];
 8080e3e:	787b      	ldrb	r3, [r7, #1]
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8080e40:	f897 9003 	ldrb.w	r9, [r7, #3]
        data[i]->meas_index = buff[off + 1];
 8080e44:	f888 3002 	strb.w	r3, [r8, #2]
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8080e48:	78bb      	ldrb	r3, [r7, #2]
 8080e4a:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8080e4e:	ea49 3903 	orr.w	r9, r9, r3, lsl #12
                        ((uint32_t) buff[off + 4] / 16));
 8080e52:	793b      	ldrb	r3, [r7, #4]
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8080e54:	79b8      	ldrb	r0, [r7, #6]
        adc_pres =
 8080e56:	ea49 1913 	orr.w	r9, r9, r3, lsr #4
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8080e5a:	797b      	ldrb	r3, [r7, #5]
 8080e5c:	0100      	lsls	r0, r0, #4
 8080e5e:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
                        ((uint32_t) buff[off + 7] / 16));
 8080e62:	79fb      	ldrb	r3, [r7, #7]
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8080e64:	7a7a      	ldrb	r2, [r7, #9]
        adc_temp =
 8080e66:	ea40 1313 	orr.w	r3, r0, r3, lsr #4
 8080e6a:	9302      	str	r3, [sp, #8]
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8080e6c:	7a3b      	ldrb	r3, [r7, #8]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8080e6e:	7bf8      	ldrb	r0, [r7, #15]
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8080e70:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8080e74:	7b7b      	ldrb	r3, [r7, #13]
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8080e76:	7839      	ldrb	r1, [r7, #0]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8080e78:	9004      	str	r0, [sp, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8080e7a:	68a8      	ldr	r0, [r5, #8]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8080e7c:	f897 b010 	ldrb.w	fp, [r7, #16]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8080e80:	9303      	str	r3, [sp, #12]
 8080e82:	7bbb      	ldrb	r3, [r7, #14]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8080e84:	2801      	cmp	r0, #1
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8080e86:	f001 0c0f 	and.w	ip, r1, #15
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8080e8a:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8080e8e:	bf14      	ite	ne
 8080e90:	f003 0e20 	andne.w	lr, r3, #32
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8080e94:	f00b 0e20 	andeq.w	lr, fp, #32
 8080e98:	b249      	sxtb	r1, r1
 8080e9a:	bf0b      	itete	eq
 8080e9c:	ea41 010e 	orreq.w	r1, r1, lr
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8080ea0:	ea41 010e 	orrne.w	r1, r1, lr
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8080ea4:	f00b 0e10 	andeq.w	lr, fp, #16
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 8080ea8:	f003 0e10 	andne.w	lr, r3, #16
 8080eac:	ea41 010e 	orr.w	r1, r1, lr
 8080eb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
        data[i]->idac = set_val[data[i]->gas_index];
 8080eb4:	ab34      	add	r3, sp, #208	; 0xd0
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 8080eb6:	f888 1000 	strb.w	r1, [r8]
        data[i]->idac = set_val[data[i]->gas_index];
 8080eba:	eb03 010c 	add.w	r1, r3, ip
 8080ebe:	f811 1c9c 	ldrb.w	r1, [r1, #-156]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8080ec2:	f888 c001 	strb.w	ip, [r8, #1]
        data[i]->idac = set_val[data[i]->gas_index];
 8080ec6:	f888 1004 	strb.w	r1, [r8, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8080eca:	eb03 010c 	add.w	r1, r3, ip
 8080ece:	f811 1c92 	ldrb.w	r1, [r1, #-146]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8080ed2:	449c      	add	ip, r3
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8080ed4:	f888 1003 	strb.w	r1, [r8, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8080ed8:	f81c 1c88 	ldrb.w	r1, [ip, #-136]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8080edc:	9802      	ldr	r0, [sp, #8]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8080ede:	f888 1005 	strb.w	r1, [r8, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8080ee2:	4629      	mov	r1, r5
 8080ee4:	f7ff f8e6 	bl	80800b4 <calc_temperature>
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8080ee8:	4629      	mov	r1, r5
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8080eea:	f8c8 0008 	str.w	r0, [r8, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8080eee:	4648      	mov	r0, r9
 8080ef0:	f7ff f92e 	bl	8080150 <calc_pressure>
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8080ef4:	9a05      	ldr	r2, [sp, #20]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8080ef6:	f8c8 000c 	str.w	r0, [r8, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8080efa:	4629      	mov	r1, r5
 8080efc:	4610      	mov	r0, r2
 8080efe:	f7ff fa07 	bl	8080310 <calc_humidity>
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8080f02:	68aa      	ldr	r2, [r5, #8]
 8080f04:	9b06      	ldr	r3, [sp, #24]
 8080f06:	2a01      	cmp	r2, #1
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8080f08:	f8c8 0010 	str.w	r0, [r8, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8080f0c:	d13b      	bne.n	8080f86 <bme68x_get_data+0x38e>
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8080f0e:	9b04      	ldr	r3, [sp, #16]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8080f10:	ea4f 199b 	mov.w	r9, fp, lsr #6
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8080f14:	ea49 0983 	orr.w	r9, r9, r3, lsl #2
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8080f18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8080f1c:	f00b 000f 	and.w	r0, fp, #15
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8080f20:	fa23 f000 	lsr.w	r0, r3, r0
 8080f24:	f005 f920 	bl	8086168 <__aeabi_ui2f>
 8080f28:	4945      	ldr	r1, [pc, #276]	; (8081040 <bme68x_get_data+0x448>)
 8080f2a:	f005 f975 	bl	8086218 <__aeabi_fmul>
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8080f2e:	f5a9 7900 	sub.w	r9, r9, #512	; 0x200
    var2 *= INT32_C(3);
 8080f32:	eb09 0949 	add.w	r9, r9, r9, lsl #1
    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8080f36:	4683      	mov	fp, r0
 8080f38:	f509 5080 	add.w	r0, r9, #4096	; 0x1000
 8080f3c:	f005 f918 	bl	8086170 <__aeabi_i2f>
 8080f40:	4601      	mov	r1, r0
 8080f42:	4658      	mov	r0, fp
 8080f44:	f005 fa1c 	bl	8086380 <__aeabi_fdiv>
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8080f48:	f10a 0a01 	add.w	sl, sl, #1
 8080f4c:	f1ba 0f03 	cmp.w	sl, #3
 8080f50:	f8c8 0014 	str.w	r0, [r8, #20]
 8080f54:	f107 0711 	add.w	r7, r7, #17
 8080f58:	f47f af6e 	bne.w	8080e38 <bme68x_get_data+0x240>
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8080f5c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8080f60:	4672      	mov	r2, lr
 8080f62:	2303      	movs	r3, #3
            new_fields = 0;
 8080f64:	2700      	movs	r7, #0
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8080f66:	2c00      	cmp	r4, #0
 8080f68:	d14e      	bne.n	8081008 <bme68x_get_data+0x410>
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8080f6a:	f852 1b04 	ldr.w	r1, [r2], #4
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8080f6e:	3b01      	subs	r3, #1
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8080f70:	f991 1000 	ldrsb.w	r1, [r1]
 8080f74:	2900      	cmp	r1, #0
                    new_fields++;
 8080f76:	bfbc      	itt	lt
 8080f78:	3701      	addlt	r7, #1
 8080f7a:	b2ff      	uxtblt	r7, r7
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8080f7c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8080f80:	d1f3      	bne.n	8080f6a <bme68x_get_data+0x372>
 8080f82:	4670      	mov	r0, lr
 8080f84:	e038      	b.n	8080ff8 <bme68x_get_data+0x400>
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8080f86:	0998      	lsrs	r0, r3, #6
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8080f88:	f003 010f 	and.w	r1, r3, #15
 8080f8c:	9b03      	ldr	r3, [sp, #12]
 8080f8e:	f995 203e 	ldrsb.w	r2, [r5, #62]	; 0x3e
 8080f92:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
 8080f96:	f7ff fb41 	bl	808061c <calc_gas_resistance_low.isra.0>
 8080f9a:	e7d5      	b.n	8080f48 <bme68x_get_data+0x350>
 8080f9c:	f04f 0902 	mov.w	r9, #2
    meas_index1 = (int16_t)field[low_index]->meas_index;
 8080fa0:	f8dc 5000 	ldr.w	r5, [ip]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8080fa4:	f851 3b04 	ldr.w	r3, [r1], #4
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8080fa8:	f995 a000 	ldrsb.w	sl, [r5]
 8080fac:	f993 2000 	ldrsb.w	r2, [r3]
 8080fb0:	f1ba 0f00 	cmp.w	sl, #0
 8080fb4:	da16      	bge.n	8080fe4 <bme68x_get_data+0x3ec>
 8080fb6:	2a00      	cmp	r2, #0
 8080fb8:	da16      	bge.n	8080fe8 <bme68x_get_data+0x3f0>
        int16_t diff = meas_index2 - meas_index1;
 8080fba:	f895 a002 	ldrb.w	sl, [r5, #2]
 8080fbe:	789a      	ldrb	r2, [r3, #2]
 8080fc0:	eba2 020a 	sub.w	r2, r2, sl
 8080fc4:	b292      	uxth	r2, r2
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8080fc6:	f102 0a02 	add.w	sl, r2, #2
 8080fca:	fa1f fa8a 	uxth.w	sl, sl
 8080fce:	f1ba 0f01 	cmp.w	sl, #1
 8080fd2:	d902      	bls.n	8080fda <bme68x_get_data+0x3e2>
 8080fd4:	b212      	sxth	r2, r2
 8080fd6:	2a02      	cmp	r2, #2
 8080fd8:	dd06      	ble.n	8080fe8 <bme68x_get_data+0x3f0>
    field[index1] = field[index2];
 8080fda:	f8cc 3000 	str.w	r3, [ip]
    field[index2] = temp;
 8080fde:	f841 5c04 	str.w	r5, [r1, #-4]
}
 8080fe2:	e001      	b.n	8080fe8 <bme68x_get_data+0x3f0>
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8080fe4:	2a00      	cmp	r2, #0
 8080fe6:	dbf8      	blt.n	8080fda <bme68x_get_data+0x3e2>
                for (j = i + 1; j < 3; j++)
 8080fe8:	f1b9 0f02 	cmp.w	r9, #2
 8080fec:	d1d6      	bne.n	8080f9c <bme68x_get_data+0x3a4>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8080fee:	f1b8 0f02 	cmp.w	r8, #2
 8080ff2:	f04f 0301 	mov.w	r3, #1
 8080ff6:	d007      	beq.n	8081008 <bme68x_get_data+0x410>
                for (j = i + 1; j < 3; j++)
 8080ff8:	3301      	adds	r3, #1
 8080ffa:	4684      	mov	ip, r0
 8080ffc:	fa5f f883 	uxtb.w	r8, r3
 8081000:	3004      	adds	r0, #4
 8081002:	4601      	mov	r1, r0
 8081004:	46c1      	mov	r9, r8
 8081006:	e7cb      	b.n	8080fa0 <bme68x_get_data+0x3a8>
 8081008:	f04f 0800 	mov.w	r8, #0
                data[i] = *field_ptr[i];
 808100c:	f04f 0918 	mov.w	r9, #24
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8081010:	b97c      	cbnz	r4, 8081032 <bme68x_get_data+0x43a>
                data[i] = *field_ptr[i];
 8081012:	fb09 6508 	mla	r5, r9, r8, r6
 8081016:	f85e cb04 	ldr.w	ip, [lr], #4
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 808101a:	f108 0801 	add.w	r8, r8, #1
                data[i] = *field_ptr[i];
 808101e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8081022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8081024:	e89c 0003 	ldmia.w	ip, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8081028:	f1b8 0f03 	cmp.w	r8, #3
                data[i] = *field_ptr[i];
 808102c:	e885 0003 	stmia.w	r5, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8081030:	d1ef      	bne.n	8081012 <bme68x_get_data+0x41a>
                rslt = BME68X_W_NO_NEW_DATA;
 8081032:	2f00      	cmp	r7, #0
 8081034:	bf08      	it	eq
 8081036:	2402      	moveq	r4, #2
 8081038:	e6d2      	b.n	8080de0 <bme68x_get_data+0x1e8>
            rslt = BME68X_W_DEFINE_OP_MODE;
 808103a:	2401      	movs	r4, #1
 808103c:	e6d0      	b.n	8080de0 <bme68x_get_data+0x1e8>
 808103e:	bf00      	nop
 8081040:	49742400 	.word	0x49742400

08081044 <bme68x_set_heatr_conf>:
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8081044:	f247 1370 	movw	r3, #29040	; 0x7170
{
 8081048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808104c:	b093      	sub	sp, #76	; 0x4c
 808104e:	4606      	mov	r6, r0
 8081050:	4617      	mov	r7, r2
    if (conf != NULL)
 8081052:	460d      	mov	r5, r1
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8081054:	f8ad 3014 	strh.w	r3, [sp, #20]
    if (conf != NULL)
 8081058:	2900      	cmp	r1, #0
 808105a:	f000 8090 	beq.w	808117e <bme68x_set_heatr_conf+0x13a>
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 808105e:	4611      	mov	r1, r2
 8081060:	2000      	movs	r0, #0
 8081062:	f7ff fc9c 	bl	808099e <bme68x_set_op_mode>
        if (rslt == BME68X_OK)
 8081066:	4604      	mov	r4, r0
 8081068:	2800      	cmp	r0, #0
 808106a:	f040 80f7 	bne.w	808125c <bme68x_set_heatr_conf+0x218>
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 808106e:	236e      	movs	r3, #110	; 0x6e
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8081070:	4a8f      	ldr	r2, [pc, #572]	; (80812b0 <bme68x_set_heatr_conf+0x26c>)
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8081072:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8081076:	f8d2 0086 	ldr.w	r0, [r2, #134]	; 0x86
 808107a:	f8d2 108a 	ldr.w	r1, [r2, #138]	; 0x8a
 808107e:	ab06      	add	r3, sp, #24
 8081080:	c303      	stmia	r3!, {r0, r1}
 8081082:	f8b2 208e 	ldrh.w	r2, [r2, #142]	; 0x8e
    switch (op_mode)
 8081086:	2e02      	cmp	r6, #2
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8081088:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 808108a:	ab09      	add	r3, sp, #36	; 0x24
 808108c:	c303      	stmia	r3!, {r0, r1}
 808108e:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8081090:	ab0c      	add	r3, sp, #48	; 0x30
 8081092:	c303      	stmia	r3!, {r0, r1}
 8081094:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8081096:	ab0f      	add	r3, sp, #60	; 0x3c
 8081098:	c303      	stmia	r3!, {r0, r1}
 808109a:	f10d 0918 	add.w	r9, sp, #24
 808109e:	801a      	strh	r2, [r3, #0]
    switch (op_mode)
 80810a0:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
 80810a4:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 80810a8:	f000 80a1 	beq.w	80811ee <bme68x_set_heatr_conf+0x1aa>
 80810ac:	2e03      	cmp	r6, #3
 80810ae:	d064      	beq.n	808117a <bme68x_set_heatr_conf+0x136>
 80810b0:	2e01      	cmp	r6, #1
 80810b2:	f040 80fb 	bne.w	80812ac <bme68x_set_heatr_conf+0x268>
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 80810b6:	235a      	movs	r3, #90	; 0x5a
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 80810b8:	4639      	mov	r1, r7
 80810ba:	8868      	ldrh	r0, [r5, #2]
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 80810bc:	f88d 3018 	strb.w	r3, [sp, #24]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 80810c0:	f7ff f9b6 	bl	8080430 <calc_res_heat>
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 80810c4:	2364      	movs	r3, #100	; 0x64
 80810c6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 80810ca:	88ab      	ldrh	r3, [r5, #4]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 80810cc:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    if (dur >= 0xfc0)
 80810d0:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80810d4:	d24f      	bcs.n	8081176 <bme68x_set_heatr_conf+0x132>
        while (dur > 0x3F)
 80810d6:	2b3f      	cmp	r3, #63	; 0x3f
 80810d8:	b2e2      	uxtb	r2, r4
 80810da:	f104 0401 	add.w	r4, r4, #1
 80810de:	d848      	bhi.n	8081172 <bme68x_set_heatr_conf+0x12e>
        durval = (uint8_t)(dur + (factor * 64));
 80810e0:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80810e4:	b2db      	uxtb	r3, r3
            (*nb_conv) = 0;
 80810e6:	f04f 0800 	mov.w	r8, #0
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 80810ea:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 80810ee:	463b      	mov	r3, r7
 80810f0:	4632      	mov	r2, r6
 80810f2:	4651      	mov	r1, sl
 80810f4:	4648      	mov	r0, r9
 80810f6:	f7ff fb07 	bl	8080708 <bme68x_set_regs>
    if (rslt == BME68X_OK)
 80810fa:	4604      	mov	r4, r0
 80810fc:	2800      	cmp	r0, #0
 80810fe:	f040 80ad 	bne.w	808125c <bme68x_set_heatr_conf+0x218>
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8081102:	463b      	mov	r3, r7
 8081104:	4632      	mov	r2, r6
 8081106:	a90f      	add	r1, sp, #60	; 0x3c
 8081108:	a80c      	add	r0, sp, #48	; 0x30
 808110a:	f7ff fafd 	bl	8080708 <bme68x_set_regs>
        if (rslt == BME68X_OK)
 808110e:	4604      	mov	r4, r0
 8081110:	2800      	cmp	r0, #0
 8081112:	f040 80a3 	bne.w	808125c <bme68x_set_heatr_conf+0x218>
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 8081116:	463b      	mov	r3, r7
 8081118:	2202      	movs	r2, #2
 808111a:	2070      	movs	r0, #112	; 0x70
 808111c:	a90f      	add	r1, sp, #60	; 0x3c
 808111e:	f7ff fb3d 	bl	808079c <bme68x_get_regs>
            if (rslt == BME68X_OK)
 8081122:	4604      	mov	r4, r0
 8081124:	2800      	cmp	r0, #0
 8081126:	f040 8099 	bne.w	808125c <bme68x_set_heatr_conf+0x218>
                if (conf->enable == BME68X_ENABLE)
 808112a:	782a      	ldrb	r2, [r5, #0]
 808112c:	2a01      	cmp	r2, #1
 808112e:	f040 80ba 	bne.w	80812a6 <bme68x_set_heatr_conf+0x262>
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8081132:	68bb      	ldr	r3, [r7, #8]
                    hctrl = BME68X_ENABLE_HEATER;
 8081134:	2b01      	cmp	r3, #1
 8081136:	bf08      	it	eq
 8081138:	2202      	moveq	r2, #2
                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 808113a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 808113e:	a90f      	add	r1, sp, #60	; 0x3c
                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8081140:	f023 0308 	bic.w	r3, r3, #8
 8081144:	ea43 04c4 	orr.w	r4, r3, r4, lsl #3
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8081148:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 808114c:	a805      	add	r0, sp, #20
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 808114e:	f023 030f 	bic.w	r3, r3, #15
 8081152:	ea43 0308 	orr.w	r3, r3, r8
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8081156:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 808115a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 808115e:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8081162:	2202      	movs	r2, #2
 8081164:	463b      	mov	r3, r7
                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8081166:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 808116a:	f7ff facd 	bl	8080708 <bme68x_set_regs>
 808116e:	4604      	mov	r4, r0
 8081170:	e074      	b.n	808125c <bme68x_set_heatr_conf+0x218>
            dur = dur / 4;
 8081172:	089b      	lsrs	r3, r3, #2
            factor += 1;
 8081174:	e7af      	b.n	80810d6 <bme68x_set_heatr_conf+0x92>
        durval = 0xff; /* Max duration*/
 8081176:	23ff      	movs	r3, #255	; 0xff
 8081178:	e7b5      	b.n	80810e6 <bme68x_set_heatr_conf+0xa2>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 808117a:	68eb      	ldr	r3, [r5, #12]
 808117c:	b913      	cbnz	r3, 8081184 <bme68x_set_heatr_conf+0x140>
        rslt = BME68X_E_NULL_PTR;
 808117e:	f04f 34ff 	mov.w	r4, #4294967295
 8081182:	e06b      	b.n	808125c <bme68x_set_heatr_conf+0x218>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8081184:	68aa      	ldr	r2, [r5, #8]
 8081186:	2a00      	cmp	r2, #0
 8081188:	d0f9      	beq.n	808117e <bme68x_set_heatr_conf+0x13a>
            for (i = 0; i < conf->profile_len; i++)
 808118a:	7c2e      	ldrb	r6, [r5, #16]
 808118c:	fa5f f884 	uxtb.w	r8, r4
 8081190:	4546      	cmp	r6, r8
 8081192:	d801      	bhi.n	8081198 <bme68x_set_heatr_conf+0x154>
 8081194:	46b0      	mov	r8, r6
 8081196:	e7aa      	b.n	80810ee <bme68x_set_heatr_conf+0xaa>
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8081198:	f108 015a 	add.w	r1, r8, #90	; 0x5a
 808119c:	f809 1004 	strb.w	r1, [r9, r4]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80811a0:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 80811a4:	4639      	mov	r1, r7
 80811a6:	9301      	str	r3, [sp, #4]
 80811a8:	9200      	str	r2, [sp, #0]
 80811aa:	f7ff f941 	bl	8080430 <calc_res_heat>
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80811ae:	f108 0864 	add.w	r8, r8, #100	; 0x64
 80811b2:	ab0c      	add	r3, sp, #48	; 0x30
 80811b4:	f803 8004 	strb.w	r8, [r3, r4]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 80811b8:	9b01      	ldr	r3, [sp, #4]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80811ba:	f80a 0004 	strb.w	r0, [sl, r4]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 80811be:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
    if (dur >= 0xfc0)
 80811c2:	9a00      	ldr	r2, [sp, #0]
 80811c4:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
 80811c8:	d20f      	bcs.n	80811ea <bme68x_set_heatr_conf+0x1a6>
 80811ca:	2000      	movs	r0, #0
        while (dur > 0x3F)
 80811cc:	293f      	cmp	r1, #63	; 0x3f
 80811ce:	fa5f fc80 	uxtb.w	ip, r0
 80811d2:	f100 0001 	add.w	r0, r0, #1
 80811d6:	d806      	bhi.n	80811e6 <bme68x_set_heatr_conf+0x1a2>
        durval = (uint8_t)(dur + (factor * 64));
 80811d8:	eb01 118c 	add.w	r1, r1, ip, lsl #6
 80811dc:	b2c9      	uxtb	r1, r1
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 80811de:	f80b 1004 	strb.w	r1, [fp, r4]
            for (i = 0; i < conf->profile_len; i++)
 80811e2:	3401      	adds	r4, #1
 80811e4:	e7d2      	b.n	808118c <bme68x_set_heatr_conf+0x148>
            dur = dur / 4;
 80811e6:	0889      	lsrs	r1, r1, #2
            factor += 1;
 80811e8:	e7f0      	b.n	80811cc <bme68x_set_heatr_conf+0x188>
        durval = 0xff; /* Max duration*/
 80811ea:	21ff      	movs	r1, #255	; 0xff
 80811ec:	e7f7      	b.n	80811de <bme68x_set_heatr_conf+0x19a>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 80811ee:	68eb      	ldr	r3, [r5, #12]
 80811f0:	2b00      	cmp	r3, #0
 80811f2:	d0c4      	beq.n	808117e <bme68x_set_heatr_conf+0x13a>
 80811f4:	68aa      	ldr	r2, [r5, #8]
 80811f6:	9200      	str	r2, [sp, #0]
 80811f8:	2a00      	cmp	r2, #0
 80811fa:	d0c0      	beq.n	808117e <bme68x_set_heatr_conf+0x13a>
            if (conf->shared_heatr_dur == 0)
 80811fc:	8a6a      	ldrh	r2, [r5, #18]
            for (i = 0; i < conf->profile_len; i++)
 80811fe:	f04f 0800 	mov.w	r8, #0
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8081202:	2a00      	cmp	r2, #0
 8081204:	bf08      	it	eq
 8081206:	2403      	moveq	r4, #3
            for (i = 0; i < conf->profile_len; i++)
 8081208:	7c2e      	ldrb	r6, [r5, #16]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 808120a:	f8cd b004 	str.w	fp, [sp, #4]
            for (i = 0; i < conf->profile_len; i++)
 808120e:	fa5f fb88 	uxtb.w	fp, r8
 8081212:	455e      	cmp	r6, fp
 8081214:	d826      	bhi.n	8081264 <bme68x_set_heatr_conf+0x220>
    if (dur >= 0x783)
 8081216:	f240 7382 	movw	r3, #1922	; 0x782
 808121a:	429a      	cmp	r2, r3
 808121c:	d841      	bhi.n	80812a2 <bme68x_set_heatr_conf+0x25e>
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 808121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081222:	435a      	muls	r2, r3
 8081224:	f240 13dd 	movw	r3, #477	; 0x1dd
 8081228:	fbb2 f2f3 	udiv	r2, r2, r3
        while (dur > 0x3F)
 808122c:	2300      	movs	r3, #0
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 808122e:	b292      	uxth	r2, r2
        while (dur > 0x3F)
 8081230:	2a3f      	cmp	r2, #63	; 0x3f
 8081232:	b2d9      	uxtb	r1, r3
 8081234:	f103 0301 	add.w	r3, r3, #1
 8081238:	d831      	bhi.n	808129e <bme68x_set_heatr_conf+0x25a>
        heatdurval = (uint8_t)(dur + (factor * 64));
 808123a:	eb02 1281 	add.w	r2, r2, r1, lsl #6
 808123e:	b2d2      	uxtb	r2, r2
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8081240:	f88d 2012 	strb.w	r2, [sp, #18]
            if (rslt == BME68X_OK)
 8081244:	b954      	cbnz	r4, 808125c <bme68x_set_heatr_conf+0x218>
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8081246:	463b      	mov	r3, r7
 8081248:	2201      	movs	r2, #1
 808124a:	f10d 0112 	add.w	r1, sp, #18
 808124e:	f10d 0013 	add.w	r0, sp, #19
 8081252:	f7ff fa59 	bl	8080708 <bme68x_set_regs>
    if (rslt == BME68X_OK)
 8081256:	4604      	mov	r4, r0
 8081258:	2800      	cmp	r0, #0
 808125a:	d09b      	beq.n	8081194 <bme68x_set_heatr_conf+0x150>
}
 808125c:	4620      	mov	r0, r4
 808125e:	b013      	add	sp, #76	; 0x4c
 8081260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081264:	e9cd 3202 	strd	r3, r2, [sp, #8]
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8081268:	f10b 015a 	add.w	r1, fp, #90	; 0x5a
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 808126c:	9b00      	ldr	r3, [sp, #0]
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 808126e:	f809 1008 	strb.w	r1, [r9, r8]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8081272:	f833 0018 	ldrh.w	r0, [r3, r8, lsl #1]
 8081276:	4639      	mov	r1, r7
 8081278:	f7ff f8da 	bl	8080430 <calc_res_heat>
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 808127c:	f10b 0b64 	add.w	fp, fp, #100	; 0x64
 8081280:	ab0c      	add	r3, sp, #48	; 0x30
 8081282:	f803 b008 	strb.w	fp, [r3, r8]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8081286:	9b02      	ldr	r3, [sp, #8]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8081288:	f80a 0008 	strb.w	r0, [sl, r8]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 808128c:	f833 1018 	ldrh.w	r1, [r3, r8, lsl #1]
 8081290:	9a01      	ldr	r2, [sp, #4]
 8081292:	f808 1002 	strb.w	r1, [r8, r2]
            for (i = 0; i < conf->profile_len; i++)
 8081296:	9a03      	ldr	r2, [sp, #12]
 8081298:	f108 0801 	add.w	r8, r8, #1
 808129c:	e7b7      	b.n	808120e <bme68x_set_heatr_conf+0x1ca>
            dur = dur >> 2;
 808129e:	0892      	lsrs	r2, r2, #2
            factor += 1;
 80812a0:	e7c6      	b.n	8081230 <bme68x_set_heatr_conf+0x1ec>
        heatdurval = 0xff; /* Max duration */
 80812a2:	22ff      	movs	r2, #255	; 0xff
 80812a4:	e7cc      	b.n	8081240 <bme68x_set_heatr_conf+0x1fc>
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 80812a6:	4602      	mov	r2, r0
                    hctrl = BME68X_DISABLE_HEATER;
 80812a8:	2401      	movs	r4, #1
 80812aa:	e746      	b.n	808113a <bme68x_set_heatr_conf+0xf6>
    switch (op_mode)
 80812ac:	2401      	movs	r4, #1
    return rslt;
 80812ae:	e7d5      	b.n	808125c <bme68x_set_heatr_conf+0x218>
 80812b0:	08086818 	.word	0x08086818

080812b4 <_ZN16Adafruit_ADS1115C1Ev>:
/*!
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115() {
  m_bitShift = 0;
 80812b4:	2200      	movs	r2, #0
 80812b6:	7102      	strb	r2, [r0, #4]
  m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 80812b8:	80c2      	strh	r2, [r0, #6]
  m_dataRate = RATE_ADS1115_128SPS;
 80812ba:	2280      	movs	r2, #128	; 0x80
 80812bc:	8102      	strh	r2, [r0, #8]
}
 80812be:	4770      	bx	lr

080812c0 <_ZN16Adafruit_ADS1X155beginEhP7TwoWire>:
    @param wire I2C bus

    @return true if successful, otherwise false
*/
/**************************************************************************/
bool Adafruit_ADS1X15::begin(uint8_t i2c_addr, TwoWire *wire) {
 80812c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80812c2:	4605      	mov	r5, r0
  m_i2c_dev = new Adafruit_I2CDevice(i2c_addr, wire);
 80812c4:	2010      	movs	r0, #16
bool Adafruit_ADS1X15::begin(uint8_t i2c_addr, TwoWire *wire) {
 80812c6:	460e      	mov	r6, r1
 80812c8:	4617      	mov	r7, r2
  m_i2c_dev = new Adafruit_I2CDevice(i2c_addr, wire);
 80812ca:	f7fe fee4 	bl	8080096 <_Znwj>
 80812ce:	4604      	mov	r4, r0
 80812d0:	b118      	cbz	r0, 80812da <_ZN16Adafruit_ADS1X155beginEhP7TwoWire+0x1a>
 80812d2:	463a      	mov	r2, r7
 80812d4:	4631      	mov	r1, r6
 80812d6:	f001 f967 	bl	80825a8 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  return m_i2c_dev->begin();
 80812da:	4620      	mov	r0, r4
  m_i2c_dev = new Adafruit_I2CDevice(i2c_addr, wire);
 80812dc:	602c      	str	r4, [r5, #0]
  return m_i2c_dev->begin();
 80812de:	2101      	movs	r1, #1
}
 80812e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_i2c_dev->begin();
 80812e4:	f001 b97c 	b.w	80825e0 <_ZN18Adafruit_I2CDevice5beginEb>

080812e8 <_ZN16Adafruit_ADS1X1513writeRegisterEht>:
    @param value value to write to register
*/
/**************************************************************************/
void Adafruit_ADS1X15::writeRegister(uint8_t reg, uint16_t value) {
  buffer[0] = reg;
  buffer[1] = value >> 8;
 80812e8:	0a13      	lsrs	r3, r2, #8
void Adafruit_ADS1X15::writeRegister(uint8_t reg, uint16_t value) {
 80812ea:	b507      	push	{r0, r1, r2, lr}
  buffer[1] = value >> 8;
 80812ec:	72c3      	strb	r3, [r0, #11]
  buffer[2] = value & 0xFF;
  m_i2c_dev->write(buffer, 3);
 80812ee:	2300      	movs	r3, #0
  buffer[0] = reg;
 80812f0:	7281      	strb	r1, [r0, #10]
  buffer[2] = value & 0xFF;
 80812f2:	7302      	strb	r2, [r0, #12]
  m_i2c_dev->write(buffer, 3);
 80812f4:	e9cd 3300 	strd	r3, r3, [sp]
 80812f8:	f100 010a 	add.w	r1, r0, #10
 80812fc:	2301      	movs	r3, #1
 80812fe:	2203      	movs	r2, #3
 8081300:	6800      	ldr	r0, [r0, #0]
 8081302:	f001 f97c 	bl	80825fe <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 8081306:	b003      	add	sp, #12
 8081308:	f85d fb04 	ldr.w	pc, [sp], #4

0808130c <_ZN16Adafruit_ADS1X1515startADCReadingEtb>:
    config |= ADS1X15_REG_CONFIG_MODE_SINGLE;
 808130c:	2a00      	cmp	r2, #0
 808130e:	bf14      	ite	ne
 8081310:	2200      	movne	r2, #0
 8081312:	f44f 7280 	moveq.w	r2, #256	; 0x100
void Adafruit_ADS1X15::startADCReading(uint16_t mux, bool continuous) {
 8081316:	b510      	push	{r4, lr}
 8081318:	4604      	mov	r4, r0
 808131a:	430a      	orrs	r2, r1
 808131c:	88c1      	ldrh	r1, [r0, #6]
 808131e:	430a      	orrs	r2, r1
  config |= mux;
 8081320:	8901      	ldrh	r1, [r0, #8]
 8081322:	430a      	orrs	r2, r1
  writeRegister(ADS1X15_REG_POINTER_CONFIG, config);
 8081324:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8081328:	2101      	movs	r1, #1
 808132a:	f7ff ffdd 	bl	80812e8 <_ZN16Adafruit_ADS1X1513writeRegisterEht>
  writeRegister(ADS1X15_REG_POINTER_HITHRESH, 0x8000);
 808132e:	4620      	mov	r0, r4
 8081330:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8081334:	2103      	movs	r1, #3
 8081336:	f7ff ffd7 	bl	80812e8 <_ZN16Adafruit_ADS1X1513writeRegisterEht>
  writeRegister(ADS1X15_REG_POINTER_LOWTHRESH, 0x0000);
 808133a:	4620      	mov	r0, r4
}
 808133c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister(ADS1X15_REG_POINTER_LOWTHRESH, 0x0000);
 8081340:	2200      	movs	r2, #0
 8081342:	2102      	movs	r1, #2
 8081344:	f7ff bfd0 	b.w	80812e8 <_ZN16Adafruit_ADS1X1513writeRegisterEht>

08081348 <_ZN16Adafruit_ADS1X1512readRegisterEh>:
    @param reg register address to read from

    @return 16 bit register value read
*/
/**************************************************************************/
uint16_t Adafruit_ADS1X15::readRegister(uint8_t reg) {
 8081348:	b537      	push	{r0, r1, r2, r4, r5, lr}
  buffer[0] = reg;
  m_i2c_dev->write(buffer, 1);
 808134a:	2300      	movs	r3, #0
  buffer[0] = reg;
 808134c:	4605      	mov	r5, r0
 808134e:	f805 1f0a 	strb.w	r1, [r5, #10]!
  m_i2c_dev->write(buffer, 1);
 8081352:	e9cd 3300 	strd	r3, r3, [sp]
 8081356:	2301      	movs	r3, #1
uint16_t Adafruit_ADS1X15::readRegister(uint8_t reg) {
 8081358:	4604      	mov	r4, r0
  m_i2c_dev->write(buffer, 1);
 808135a:	461a      	mov	r2, r3
 808135c:	4629      	mov	r1, r5
 808135e:	6800      	ldr	r0, [r0, #0]
 8081360:	f001 f94d 	bl	80825fe <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
  m_i2c_dev->read(buffer, 2);
 8081364:	2301      	movs	r3, #1
 8081366:	2202      	movs	r2, #2
 8081368:	4629      	mov	r1, r5
 808136a:	6820      	ldr	r0, [r4, #0]
 808136c:	f001 f996 	bl	808269c <_ZN18Adafruit_I2CDevice4readEPhjb>
  return ((buffer[0] << 8) | buffer[1]);
 8081370:	8960      	ldrh	r0, [r4, #10]
 8081372:	ba40      	rev16	r0, r0
}
 8081374:	b280      	uxth	r0, r0
 8081376:	b003      	add	sp, #12
 8081378:	bd30      	pop	{r4, r5, pc}

0808137a <_ZN16Adafruit_ADS1X1524getLastConversionResultsEv>:
int16_t Adafruit_ADS1X15::getLastConversionResults() {
 808137a:	b510      	push	{r4, lr}
 808137c:	4604      	mov	r4, r0
  uint16_t res = readRegister(ADS1X15_REG_POINTER_CONVERT) >> m_bitShift;
 808137e:	2100      	movs	r1, #0
 8081380:	f7ff ffe2 	bl	8081348 <_ZN16Adafruit_ADS1X1512readRegisterEh>
 8081384:	7923      	ldrb	r3, [r4, #4]
 8081386:	4118      	asrs	r0, r3
  if (m_bitShift == 0) {
 8081388:	b90b      	cbnz	r3, 808138e <_ZN16Adafruit_ADS1X1524getLastConversionResultsEv+0x14>
    return (int16_t)res;
 808138a:	b200      	sxth	r0, r0
}
 808138c:	bd10      	pop	{r4, pc}
  uint16_t res = readRegister(ADS1X15_REG_POINTER_CONVERT) >> m_bitShift;
 808138e:	b280      	uxth	r0, r0
    if (res > 0x07FF) {
 8081390:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
      res |= 0xF000;
 8081394:	bf28      	it	cs
 8081396:	f440 4070 	orrcs.w	r0, r0, #61440	; 0xf000
 808139a:	e7f6      	b.n	808138a <_ZN16Adafruit_ADS1X1524getLastConversionResultsEv+0x10>

0808139c <_ZN16Adafruit_ADS1X1518conversionCompleteEv>:
  return (readRegister(ADS1X15_REG_POINTER_CONFIG) & 0x8000) != 0;
 808139c:	2101      	movs	r1, #1
bool Adafruit_ADS1X15::conversionComplete() {
 808139e:	b508      	push	{r3, lr}
  return (readRegister(ADS1X15_REG_POINTER_CONFIG) & 0x8000) != 0;
 80813a0:	f7ff ffd2 	bl	8081348 <_ZN16Adafruit_ADS1X1512readRegisterEh>
}
 80813a4:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80813a8:	bd08      	pop	{r3, pc}
	...

080813ac <_ZN16Adafruit_ADS1X1519readADC_SingleEndedEh>:
  if (channel > 3) {
 80813ac:	2903      	cmp	r1, #3
int16_t Adafruit_ADS1X15::readADC_SingleEnded(uint8_t channel) {
 80813ae:	b510      	push	{r4, lr}
 80813b0:	4604      	mov	r4, r0
  if (channel > 3) {
 80813b2:	d80f      	bhi.n	80813d4 <_ZN16Adafruit_ADS1X1519readADC_SingleEndedEh+0x28>
  startADCReading(MUX_BY_CHANNEL[channel], /*continuous=*/false);
 80813b4:	4b08      	ldr	r3, [pc, #32]	; (80813d8 <_ZN16Adafruit_ADS1X1519readADC_SingleEndedEh+0x2c>)
 80813b6:	2200      	movs	r2, #0
 80813b8:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80813bc:	f7ff ffa6 	bl	808130c <_ZN16Adafruit_ADS1X1515startADCReadingEtb>
  while (!conversionComplete())
 80813c0:	4620      	mov	r0, r4
 80813c2:	f7ff ffeb 	bl	808139c <_ZN16Adafruit_ADS1X1518conversionCompleteEv>
 80813c6:	2800      	cmp	r0, #0
 80813c8:	d0fa      	beq.n	80813c0 <_ZN16Adafruit_ADS1X1519readADC_SingleEndedEh+0x14>
  return getLastConversionResults();
 80813ca:	4620      	mov	r0, r4
}
 80813cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getLastConversionResults();
 80813d0:	f7ff bfd3 	b.w	808137a <_ZN16Adafruit_ADS1X1524getLastConversionResultsEv>
}
 80813d4:	2000      	movs	r0, #0
 80813d6:	bd10      	pop	{r4, pc}
 80813d8:	080868a8 	.word	0x080868a8

080813dc <_ZL9date2daysthh>:
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
 80813dc:	2300      	movs	r3, #0
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
 80813de:	b530      	push	{r4, r5, lr}
 80813e0:	4c0e      	ldr	r4, [pc, #56]	; (808141c <_ZL9date2daysthh+0x40>)
  for (uint8_t i = 1; i < m; ++i)
 80813e2:	3301      	adds	r3, #1
 80813e4:	b2dd      	uxtb	r5, r3
 80813e6:	428d      	cmp	r5, r1
 80813e8:	d204      	bcs.n	80813f4 <_ZL9date2daysthh+0x18>
    days += pgm_read_byte(daysInMonth + i - 1);
 80813ea:	f814 5b01 	ldrb.w	r5, [r4], #1
 80813ee:	442a      	add	r2, r5
 80813f0:	b292      	uxth	r2, r2
  for (uint8_t i = 1; i < m; ++i)
 80813f2:	e7f6      	b.n	80813e2 <_ZL9date2daysthh+0x6>
  if (m > 2 && y % 4 == 0)
 80813f4:	2902      	cmp	r1, #2
 80813f6:	d903      	bls.n	8081400 <_ZL9date2daysthh+0x24>
 80813f8:	0783      	lsls	r3, r0, #30
    ++days;
 80813fa:	bf04      	itt	eq
 80813fc:	3201      	addeq	r2, #1
 80813fe:	b292      	uxtheq	r2, r2
  return days + 365 * y + (y + 3) / 4 - 1;
 8081400:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8081404:	1cc3      	adds	r3, r0, #3
 8081406:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 808140a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 808140e:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8081412:	3801      	subs	r0, #1
 8081414:	4418      	add	r0, r3
 8081416:	4410      	add	r0, r2
}
 8081418:	b280      	uxth	r0, r0
 808141a:	bd30      	pop	{r4, r5, pc}
 808141c:	080868b0 	.word	0x080868b0

08081420 <_ZL6conv2dPKc>:
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
 8081420:	7803      	ldrb	r3, [r0, #0]
    v = *p - '0';
  return 10 * v + *++p - '0';
 8081422:	7840      	ldrb	r0, [r0, #1]
  if ('0' <= *p && *p <= '9')
 8081424:	3b30      	subs	r3, #48	; 0x30
 8081426:	b2db      	uxtb	r3, r3
  uint8_t v = 0;
 8081428:	2b0a      	cmp	r3, #10
 808142a:	bf28      	it	cs
 808142c:	2300      	movcs	r3, #0
  return 10 * v + *++p - '0';
 808142e:	3830      	subs	r0, #48	; 0x30
 8081430:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8081434:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8081438:	b2c0      	uxtb	r0, r0
 808143a:	4770      	bx	lr

0808143c <_ZN7RTC_I2C14write_registerEhh>:
void RTC_I2C::write_register(uint8_t reg, uint8_t val) {
 808143c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  i2c_dev->write(buffer, 2);
 808143e:	2300      	movs	r3, #0
 8081440:	e9cd 3300 	strd	r3, r3, [sp]
  uint8_t buffer[2] = {reg, val};
 8081444:	f88d 100c 	strb.w	r1, [sp, #12]
 8081448:	f88d 200d 	strb.w	r2, [sp, #13]
  i2c_dev->write(buffer, 2);
 808144c:	2301      	movs	r3, #1
 808144e:	2202      	movs	r2, #2
 8081450:	a903      	add	r1, sp, #12
 8081452:	6800      	ldr	r0, [r0, #0]
 8081454:	f001 f8d3 	bl	80825fe <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 8081458:	b005      	add	sp, #20
 808145a:	f85d fb04 	ldr.w	pc, [sp], #4

0808145e <_ZN7RTC_I2C13read_registerEh>:
  i2c_dev->write(&reg, 1);
 808145e:	2300      	movs	r3, #0
uint8_t RTC_I2C::read_register(uint8_t reg) {
 8081460:	b510      	push	{r4, lr}
 8081462:	b086      	sub	sp, #24
  i2c_dev->write(&reg, 1);
 8081464:	e9cd 3300 	strd	r3, r3, [sp]
 8081468:	2301      	movs	r3, #1
uint8_t RTC_I2C::read_register(uint8_t reg) {
 808146a:	4604      	mov	r4, r0
  i2c_dev->write(&reg, 1);
 808146c:	461a      	mov	r2, r3
uint8_t RTC_I2C::read_register(uint8_t reg) {
 808146e:	f88d 100f 	strb.w	r1, [sp, #15]
  i2c_dev->write(&reg, 1);
 8081472:	6800      	ldr	r0, [r0, #0]
 8081474:	f10d 010f 	add.w	r1, sp, #15
 8081478:	f001 f8c1 	bl	80825fe <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
  i2c_dev->read(buffer, 1);
 808147c:	2301      	movs	r3, #1
 808147e:	6820      	ldr	r0, [r4, #0]
 8081480:	461a      	mov	r2, r3
 8081482:	a905      	add	r1, sp, #20
 8081484:	f001 f90a 	bl	808269c <_ZN18Adafruit_I2CDevice4readEPhjb>
}
 8081488:	f89d 0014 	ldrb.w	r0, [sp, #20]
 808148c:	b006      	add	sp, #24
 808148e:	bd10      	pop	{r4, pc}

08081490 <_ZN8DateTimeC1Ethhhhh>:
  d = day;
 8081490:	7083      	strb	r3, [r0, #2]
  hh = hour;
 8081492:	f89d 3000 	ldrb.w	r3, [sp]
  if (year >= 2000U)
 8081496:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
  hh = hour;
 808149a:	70c3      	strb	r3, [r0, #3]
  mm = min;
 808149c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    year -= 2000U;
 80814a0:	bf28      	it	cs
 80814a2:	f5a1 61fa 	subcs.w	r1, r1, #2000	; 0x7d0
  mm = min;
 80814a6:	7103      	strb	r3, [r0, #4]
  ss = sec;
 80814a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    year -= 2000U;
 80814ac:	bf28      	it	cs
 80814ae:	b289      	uxthcs	r1, r1
  yOff = year;
 80814b0:	7001      	strb	r1, [r0, #0]
  m = month;
 80814b2:	7042      	strb	r2, [r0, #1]
  ss = sec;
 80814b4:	7143      	strb	r3, [r0, #5]
}
 80814b6:	4770      	bx	lr

080814b8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:

    @param date Date PROGMEM string, e.g. F("Apr 16 2020").
    @param time Time PROGMEM string, e.g. F("18:34:56").
*/
/**************************************************************************/
DateTime::DateTime(const __FlashStringHelper *date,
 80814b8:	b530      	push	{r4, r5, lr}
 80814ba:	460d      	mov	r5, r1
 80814bc:	b085      	sub	sp, #20
 80814be:	4604      	mov	r4, r0
                   const __FlashStringHelper *time) {
  char buff[11];
  memcpy_P(buff, date, 11);
 80814c0:	6808      	ldr	r0, [r1, #0]
 80814c2:	6849      	ldr	r1, [r1, #4]
 80814c4:	ab01      	add	r3, sp, #4
 80814c6:	c303      	stmia	r3!, {r0, r1}
 80814c8:	8928      	ldrh	r0, [r5, #8]
 80814ca:	7aa9      	ldrb	r1, [r5, #10]
 80814cc:	8018      	strh	r0, [r3, #0]
 80814ce:	7099      	strb	r1, [r3, #2]
  yOff = conv2d(buff + 9);
 80814d0:	f10d 000d 	add.w	r0, sp, #13
 80814d4:	f7ff ffa4 	bl	8081420 <_ZL6conv2dPKc>
 80814d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80814dc:	7020      	strb	r0, [r4, #0]
  // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
  switch (buff[0]) {
 80814de:	3b41      	subs	r3, #65	; 0x41
 80814e0:	2b12      	cmp	r3, #18
 80814e2:	d816      	bhi.n	8081512 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x5a>
 80814e4:	e8df f003 	tbb	[pc, r3]
 80814e8:	46151532 	.word	0x46151532
 80814ec:	15153015 	.word	0x15153015
 80814f0:	15150a15 	.word	0x15150a15
 80814f4:	15424439 	.word	0x15424439
 80814f8:	1515      	.short	0x1515
 80814fa:	40          	.byte	0x40
 80814fb:	00          	.byte	0x00
  case 'J':
    m = (buff[1] == 'a') ? 1 : ((buff[2] == 'n') ? 6 : 7);
 80814fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8081500:	2b61      	cmp	r3, #97	; 0x61
 8081502:	d01f      	beq.n	8081544 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x8c>
 8081504:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8081508:	2b6e      	cmp	r3, #110	; 0x6e
 808150a:	bf0c      	ite	eq
 808150c:	2306      	moveq	r3, #6
 808150e:	2307      	movne	r3, #7
    break;
  case 'N':
    m = 11;
    break;
  case 'D':
    m = 12;
 8081510:	7063      	strb	r3, [r4, #1]
    break;
  }
  d = conv2d(buff + 4);
 8081512:	a802      	add	r0, sp, #8
 8081514:	f7ff ff84 	bl	8081420 <_ZL6conv2dPKc>
 8081518:	70a0      	strb	r0, [r4, #2]
  memcpy_P(buff, time, 8);
 808151a:	6810      	ldr	r0, [r2, #0]
 808151c:	6851      	ldr	r1, [r2, #4]
 808151e:	ab01      	add	r3, sp, #4
 8081520:	c303      	stmia	r3!, {r0, r1}
  hh = conv2d(buff);
 8081522:	a801      	add	r0, sp, #4
 8081524:	f7ff ff7c 	bl	8081420 <_ZL6conv2dPKc>
 8081528:	70e0      	strb	r0, [r4, #3]
  mm = conv2d(buff + 3);
 808152a:	f10d 0007 	add.w	r0, sp, #7
 808152e:	f7ff ff77 	bl	8081420 <_ZL6conv2dPKc>
 8081532:	7120      	strb	r0, [r4, #4]
  ss = conv2d(buff + 6);
 8081534:	f10d 000a 	add.w	r0, sp, #10
 8081538:	f7ff ff72 	bl	8081420 <_ZL6conv2dPKc>
 808153c:	7160      	strb	r0, [r4, #5]
}
 808153e:	4620      	mov	r0, r4
 8081540:	b005      	add	sp, #20
 8081542:	bd30      	pop	{r4, r5, pc}
    m = (buff[1] == 'a') ? 1 : ((buff[2] == 'n') ? 6 : 7);
 8081544:	2301      	movs	r3, #1
 8081546:	e7e3      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = 2;
 8081548:	2302      	movs	r3, #2
 808154a:	e7e1      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = buff[2] == 'r' ? 4 : 8;
 808154c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8081550:	2b72      	cmp	r3, #114	; 0x72
 8081552:	bf0c      	ite	eq
 8081554:	2304      	moveq	r3, #4
 8081556:	2308      	movne	r3, #8
 8081558:	e7da      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = buff[2] == 'r' ? 3 : 5;
 808155a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 808155e:	2b72      	cmp	r3, #114	; 0x72
 8081560:	bf0c      	ite	eq
 8081562:	2303      	moveq	r3, #3
 8081564:	2305      	movne	r3, #5
 8081566:	e7d3      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = 9;
 8081568:	2309      	movs	r3, #9
 808156a:	e7d1      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = 10;
 808156c:	230a      	movs	r3, #10
 808156e:	e7cf      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = 11;
 8081570:	230b      	movs	r3, #11
 8081572:	e7cd      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>
    m = 12;
 8081574:	230c      	movs	r3, #12
 8081576:	e7cb      	b.n	8081510 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x58>

08081578 <_ZNK8DateTime12dayOfTheWeekEv>:
/*!
    @brief  Return the day of the week.
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
 8081578:	b508      	push	{r3, lr}
  uint16_t day = date2days(yOff, m, d);
 808157a:	7882      	ldrb	r2, [r0, #2]
 808157c:	7841      	ldrb	r1, [r0, #1]
 808157e:	7800      	ldrb	r0, [r0, #0]
 8081580:	f7ff ff2c 	bl	80813dc <_ZL9date2daysthh>
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
 8081584:	2307      	movs	r3, #7
 8081586:	3006      	adds	r0, #6
 8081588:	fbb0 f3f3 	udiv	r3, r0, r3
 808158c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8081590:	1ac0      	subs	r0, r0, r3
}
 8081592:	b2c0      	uxtb	r0, r0
 8081594:	bd08      	pop	{r3, pc}

08081596 <_ZL10delay_usecmPv>:
  }

  return 0;
}

static void delay_usec(uint32_t us, void *intf_ptr) {
 8081596:	b508      	push	{r3, lr}
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8081598:	f002 fc2a 	bl	8083df0 <HAL_Delay_Microseconds>
  (void)intf_ptr; // Unused parameter
  delayMicroseconds(us);
  yield();
}
 808159c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
 80815a0:	f002 bc36 	b.w	8083e10 <os_thread_yield>

080815a4 <_ZL9spi_writehPKhmPv>:
                        void *intf_ptr) {
 80815a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80815a6:	4604      	mov	r4, r0
 80815a8:	4618      	mov	r0, r3
  if (!_dev->write((uint8_t *)reg_data, len, &reg_addr, 1)) {
 80815aa:	2301      	movs	r3, #1
 80815ac:	9300      	str	r3, [sp, #0]
 80815ae:	f10d 030f 	add.w	r3, sp, #15
                        void *intf_ptr) {
 80815b2:	f88d 400f 	strb.w	r4, [sp, #15]
  if (!_dev->write((uint8_t *)reg_data, len, &reg_addr, 1)) {
 80815b6:	f000 fc2d 	bl	8081e14 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
 80815ba:	f080 0001 	eor.w	r0, r0, #1
 80815be:	4240      	negs	r0, r0
}
 80815c0:	b240      	sxtb	r0, r0
 80815c2:	b004      	add	sp, #16
 80815c4:	bd10      	pop	{r4, pc}

080815c6 <_ZL8spi_readhPhmPv>:
                       void *intf_ptr) {
 80815c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80815c8:	461c      	mov	r4, r3
  reg_addr |= 0x80;
 80815ca:	f060 037f 	orn	r3, r0, #127	; 0x7f
 80815ce:	f88d 300f 	strb.w	r3, [sp, #15]
  if (!_dev->write_then_read(&reg_addr, 1, reg_data, len, 0x0)) {
 80815d2:	2300      	movs	r3, #0
 80815d4:	4620      	mov	r0, r4
 80815d6:	e9cd 2300 	strd	r2, r3, [sp]
 80815da:	460b      	mov	r3, r1
 80815dc:	2201      	movs	r2, #1
 80815de:	f10d 010f 	add.w	r1, sp, #15
 80815e2:	f000 fc39 	bl	8081e58 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh>
 80815e6:	f080 0001 	eor.w	r0, r0, #1
 80815ea:	4240      	negs	r0, r0
}
 80815ec:	b240      	sxtb	r0, r0
 80815ee:	b004      	add	sp, #16
 80815f0:	bd10      	pop	{r4, pc}

080815f2 <_ZL9i2c_writehPKhmPv>:
                 void *intf) {
 80815f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80815f4:	4604      	mov	r4, r0
 80815f6:	4618      	mov	r0, r3
  if (!_dev->write((uint8_t *)reg_data, len, true, &reg_addr, 1)) {
 80815f8:	2301      	movs	r3, #1
                 void *intf) {
 80815fa:	f88d 400f 	strb.w	r4, [sp, #15]
  if (!_dev->write((uint8_t *)reg_data, len, true, &reg_addr, 1)) {
 80815fe:	f10d 040f 	add.w	r4, sp, #15
 8081602:	9301      	str	r3, [sp, #4]
 8081604:	9400      	str	r4, [sp, #0]
 8081606:	f000 fffa 	bl	80825fe <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 808160a:	f080 0001 	eor.w	r0, r0, #1
 808160e:	4240      	negs	r0, r0
}
 8081610:	b240      	sxtb	r0, r0
 8081612:	b004      	add	sp, #16
 8081614:	bd10      	pop	{r4, pc}

08081616 <_ZL8i2c_readhPhmPv>:
int8_t i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf) {
 8081616:	b530      	push	{r4, r5, lr}
 8081618:	4614      	mov	r4, r2
  if (!_dev->write_then_read(&reg_addr, 1, reg_data, len, true)) {
 808161a:	2201      	movs	r2, #1
int8_t i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf) {
 808161c:	4605      	mov	r5, r0
 808161e:	b085      	sub	sp, #20
 8081620:	4618      	mov	r0, r3
  if (!_dev->write_then_read(&reg_addr, 1, reg_data, len, true)) {
 8081622:	e9cd 4200 	strd	r4, r2, [sp]
 8081626:	460b      	mov	r3, r1
 8081628:	f10d 010f 	add.w	r1, sp, #15
int8_t i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf) {
 808162c:	f88d 500f 	strb.w	r5, [sp, #15]
  if (!_dev->write_then_read(&reg_addr, 1, reg_data, len, true)) {
 8081630:	f001 f853 	bl	80826da <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
 8081634:	f080 0001 	eor.w	r0, r0, #1
 8081638:	4240      	negs	r0, r0
}
 808163a:	b240      	sxtb	r0, r0
 808163c:	b005      	add	sp, #20
 808163e:	bd30      	pop	{r4, r5, pc}

08081640 <_ZN15Adafruit_BME680C1EP7TwoWire>:
    : _meas_start(0), _meas_period(0) {
 8081640:	2200      	movs	r2, #0
  _wire = theWire;
 8081642:	6181      	str	r1, [r0, #24]
    : _meas_start(0), _meas_period(0) {
 8081644:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8081648:	6202      	str	r2, [r0, #32]
 808164a:	8482      	strh	r2, [r0, #36]	; 0x24
}
 808164c:	4770      	bx	lr

0808164e <_ZN15Adafruit_BME68012beginReadingEv>:
uint32_t Adafruit_BME680::beginReading(void) {
 808164e:	b570      	push	{r4, r5, r6, lr}
  if (_meas_start != 0) {
 8081650:	6a04      	ldr	r4, [r0, #32]
uint32_t Adafruit_BME680::beginReading(void) {
 8081652:	4606      	mov	r6, r0
  if (_meas_start != 0) {
 8081654:	b11c      	cbz	r4, 808165e <_ZN15Adafruit_BME68012beginReadingEv+0x10>
    return _meas_start + _meas_period;
 8081656:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8081658:	441c      	add	r4, r3
}
 808165a:	4620      	mov	r0, r4
 808165c:	bd70      	pop	{r4, r5, r6, pc}
  int8_t rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &gas_sensor);
 808165e:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8081662:	4629      	mov	r1, r5
 8081664:	2001      	movs	r0, #1
 8081666:	f7ff f99a 	bl	808099e <bme68x_set_op_mode>
  if (rslt != BME68X_OK)
 808166a:	2800      	cmp	r0, #0
 808166c:	d1f5      	bne.n	808165a <_ZN15Adafruit_BME68012beginReadingEv+0xc>
  uint32_t delayus_period = (uint32_t)bme68x_get_meas_dur(
 808166e:	462a      	mov	r2, r5
 8081670:	f106 0178 	add.w	r1, r6, #120	; 0x78
 8081674:	2001      	movs	r0, #1
 8081676:	f7ff fa81 	bl	8080b7c <bme68x_get_meas_dur>
                            ((uint32_t)gas_heatr_conf.heatr_dur * 1000);
 808167a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 808167e:	f8b6 3084 	ldrh.w	r3, [r6, #132]	; 0x84
 8081682:	fb04 0503 	mla	r5, r4, r3, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8081686:	f002 fbbb 	bl	8083e00 <HAL_Timer_Get_Milli_Seconds>
  _meas_period = delayus_period / 1000;
 808168a:	fbb5 f3f4 	udiv	r3, r5, r4
 808168e:	84b3      	strh	r3, [r6, #36]	; 0x24
  return _meas_start + _meas_period;
 8081690:	b29b      	uxth	r3, r3
  _meas_start = millis();
 8081692:	6230      	str	r0, [r6, #32]
  return _meas_start + _meas_period;
 8081694:	181c      	adds	r4, r3, r0
 8081696:	e7e0      	b.n	808165a <_ZN15Adafruit_BME68012beginReadingEv+0xc>

08081698 <_ZN15Adafruit_BME68022remainingReadingMillisEv>:
int Adafruit_BME680::remainingReadingMillis(void) {
 8081698:	b538      	push	{r3, r4, r5, lr}
  if (_meas_start != 0) {
 808169a:	6a04      	ldr	r4, [r0, #32]
 808169c:	b13c      	cbz	r4, 80816ae <_ZN15Adafruit_BME68022remainingReadingMillisEv+0x16>
    int remaining_time = (int)_meas_period - (millis() - _meas_start);
 808169e:	8c85      	ldrh	r5, [r0, #36]	; 0x24
 80816a0:	f002 fbae 	bl	8083e00 <HAL_Timer_Get_Milli_Seconds>
 80816a4:	442c      	add	r4, r5
 80816a6:	1a20      	subs	r0, r4, r0
 80816a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80816ac:	bd38      	pop	{r3, r4, r5, pc}
  return reading_not_started;
 80816ae:	f04f 30ff 	mov.w	r0, #4294967295
 80816b2:	e7fb      	b.n	80816ac <_ZN15Adafruit_BME68022remainingReadingMillisEv+0x14>

080816b4 <_ZN15Adafruit_BME68010endReadingEv>:
bool Adafruit_BME680::endReading(void) {
 80816b4:	b530      	push	{r4, r5, lr}
 80816b6:	b089      	sub	sp, #36	; 0x24
 80816b8:	4605      	mov	r5, r0
  uint32_t meas_end = beginReading();
 80816ba:	f7ff ffc8 	bl	808164e <_ZN15Adafruit_BME68012beginReadingEv>
  if (meas_end == 0) {
 80816be:	b360      	cbz	r0, 808171a <_ZN15Adafruit_BME68010endReadingEv+0x66>
  int remaining_millis = remainingReadingMillis();
 80816c0:	4628      	mov	r0, r5
 80816c2:	f7ff ffe9 	bl	8081698 <_ZN15Adafruit_BME68022remainingReadingMillisEv>
  if (remaining_millis > 0) {
 80816c6:	2800      	cmp	r0, #0
 80816c8:	dd02      	ble.n	80816d0 <_ZN15Adafruit_BME68010endReadingEv+0x1c>
    delay(static_cast<unsigned int>(remaining_millis) *
 80816ca:	0040      	lsls	r0, r0, #1
 80816cc:	f003 f88c 	bl	80847e8 <delay>
  _meas_start = 0; /* Allow new measurement to begin */
 80816d0:	2400      	movs	r4, #0
      bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &gas_sensor);
 80816d2:	2001      	movs	r0, #1
  _meas_start = 0; /* Allow new measurement to begin */
 80816d4:	622c      	str	r4, [r5, #32]
  _meas_period = 0;
 80816d6:	84ac      	strh	r4, [r5, #36]	; 0x24
      bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &gas_sensor);
 80816d8:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80816dc:	f10d 0207 	add.w	r2, sp, #7
 80816e0:	a902      	add	r1, sp, #8
 80816e2:	f7ff fa89 	bl	8080bf8 <bme68x_get_data>
  if (rslt != BME68X_OK)
 80816e6:	b9b8      	cbnz	r0, 8081718 <_ZN15Adafruit_BME68010endReadingEv+0x64>
  if (n_fields) {
 80816e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80816ec:	b183      	cbz	r3, 8081710 <_ZN15Adafruit_BME68010endReadingEv+0x5c>
    temperature = data.temperature;
 80816ee:	9b04      	ldr	r3, [sp, #16]
    pressure = data.pressure;
 80816f0:	9805      	ldr	r0, [sp, #20]
    temperature = data.temperature;
 80816f2:	602b      	str	r3, [r5, #0]
    humidity = data.humidity;
 80816f4:	9b06      	ldr	r3, [sp, #24]
 80816f6:	60ab      	str	r3, [r5, #8]
    pressure = data.pressure;
 80816f8:	f004 ff7a 	bl	80865f0 <__aeabi_f2uiz>
    if (data.status & (BME68X_HEAT_STAB_MSK | BME68X_GASM_VALID_MSK)) {
 80816fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
    pressure = data.pressure;
 8081700:	6068      	str	r0, [r5, #4]
    if (data.status & (BME68X_HEAT_STAB_MSK | BME68X_GASM_VALID_MSK)) {
 8081702:	f013 0330 	ands.w	r3, r3, #48	; 0x30
 8081706:	d005      	beq.n	8081714 <_ZN15Adafruit_BME68010endReadingEv+0x60>
      gas_resistance = data.gas_resistance;
 8081708:	9807      	ldr	r0, [sp, #28]
 808170a:	f004 ff71 	bl	80865f0 <__aeabi_f2uiz>
 808170e:	60e8      	str	r0, [r5, #12]
  return true;
 8081710:	2001      	movs	r0, #1
 8081712:	e002      	b.n	808171a <_ZN15Adafruit_BME68010endReadingEv+0x66>
      gas_resistance = 0;
 8081714:	60eb      	str	r3, [r5, #12]
 8081716:	e7fb      	b.n	8081710 <_ZN15Adafruit_BME68010endReadingEv+0x5c>
    return false;
 8081718:	4620      	mov	r0, r4
}
 808171a:	b009      	add	sp, #36	; 0x24
 808171c:	bd30      	pop	{r4, r5, pc}

0808171e <_ZN15Adafruit_BME68014performReadingEv>:
bool Adafruit_BME680::performReading(void) { return endReading(); }
 808171e:	f7ff bfc9 	b.w	80816b4 <_ZN15Adafruit_BME68010endReadingEv>

08081722 <_ZN15Adafruit_BME68015readTemperatureEv>:
float Adafruit_BME680::readTemperature(void) {
 8081722:	b510      	push	{r4, lr}
 8081724:	4604      	mov	r4, r0
  performReading();
 8081726:	f7ff fffa 	bl	808171e <_ZN15Adafruit_BME68014performReadingEv>
}
 808172a:	6820      	ldr	r0, [r4, #0]
 808172c:	bd10      	pop	{r4, pc}

0808172e <_ZN15Adafruit_BME68012readPressureEv>:
float Adafruit_BME680::readPressure(void) {
 808172e:	b510      	push	{r4, lr}
 8081730:	4604      	mov	r4, r0
  performReading();
 8081732:	f7ff fff4 	bl	808171e <_ZN15Adafruit_BME68014performReadingEv>
  return pressure;
 8081736:	6860      	ldr	r0, [r4, #4]
 8081738:	f004 fd16 	bl	8086168 <__aeabi_ui2f>
}
 808173c:	bd10      	pop	{r4, pc}

0808173e <_ZN15Adafruit_BME68012readHumidityEv>:
float Adafruit_BME680::readHumidity(void) {
 808173e:	b510      	push	{r4, lr}
 8081740:	4604      	mov	r4, r0
  performReading();
 8081742:	f7ff ffec 	bl	808171e <_ZN15Adafruit_BME68014performReadingEv>
}
 8081746:	68a0      	ldr	r0, [r4, #8]
 8081748:	bd10      	pop	{r4, pc}

0808174a <_ZN15Adafruit_BME6807readGasEv>:
uint32_t Adafruit_BME680::readGas(void) {
 808174a:	b510      	push	{r4, lr}
 808174c:	4604      	mov	r4, r0
  performReading();
 808174e:	f7ff ffe6 	bl	808171e <_ZN15Adafruit_BME68014performReadingEv>
}
 8081752:	68e0      	ldr	r0, [r4, #12]
 8081754:	bd10      	pop	{r4, pc}

08081756 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
 8081756:	b508      	push	{r3, lr}
  if ((heaterTemp == 0) || (heaterTime == 0)) {
 8081758:	b101      	cbz	r1, 808175c <_ZN15Adafruit_BME68012setGasHeaterEtt+0x6>
 808175a:	b96a      	cbnz	r2, 8081778 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x22>
    gas_heatr_conf.enable = BME68X_DISABLE;
 808175c:	2300      	movs	r3, #0
 808175e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      bme68x_set_heatr_conf(BME68X_FORCED_MODE, &gas_heatr_conf, &gas_sensor);
 8081762:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8081766:	f100 0180 	add.w	r1, r0, #128	; 0x80
 808176a:	2001      	movs	r0, #1
 808176c:	f7ff fc6a 	bl	8081044 <bme68x_set_heatr_conf>
}
 8081770:	fab0 f080 	clz	r0, r0
 8081774:	0940      	lsrs	r0, r0, #5
 8081776:	bd08      	pop	{r3, pc}
    gas_heatr_conf.enable = BME68X_ENABLE;
 8081778:	2301      	movs	r3, #1
    gas_heatr_conf.heatr_temp = heaterTemp;
 808177a:	f8a0 1082 	strh.w	r1, [r0, #130]	; 0x82
    gas_heatr_conf.enable = BME68X_ENABLE;
 808177e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    gas_heatr_conf.heatr_dur = heaterTime;
 8081782:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 8081786:	e7ec      	b.n	8081762 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>

08081788 <_ZN15Adafruit_BME6806setODREh>:
  if (odr > BME68X_ODR_NONE)
 8081788:	2908      	cmp	r1, #8
bool Adafruit_BME680::setODR(uint8_t odr) {
 808178a:	b508      	push	{r3, lr}
  if (odr > BME68X_ODR_NONE)
 808178c:	d80a      	bhi.n	80817a4 <_ZN15Adafruit_BME6806setODREh+0x1c>
  gas_conf.odr = odr;
 808178e:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
  int8_t rslt = bme68x_set_conf(&gas_conf, &gas_sensor);
 8081792:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8081796:	3078      	adds	r0, #120	; 0x78
 8081798:	f7ff f952 	bl	8080a40 <bme68x_set_conf>
  return rslt == 0;
 808179c:	fab0 f080 	clz	r0, r0
 80817a0:	0940      	lsrs	r0, r0, #5
}
 80817a2:	bd08      	pop	{r3, pc}
    return false;
 80817a4:	2000      	movs	r0, #0
 80817a6:	e7fc      	b.n	80817a2 <_ZN15Adafruit_BME6806setODREh+0x1a>

080817a8 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
  if (oversample > BME68X_OS_16X)
 80817a8:	2905      	cmp	r1, #5
bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
 80817aa:	b508      	push	{r3, lr}
  if (oversample > BME68X_OS_16X)
 80817ac:	d80a      	bhi.n	80817c4 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x1c>
  gas_conf.os_temp = oversample;
 80817ae:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
  int8_t rslt = bme68x_set_conf(&gas_conf, &gas_sensor);
 80817b2:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80817b6:	3078      	adds	r0, #120	; 0x78
 80817b8:	f7ff f942 	bl	8080a40 <bme68x_set_conf>
  return rslt == 0;
 80817bc:	fab0 f080 	clz	r0, r0
 80817c0:	0940      	lsrs	r0, r0, #5
}
 80817c2:	bd08      	pop	{r3, pc}
    return false;
 80817c4:	2000      	movs	r0, #0
 80817c6:	e7fc      	b.n	80817c2 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x1a>

080817c8 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
  if (oversample > BME68X_OS_16X)
 80817c8:	2905      	cmp	r1, #5
bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
 80817ca:	b508      	push	{r3, lr}
  if (oversample > BME68X_OS_16X)
 80817cc:	d80a      	bhi.n	80817e4 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x1c>
  gas_conf.os_hum = oversample;
 80817ce:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
  int8_t rslt = bme68x_set_conf(&gas_conf, &gas_sensor);
 80817d2:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80817d6:	3078      	adds	r0, #120	; 0x78
 80817d8:	f7ff f932 	bl	8080a40 <bme68x_set_conf>
  return rslt == 0;
 80817dc:	fab0 f080 	clz	r0, r0
 80817e0:	0940      	lsrs	r0, r0, #5
}
 80817e2:	bd08      	pop	{r3, pc}
    return false;
 80817e4:	2000      	movs	r0, #0
 80817e6:	e7fc      	b.n	80817e2 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x1a>

080817e8 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
  if (oversample > BME68X_OS_16X)
 80817e8:	2905      	cmp	r1, #5
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
 80817ea:	b508      	push	{r3, lr}
  if (oversample > BME68X_OS_16X)
 80817ec:	d80a      	bhi.n	8081804 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x1c>
  gas_conf.os_pres = oversample;
 80817ee:	f880 107a 	strb.w	r1, [r0, #122]	; 0x7a
  int8_t rslt = bme68x_set_conf(&gas_conf, &gas_sensor);
 80817f2:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80817f6:	3078      	adds	r0, #120	; 0x78
 80817f8:	f7ff f922 	bl	8080a40 <bme68x_set_conf>
  return rslt == 0;
 80817fc:	fab0 f080 	clz	r0, r0
 8081800:	0940      	lsrs	r0, r0, #5
}
 8081802:	bd08      	pop	{r3, pc}
    return false;
 8081804:	2000      	movs	r0, #0
 8081806:	e7fc      	b.n	8081802 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x1a>

08081808 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
  if (filtersize > BME68X_FILTER_SIZE_127)
 8081808:	2907      	cmp	r1, #7
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
 808180a:	b508      	push	{r3, lr}
  if (filtersize > BME68X_FILTER_SIZE_127)
 808180c:	d80a      	bhi.n	8081824 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x1c>
  gas_conf.filter = filtersize;
 808180e:	f880 107b 	strb.w	r1, [r0, #123]	; 0x7b
  int8_t rslt = bme68x_set_conf(&gas_conf, &gas_sensor);
 8081812:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8081816:	3078      	adds	r0, #120	; 0x78
 8081818:	f7ff f912 	bl	8080a40 <bme68x_set_conf>
  return rslt == 0;
 808181c:	fab0 f080 	clz	r0, r0
 8081820:	0940      	lsrs	r0, r0, #5
}
 8081822:	bd08      	pop	{r3, pc}
    return false;
 8081824:	2000      	movs	r0, #0
 8081826:	e7fc      	b.n	8081822 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x1a>

08081828 <_ZN15Adafruit_BME6805beginEhb>:
bool Adafruit_BME680::begin(uint8_t addr, bool initSettings) {
 8081828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808182a:	4604      	mov	r4, r0
  if (!_spidev) { // i2c
 808182c:	6940      	ldr	r0, [r0, #20]
bool Adafruit_BME680::begin(uint8_t addr, bool initSettings) {
 808182e:	460f      	mov	r7, r1
 8081830:	4616      	mov	r6, r2
  if (!_spidev) { // i2c
 8081832:	2800      	cmp	r0, #0
 8081834:	d14f      	bne.n	80818d6 <_ZN15Adafruit_BME6805beginEhb+0xae>
    if (_i2cdev) {
 8081836:	6920      	ldr	r0, [r4, #16]
 8081838:	b110      	cbz	r0, 8081840 <_ZN15Adafruit_BME6805beginEhb+0x18>
      delete _i2cdev;
 808183a:	2110      	movs	r1, #16
 808183c:	f7fe fc2f 	bl	808009e <_ZdlPvj>
    _i2cdev = new Adafruit_I2CDevice(addr, _wire);
 8081840:	2010      	movs	r0, #16
 8081842:	f7fe fc28 	bl	8080096 <_Znwj>
 8081846:	4605      	mov	r5, r0
 8081848:	b118      	cbz	r0, 8081852 <_ZN15Adafruit_BME6805beginEhb+0x2a>
 808184a:	4639      	mov	r1, r7
 808184c:	69a2      	ldr	r2, [r4, #24]
 808184e:	f000 feab 	bl	80825a8 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
    if (!_i2cdev->begin()) {
 8081852:	2101      	movs	r1, #1
 8081854:	4628      	mov	r0, r5
    _i2cdev = new Adafruit_I2CDevice(addr, _wire);
 8081856:	6125      	str	r5, [r4, #16]
    if (!_i2cdev->begin()) {
 8081858:	f000 fec2 	bl	80825e0 <_ZN18Adafruit_I2CDevice5beginEb>
 808185c:	b908      	cbnz	r0, 8081862 <_ZN15Adafruit_BME6805beginEhb+0x3a>
      return false;
 808185e:	2000      	movs	r0, #0
}
 8081860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    gas_sensor.intf = BME68X_I2C_INTF;
 8081862:	2301      	movs	r3, #1
 8081864:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    gas_sensor.intf_ptr = (void *)_i2cdev;
 8081868:	6923      	ldr	r3, [r4, #16]
    gas_sensor.chip_id = addr;
 808186a:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
    gas_sensor.intf_ptr = (void *)_i2cdev;
 808186e:	62e3      	str	r3, [r4, #44]	; 0x2c
    gas_sensor.read = &i2c_read;
 8081870:	4b22      	ldr	r3, [pc, #136]	; (80818fc <_ZN15Adafruit_BME6805beginEhb+0xd4>)
 8081872:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &i2c_write;
 8081874:	4b22      	ldr	r3, [pc, #136]	; (8081900 <_ZN15Adafruit_BME6805beginEhb+0xd8>)
    gas_sensor.write = &spi_write;
 8081876:	66e3      	str	r3, [r4, #108]	; 0x6c
  gas_sensor.amb_temp = 25; /* The ambient temperature in deg C is used for
 8081878:	2319      	movs	r3, #25
 808187a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  gas_sensor.delay_us = delay_usec;
 808187e:	4b21      	ldr	r3, [pc, #132]	; (8081904 <_ZN15Adafruit_BME6805beginEhb+0xdc>)
  rslt = bme68x_init(&gas_sensor);
 8081880:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8081884:	4628      	mov	r0, r5
  gas_sensor.delay_us = delay_usec;
 8081886:	6723      	str	r3, [r4, #112]	; 0x70
  rslt = bme68x_init(&gas_sensor);
 8081888:	f7fe ffdf 	bl	808084a <bme68x_init>
  if (rslt != BME68X_OK)
 808188c:	2800      	cmp	r0, #0
 808188e:	d1e6      	bne.n	808185e <_ZN15Adafruit_BME6805beginEhb+0x36>
  if (initSettings) {
 8081890:	b386      	cbz	r6, 80818f4 <_ZN15Adafruit_BME6805beginEhb+0xcc>
    setIIRFilterSize(BME68X_FILTER_SIZE_3);
 8081892:	2102      	movs	r1, #2
 8081894:	4620      	mov	r0, r4
 8081896:	f7ff ffb7 	bl	8081808 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
    setODR(BME68X_ODR_NONE);
 808189a:	2108      	movs	r1, #8
 808189c:	4620      	mov	r0, r4
 808189e:	f7ff ff73 	bl	8081788 <_ZN15Adafruit_BME6806setODREh>
    setHumidityOversampling(BME68X_OS_2X);
 80818a2:	2102      	movs	r1, #2
 80818a4:	4620      	mov	r0, r4
 80818a6:	f7ff ff8f 	bl	80817c8 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
    setPressureOversampling(BME68X_OS_4X);
 80818aa:	2103      	movs	r1, #3
 80818ac:	4620      	mov	r0, r4
 80818ae:	f7ff ff9b 	bl	80817e8 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
    setTemperatureOversampling(BME68X_OS_8X);
 80818b2:	2104      	movs	r1, #4
 80818b4:	4620      	mov	r0, r4
 80818b6:	f7ff ff77 	bl	80817a8 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
    setGasHeater(320, 150); // 320*C for 150 ms
 80818ba:	2296      	movs	r2, #150	; 0x96
 80818bc:	f44f 71a0 	mov.w	r1, #320	; 0x140
    setGasHeater(0, 0);
 80818c0:	4620      	mov	r0, r4
 80818c2:	f7ff ff48 	bl	8081756 <_ZN15Adafruit_BME68012setGasHeaterEtt>
  rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &gas_sensor);
 80818c6:	4629      	mov	r1, r5
 80818c8:	2001      	movs	r0, #1
 80818ca:	f7ff f868 	bl	808099e <bme68x_set_op_mode>
  if (rslt != BME68X_OK)
 80818ce:	fab0 f080 	clz	r0, r0
 80818d2:	0940      	lsrs	r0, r0, #5
 80818d4:	e7c4      	b.n	8081860 <_ZN15Adafruit_BME6805beginEhb+0x38>
    if (!_spidev->begin()) {
 80818d6:	f000 f983 	bl	8081be0 <_ZN18Adafruit_SPIDevice5beginEv>
 80818da:	2800      	cmp	r0, #0
 80818dc:	d0bf      	beq.n	808185e <_ZN15Adafruit_BME6805beginEhb+0x36>
    gas_sensor.chip_id = 0;
 80818de:	2300      	movs	r3, #0
 80818e0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    gas_sensor.intf = BME68X_SPI_INTF;
 80818e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    gas_sensor.intf_ptr = (void *)_spidev;
 80818e8:	6963      	ldr	r3, [r4, #20]
 80818ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    gas_sensor.read = &spi_read;
 80818ec:	4b06      	ldr	r3, [pc, #24]	; (8081908 <_ZN15Adafruit_BME6805beginEhb+0xe0>)
 80818ee:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
 80818f0:	4b06      	ldr	r3, [pc, #24]	; (808190c <_ZN15Adafruit_BME6805beginEhb+0xe4>)
 80818f2:	e7c0      	b.n	8081876 <_ZN15Adafruit_BME6805beginEhb+0x4e>
    setGasHeater(0, 0);
 80818f4:	4632      	mov	r2, r6
 80818f6:	4631      	mov	r1, r6
 80818f8:	e7e2      	b.n	80818c0 <_ZN15Adafruit_BME6805beginEhb+0x98>
 80818fa:	bf00      	nop
 80818fc:	08081617 	.word	0x08081617
 8081900:	080815f3 	.word	0x080815f3
 8081904:	08081597 	.word	0x08081597
 8081908:	080815c7 	.word	0x080815c7
 808190c:	080815a5 	.word	0x080815a5

08081910 <_ZN10RTC_DS32315beginEP7TwoWire>:
    @brief  Start I2C for the DS3231 and test succesful connection
    @param  wireInstance pointer to the I2C bus
    @return True if Wire can find DS3231 or false otherwise.
*/
/**************************************************************************/
bool RTC_DS3231::begin(TwoWire *wireInstance) {
 8081910:	b570      	push	{r4, r5, r6, lr}
 8081912:	4605      	mov	r5, r0
  if (i2c_dev)
 8081914:	6800      	ldr	r0, [r0, #0]
bool RTC_DS3231::begin(TwoWire *wireInstance) {
 8081916:	460e      	mov	r6, r1
  if (i2c_dev)
 8081918:	b110      	cbz	r0, 8081920 <_ZN10RTC_DS32315beginEP7TwoWire+0x10>
    delete i2c_dev;
 808191a:	2110      	movs	r1, #16
 808191c:	f7fe fbbf 	bl	808009e <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(DS3231_ADDRESS, wireInstance);
 8081920:	2010      	movs	r0, #16
 8081922:	f7fe fbb8 	bl	8080096 <_Znwj>
 8081926:	4604      	mov	r4, r0
 8081928:	b118      	cbz	r0, 8081932 <_ZN10RTC_DS32315beginEP7TwoWire+0x22>
 808192a:	4632      	mov	r2, r6
 808192c:	2168      	movs	r1, #104	; 0x68
 808192e:	f000 fe3b 	bl	80825a8 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin())
 8081932:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(DS3231_ADDRESS, wireInstance);
 8081934:	602c      	str	r4, [r5, #0]
  if (!i2c_dev->begin())
 8081936:	2101      	movs	r1, #1
    return false;
  return true;
}
 8081938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (!i2c_dev->begin())
 808193c:	f000 be50 	b.w	80825e0 <_ZN18Adafruit_I2CDevice5beginEb>

08081940 <_ZN10RTC_DS32316adjustERK8DateTime>:
/*!
    @brief  Set the date and flip the Oscillator Stop Flag
    @param dt DateTime object containing the date/time to set
*/
/**************************************************************************/
void RTC_DS3231::adjust(const DateTime &dt) {
 8081940:	b5f0      	push	{r4, r5, r6, r7, lr}
  /*!
      @brief  Convert a binary value to BCD format for the RTC registers
      @param val Binary value
      @return BCD value
  */
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 8081942:	240a      	movs	r4, #10
  uint8_t second() const { return ss; }
 8081944:	794b      	ldrb	r3, [r1, #5]
  uint8_t buffer[8] = {DS3231_TIME,
 8081946:	2700      	movs	r7, #0
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 8081948:	fbb3 f2f4 	udiv	r2, r3, r4
 808194c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
void RTC_DS3231::adjust(const DateTime &dt) {
 8081950:	b085      	sub	sp, #20
 8081952:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  uint8_t buffer[8] = {DS3231_TIME,
 8081956:	e9cd 7702 	strd	r7, r7, [sp, #8]
                       bin2bcd(dt.minute()),
                       bin2bcd(dt.hour()),
                       bin2bcd(dowToDS3231(dt.dayOfTheWeek())),
                       bin2bcd(dt.day()),
                       bin2bcd(dt.month()),
                       bin2bcd(dt.year() - 2000U)};
 808195a:	f88d 3009 	strb.w	r3, [sp, #9]
  uint8_t minute() const { return mm; }
 808195e:	790b      	ldrb	r3, [r1, #4]
void RTC_DS3231::adjust(const DateTime &dt) {
 8081960:	4606      	mov	r6, r0
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 8081962:	fbb3 f2f4 	udiv	r2, r3, r4
 8081966:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808196a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                       bin2bcd(dt.year() - 2000U)};
 808196e:	f88d 300a 	strb.w	r3, [sp, #10]
  uint8_t hour() const { return hh; }
 8081972:	78cb      	ldrb	r3, [r1, #3]
                       bin2bcd(dowToDS3231(dt.dayOfTheWeek())),
 8081974:	4608      	mov	r0, r1
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 8081976:	fbb3 f2f4 	udiv	r2, r3, r4
 808197a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808197e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
void RTC_DS3231::adjust(const DateTime &dt) {
 8081982:	460d      	mov	r5, r1
                       bin2bcd(dt.year() - 2000U)};
 8081984:	f88d 300b 	strb.w	r3, [sp, #11]
                       bin2bcd(dowToDS3231(dt.dayOfTheWeek())),
 8081988:	f7ff fdf6 	bl	8081578 <_ZNK8DateTime12dayOfTheWeekEv>
              storing in the DS3231: from 1 (Monday) to 7 (Sunday).
      @param  d Day of the week as represented by the library:
              from 0 (Sunday) to 6 (Saturday).
      @return the converted value
  */
  static uint8_t dowToDS3231(uint8_t d) { return d == 0 ? 7 : d; }
 808198c:	1e03      	subs	r3, r0, #0
 808198e:	bf08      	it	eq
 8081990:	2307      	moveq	r3, #7
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 8081992:	fbb3 f0f4 	udiv	r0, r3, r4
 8081996:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 808199a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
                       bin2bcd(dt.year() - 2000U)};
 808199e:	f88d 300c 	strb.w	r3, [sp, #12]
  uint8_t day() const { return d; }
 80819a2:	78ab      	ldrb	r3, [r5, #2]
  i2c_dev->write(buffer, 8);
 80819a4:	e9cd 7700 	strd	r7, r7, [sp]
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 80819a8:	fbb3 f2f4 	udiv	r2, r3, r4
 80819ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80819b0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                       bin2bcd(dt.year() - 2000U)};
 80819b4:	f88d 300d 	strb.w	r3, [sp, #13]
  uint8_t month() const { return m; }
 80819b8:	786b      	ldrb	r3, [r5, #1]
  i2c_dev->write(buffer, 8);
 80819ba:	6830      	ldr	r0, [r6, #0]
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 80819bc:	fbb3 f2f4 	udiv	r2, r3, r4
 80819c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80819c4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                       bin2bcd(dt.year() - 2000U)};
 80819c8:	f88d 300e 	strb.w	r3, [sp, #14]
  uint16_t year() const { return 2000U + yOff; }
 80819cc:	782b      	ldrb	r3, [r5, #0]
  i2c_dev->write(buffer, 8);
 80819ce:	2208      	movs	r2, #8
  static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 80819d0:	fbb3 f4f4 	udiv	r4, r3, r4
 80819d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80819d8:	eb0d 0102 	add.w	r1, sp, r2
 80819dc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80819e0:	2301      	movs	r3, #1
                       bin2bcd(dt.year() - 2000U)};
 80819e2:	f88d 400f 	strb.w	r4, [sp, #15]
  i2c_dev->write(buffer, 8);
 80819e6:	f000 fe0a 	bl	80825fe <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

  uint8_t statreg = read_register(DS3231_STATUSREG);
 80819ea:	210f      	movs	r1, #15
 80819ec:	4630      	mov	r0, r6
 80819ee:	f7ff fd36 	bl	808145e <_ZN7RTC_I2C13read_registerEh>
  statreg &= ~0x80; // flip OSF bit
  write_register(DS3231_STATUSREG, statreg);
 80819f2:	210f      	movs	r1, #15
 80819f4:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80819f8:	4630      	mov	r0, r6
 80819fa:	f7ff fd1f 	bl	808143c <_ZN7RTC_I2C14write_registerEhh>
}
 80819fe:	b005      	add	sp, #20
 8081a00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081a02 <_ZN10RTC_DS32313nowEv>:
    @return DateTime object with the current date/time
*/
/**************************************************************************/
DateTime RTC_DS3231::now() {
  uint8_t buffer[7];
  buffer[0] = 0;
 8081a02:	2300      	movs	r3, #0
DateTime RTC_DS3231::now() {
 8081a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081a06:	b087      	sub	sp, #28
  i2c_dev->write_then_read(buffer, 1, buffer, 7);
 8081a08:	9301      	str	r3, [sp, #4]
  buffer[0] = 0;
 8081a0a:	f88d 3010 	strb.w	r3, [sp, #16]
  i2c_dev->write_then_read(buffer, 1, buffer, 7);
 8081a0e:	2307      	movs	r3, #7
DateTime RTC_DS3231::now() {
 8081a10:	4605      	mov	r5, r0
 8081a12:	4608      	mov	r0, r1
  i2c_dev->write_then_read(buffer, 1, buffer, 7);
 8081a14:	9300      	str	r3, [sp, #0]
 8081a16:	ab04      	add	r3, sp, #16
 8081a18:	4619      	mov	r1, r3
 8081a1a:	2201      	movs	r2, #1
 8081a1c:	6800      	ldr	r0, [r0, #0]
 8081a1e:	f000 fe5c 	bl	80826da <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>

  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5] & 0x7F),
                  bcd2bin(buffer[4]), bcd2bin(buffer[2]), bcd2bin(buffer[1]),
                  bcd2bin(buffer[0] & 0x7F));
 8081a22:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8081a26:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8081a2a:	f004 077f 	and.w	r7, r4, #127	; 0x7f
  static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 8081a2e:	f3c4 1402 	ubfx	r4, r4, #4, #3
 8081a32:	eba4 0484 	sub.w	r4, r4, r4, lsl #2
 8081a36:	f89d 6011 	ldrb.w	r6, [sp, #17]
 8081a3a:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8081a3e:	b2e4      	uxtb	r4, r4
  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5] & 0x7F),
 8081a40:	f89d 1016 	ldrb.w	r1, [sp, #22]
                  bcd2bin(buffer[0] & 0x7F));
 8081a44:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8081a48:	9402      	str	r4, [sp, #8]
 8081a4a:	ea4f 1c13 	mov.w	ip, r3, lsr #4
 8081a4e:	0934      	lsrs	r4, r6, #4
 8081a50:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8081a54:	ebac 0c8c 	sub.w	ip, ip, ip, lsl #2
 8081a58:	eba4 0484 	sub.w	r4, r4, r4, lsl #2
 8081a5c:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 8081a60:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 8081a64:	ea4f 1c11 	mov.w	ip, r1, lsr #4
 8081a68:	0904      	lsrs	r4, r0, #4
 8081a6a:	f002 0e7f 	and.w	lr, r2, #127	; 0x7f
 8081a6e:	ebac 0c8c 	sub.w	ip, ip, ip, lsl #2
 8081a72:	eba4 0484 	sub.w	r4, r4, r4, lsl #2
 8081a76:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8081a7a:	eb01 014c 	add.w	r1, r1, ip, lsl #1
 8081a7e:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8081a82:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8081a86:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8081a8a:	b2f6      	uxtb	r6, r6
 8081a8c:	b2c0      	uxtb	r0, r0
  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5] & 0x7F),
 8081a8e:	b2c9      	uxtb	r1, r1
                  bcd2bin(buffer[0] & 0x7F));
 8081a90:	9000      	str	r0, [sp, #0]
 8081a92:	9601      	str	r6, [sp, #4]
 8081a94:	4628      	mov	r0, r5
 8081a96:	b2db      	uxtb	r3, r3
 8081a98:	b2d2      	uxtb	r2, r2
 8081a9a:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
 8081a9e:	f7ff fcf7 	bl	8081490 <_ZN8DateTimeC1Ethhhhh>
}
 8081aa2:	4628      	mov	r0, r5
 8081aa4:	b007      	add	sp, #28
 8081aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081aa8 <_ZN10ADS_ModuleC1Ev>:
 /*!
 *    @brief  ADS_Module object; Assigns addresses & channels to ADS1115 modules
 *            Addresses include: GND 0x48 & 5V 0x49
 */
/**************************************************************************/
ADS_Module::ADS_Module()
 8081aa8:	b570      	push	{r4, r5, r6, lr}
 8081aaa:	4604      	mov	r4, r0
 8081aac:	1d05      	adds	r5, r0, #4
 8081aae:	f100 06a4 	add.w	r6, r0, #164	; 0xa4
  VOLT_REF2,
  ADS_SENSOR_COUNT
};  //enum ads_sensor_id_e

/*! (per each sensor) addr, channel, status, module (ADS1115) */
struct ads_module_t
 8081ab2:	4628      	mov	r0, r5
 8081ab4:	3514      	adds	r5, #20
 8081ab6:	f7ff fbfd 	bl	80812b4 <_ZN16Adafruit_ADS1115C1Ev>
 8081aba:	42b5      	cmp	r5, r6
 8081abc:	d1f9      	bne.n	8081ab2 <_ZN10ADS_ModuleC1Ev+0xa>
{
  ads_module[FIG1].addr = 0x48;
  ads_module[FIG1].channel = 0;

  ads_module[FIG2].addr = 0x48;
 8081abe:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8081ac2:	82a2      	strh	r2, [r4, #20]
  ads_module[FIG2].channel = 1;

  ads_module[FIG3].addr = 0x48;
 8081ac4:	f44f 7212 	mov.w	r2, #584	; 0x248
 8081ac8:	8522      	strh	r2, [r4, #40]	; 0x28
  ads_module[FIG3].channel = 2;

  ads_module[OPEN_CHANNEL].addr = 0x48;
 8081aca:	f44f 7252 	mov.w	r2, #840	; 0x348
 8081ace:	87a2      	strh	r2, [r4, #60]	; 0x3c
  ads_module[OPEN_CHANNEL].channel = 3;

  ads_module[B4_WORKER].addr = 0x49;
 8081ad0:	2249      	movs	r2, #73	; 0x49
 8081ad2:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
  ads_module[B4_WORKER].channel = 0;

  ads_module[VOLT_REF1].addr = 0x49;
 8081ad6:	f240 1249 	movw	r2, #329	; 0x149
  ads_module[FIG1].addr = 0x48;
 8081ada:	2348      	movs	r3, #72	; 0x48
  ads_module[VOLT_REF1].addr = 0x49;
 8081adc:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  ads_module[VOLT_REF1].channel = 1;

  ads_module[B4_AUXILIARY].addr = 0x49;
 8081ae0:	f240 2249 	movw	r2, #585	; 0x249
  ads_module[FIG1].addr = 0x48;
 8081ae4:	8023      	strh	r3, [r4, #0]
  ads_module[B4_AUXILIARY].addr = 0x49;
 8081ae6:	f8a4 2078 	strh.w	r2, [r4, #120]	; 0x78

  ads_module[VOLT_REF2].addr = 0x49;
  ads_module[VOLT_REF2].channel = 3;

  for (int i = 0; i < ADS_SENSOR_COUNT; i++)
    ads_module[i].status = false;
 8081aea:	2300      	movs	r3, #0
  ads_module[VOLT_REF2].addr = 0x49;
 8081aec:	f240 3249 	movw	r2, #841	; 0x349
} //ADS_Module()
 8081af0:	4620      	mov	r0, r4
    ads_module[i].status = false;
 8081af2:	70a3      	strb	r3, [r4, #2]
 8081af4:	75a3      	strb	r3, [r4, #22]
 8081af6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 8081afa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8081afe:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 8081b02:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 8081b06:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
  ads_module[VOLT_REF2].addr = 0x49;
 8081b0a:	f8a4 208c 	strh.w	r2, [r4, #140]	; 0x8c
    ads_module[i].status = false;
 8081b0e:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
} //ADS_Module()
 8081b12:	bd70      	pop	{r4, r5, r6, pc}

08081b14 <_ZN10ADS_Module5beginEv>:
 *   @return True if find ADS1115 channels (4 & 4), 
 *           False if status of channels is false
 */
/**************************************************************************/
bool ADS_Module::begin()
{
 8081b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8081b18:	4604      	mov	r4, r0
 8081b1a:	4606      	mov	r6, r0
  for (int i = 0; i < ADS_SENSOR_COUNT; i++)
  {
    if (ads_module[i].module.begin(ads_module[i].addr))
      ads_module[i].status = true;
 8081b1c:	f04f 0801 	mov.w	r8, #1
 8081b20:	1d05      	adds	r5, r0, #4
 8081b22:	f100 07a4 	add.w	r7, r0, #164	; 0xa4
    if (ads_module[i].module.begin(ads_module[i].addr))
 8081b26:	f815 9c04 	ldrb.w	r9, [r5, #-4]
 8081b2a:	f003 fd89 	bl	8085640 <_Z19__fetch_global_Wirev>
 8081b2e:	4649      	mov	r1, r9
 8081b30:	4602      	mov	r2, r0
 8081b32:	4628      	mov	r0, r5
 8081b34:	f7ff fbc4 	bl	80812c0 <_ZN16Adafruit_ADS1X155beginEhP7TwoWire>
 8081b38:	b108      	cbz	r0, 8081b3e <_ZN10ADS_Module5beginEv+0x2a>
      ads_module[i].status = true;
 8081b3a:	f805 8c02 	strb.w	r8, [r5, #-2]
  for (int i = 0; i < ADS_SENSOR_COUNT; i++)
 8081b3e:	3514      	adds	r5, #20
 8081b40:	42bd      	cmp	r5, r7
 8081b42:	d1f0      	bne.n	8081b26 <_ZN10ADS_Module5beginEv+0x12>
 8081b44:	34a0      	adds	r4, #160	; 0xa0
  }

  for (int i = 0; i < ADS_SENSOR_COUNT; i++)
  {
    if (ads_module[i].status == false)
 8081b46:	78b0      	ldrb	r0, [r6, #2]
 8081b48:	b110      	cbz	r0, 8081b50 <_ZN10ADS_Module5beginEv+0x3c>
  for (int i = 0; i < ADS_SENSOR_COUNT; i++)
 8081b4a:	3614      	adds	r6, #20
 8081b4c:	42a6      	cmp	r6, r4
 8081b4e:	d1fa      	bne.n	8081b46 <_ZN10ADS_Module5beginEv+0x32>
      return false;
  }

  return true;
} //bool ADS_Module::begin()
 8081b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08081b54 <_ZN10ADS_Module8read_rawE15ads_sensor_id_e>:
 *        @param  ads_sensor_id index of the sensor to be read (in id_e form)
 *    @return Raw ADS1115 reading for relevant channel (or -999 for error)
 */
/**************************************************************************/
uint16_t ADS_Module::read_raw(ads_sensor_id_e ads_sensor_id)
{
 8081b54:	b508      	push	{r3, lr}
 8081b56:	2314      	movs	r3, #20
 8081b58:	4359      	muls	r1, r3
 8081b5a:	1842      	adds	r2, r0, r1
  ads_module_t *sensor = &ads_module[ads_sensor_id];

  if (!sensor->status)
 8081b5c:	7893      	ldrb	r3, [r2, #2]
 8081b5e:	b133      	cbz	r3, 8081b6e <_ZN10ADS_Module8read_rawE15ads_sensor_id_e+0x1a>
    return -999;

  return sensor->module.readADC_SingleEnded(sensor->channel);
 8081b60:	1d0b      	adds	r3, r1, #4
 8081b62:	4418      	add	r0, r3
 8081b64:	7851      	ldrb	r1, [r2, #1]
 8081b66:	f7ff fc21 	bl	80813ac <_ZN16Adafruit_ADS1X1519readADC_SingleEndedEh>
 8081b6a:	b280      	uxth	r0, r0
} //uint16_t ADS_Module::read_raw(ads_sensor_id_e ads_sensor_id)
 8081b6c:	bd08      	pop	{r3, pc}
    return -999;
 8081b6e:	f64f 4019 	movw	r0, #64537	; 0xfc19
 8081b72:	e7fb      	b.n	8081b6c <_ZN10ADS_Module8read_rawE15ads_sensor_id_e+0x18>

08081b74 <_ZN10ADS_Module14return_updatedEv>:
 *    @brief  Updates values and returns structured dataset
 *    @return ads_data structured dataset (w/o heaters)
 */
/**************************************************************************/
ads_data ADS_Module::return_updated()
{
 8081b74:	b538      	push	{r3, r4, r5, lr}
 8081b76:	460d      	mov	r5, r1
 8081b78:	4604      	mov	r4, r0
  ads_data dataset;
  dataset.Fig1 = read_raw(FIG1);
 8081b7a:	2100      	movs	r1, #0
 8081b7c:	4628      	mov	r0, r5
 8081b7e:	f7ff ffe9 	bl	8081b54 <_ZN10ADS_Module8read_rawE15ads_sensor_id_e>
 8081b82:	8020      	strh	r0, [r4, #0]
  delay(100);
 8081b84:	2064      	movs	r0, #100	; 0x64
 8081b86:	f002 fe2f 	bl	80847e8 <delay>
  dataset.Fig2 = read_raw(FIG2);
 8081b8a:	2101      	movs	r1, #1
 8081b8c:	4628      	mov	r0, r5
 8081b8e:	f7ff ffe1 	bl	8081b54 <_ZN10ADS_Module8read_rawE15ads_sensor_id_e>
 8081b92:	8060      	strh	r0, [r4, #2]
  delay(100);
 8081b94:	2064      	movs	r0, #100	; 0x64
 8081b96:	f002 fe27 	bl	80847e8 <delay>
  dataset.Fig3 = read_raw(FIG3);
 8081b9a:	2102      	movs	r1, #2
 8081b9c:	4628      	mov	r0, r5
 8081b9e:	f7ff ffd9 	bl	8081b54 <_ZN10ADS_Module8read_rawE15ads_sensor_id_e>
 8081ba2:	80a0      	strh	r0, [r4, #4]
  delay(100);
 8081ba4:	2064      	movs	r0, #100	; 0x64
 8081ba6:	f002 fe1f 	bl	80847e8 <delay>
  // dataset.Unused = read_raw(OPEN_CHANNEL);
  delay(100);
 8081baa:	2064      	movs	r0, #100	; 0x64
 8081bac:	f002 fe1c 	bl	80847e8 <delay>
  dataset.Worker = read_raw(B4_WORKER);
 8081bb0:	2104      	movs	r1, #4
 8081bb2:	4628      	mov	r0, r5
 8081bb4:	f7ff ffce 	bl	8081b54 <_ZN10ADS_Module8read_rawE15ads_sensor_id_e>
 8081bb8:	80e0      	strh	r0, [r4, #6]
  delay(100);
 8081bba:	2064      	movs	r0, #100	; 0x64
 8081bbc:	f002 fe14 	bl	80847e8 <delay>
  // dataset.Unused2 = read_raw(VOLT_REF1);
  delay(100);
 8081bc0:	2064      	movs	r0, #100	; 0x64
 8081bc2:	f002 fe11 	bl	80847e8 <delay>
  dataset.Auxiliary = read_raw(B4_AUXILIARY);
 8081bc6:	2106      	movs	r1, #6
 8081bc8:	4628      	mov	r0, r5
 8081bca:	f7ff ffc3 	bl	8081b54 <_ZN10ADS_Module8read_rawE15ads_sensor_id_e>
 8081bce:	8120      	strh	r0, [r4, #8]
  delay(100);
 8081bd0:	2064      	movs	r0, #100	; 0x64
 8081bd2:	f002 fe09 	bl	80847e8 <delay>
  // dataset.Unused3 = read_raw(VOLT_REF2);
  delay(100);
 8081bd6:	2064      	movs	r0, #100	; 0x64
 8081bd8:	f002 fe06 	bl	80847e8 <delay>

  return dataset;
} //ads_data ADS_Module::return_updated()
 8081bdc:	4620      	mov	r0, r4
 8081bde:	bd38      	pop	{r3, r4, r5, pc}

08081be0 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
 8081be0:	b538      	push	{r3, r4, r5, lr}
 8081be2:	4604      	mov	r4, r0
  if (_cs != -1) {
 8081be4:	f990 000e 	ldrsb.w	r0, [r0, #14]
 8081be8:	1c41      	adds	r1, r0, #1
 8081bea:	d009      	beq.n	8081c00 <_ZN18Adafruit_SPIDevice5beginEv+0x20>
    pinMode(_cs, OUTPUT);
 8081bec:	2101      	movs	r1, #1
 8081bee:	b280      	uxth	r0, r0
 8081bf0:	f003 fc8a 	bl	8085508 <pinMode>
    digitalWrite(_cs, HIGH);
 8081bf4:	f994 000e 	ldrsb.w	r0, [r4, #14]
 8081bf8:	2101      	movs	r1, #1
 8081bfa:	b280      	uxth	r0, r0
 8081bfc:	f003 fc95 	bl	808552a <digitalWrite>
  }

  if (_spi) { // hardware SPI
 8081c00:	6825      	ldr	r5, [r4, #0]
 8081c02:	b135      	cbz	r5, 8081c12 <_ZN18Adafruit_SPIDevice5beginEv+0x32>
#ifdef BUSIO_HAS_HW_SPI
    _spi->begin();
 8081c04:	4628      	mov	r0, r5
 8081c06:	f002 fb62 	bl	80842ce <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
 8081c0a:	2001      	movs	r0, #1
 8081c0c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
 8081c10:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
 8081c12:	f994 000f 	ldrsb.w	r0, [r4, #15]
 8081c16:	2101      	movs	r1, #1
 8081c18:	b280      	uxth	r0, r0
 8081c1a:	f003 fc75 	bl	8085508 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
 8081c1e:	7b63      	ldrb	r3, [r4, #13]
 8081c20:	f994 000f 	ldrsb.w	r0, [r4, #15]
 8081c24:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
 8081c26:	bf94      	ite	ls
 8081c28:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
 8081c2a:	2101      	movhi	r1, #1
 8081c2c:	b280      	uxth	r0, r0
 8081c2e:	f003 fc7c 	bl	808552a <digitalWrite>
    if (_mosi != -1) {
 8081c32:	f994 0010 	ldrsb.w	r0, [r4, #16]
 8081c36:	1c42      	adds	r2, r0, #1
 8081c38:	d009      	beq.n	8081c4e <_ZN18Adafruit_SPIDevice5beginEv+0x6e>
      pinMode(_mosi, OUTPUT);
 8081c3a:	2101      	movs	r1, #1
 8081c3c:	b280      	uxth	r0, r0
 8081c3e:	f003 fc63 	bl	8085508 <pinMode>
      digitalWrite(_mosi, HIGH);
 8081c42:	f994 0010 	ldrsb.w	r0, [r4, #16]
 8081c46:	2101      	movs	r1, #1
 8081c48:	b280      	uxth	r0, r0
 8081c4a:	f003 fc6e 	bl	808552a <digitalWrite>
    if (_miso != -1) {
 8081c4e:	f994 0011 	ldrsb.w	r0, [r4, #17]
 8081c52:	1c43      	adds	r3, r0, #1
 8081c54:	d0d9      	beq.n	8081c0a <_ZN18Adafruit_SPIDevice5beginEv+0x2a>
      pinMode(_miso, INPUT);
 8081c56:	2100      	movs	r1, #0
 8081c58:	b280      	uxth	r0, r0
 8081c5a:	f003 fc55 	bl	8085508 <pinMode>
 8081c5e:	e7d4      	b.n	8081c0a <_ZN18Adafruit_SPIDevice5beginEv+0x2a>

08081c60 <_ZN18Adafruit_SPIDevice8transferEPhj>:
 *    @brief  Transfer (send/receive) a buffer over hard/soft SPI, without
 * transaction management
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 8081c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081c64:	4604      	mov	r4, r0
  //
  // HARDWARE SPI
  //
  if (_spi) {
 8081c66:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 8081c68:	460d      	mov	r5, r1
 8081c6a:	4613      	mov	r3, r2
 8081c6c:	b085      	sub	sp, #20
  if (_spi) {
 8081c6e:	b138      	cbz	r0, 8081c80 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
#ifdef BUSIO_HAS_HW_SPI
#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, nullptr);
 8081c70:	2200      	movs	r2, #0
 8081c72:	9200      	str	r2, [sp, #0]
 8081c74:	460a      	mov	r2, r1
 8081c76:	f002 fc41 	bl	80844fc <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
 8081c7a:	b005      	add	sp, #20
 8081c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
 8081c80:	7b22      	ldrb	r2, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 8081c82:	68a0      	ldr	r0, [r4, #8]
    startbit = 0x80;
 8081c84:	2a00      	cmp	r2, #0
 8081c86:	bf0c      	ite	eq
 8081c88:	f04f 0b01 	moveq.w	fp, #1
 8081c8c:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
 8081c90:	780a      	ldrb	r2, [r1, #0]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 8081c92:	4f44      	ldr	r7, [pc, #272]	; (8081da4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x144>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
 8081c94:	ea1b 0f02 	tst.w	fp, r2
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 8081c98:	fbb7 f7f0 	udiv	r7, r7, r0
  bool towrite, lastmosi = !(buffer[0] & startbit);
 8081c9c:	bf0c      	ite	eq
 8081c9e:	f04f 0901 	moveq.w	r9, #1
 8081ca2:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 8081ca6:	18cb      	adds	r3, r1, r3
 8081ca8:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
 8081caa:	9303      	str	r3, [sp, #12]
 8081cac:	9b03      	ldr	r3, [sp, #12]
 8081cae:	42ab      	cmp	r3, r5
 8081cb0:	d0e3      	beq.n	8081c7a <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    for (uint8_t b = startbit; b != 0;
 8081cb2:	465e      	mov	r6, fp
    uint8_t reply = 0;
 8081cb4:	f04f 0800 	mov.w	r8, #0
    uint8_t send = buffer[i];
 8081cb8:	f895 a000 	ldrb.w	sl, [r5]
      if (bitdelay_us) {
 8081cbc:	b117      	cbz	r7, 8081cc4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x64>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8081cbe:	4638      	mov	r0, r7
 8081cc0:	f002 f896 	bl	8083df0 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
 8081cc4:	7b63      	ldrb	r3, [r4, #13]
 8081cc6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8081cca:	d141      	bne.n	8081d50 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf0>
        if ((_mosi != -1) && (lastmosi != towrite)) {
 8081ccc:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8081cd0:	1c5a      	adds	r2, r3, #1
 8081cd2:	d00f      	beq.n	8081cf4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        towrite = send & b;
 8081cd4:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
 8081cd8:	bf14      	ite	ne
 8081cda:	2301      	movne	r3, #1
 8081cdc:	2300      	moveq	r3, #0
 8081cde:	454b      	cmp	r3, r9
 8081ce0:	d008      	beq.n	8081cf4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
            *mosiPort = *mosiPort | mosiPinMask;
 8081ce2:	6963      	ldr	r3, [r4, #20]
 8081ce4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8081ce6:	681a      	ldr	r2, [r3, #0]
          if (towrite)
 8081ce8:	2900      	cmp	r1, #0
 8081cea:	d02c      	beq.n	8081d46 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe6>
            *mosiPort = *mosiPort | mosiPinMask;
 8081cec:	f04f 0901 	mov.w	r9, #1
 8081cf0:	4302      	orrs	r2, r0
 8081cf2:	601a      	str	r2, [r3, #0]
        *clkPort = *clkPort | clkPinMask; // Clock high
 8081cf4:	69a1      	ldr	r1, [r4, #24]
 8081cf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8081cf8:	680a      	ldr	r2, [r1, #0]
 8081cfa:	4313      	orrs	r3, r2
 8081cfc:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 8081cfe:	b117      	cbz	r7, 8081d06 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa6>
 8081d00:	4638      	mov	r0, r7
 8081d02:	f002 f875 	bl	8083df0 <HAL_Delay_Microseconds>
        if (_miso != -1) {
 8081d06:	f994 3011 	ldrsb.w	r3, [r4, #17]
 8081d0a:	3301      	adds	r3, #1
 8081d0c:	d006      	beq.n	8081d1c <_ZN18Adafruit_SPIDevice8transferEPhj+0xbc>
          if (*misoPort & misoPinMask) {
 8081d0e:	69e3      	ldr	r3, [r4, #28]
 8081d10:	681a      	ldr	r2, [r3, #0]
 8081d12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8081d14:	421a      	tst	r2, r3
            reply |= b;
 8081d16:	bf18      	it	ne
 8081d18:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort = *clkPort & ~clkPinMask; // Clock low
 8081d1c:	69a1      	ldr	r1, [r4, #24]
 8081d1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8081d20:	680a      	ldr	r2, [r1, #0]
 8081d22:	ea22 0303 	bic.w	r3, r2, r3
 8081d26:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
 8081d28:	f994 3011 	ldrsb.w	r3, [r4, #17]
 8081d2c:	3301      	adds	r3, #1
        buffer[i] = reply;
 8081d2e:	bf18      	it	ne
 8081d30:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
 8081d34:	7b23      	ldrb	r3, [r4, #12]
 8081d36:	2b00      	cmp	r3, #0
 8081d38:	d132      	bne.n	8081da0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x140>
 8081d3a:	0076      	lsls	r6, r6, #1
 8081d3c:	b2f6      	uxtb	r6, r6
 8081d3e:	2e00      	cmp	r6, #0
 8081d40:	d1bc      	bne.n	8081cbc <_ZN18Adafruit_SPIDevice8transferEPhj+0x5c>
  for (size_t i = 0; i < len; i++) {
 8081d42:	3501      	adds	r5, #1
 8081d44:	e7b2      	b.n	8081cac <_ZN18Adafruit_SPIDevice8transferEPhj+0x4c>
            *mosiPort = *mosiPort & ~mosiPinMask;
 8081d46:	ea22 0200 	bic.w	r2, r2, r0
 8081d4a:	4689      	mov	r9, r1
 8081d4c:	601a      	str	r2, [r3, #0]
 8081d4e:	e7d1      	b.n	8081cf4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        *clkPort = *clkPort | clkPinMask; // Clock high
 8081d50:	69a1      	ldr	r1, [r4, #24]
 8081d52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8081d54:	680a      	ldr	r2, [r1, #0]
 8081d56:	4313      	orrs	r3, r2
 8081d58:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 8081d5a:	b117      	cbz	r7, 8081d62 <_ZN18Adafruit_SPIDevice8transferEPhj+0x102>
 8081d5c:	4638      	mov	r0, r7
 8081d5e:	f002 f847 	bl	8083df0 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
 8081d62:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8081d66:	3301      	adds	r3, #1
 8081d68:	d008      	beq.n	8081d7c <_ZN18Adafruit_SPIDevice8transferEPhj+0x11c>
            *mosiPort = *mosiPort | mosiPinMask;
 8081d6a:	6963      	ldr	r3, [r4, #20]
 8081d6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8081d6e:	681a      	ldr	r2, [r3, #0]
          if (send & b)
 8081d70:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort = *mosiPort | mosiPinMask;
 8081d74:	bf14      	ite	ne
 8081d76:	430a      	orrne	r2, r1
            *mosiPort = *mosiPort & ~mosiPinMask;
 8081d78:	438a      	biceq	r2, r1
 8081d7a:	601a      	str	r2, [r3, #0]
        *clkPort = *clkPort & ~clkPinMask; // Clock low
 8081d7c:	69a1      	ldr	r1, [r4, #24]
 8081d7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8081d80:	680a      	ldr	r2, [r1, #0]
 8081d82:	ea22 0303 	bic.w	r3, r2, r3
 8081d86:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
 8081d88:	f994 3011 	ldrsb.w	r3, [r4, #17]
 8081d8c:	3301      	adds	r3, #1
 8081d8e:	d0cb      	beq.n	8081d28 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
          if (*misoPort & misoPinMask) {
 8081d90:	69e3      	ldr	r3, [r4, #28]
 8081d92:	681a      	ldr	r2, [r3, #0]
 8081d94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8081d96:	421a      	tst	r2, r3
            reply |= b;
 8081d98:	bf18      	it	ne
 8081d9a:	ea46 0808 	orrne.w	r8, r6, r8
 8081d9e:	e7c3      	b.n	8081d28 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
    for (uint8_t b = startbit; b != 0;
 8081da0:	0876      	lsrs	r6, r6, #1
 8081da2:	e7cc      	b.n	8081d3e <_ZN18Adafruit_SPIDevice8transferEPhj+0xde>
 8081da4:	0007a120 	.word	0x0007a120

08081da8 <_ZN18Adafruit_SPIDevice8transferEh>:
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI, without
 * transaction management
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
 8081da8:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
 8081daa:	2201      	movs	r2, #1
  uint8_t data = send;
 8081dac:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
 8081db0:	f10d 0107 	add.w	r1, sp, #7
 8081db4:	f7ff ff54 	bl	8081c60 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
 8081db8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8081dbc:	b003      	add	sp, #12
 8081dbe:	f85d fb04 	ldr.w	pc, [sp], #4

08081dc2 <_ZN18Adafruit_SPIDevice16beginTransactionEv>:

/*!
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 * SPI)
 */
void Adafruit_SPIDevice::beginTransaction(void) {
 8081dc2:	4603      	mov	r3, r0
  if (_spi) {
 8081dc4:	6800      	ldr	r0, [r0, #0]
 8081dc6:	b110      	cbz	r0, 8081dce <_ZN18Adafruit_SPIDevice16beginTransactionEv+0xc>
#ifdef BUSIO_HAS_HW_SPI
    _spi->beginTransaction(*_spiSetting);
 8081dc8:	6859      	ldr	r1, [r3, #4]
 8081dca:	f002 bad5 	b.w	8084378 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
#endif
  }
}
 8081dce:	4770      	bx	lr

08081dd0 <_ZN18Adafruit_SPIDevice14endTransactionEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 */
void Adafruit_SPIDevice::endTransaction(void) {
  if (_spi) {
 8081dd0:	6800      	ldr	r0, [r0, #0]
 8081dd2:	b108      	cbz	r0, 8081dd8 <_ZN18Adafruit_SPIDevice14endTransactionEv+0x8>
#ifdef BUSIO_HAS_HW_SPI
    _spi->endTransaction();
 8081dd4:	f002 bab7 	b.w	8084346 <_ZN8SPIClass14endTransactionEv>
#endif
  }
}
 8081dd8:	4770      	bx	lr

08081dda <_ZN18Adafruit_SPIDevice13setChipSelectEi>:
/*!
 *    @brief  Assert/Deassert the CS pin if it is defined
 *    @param  value The state the CS is set to
 */
void Adafruit_SPIDevice::setChipSelect(int value) {
  if (_cs != -1) {
 8081dda:	f990 000e 	ldrsb.w	r0, [r0, #14]
 8081dde:	1c43      	adds	r3, r0, #1
 8081de0:	d003      	beq.n	8081dea <_ZN18Adafruit_SPIDevice13setChipSelectEi+0x10>
    digitalWrite(_cs, value);
 8081de2:	b2c9      	uxtb	r1, r1
 8081de4:	b280      	uxth	r0, r0
 8081de6:	f003 bba0 	b.w	808552a <digitalWrite>
  }
}
 8081dea:	4770      	bx	lr

08081dec <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>:
 *    @brief  Write a buffer or two to the SPI device, with transaction
 * management.
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 *            SPI) with asserting the CS pin
 */
void Adafruit_SPIDevice::beginTransactionWithAssertingCS() {
 8081dec:	b510      	push	{r4, lr}
 8081dee:	4604      	mov	r4, r0
  beginTransaction();
 8081df0:	f7ff ffe7 	bl	8081dc2 <_ZN18Adafruit_SPIDevice16beginTransactionEv>
  setChipSelect(LOW);
 8081df4:	4620      	mov	r0, r4
}
 8081df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setChipSelect(LOW);
 8081dfa:	2100      	movs	r1, #0
 8081dfc:	f7ff bfed 	b.w	8081dda <_ZN18Adafruit_SPIDevice13setChipSelectEi>

08081e00 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
 8081e00:	b510      	push	{r4, lr}
 8081e02:	4604      	mov	r4, r0
  setChipSelect(HIGH);
 8081e04:	2101      	movs	r1, #1
 8081e06:	f7ff ffe8 	bl	8081dda <_ZN18Adafruit_SPIDevice13setChipSelectEi>
  endTransaction();
 8081e0a:	4620      	mov	r0, r4
}
 8081e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  endTransaction();
 8081e10:	f7ff bfde 	b.w	8081dd0 <_ZN18Adafruit_SPIDevice14endTransactionEv>

08081e14 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 8081e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081e18:	461c      	mov	r4, r3
 8081e1a:	4606      	mov	r6, r0
 8081e1c:	460d      	mov	r5, r1
 8081e1e:	4617      	mov	r7, r2
  beginTransactionWithAssertingCS();
 8081e20:	f7ff ffe4 	bl	8081dec <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>
      _spi->transferBytes((uint8_t *)buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
 8081e24:	9b06      	ldr	r3, [sp, #24]
 8081e26:	eb04 0803 	add.w	r8, r4, r3
 8081e2a:	4544      	cmp	r4, r8
 8081e2c:	d108      	bne.n	8081e40 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x2c>
 8081e2e:	442f      	add	r7, r5
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
 8081e30:	42bd      	cmp	r5, r7
 8081e32:	d00b      	beq.n	8081e4c <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x38>
      transfer(buffer[i]);
 8081e34:	4630      	mov	r0, r6
 8081e36:	f815 1b01 	ldrb.w	r1, [r5], #1
 8081e3a:	f7ff ffb5 	bl	8081da8 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < len; i++) {
 8081e3e:	e7f7      	b.n	8081e30 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x1c>
      transfer(prefix_buffer[i]);
 8081e40:	4630      	mov	r0, r6
 8081e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8081e46:	f7ff ffaf 	bl	8081da8 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < prefix_len; i++) {
 8081e4a:	e7ee      	b.n	8081e2a <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x16>
    }
  }
  endTransactionWithDeassertingCS();
 8081e4c:	4630      	mov	r0, r6
 8081e4e:	f7ff ffd7 	bl	8081e00 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 8081e52:	2001      	movs	r0, #1
 8081e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081e58 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
 8081e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081e5c:	460d      	mov	r5, r1
 8081e5e:	4617      	mov	r7, r2
 8081e60:	4606      	mov	r6, r0
 8081e62:	461c      	mov	r4, r3
 8081e64:	f89d 801c 	ldrb.w	r8, [sp, #28]
  beginTransactionWithAssertingCS();
 8081e68:	f7ff ffc0 	bl	8081dec <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>
      _spi->transferBytes((uint8_t *)write_buffer, nullptr, write_len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
 8081e6c:	442f      	add	r7, r5
 8081e6e:	42bd      	cmp	r5, r7
 8081e70:	d10a      	bne.n	8081e88 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x30>
 8081e72:	9b06      	ldr	r3, [sp, #24]
 8081e74:	18e5      	adds	r5, r4, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
 8081e76:	42ac      	cmp	r4, r5
 8081e78:	d00c      	beq.n	8081e94 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x3c>
    read_buffer[i] = transfer(sendvalue);
 8081e7a:	4641      	mov	r1, r8
 8081e7c:	4630      	mov	r0, r6
 8081e7e:	f7ff ff93 	bl	8081da8 <_ZN18Adafruit_SPIDevice8transferEh>
 8081e82:	f804 0b01 	strb.w	r0, [r4], #1
  for (size_t i = 0; i < read_len; i++) {
 8081e86:	e7f6      	b.n	8081e76 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x1e>
      transfer(write_buffer[i]);
 8081e88:	4630      	mov	r0, r6
 8081e8a:	f815 1b01 	ldrb.w	r1, [r5], #1
 8081e8e:	f7ff ff8b 	bl	8081da8 <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < write_len; i++) {
 8081e92:	e7ec      	b.n	8081e6e <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x16>
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
 8081e94:	4630      	mov	r0, r6
 8081e96:	f7ff ffb3 	bl	8081e00 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>

  return true;
}
 8081e9a:	2001      	movs	r0, #1
 8081e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081ea0 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 8081ea0:	4770      	bx	lr

08081ea2 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8081ea2:	3008      	adds	r0, #8
 8081ea4:	f001 bd24 	b.w	80838f0 <_ZN7FatFile5writeEPKvj>

08081ea8 <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 8081ea8:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8081eac:	f001 b97f 	b.w	80831ae <_ZN9SdSpiCard11writeBlocksEmPKhj>

08081eb0 <_ZN9SdFatBase10readBlocksEmPhj>:
    return m_sdCard.readBlocks(block, dst, n);
 8081eb0:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8081eb4:	f001 b8b3 	b.w	808301e <_ZN9SdSpiCard10readBlocksEmPhj>

08081eb8 <_ZN9SdFatBase10writeBlockEmPKh>:
    return m_sdCard.writeBlock(block, src);
 8081eb8:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8081ebc:	f001 b8f1 	b.w	80830a2 <_ZN9SdSpiCard10writeBlockEmPKh>

08081ec0 <_ZN9SdFatBase9readBlockEmPh>:
    return m_sdCard.readBlock(block, dst);
 8081ec0:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8081ec4:	f001 b863 	b.w	8082f8e <_ZN9SdSpiCard9readBlockEmPh>

08081ec8 <_ZN6SdFileD0Ev>:
class SdFile : public PrintFile {
 8081ec8:	b510      	push	{r4, lr}
 8081eca:	4604      	mov	r4, r0
 8081ecc:	212c      	movs	r1, #44	; 0x2c
 8081ece:	f7fe f8e6 	bl	808009e <_ZdlPvj>
 8081ed2:	4620      	mov	r0, r4
 8081ed4:	bd10      	pop	{r4, pc}

08081ed6 <_ZN9PrintFile5writeEh>:
  size_t write(uint8_t b) {
 8081ed6:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8081ed8:	2201      	movs	r2, #1
 8081eda:	f88d 1007 	strb.w	r1, [sp, #7]
 8081ede:	3008      	adds	r0, #8
 8081ee0:	f10d 0107 	add.w	r1, sp, #7
 8081ee4:	f001 fd04 	bl	80838f0 <_ZN7FatFile5writeEPKvj>
  }
 8081ee8:	b003      	add	sp, #12
 8081eea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08081ef0 <_ZN5SdFat5beginEhh>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
 8081ef0:	b538      	push	{r3, r4, r5, lr}
 8081ef2:	4604      	mov	r4, r0
 8081ef4:	4613      	mov	r3, r2
    return m_sdCard.begin(spi, csPin, divisor) &&
 8081ef6:	460a      	mov	r2, r1
 8081ef8:	f500 618e 	add.w	r1, r0, #1136	; 0x470
 8081efc:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8081f00:	f000 ffb4 	bl	8082e6c <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8081f04:	b908      	cbnz	r0, 8081f0a <_ZN5SdFat5beginEhh+0x1a>
 8081f06:	2000      	movs	r0, #0
    return SdFatBase::begin(&m_spi, csPin, divisor);
  }
 8081f08:	bd38      	pop	{r3, r4, r5, pc}
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8081f0a:	f504 6588 	add.w	r5, r4, #1088	; 0x440
    vwd()->close();
 8081f0e:	4628      	mov	r0, r5
 8081f10:	f001 fc9a 	bl	8083848 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8081f14:	2101      	movs	r1, #1
 8081f16:	4620      	mov	r0, r4
 8081f18:	f001 fec3 	bl	8083ca2 <_ZN9FatVolume4initEh>
 8081f1c:	4601      	mov	r1, r0
 8081f1e:	b168      	cbz	r0, 8081f3c <_ZN5SdFat5beginEhh+0x4c>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8081f20:	4621      	mov	r1, r4
 8081f22:	4628      	mov	r0, r5
 8081f24:	f001 faeb 	bl	80834fe <_ZN7FatFile8openRootEP9FatVolume>
 8081f28:	2800      	cmp	r0, #0
 8081f2a:	d0ec      	beq.n	8081f06 <_ZN5SdFat5beginEhh+0x16>
    if (!dir->isDir()) {
 8081f2c:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8081f30:	f013 0f70 	tst.w	r3, #112	; 0x70
 8081f34:	d0e7      	beq.n	8081f06 <_ZN5SdFat5beginEhh+0x16>
    m_cwd = dir;
 8081f36:	4b04      	ldr	r3, [pc, #16]	; (8081f48 <_ZN5SdFat5beginEhh+0x58>)
 8081f38:	601d      	str	r5, [r3, #0]
    return true;
 8081f3a:	e7e5      	b.n	8081f08 <_ZN5SdFat5beginEhh+0x18>
    return (part ? init(part) : init(1) || init(0))
 8081f3c:	4620      	mov	r0, r4
 8081f3e:	f001 feb0 	bl	8083ca2 <_ZN9FatVolume4initEh>
 8081f42:	2800      	cmp	r0, #0
 8081f44:	d1ec      	bne.n	8081f20 <_ZN5SdFat5beginEhh+0x30>
 8081f46:	e7de      	b.n	8081f06 <_ZN5SdFat5beginEhh+0x16>
 8081f48:	200006f4 	.word	0x200006f4

08081f4c <setup>:
  // void publishTest();
#endif

/***************************************************************************************/
// setup() runs once, when the device is first turned on
void setup() {
 8081f4c:	b530      	push	{r4, r5, lr}
 8081f4e:	b087      	sub	sp, #28
  // Put initialization like pinMode and begin functions here
  #if SERIAL_ENABLED
    Serial.begin(9600);
 8081f50:	f003 f882 	bl	8085058 <_Z16_fetch_usbserialv>
 8081f54:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081f58:	f003 f864 	bl	8085024 <_ZN9USBSerial5beginEl>
  #endif

  #if DS3231_ENABLED
    ds3231.begin();
 8081f5c:	f003 fb70 	bl	8085640 <_Z19__fetch_global_Wirev>
 8081f60:	4601      	mov	r1, r0
 8081f62:	4845      	ldr	r0, [pc, #276]	; (8082078 <setup+0x12c>)
 8081f64:	f7ff fcd4 	bl	8081910 <_ZN10RTC_DS32315beginEP7TwoWire>
      DateTime firsttime = ds3231.now();
 8081f68:	4943      	ldr	r1, [pc, #268]	; (8082078 <setup+0x12c>)
 8081f6a:	a802      	add	r0, sp, #8
 8081f6c:	f7ff fd49 	bl	8081a02 <_ZN10RTC_DS32313nowEv>
      ds3231.adjust(DateTime(F(__DATE__), F(__TIME__))); 
 8081f70:	4a42      	ldr	r2, [pc, #264]	; (808207c <setup+0x130>)
 8081f72:	4943      	ldr	r1, [pc, #268]	; (8082080 <setup+0x134>)
 8081f74:	a804      	add	r0, sp, #16
 8081f76:	f7ff fa9f 	bl	80814b8 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
 8081f7a:	a904      	add	r1, sp, #16
 8081f7c:	483e      	ldr	r0, [pc, #248]	; (8082078 <setup+0x12c>)
 8081f7e:	f7ff fcdf 	bl	8081940 <_ZN10RTC_DS32316adjustERK8DateTime>
  #endif //DS3231_ENABLED
  
  #if ADS_ENABLED
    ads_module.begin();
 8081f82:	4840      	ldr	r0, [pc, #256]	; (8082084 <setup+0x138>)
 8081f84:	f7ff fdc6 	bl	8081b14 <_ZN10ADS_Module5beginEv>
  #endif  //ADS_ENABLED

  #if BME_ENABLED    
    bme680.begin(BME_SENSOR_ADDR);
 8081f88:	2201      	movs	r2, #1
 8081f8a:	2176      	movs	r1, #118	; 0x76
 8081f8c:	483e      	ldr	r0, [pc, #248]	; (8082088 <setup+0x13c>)
 8081f8e:	f7ff fc4b 	bl	8081828 <_ZN15Adafruit_BME6805beginEhb>
    if (!bme680.begin(BME_SENSOR_ADDR)) {
 8081f92:	2201      	movs	r2, #1
 8081f94:	2176      	movs	r1, #118	; 0x76
 8081f96:	483c      	ldr	r0, [pc, #240]	; (8082088 <setup+0x13c>)
 8081f98:	f7ff fc46 	bl	8081828 <_ZN15Adafruit_BME6805beginEhb>
 8081f9c:	b928      	cbnz	r0, 8081faa <setup+0x5e>
      Serial.println(F("Could not find a valid BME680 sensor, check wiring!"));
 8081f9e:	f003 f85b 	bl	8085058 <_Z16_fetch_usbserialv>
 8081fa2:	493a      	ldr	r1, [pc, #232]	; (808208c <setup+0x140>)
 8081fa4:	f002 fb07 	bl	80845b6 <_ZN5Print7printlnEPK19__FlashStringHelper>
      while (1);
 8081fa8:	e7fe      	b.n	8081fa8 <setup+0x5c>
    } //if(!bme680.begin(BME680_CS))
    //Set up oversampling an initialize filter
    bme680.setTemperatureOversampling(BME680_OS_8X);
 8081faa:	2104      	movs	r1, #4
 8081fac:	4836      	ldr	r0, [pc, #216]	; (8082088 <setup+0x13c>)
 8081fae:	f7ff fbfb 	bl	80817a8 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
    bme680.setHumidityOversampling(BME680_OS_2X);
 8081fb2:	2102      	movs	r1, #2
 8081fb4:	4834      	ldr	r0, [pc, #208]	; (8082088 <setup+0x13c>)
 8081fb6:	f7ff fc07 	bl	80817c8 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
    bme680.setPressureOversampling(BME680_OS_4X);
 8081fba:	2103      	movs	r1, #3
 8081fbc:	4832      	ldr	r0, [pc, #200]	; (8082088 <setup+0x13c>)
 8081fbe:	f7ff fc13 	bl	80817e8 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
    bme680.setIIRFilterSize(BME680_FILTER_SIZE_3);
 8081fc2:	2102      	movs	r1, #2
 8081fc4:	4830      	ldr	r0, [pc, #192]	; (8082088 <setup+0x13c>)
 8081fc6:	f7ff fc1f 	bl	8081808 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
    bme680.setGasHeater(320, 150);
 8081fca:	2296      	movs	r2, #150	; 0x96
 8081fcc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8081fd0:	482d      	ldr	r0, [pc, #180]	; (8082088 <setup+0x13c>)
 8081fd2:	f7ff fbc0 	bl	8081756 <_ZN15Adafruit_BME68012setGasHeaterEtt>
  #endif  //BME_ENABLED
  #if SD_ENABLED
    pinMode(SD_CS, OUTPUT);
 8081fd6:	2101      	movs	r1, #1
 8081fd8:	200c      	movs	r0, #12
 8081fda:	f003 fa95 	bl	8085508 <pinMode>

    digitalWrite(SD_CS, LOW);
 8081fde:	2100      	movs	r1, #0
 8081fe0:	200c      	movs	r0, #12
 8081fe2:	f003 faa2 	bl	808552a <digitalWrite>
    sd.begin(SD_CS);
 8081fe6:	2202      	movs	r2, #2
 8081fe8:	210c      	movs	r1, #12
 8081fea:	4829      	ldr	r0, [pc, #164]	; (8082090 <setup+0x144>)
 8081fec:	f7ff ff80 	bl	8081ef0 <_ZN5SdFat5beginEhh>
    while(!sd.begin(SD_CS)){
 8081ff0:	4c27      	ldr	r4, [pc, #156]	; (8082090 <setup+0x144>)
      #if SERIAL_ENABLED
        Serial.println(F("Insert SD Card to begin!"));
 8081ff2:	4d28      	ldr	r5, [pc, #160]	; (8082094 <setup+0x148>)
    while(!sd.begin(SD_CS)){
 8081ff4:	2202      	movs	r2, #2
 8081ff6:	210c      	movs	r1, #12
 8081ff8:	4620      	mov	r0, r4
 8081ffa:	f7ff ff79 	bl	8081ef0 <_ZN5SdFat5beginEhh>
 8081ffe:	b950      	cbnz	r0, 8082016 <setup+0xca>
        Serial.println(F("Insert SD Card to begin!"));
 8082000:	f003 f82a 	bl	8085058 <_Z16_fetch_usbserialv>
 8082004:	4629      	mov	r1, r5
 8082006:	f002 fad6 	bl	80845b6 <_ZN5Print7printlnEPK19__FlashStringHelper>
      #endif  //SERIAL_ENABLED
      sd.begin(SD_CS);
 808200a:	2202      	movs	r2, #2
 808200c:	210c      	movs	r1, #12
 808200e:	4620      	mov	r0, r4
 8082010:	f7ff ff6e 	bl	8081ef0 <_ZN5SdFat5beginEhh>
    while(!sd.begin(SD_CS)){
 8082014:	e7ee      	b.n	8081ff4 <setup+0xa8>
    }
      DateTime now = ds3231.now();
 8082016:	a804      	add	r0, sp, #16
 8082018:	4917      	ldr	r1, [pc, #92]	; (8082078 <setup+0x12c>)
 808201a:	f7ff fcf2 	bl	8081a02 <_ZN10RTC_DS32313nowEv>
  uint16_t year() const { return 2000U + yOff; }
 808201e:	f89d 3010 	ldrb.w	r3, [sp, #16]
        Y = now.year();
 8082022:	4a1d      	ldr	r2, [pc, #116]	; (8082098 <setup+0x14c>)
 8082024:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8082028:	6013      	str	r3, [r2, #0]
        M = now.month();
 808202a:	491c      	ldr	r1, [pc, #112]	; (808209c <setup+0x150>)
 808202c:	f89d 2011 	ldrb.w	r2, [sp, #17]
        D = now.day();
 8082030:	481b      	ldr	r0, [pc, #108]	; (80820a0 <setup+0x154>)
        M = now.month();
 8082032:	600a      	str	r2, [r1, #0]
        D = now.day();
 8082034:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8082038:	6001      	str	r1, [r0, #0]
      sprintf(fileName, "%s_%04u_%02u_%02u.CSV", lpodID, Y, M, D);
 808203a:	e9cd 2100 	strd	r2, r1, [sp]
 808203e:	4819      	ldr	r0, [pc, #100]	; (80820a4 <setup+0x158>)
 8082040:	4a19      	ldr	r2, [pc, #100]	; (80820a8 <setup+0x15c>)
 8082042:	491a      	ldr	r1, [pc, #104]	; (80820ac <setup+0x160>)
 8082044:	f002 f900 	bl	8084248 <sprintf>
        delay(100);
 8082048:	2064      	movs	r0, #100	; 0x64
 808204a:	f002 fbcd 	bl	80847e8 <delay>
    return open(m_cwd, path, oflag);
 808204e:	4918      	ldr	r1, [pc, #96]	; (80820b0 <setup+0x164>)
 8082050:	2346      	movs	r3, #70	; 0x46
 8082052:	4a14      	ldr	r2, [pc, #80]	; (80820a4 <setup+0x158>)
 8082054:	6809      	ldr	r1, [r1, #0]
 8082056:	4817      	ldr	r0, [pc, #92]	; (80820b4 <setup+0x168>)
 8082058:	f001 fbfd 	bl	8083856 <_ZN7FatFile4openEPS_PKch>
      file.open(fileName, O_CREAT | O_APPEND | O_WRITE);
      Serial.println(fileName);
 808205c:	f002 fffc 	bl	8085058 <_Z16_fetch_usbserialv>
 8082060:	4910      	ldr	r1, [pc, #64]	; (80820a4 <setup+0x158>)
 8082062:	f002 fa9e 	bl	80845a2 <_ZN5Print7printlnEPKc>
      file.close();
 8082066:	4813      	ldr	r0, [pc, #76]	; (80820b4 <setup+0x168>)
 8082068:	f001 fbee 	bl	8083848 <_ZN7FatFile5closeEv>
      digitalWrite(SD_CS, HIGH);
 808206c:	2101      	movs	r1, #1
 808206e:	200c      	movs	r0, #12
 8082070:	f003 fa5b 	bl	808552a <digitalWrite>
    #endif
}
 8082074:	b007      	add	sp, #28
 8082076:	bd30      	pop	{r4, r5, pc}
 8082078:	200001f4 	.word	0x200001f4
 808207c:	080868bb 	.word	0x080868bb
 8082080:	080868c4 	.word	0x080868c4
 8082084:	200000c0 	.word	0x200000c0
 8082088:	20000160 	.word	0x20000160
 808208c:	080868d0 	.word	0x080868d0
 8082090:	20000234 	.word	0x20000234
 8082094:	08086904 	.word	0x08086904
 8082098:	200000b0 	.word	0x200000b0
 808209c:	200000a0 	.word	0x200000a0
 80820a0:	2000009c 	.word	0x2000009c
 80820a4:	20000018 	.word	0x20000018
 80820a8:	080869df 	.word	0x080869df
 80820ac:	0808691d 	.word	0x0808691d
 80820b0:	200006f4 	.word	0x200006f4
 80820b4:	20000200 	.word	0x20000200

080820b8 <loop>:

/***************************************************************************************/
// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80820b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80820bc:	b0b5      	sub	sp, #212	; 0xd4
  // The core of your code will likely live here.

  #if DS3231_ENABLED
    DateTime now = ds3231.now();
 80820be:	4933      	ldr	r1, [pc, #204]	; (808218c <loop+0xd4>)
 80820c0:	a810      	add	r0, sp, #64	; 0x40
 80820c2:	f7ff fc9e 	bl	8081a02 <_ZN10RTC_DS32313nowEv>
 80820c6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    Y = now.year();  M = now.month();  D = now.day();  h = now.hour();  m = now.minute();  s = now.second();
 80820ca:	4b31      	ldr	r3, [pc, #196]	; (8082190 <loop+0xd8>)
 80820cc:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80820d0:	601a      	str	r2, [r3, #0]
 80820d2:	4930      	ldr	r1, [pc, #192]	; (8082194 <loop+0xdc>)
 80820d4:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80820d8:	482f      	ldr	r0, [pc, #188]	; (8082198 <loop+0xe0>)
 80820da:	600b      	str	r3, [r1, #0]
 80820dc:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
 80820e0:	4c2e      	ldr	r4, [pc, #184]	; (808219c <loop+0xe4>)
 80820e2:	6001      	str	r1, [r0, #0]
 80820e4:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 80820e8:	4d2d      	ldr	r5, [pc, #180]	; (80821a0 <loop+0xe8>)
 80820ea:	6020      	str	r0, [r4, #0]
 80820ec:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 80820f0:	4e2c      	ldr	r6, [pc, #176]	; (80821a4 <loop+0xec>)
 80820f2:	602c      	str	r4, [r5, #0]
 80820f4:	f89d 5045 	ldrb.w	r5, [sp, #69]	; 0x45
 80820f8:	6035      	str	r5, [r6, #0]
    sprintf(bufftime, "%04u-%02u-%02uT%02u:%02u:%02u", Y, M, D, h, m, s);
 80820fa:	e9cd 1000 	strd	r1, r0, [sp]
 80820fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8082102:	4929      	ldr	r1, [pc, #164]	; (80821a8 <loop+0xf0>)
 8082104:	4829      	ldr	r0, [pc, #164]	; (80821ac <loop+0xf4>)
 8082106:	f002 f89f 	bl	8084248 <sprintf>
  #endif  //DS3231_ENABLED
  
  #if ADS_ENABLED
    ads = ads_module.return_updated();
 808210a:	a80c      	add	r0, sp, #48	; 0x30
 808210c:	4928      	ldr	r1, [pc, #160]	; (80821b0 <loop+0xf8>)
 808210e:	f7ff fd31 	bl	8081b74 <_ZN10ADS_Module14return_updatedEv>
 8082112:	4c28      	ldr	r4, [pc, #160]	; (80821b4 <loop+0xfc>)
 8082114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    // Serial.println(F("you did it"));
  #endif  //ADS_ENABLED

  #if BME_ENABLED
    if(!bme680.performReading())  {
 8082116:	4828      	ldr	r0, [pc, #160]	; (80821b8 <loop+0x100>)
    ads = ads_module.return_updated();
 8082118:	6023      	str	r3, [r4, #0]
 808211a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808211c:	6063      	str	r3, [r4, #4]
 808211e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8082122:	8123      	strh	r3, [r4, #8]
    if(!bme680.performReading())  {
 8082124:	f7ff fafb 	bl	808171e <_ZN15Adafruit_BME68014performReadingEv>
 8082128:	b938      	cbnz	r0, 808213a <loop+0x82>
      Serial.println(F("Failed to perform reading :("));
 808212a:	f002 ff95 	bl	8085058 <_Z16_fetch_usbserialv>
 808212e:	4923      	ldr	r1, [pc, #140]	; (80821bc <loop+0x104>)
 8082130:	f002 fa41 	bl	80845b6 <_ZN5Print7printlnEPK19__FlashStringHelper>

  // Example: Publish event to cloud every 10 seconds. Uncomment the next 3 lines to try it!
  // Log.info("Sending Hello World to the cloud!");
  // Particle.publish("Hello world!");
  // delay( 10 * 1000 ); // milliseconds and blocking - see docs for more info!
}
 8082134:	b035      	add	sp, #212	; 0xd4
 8082136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808213a:	f001 fe61 	bl	8083e00 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastLog >= logPeriod.count())
 808213e:	4d20      	ldr	r5, [pc, #128]	; (80821c0 <loop+0x108>)
 8082140:	682b      	ldr	r3, [r5, #0]
 8082142:	1ac0      	subs	r0, r0, r3
 8082144:	f247 532f 	movw	r3, #29999	; 0x752f
 8082148:	4298      	cmp	r0, r3
 808214a:	d9f3      	bls.n	8082134 <loop+0x7c>
 808214c:	f001 fe58 	bl	8083e00 <HAL_Timer_Get_Milli_Seconds>
    digitalWrite(SD_CS, LOW);
 8082150:	2100      	movs	r1, #0
    lastLog = millis();
 8082152:	6028      	str	r0, [r5, #0]
    digitalWrite(SD_CS, LOW);
 8082154:	200c      	movs	r0, #12
 8082156:	f003 f9e8 	bl	808552a <digitalWrite>
    sd.begin(SD_CS);
 808215a:	2202      	movs	r2, #2
 808215c:	210c      	movs	r1, #12
 808215e:	4819      	ldr	r0, [pc, #100]	; (80821c4 <loop+0x10c>)
 8082160:	f7ff fec6 	bl	8081ef0 <_ZN5SdFat5beginEhh>
    while(!sd.begin(SD_CS)){
 8082164:	4d17      	ldr	r5, [pc, #92]	; (80821c4 <loop+0x10c>)
        Serial.println("Cannot find SD Card!");
 8082166:	4e18      	ldr	r6, [pc, #96]	; (80821c8 <loop+0x110>)
    while(!sd.begin(SD_CS)){
 8082168:	2202      	movs	r2, #2
 808216a:	210c      	movs	r1, #12
 808216c:	4628      	mov	r0, r5
 808216e:	f7ff febf 	bl	8081ef0 <_ZN5SdFat5beginEhh>
 8082172:	bb58      	cbnz	r0, 80821cc <loop+0x114>
        Serial.println("Cannot find SD Card!");
 8082174:	f002 ff70 	bl	8085058 <_Z16_fetch_usbserialv>
 8082178:	4631      	mov	r1, r6
 808217a:	f002 fa12 	bl	80845a2 <_ZN5Print7printlnEPKc>
      sd.begin(SD_CS);
 808217e:	2202      	movs	r2, #2
 8082180:	210c      	movs	r1, #12
 8082182:	4628      	mov	r0, r5
 8082184:	f7ff feb4 	bl	8081ef0 <_ZN5SdFat5beginEhh>
    while(!sd.begin(SD_CS)){
 8082188:	e7ee      	b.n	8082168 <loop+0xb0>
 808218a:	bf00      	nop
 808218c:	200001f4 	.word	0x200001f4
 8082190:	200000b0 	.word	0x200000b0
 8082194:	200000a0 	.word	0x200000a0
 8082198:	2000009c 	.word	0x2000009c
 808219c:	20000224 	.word	0x20000224
 80821a0:	2000022c 	.word	0x2000022c
 80821a4:	20000230 	.word	0x20000230
 80821a8:	08086933 	.word	0x08086933
 80821ac:	20000000 	.word	0x20000000
 80821b0:	200000c0 	.word	0x200000c0
 80821b4:	200000b6 	.word	0x200000b6
 80821b8:	20000160 	.word	0x20000160
 80821bc:	08086951 	.word	0x08086951
 80821c0:	20000228 	.word	0x20000228
 80821c4:	20000234 	.word	0x20000234
 80821c8:	0808696e 	.word	0x0808696e
    if(sd.begin(SD_CS)){
 80821cc:	2202      	movs	r2, #2
 80821ce:	210c      	movs	r1, #12
 80821d0:	48c4      	ldr	r0, [pc, #784]	; (80824e4 <loop+0x42c>)
 80821d2:	f7ff fe8d 	bl	8081ef0 <_ZN5SdFat5beginEhh>
 80821d6:	2800      	cmp	r0, #0
 80821d8:	f000 8097 	beq.w	808230a <loop+0x252>
      delay(100);
 80821dc:	2064      	movs	r0, #100	; 0x64
 80821de:	f002 fb03 	bl	80847e8 <delay>
 80821e2:	49c1      	ldr	r1, [pc, #772]	; (80824e8 <loop+0x430>)
 80821e4:	2346      	movs	r3, #70	; 0x46
 80821e6:	4ac1      	ldr	r2, [pc, #772]	; (80824ec <loop+0x434>)
 80821e8:	6809      	ldr	r1, [r1, #0]
 80821ea:	48c1      	ldr	r0, [pc, #772]	; (80824f0 <loop+0x438>)
 80821ec:	f001 fb33 	bl	8083856 <_ZN7FatFile4openEPS_PKch>
      delay(1000);
 80821f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80821f4:	f002 faf8 	bl	80847e8 <delay>
      file.println();
 80821f8:	48be      	ldr	r0, [pc, #760]	; (80824f4 <loop+0x43c>)
 80821fa:	f002 f9c6 	bl	808458a <_ZN5Print7printlnEv>
        file.print(bufftime);
 80821fe:	49be      	ldr	r1, [pc, #760]	; (80824f8 <loop+0x440>)
 8082200:	48bc      	ldr	r0, [pc, #752]	; (80824f4 <loop+0x43c>)
 8082202:	f002 f9b7 	bl	8084574 <_ZN5Print5printEPKc>
        file.print(F(","));
 8082206:	49bd      	ldr	r1, [pc, #756]	; (80824fc <loop+0x444>)
 8082208:	48ba      	ldr	r0, [pc, #744]	; (80824f4 <loop+0x43c>)
 808220a:	f002 f9ba 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 808220e:	2064      	movs	r0, #100	; 0x64
 8082210:	f002 faea 	bl	80847e8 <delay>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8082214:	220a      	movs	r2, #10
 8082216:	8821      	ldrh	r1, [r4, #0]
 8082218:	48b6      	ldr	r0, [pc, #728]	; (80824f4 <loop+0x43c>)
 808221a:	f002 f9ce 	bl	80845ba <_ZN5Print11printNumberEmh>
        file.print(F(","));
 808221e:	49b7      	ldr	r1, [pc, #732]	; (80824fc <loop+0x444>)
 8082220:	48b4      	ldr	r0, [pc, #720]	; (80824f4 <loop+0x43c>)
 8082222:	f002 f9ae 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 8082226:	2064      	movs	r0, #100	; 0x64
 8082228:	f002 fade 	bl	80847e8 <delay>
 808222c:	220a      	movs	r2, #10
 808222e:	8861      	ldrh	r1, [r4, #2]
 8082230:	48b0      	ldr	r0, [pc, #704]	; (80824f4 <loop+0x43c>)
 8082232:	f002 f9c2 	bl	80845ba <_ZN5Print11printNumberEmh>
        file.print(F(","));
 8082236:	49b1      	ldr	r1, [pc, #708]	; (80824fc <loop+0x444>)
 8082238:	48ae      	ldr	r0, [pc, #696]	; (80824f4 <loop+0x43c>)
 808223a:	f002 f9a2 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 808223e:	2064      	movs	r0, #100	; 0x64
 8082240:	f002 fad2 	bl	80847e8 <delay>
 8082244:	220a      	movs	r2, #10
 8082246:	88a1      	ldrh	r1, [r4, #4]
 8082248:	48aa      	ldr	r0, [pc, #680]	; (80824f4 <loop+0x43c>)
 808224a:	f002 f9b6 	bl	80845ba <_ZN5Print11printNumberEmh>
        file.print(F(","));
 808224e:	49ab      	ldr	r1, [pc, #684]	; (80824fc <loop+0x444>)
 8082250:	48a8      	ldr	r0, [pc, #672]	; (80824f4 <loop+0x43c>)
 8082252:	f002 f996 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 8082256:	2064      	movs	r0, #100	; 0x64
 8082258:	f002 fac6 	bl	80847e8 <delay>
 808225c:	220a      	movs	r2, #10
 808225e:	88e1      	ldrh	r1, [r4, #6]
 8082260:	48a4      	ldr	r0, [pc, #656]	; (80824f4 <loop+0x43c>)
 8082262:	f002 f9aa 	bl	80845ba <_ZN5Print11printNumberEmh>
        file.print(F(","));
 8082266:	49a5      	ldr	r1, [pc, #660]	; (80824fc <loop+0x444>)
 8082268:	48a2      	ldr	r0, [pc, #648]	; (80824f4 <loop+0x43c>)
 808226a:	f002 f98a 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 808226e:	2064      	movs	r0, #100	; 0x64
 8082270:	f002 faba 	bl	80847e8 <delay>
 8082274:	220a      	movs	r2, #10
 8082276:	8921      	ldrh	r1, [r4, #8]
 8082278:	489e      	ldr	r0, [pc, #632]	; (80824f4 <loop+0x43c>)
 808227a:	f002 f99e 	bl	80845ba <_ZN5Print11printNumberEmh>
        file.print(F(","));
 808227e:	499f      	ldr	r1, [pc, #636]	; (80824fc <loop+0x444>)
 8082280:	489c      	ldr	r0, [pc, #624]	; (80824f4 <loop+0x43c>)
 8082282:	f002 f97e 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 8082286:	2064      	movs	r0, #100	; 0x64
 8082288:	f002 faae 	bl	80847e8 <delay>
        file.print(bme680.readTemperature());
 808228c:	489c      	ldr	r0, [pc, #624]	; (8082500 <loop+0x448>)
 808228e:	f7ff fa48 	bl	8081722 <_ZN15Adafruit_BME68015readTemperatureEv>
 8082292:	2202      	movs	r2, #2
 8082294:	4601      	mov	r1, r0
 8082296:	4897      	ldr	r0, [pc, #604]	; (80824f4 <loop+0x43c>)
 8082298:	f002 fa6e 	bl	8084778 <_ZN5Print5printEfi>
        file.print(F(","));
 808229c:	4997      	ldr	r1, [pc, #604]	; (80824fc <loop+0x444>)
 808229e:	4895      	ldr	r0, [pc, #596]	; (80824f4 <loop+0x43c>)
 80822a0:	f002 f96f 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        file.print(bme680.readPressure());
 80822a4:	4896      	ldr	r0, [pc, #600]	; (8082500 <loop+0x448>)
 80822a6:	f7ff fa42 	bl	808172e <_ZN15Adafruit_BME68012readPressureEv>
 80822aa:	2202      	movs	r2, #2
 80822ac:	4601      	mov	r1, r0
 80822ae:	4891      	ldr	r0, [pc, #580]	; (80824f4 <loop+0x43c>)
 80822b0:	f002 fa62 	bl	8084778 <_ZN5Print5printEfi>
        file.print(F(","));
 80822b4:	4991      	ldr	r1, [pc, #580]	; (80824fc <loop+0x444>)
 80822b6:	488f      	ldr	r0, [pc, #572]	; (80824f4 <loop+0x43c>)
 80822b8:	f002 f963 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        file.print(bme680.readHumidity());
 80822bc:	4890      	ldr	r0, [pc, #576]	; (8082500 <loop+0x448>)
 80822be:	f7ff fa3e 	bl	808173e <_ZN15Adafruit_BME68012readHumidityEv>
 80822c2:	2202      	movs	r2, #2
 80822c4:	4601      	mov	r1, r0
 80822c6:	488b      	ldr	r0, [pc, #556]	; (80824f4 <loop+0x43c>)
 80822c8:	f002 fa56 	bl	8084778 <_ZN5Print5printEfi>
        file.print(F(","));
 80822cc:	498b      	ldr	r1, [pc, #556]	; (80824fc <loop+0x444>)
 80822ce:	4889      	ldr	r0, [pc, #548]	; (80824f4 <loop+0x43c>)
 80822d0:	f002 f957 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        file.print(bme680.readGas());
 80822d4:	488a      	ldr	r0, [pc, #552]	; (8082500 <loop+0x448>)
 80822d6:	f7ff fa38 	bl	808174a <_ZN15Adafruit_BME6807readGasEv>
 80822da:	220a      	movs	r2, #10
 80822dc:	4601      	mov	r1, r0
 80822de:	4885      	ldr	r0, [pc, #532]	; (80824f4 <loop+0x43c>)
 80822e0:	f002 f96b 	bl	80845ba <_ZN5Print11printNumberEmh>
        file.print(F(","));
 80822e4:	4985      	ldr	r1, [pc, #532]	; (80824fc <loop+0x444>)
 80822e6:	4883      	ldr	r0, [pc, #524]	; (80824f4 <loop+0x43c>)
 80822e8:	f002 f94b 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 80822ec:	2064      	movs	r0, #100	; 0x64
 80822ee:	f002 fa7b 	bl	80847e8 <delay>
      file.sync();
 80822f2:	487f      	ldr	r0, [pc, #508]	; (80824f0 <loop+0x438>)
 80822f4:	f001 fa72 	bl	80837dc <_ZN7FatFile4syncEv>
      delay(100);
 80822f8:	2064      	movs	r0, #100	; 0x64
 80822fa:	f002 fa75 	bl	80847e8 <delay>
      file.close();
 80822fe:	487c      	ldr	r0, [pc, #496]	; (80824f0 <loop+0x438>)
 8082300:	f001 faa2 	bl	8083848 <_ZN7FatFile5closeEv>
      delay(100);
 8082304:	2064      	movs	r0, #100	; 0x64
 8082306:	f002 fa6f 	bl	80847e8 <delay>
      Serial.println();
 808230a:	f002 fea5 	bl	8085058 <_Z16_fetch_usbserialv>
 808230e:	f002 f93c 	bl	808458a <_ZN5Print7printlnEv>
        Serial.print(bufftime);
 8082312:	f002 fea1 	bl	8085058 <_Z16_fetch_usbserialv>
 8082316:	4978      	ldr	r1, [pc, #480]	; (80824f8 <loop+0x440>)
 8082318:	f002 f92c 	bl	8084574 <_ZN5Print5printEPKc>
        Serial.print(F(","));
 808231c:	f002 fe9c 	bl	8085058 <_Z16_fetch_usbserialv>
 8082320:	4976      	ldr	r1, [pc, #472]	; (80824fc <loop+0x444>)
 8082322:	f002 f92e 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(ads.Fig1); 
 8082326:	f002 fe97 	bl	8085058 <_Z16_fetch_usbserialv>
 808232a:	220a      	movs	r2, #10
 808232c:	8821      	ldrh	r1, [r4, #0]
 808232e:	f002 f944 	bl	80845ba <_ZN5Print11printNumberEmh>
        Serial.print(F(","));
 8082332:	f002 fe91 	bl	8085058 <_Z16_fetch_usbserialv>
 8082336:	4971      	ldr	r1, [pc, #452]	; (80824fc <loop+0x444>)
 8082338:	f002 f923 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 808233c:	2064      	movs	r0, #100	; 0x64
 808233e:	f002 fa53 	bl	80847e8 <delay>
        Serial.print(ads.Fig2); 
 8082342:	f002 fe89 	bl	8085058 <_Z16_fetch_usbserialv>
 8082346:	220a      	movs	r2, #10
 8082348:	8861      	ldrh	r1, [r4, #2]
 808234a:	f002 f936 	bl	80845ba <_ZN5Print11printNumberEmh>
        Serial.print(F(","));
 808234e:	f002 fe83 	bl	8085058 <_Z16_fetch_usbserialv>
 8082352:	496a      	ldr	r1, [pc, #424]	; (80824fc <loop+0x444>)
 8082354:	f002 f915 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 8082358:	2064      	movs	r0, #100	; 0x64
 808235a:	f002 fa45 	bl	80847e8 <delay>
        Serial.print(ads.Fig3); 
 808235e:	f002 fe7b 	bl	8085058 <_Z16_fetch_usbserialv>
 8082362:	220a      	movs	r2, #10
 8082364:	88a1      	ldrh	r1, [r4, #4]
 8082366:	f002 f928 	bl	80845ba <_ZN5Print11printNumberEmh>
        Serial.print(F(","));
 808236a:	f002 fe75 	bl	8085058 <_Z16_fetch_usbserialv>
 808236e:	4963      	ldr	r1, [pc, #396]	; (80824fc <loop+0x444>)
 8082370:	f002 f907 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 8082374:	2064      	movs	r0, #100	; 0x64
 8082376:	f002 fa37 	bl	80847e8 <delay>
        Serial.print(ads.Worker); 
 808237a:	f002 fe6d 	bl	8085058 <_Z16_fetch_usbserialv>
 808237e:	220a      	movs	r2, #10
 8082380:	88e1      	ldrh	r1, [r4, #6]
 8082382:	f002 f91a 	bl	80845ba <_ZN5Print11printNumberEmh>
        Serial.print(F(","));
 8082386:	f002 fe67 	bl	8085058 <_Z16_fetch_usbserialv>
 808238a:	495c      	ldr	r1, [pc, #368]	; (80824fc <loop+0x444>)
 808238c:	f002 f8f9 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 8082390:	2064      	movs	r0, #100	; 0x64
 8082392:	f002 fa29 	bl	80847e8 <delay>
        Serial.print(ads.Auxiliary); 
 8082396:	f002 fe5f 	bl	8085058 <_Z16_fetch_usbserialv>
 808239a:	220a      	movs	r2, #10
 808239c:	8921      	ldrh	r1, [r4, #8]
 808239e:	f002 f90c 	bl	80845ba <_ZN5Print11printNumberEmh>
        Serial.print(F(","));
 80823a2:	f002 fe59 	bl	8085058 <_Z16_fetch_usbserialv>
 80823a6:	4955      	ldr	r1, [pc, #340]	; (80824fc <loop+0x444>)
 80823a8:	f002 f8eb 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 80823ac:	2064      	movs	r0, #100	; 0x64
 80823ae:	f002 fa1b 	bl	80847e8 <delay>
        Serial.print(bme680.readTemperature());
 80823b2:	f002 fe51 	bl	8085058 <_Z16_fetch_usbserialv>
 80823b6:	4605      	mov	r5, r0
 80823b8:	4851      	ldr	r0, [pc, #324]	; (8082500 <loop+0x448>)
 80823ba:	f7ff f9b2 	bl	8081722 <_ZN15Adafruit_BME68015readTemperatureEv>
 80823be:	2202      	movs	r2, #2
 80823c0:	4601      	mov	r1, r0
 80823c2:	4628      	mov	r0, r5
 80823c4:	f002 f9d8 	bl	8084778 <_ZN5Print5printEfi>
        Serial.print(F(","));
 80823c8:	f002 fe46 	bl	8085058 <_Z16_fetch_usbserialv>
 80823cc:	494b      	ldr	r1, [pc, #300]	; (80824fc <loop+0x444>)
 80823ce:	f002 f8d8 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(bme680.readPressure());
 80823d2:	f002 fe41 	bl	8085058 <_Z16_fetch_usbserialv>
 80823d6:	4605      	mov	r5, r0
 80823d8:	4849      	ldr	r0, [pc, #292]	; (8082500 <loop+0x448>)
 80823da:	f7ff f9a8 	bl	808172e <_ZN15Adafruit_BME68012readPressureEv>
 80823de:	2202      	movs	r2, #2
 80823e0:	4601      	mov	r1, r0
 80823e2:	4628      	mov	r0, r5
 80823e4:	f002 f9c8 	bl	8084778 <_ZN5Print5printEfi>
        Serial.print(F(","));
 80823e8:	f002 fe36 	bl	8085058 <_Z16_fetch_usbserialv>
 80823ec:	4943      	ldr	r1, [pc, #268]	; (80824fc <loop+0x444>)
 80823ee:	f002 f8c8 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(bme680.readHumidity());
 80823f2:	f002 fe31 	bl	8085058 <_Z16_fetch_usbserialv>
 80823f6:	4605      	mov	r5, r0
 80823f8:	4841      	ldr	r0, [pc, #260]	; (8082500 <loop+0x448>)
 80823fa:	f7ff f9a0 	bl	808173e <_ZN15Adafruit_BME68012readHumidityEv>
 80823fe:	2202      	movs	r2, #2
 8082400:	4601      	mov	r1, r0
 8082402:	4628      	mov	r0, r5
 8082404:	f002 f9b8 	bl	8084778 <_ZN5Print5printEfi>
        Serial.print(F(","));
 8082408:	f002 fe26 	bl	8085058 <_Z16_fetch_usbserialv>
 808240c:	493b      	ldr	r1, [pc, #236]	; (80824fc <loop+0x444>)
 808240e:	f002 f8b8 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        Serial.print(bme680.readGas());
 8082412:	f002 fe21 	bl	8085058 <_Z16_fetch_usbserialv>
 8082416:	4605      	mov	r5, r0
 8082418:	4839      	ldr	r0, [pc, #228]	; (8082500 <loop+0x448>)
 808241a:	f7ff f996 	bl	808174a <_ZN15Adafruit_BME6807readGasEv>
 808241e:	220a      	movs	r2, #10
 8082420:	4601      	mov	r1, r0
 8082422:	4628      	mov	r0, r5
 8082424:	f002 f8c9 	bl	80845ba <_ZN5Print11printNumberEmh>
        Serial.print(F(","));
 8082428:	f002 fe16 	bl	8085058 <_Z16_fetch_usbserialv>
 808242c:	4933      	ldr	r1, [pc, #204]	; (80824fc <loop+0x444>)
 808242e:	f002 f8a8 	bl	8084582 <_ZN5Print5printEPK19__FlashStringHelper>
        delay(100);
 8082432:	2064      	movs	r0, #100	; 0x64
 8082434:	f002 f9d8 	bl	80847e8 <delay>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082438:	f001 fede 	bl	80841f8 <spark_cloud_flag_connected>
      if(Particle.connected()){
 808243c:	2800      	cmp	r0, #0
 808243e:	f43f ae79 	beq.w	8082134 <loop+0x7c>
            bme680.readTemperature(), bme680.readPressure(), 
 8082442:	482f      	ldr	r0, [pc, #188]	; (8082500 <loop+0x448>)
          snprintf(buff, sizeof(buff), "[%u,%u,%u,%u,%u,%0.2f,%0.2f,%f,%u]", 
 8082444:	8825      	ldrh	r5, [r4, #0]
 8082446:	8866      	ldrh	r6, [r4, #2]
 8082448:	88a7      	ldrh	r7, [r4, #4]
 808244a:	f8b4 8006 	ldrh.w	r8, [r4, #6]
 808244e:	f8b4 9008 	ldrh.w	r9, [r4, #8]
            bme680.readTemperature(), bme680.readPressure(), 
 8082452:	f7ff f966 	bl	8081722 <_ZN15Adafruit_BME68015readTemperatureEv>
 8082456:	4604      	mov	r4, r0
 8082458:	4829      	ldr	r0, [pc, #164]	; (8082500 <loop+0x448>)
 808245a:	f7ff f968 	bl	808172e <_ZN15Adafruit_BME68012readPressureEv>
 808245e:	4682      	mov	sl, r0
            bme680.readHumidity(), bme680.readGas());
 8082460:	4827      	ldr	r0, [pc, #156]	; (8082500 <loop+0x448>)
 8082462:	f7ff f96c 	bl	808173e <_ZN15Adafruit_BME68012readHumidityEv>
 8082466:	4683      	mov	fp, r0
          snprintf(buff, sizeof(buff), "[%u,%u,%u,%u,%u,%0.2f,%0.2f,%f,%u]", 
 8082468:	4825      	ldr	r0, [pc, #148]	; (8082500 <loop+0x448>)
 808246a:	f7ff f96e 	bl	808174a <_ZN15Adafruit_BME6807readGasEv>
 808246e:	900a      	str	r0, [sp, #40]	; 0x28
 8082470:	4658      	mov	r0, fp
 8082472:	f003 fa73 	bl	808595c <__aeabi_f2d>
 8082476:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808247a:	4650      	mov	r0, sl
 808247c:	f003 fa6e 	bl	808595c <__aeabi_f2d>
 8082480:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8082484:	4620      	mov	r0, r4
 8082486:	f003 fa69 	bl	808595c <__aeabi_f2d>
 808248a:	462b      	mov	r3, r5
 808248c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8082490:	4a1c      	ldr	r2, [pc, #112]	; (8082504 <loop+0x44c>)
 8082492:	2180      	movs	r1, #128	; 0x80
 8082494:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8082498:	e9cd 6700 	strd	r6, r7, [sp]
 808249c:	a814      	add	r0, sp, #80	; 0x50
 808249e:	f001 fedb 	bl	8084258 <snprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80824a2:	4b19      	ldr	r3, [pc, #100]	; (8082508 <loop+0x450>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80824a4:	4919      	ldr	r1, [pc, #100]	; (808250c <loop+0x454>)
 80824a6:	781b      	ldrb	r3, [r3, #0]
 80824a8:	aa14      	add	r2, sp, #80	; 0x50
 80824aa:	f88d 3000 	strb.w	r3, [sp]
 80824ae:	6809      	ldr	r1, [r1, #0]
 80824b0:	233c      	movs	r3, #60	; 0x3c
 80824b2:	a812      	add	r0, sp, #72	; 0x48
 80824b4:	f002 fba4 	bl	8084c00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80824b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80824ba:	2c00      	cmp	r4, #0
 80824bc:	f43f ae3a 	beq.w	8082134 <loop+0x7c>
      if (--_M_use_count == 0)
 80824c0:	6863      	ldr	r3, [r4, #4]
 80824c2:	3b01      	subs	r3, #1
 80824c4:	6063      	str	r3, [r4, #4]
 80824c6:	2b00      	cmp	r3, #0
 80824c8:	f47f ae34 	bne.w	8082134 <loop+0x7c>
          _M_dispose();
 80824cc:	6823      	ldr	r3, [r4, #0]
 80824ce:	4620      	mov	r0, r4
 80824d0:	689b      	ldr	r3, [r3, #8]
 80824d2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80824d4:	68a3      	ldr	r3, [r4, #8]
 80824d6:	3b01      	subs	r3, #1
 80824d8:	60a3      	str	r3, [r4, #8]
 80824da:	2b00      	cmp	r3, #0
 80824dc:	f47f ae2a 	bne.w	8082134 <loop+0x7c>
 80824e0:	e016      	b.n	8082510 <loop+0x458>
 80824e2:	bf00      	nop
 80824e4:	20000234 	.word	0x20000234
 80824e8:	200006f4 	.word	0x200006f4
 80824ec:	20000018 	.word	0x20000018
 80824f0:	20000200 	.word	0x20000200
 80824f4:	200001f8 	.word	0x200001f8
 80824f8:	20000000 	.word	0x20000000
 80824fc:	08086983 	.word	0x08086983
 8082500:	20000160 	.word	0x20000160
 8082504:	08086985 	.word	0x08086985
 8082508:	200000b4 	.word	0x200000b4
 808250c:	20000014 	.word	0x20000014
            _M_destroy();
 8082510:	6823      	ldr	r3, [r4, #0]
 8082512:	4620      	mov	r0, r4
 8082514:	68db      	ldr	r3, [r3, #12]
 8082516:	4798      	blx	r3
    }
 8082518:	e60c      	b.n	8082134 <loop+0x7c>
 808251a:	bf00      	nop

0808251c <_GLOBAL__sub_I_SystemMode>:
}
 808251c:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
 808251e:	2501      	movs	r5, #1

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8082520:	2400      	movs	r4, #0
 8082522:	4b17      	ldr	r3, [pc, #92]	; (8082580 <_GLOBAL__sub_I_SystemMode+0x64>)
    SleepResult() {}
 8082524:	4a17      	ldr	r2, [pc, #92]	; (8082584 <_GLOBAL__sub_I_SystemMode+0x68>)
 8082526:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
 8082528:	4b17      	ldr	r3, [pc, #92]	; (8082588 <_GLOBAL__sub_I_SystemMode+0x6c>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808252a:	4628      	mov	r0, r5
              error_(SYSTEM_ERROR_NONE) {
 808252c:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 8082530:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 8082532:	f001 fdc5 	bl	80840c0 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 8082536:	4621      	mov	r1, r4
 8082538:	4628      	mov	r0, r5
 808253a:	f001 fdd1 	bl	80840e0 <system_thread_set_state>
  SdFat() {
 808253e:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
 8082542:	4b12      	ldr	r3, [pc, #72]	; (808258c <_GLOBAL__sub_I_SystemMode+0x70>)
  ADS_Module ads_module;
 8082544:	4812      	ldr	r0, [pc, #72]	; (8082590 <_GLOBAL__sub_I_SystemMode+0x74>)
 8082546:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
 808254a:	4a12      	ldr	r2, [pc, #72]	; (8082594 <_GLOBAL__sub_I_SystemMode+0x78>)
 808254c:	605c      	str	r4, [r3, #4]
 808254e:	601a      	str	r2, [r3, #0]
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8082550:	4a11      	ldr	r2, [pc, #68]	; (8082598 <_GLOBAL__sub_I_SystemMode+0x7c>)
 8082552:	f8c3 4440 	str.w	r4, [r3, #1088]	; 0x440
 8082556:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
 808255a:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 808255e:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
  SdFile() {}
 8082562:	4a0e      	ldr	r2, [pc, #56]	; (808259c <_GLOBAL__sub_I_SystemMode+0x80>)
    Print() : write_error(0) {}
 8082564:	4b0e      	ldr	r3, [pc, #56]	; (80825a0 <_GLOBAL__sub_I_SystemMode+0x84>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8082566:	e9c3 4401 	strd	r4, r4, [r3, #4]
 808256a:	601a      	str	r2, [r3, #0]
 808256c:	f7ff fa9c 	bl	8081aa8 <_ZN10ADS_ModuleC1Ev>
  Adafruit_BME680 bme680;
 8082570:	f003 f866 	bl	8085640 <_Z19__fetch_global_Wirev>
}
 8082574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Adafruit_BME680 bme680;
 8082578:	4601      	mov	r1, r0
 808257a:	480a      	ldr	r0, [pc, #40]	; (80825a4 <_GLOBAL__sub_I_SystemMode+0x88>)
 808257c:	f7ff b860 	b.w	8081640 <_ZN15Adafruit_BME680C1EP7TwoWire>
 8082580:	200000b4 	.word	0x200000b4
 8082584:	ffff0000 	.word	0xffff0000
 8082588:	200000a4 	.word	0x200000a4
 808258c:	20000234 	.word	0x20000234
 8082590:	200000c0 	.word	0x200000c0
 8082594:	080869c8 	.word	0x080869c8
 8082598:	080869f0 	.word	0x080869f0
 808259c:	080869b0 	.word	0x080869b0
 80825a0:	200001f8 	.word	0x200001f8
 80825a4:	20000160 	.word	0x20000160

080825a8 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 80825a8:	6042      	str	r2, [r0, #4]
  _begun = false;
 80825aa:	2200      	movs	r2, #0
 80825ac:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
 80825ae:	2220      	movs	r2, #32
  _addr = addr;
 80825b0:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 80825b2:	60c2      	str	r2, [r0, #12]
#endif
}
 80825b4:	4770      	bx	lr

080825b6 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 80825b6:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 80825b8:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 80825ba:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 80825bc:	b153      	cbz	r3, 80825d4 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 80825be:	7821      	ldrb	r1, [r4, #0]
 80825c0:	6860      	ldr	r0, [r4, #4]
 80825c2:	f002 fee2 	bl	808538a <_ZN7TwoWire17beginTransmissionEh>
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.print(F("Address 0x"));
  DEBUG_SERIAL.print(_addr);
#endif
  if (_wire->endTransmission() == 0) {
 80825c6:	6860      	ldr	r0, [r4, #4]
 80825c8:	f002 fee7 	bl	808539a <_ZN7TwoWire15endTransmissionEv>
 80825cc:	fab0 f080 	clz	r0, r0
 80825d0:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
 80825d2:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 80825d4:	2101      	movs	r1, #1
 80825d6:	f000 f803 	bl	80825e0 <_ZN18Adafruit_I2CDevice5beginEb>
 80825da:	2800      	cmp	r0, #0
 80825dc:	d1ef      	bne.n	80825be <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 80825de:	e7f8      	b.n	80825d2 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

080825e0 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80825e0:	b538      	push	{r3, r4, r5, lr}
 80825e2:	4604      	mov	r4, r0
  _wire->begin();
 80825e4:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 80825e6:	460d      	mov	r5, r1
  _wire->begin();
 80825e8:	f002 fea0 	bl	808532c <_ZN7TwoWire5beginEv>
  _begun = true;
 80825ec:	2001      	movs	r0, #1
 80825ee:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 80825f0:	b125      	cbz	r5, 80825fc <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 80825f2:	4620      	mov	r0, r4
}
 80825f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 80825f8:	f7ff bfdd 	b.w	80825b6 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 80825fc:	bd38      	pop	{r3, r4, r5, pc}

080825fe <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 80825fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8082602:	461f      	mov	r7, r3
 8082604:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 8082608:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 808260a:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 808260c:	4432      	add	r2, r6
 808260e:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 8082610:	4604      	mov	r4, r0
 8082612:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 8082614:	d902      	bls.n	808261c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 8082616:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
 8082618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 808261c:	7801      	ldrb	r1, [r0, #0]
 808261e:	6840      	ldr	r0, [r0, #4]
 8082620:	f002 feb3 	bl	808538a <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
 8082624:	b97e      	cbnz	r6, 8082646 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 8082626:	6860      	ldr	r0, [r4, #4]
 8082628:	462a      	mov	r2, r5
 808262a:	6803      	ldr	r3, [r0, #0]
 808262c:	4641      	mov	r1, r8
 808262e:	68db      	ldr	r3, [r3, #12]
 8082630:	4798      	blx	r3
 8082632:	4285      	cmp	r5, r0
 8082634:	d1ef      	bne.n	8082616 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 8082636:	4639      	mov	r1, r7
 8082638:	6860      	ldr	r0, [r4, #4]
 808263a:	f002 feaa 	bl	8085392 <_ZN7TwoWire15endTransmissionEh>
 808263e:	fab0 f080 	clz	r0, r0
 8082642:	0940      	lsrs	r0, r0, #5
 8082644:	e7e8      	b.n	8082618 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
 8082646:	f1b9 0f00 	cmp.w	r9, #0
 808264a:	d0ec      	beq.n	8082626 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 808264c:	6860      	ldr	r0, [r4, #4]
 808264e:	4632      	mov	r2, r6
 8082650:	6803      	ldr	r3, [r0, #0]
 8082652:	4649      	mov	r1, r9
 8082654:	68db      	ldr	r3, [r3, #12]
 8082656:	4798      	blx	r3
 8082658:	4286      	cmp	r6, r0
 808265a:	d1dc      	bne.n	8082616 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 808265c:	e7e3      	b.n	8082626 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

0808265e <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
 808265e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082662:	4615      	mov	r5, r2
 8082664:	4604      	mov	r4, r0
 8082666:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 8082668:	b2d2      	uxtb	r2, r2
 808266a:	7801      	ldrb	r1, [r0, #0]
 808266c:	6840      	ldr	r0, [r0, #4]
 808266e:	f002 fe7a 	bl	8085366 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 8082672:	4285      	cmp	r5, r0
 8082674:	d10d      	bne.n	8082692 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
 8082676:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 8082678:	fa1f f887 	uxth.w	r8, r7
 808267c:	45a8      	cmp	r8, r5
 808267e:	f107 0701 	add.w	r7, r7, #1
 8082682:	d209      	bcs.n	8082698 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
 8082684:	6860      	ldr	r0, [r4, #4]
 8082686:	6803      	ldr	r3, [r0, #0]
 8082688:	695b      	ldr	r3, [r3, #20]
 808268a:	4798      	blx	r3
 808268c:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 8082690:	e7f2      	b.n	8082678 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
 8082692:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 8082694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082698:	2001      	movs	r0, #1
 808269a:	e7fb      	b.n	8082694 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

0808269c <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 808269c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80826a0:	4607      	mov	r7, r0
 80826a2:	4688      	mov	r8, r1
 80826a4:	4616      	mov	r6, r2
 80826a6:	4699      	mov	r9, r3
  size_t pos = 0;
 80826a8:	2500      	movs	r5, #0
  while (pos < len) {
 80826aa:	42b5      	cmp	r5, r6
 80826ac:	d212      	bcs.n	80826d4 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
 80826ae:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
 80826b0:	1b74      	subs	r4, r6, r5
 80826b2:	4294      	cmp	r4, r2
 80826b4:	bf28      	it	cs
 80826b6:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
 80826b8:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
 80826ba:	42ab      	cmp	r3, r5
 80826bc:	bf94      	ite	ls
 80826be:	464b      	movls	r3, r9
 80826c0:	2300      	movhi	r3, #0
 80826c2:	4622      	mov	r2, r4
 80826c4:	4638      	mov	r0, r7
 80826c6:	eb08 0105 	add.w	r1, r8, r5
 80826ca:	f7ff ffc8 	bl	808265e <_ZN18Adafruit_I2CDevice5_readEPhjb>
 80826ce:	b110      	cbz	r0, 80826d6 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
 80826d0:	4425      	add	r5, r4
  while (pos < len) {
 80826d2:	e7ea      	b.n	80826aa <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
 80826d4:	2001      	movs	r0, #1
}
 80826d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080826da <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
 80826da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80826dc:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
 80826de:	2300      	movs	r3, #0
 80826e0:	e9cd 3300 	strd	r3, r3, [sp]
 80826e4:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
 80826e8:	4604      	mov	r4, r0
 80826ea:	9e06      	ldr	r6, [sp, #24]
  if (!write(write_buffer, write_len, stop)) {
 80826ec:	f7ff ff87 	bl	80825fe <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 80826f0:	b140      	cbz	r0, 8082704 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
 80826f2:	2301      	movs	r3, #1
 80826f4:	4632      	mov	r2, r6
 80826f6:	4629      	mov	r1, r5
 80826f8:	4620      	mov	r0, r4
}
 80826fa:	b002      	add	sp, #8
 80826fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
 8082700:	f7ff bfcc 	b.w	808269c <_ZN18Adafruit_I2CDevice4readEPhjb>
}
 8082704:	b002      	add	sp, #8
 8082706:	bd70      	pop	{r4, r5, r6, pc}

08082708 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 8082708:	2904      	cmp	r1, #4
 808270a:	d804      	bhi.n	8082716 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
 808270c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8082710:	f8b0 0001 	ldrh.w	r0, [r0, #1]
 8082714:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8082716:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8082718:	bf9b      	ittet	ls
 808271a:	f101 31ff 	addls.w	r1, r1, #4294967295
 808271e:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8082722:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 8082724:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8082726:	bf84      	itt	hi
 8082728:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 808272c:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
 808272e:	4770      	bx	lr

08082730 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8082730:	b510      	push	{r4, lr}
 8082732:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 8082734:	3028      	adds	r0, #40	; 0x28
 8082736:	f001 f9af 	bl	8083a98 <_ZN8FatCache4syncEv>
 808273a:	b128      	cbz	r0, 8082748 <_ZN9FatVolume9cacheSyncEv+0x18>
 808273c:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 8082740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync();
 8082744:	f001 b9a8 	b.w	8083a98 <_ZN8FatCache4syncEv>
  }
 8082748:	bd10      	pop	{r4, pc}

0808274a <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
 808274a:	1e41      	subs	r1, r0, #1
 808274c:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
 8082750:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8082752:	0842      	lsrs	r2, r0, #1
 8082754:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 8082758:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 808275c:	4410      	add	r0, r2
  for (uint8_t i = 0; i < 11; i++) {
 808275e:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8082760:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  for (uint8_t i = 0; i < 11; i++) {
 8082764:	d1f5      	bne.n	8082752 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
 8082766:	4770      	bx	lr

08082768 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8082768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808276c:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 808276e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8082772:	2b20      	cmp	r3, #32
 8082774:	d0fa      	beq.n	808276c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
 8082776:	2400      	movs	r4, #0
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8082778:	4d69      	ldr	r5, [pc, #420]	; (8082920 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
  fname->lfn = path;
 808277a:	608e      	str	r6, [r1, #8]
    c = path[len];
 808277c:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
 808277e:	b1c3      	cbz	r3, 80827b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
 8082780:	2b2f      	cmp	r3, #47	; 0x2f
 8082782:	d016      	beq.n	80827b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8082784:	2b5c      	cmp	r3, #92	; 0x5c
 8082786:	d102      	bne.n	808278e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8082788:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
 808278a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808278e:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
 8082792:	b2c0      	uxtb	r0, r0
 8082794:	281d      	cmp	r0, #29
 8082796:	d803      	bhi.n	80827a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
 8082798:	fa25 f000 	lsr.w	r0, r5, r0
 808279c:	07c0      	lsls	r0, r0, #31
 808279e:	d4f3      	bmi.n	8082788 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 80827a0:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
 80827a4:	283c      	cmp	r0, #60	; 0x3c
 80827a6:	d0ef      	beq.n	8082788 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
 80827a8:	3b20      	subs	r3, #32
 80827aa:	2b5e      	cmp	r3, #94	; 0x5e
 80827ac:	d8ec      	bhi.n	8082788 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
 80827ae:	3401      	adds	r4, #1
    c = path[len];
 80827b0:	e7e4      	b.n	808277c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
 80827b2:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
 80827b4:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 80827b6:	4607      	mov	r7, r0
 80827b8:	f810 5b01 	ldrb.w	r5, [r0], #1
 80827bc:	2d20      	cmp	r5, #32
 80827be:	d0fa      	beq.n	80827b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
 80827c0:	2d2f      	cmp	r5, #47	; 0x2f
 80827c2:	d0f8      	beq.n	80827b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
 80827c4:	6017      	str	r7, [r2, #0]
  while (len) {
 80827c6:	b14c      	cbz	r4, 80827dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
 80827c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 80827cc:	2a2e      	cmp	r2, #46	; 0x2e
 80827ce:	d001      	beq.n	80827d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
 80827d0:	2a20      	cmp	r2, #32
 80827d2:	d101      	bne.n	80827d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
 80827d4:	3c01      	subs	r4, #1
  while (len) {
 80827d6:	e7f6      	b.n	80827c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
 80827d8:	2cff      	cmp	r4, #255	; 0xff
 80827da:	dcd5      	bgt.n	8082788 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
 80827dc:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80827e0:	f04f 0800 	mov.w	r8, #0
    fname->sfn[k] = ' ';
 80827e4:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
 80827e8:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
 80827ea:	f8c1 300d 	str.w	r3, [r1, #13]
 80827ee:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80827f0:	f816 3008 	ldrb.w	r3, [r6, r8]
 80827f4:	2b2e      	cmp	r3, #46	; 0x2e
 80827f6:	d001      	beq.n	80827fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
 80827f8:	2b20      	cmp	r3, #32
 80827fa:	d102      	bne.n	8082802 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
 80827fc:	f108 0801 	add.w	r8, r8, #1
 8082800:	e7f6      	b.n	80827f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
 8082802:	fab8 f088 	clz	r0, r8
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8082806:	1e65      	subs	r5, r4, #1
  is83 = !si;
 8082808:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808280a:	1c6b      	adds	r3, r5, #1
 808280c:	d002      	beq.n	8082814 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
 808280e:	5d73      	ldrb	r3, [r6, r5]
 8082810:	2b2e      	cmp	r3, #46	; 0x2e
 8082812:	d114      	bne.n	808283e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8082814:	f04f 0900 	mov.w	r9, #0
 8082818:	2707      	movs	r7, #7
 808281a:	464a      	mov	r2, r9
 808281c:	46ca      	mov	sl, r9
 808281e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
 8082822:	45a0      	cmp	r8, r4
 8082824:	da68      	bge.n	80828f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
 8082826:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
 808282a:	2b20      	cmp	r3, #32
 808282c:	d003      	beq.n	8082836 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
 808282e:	2b2e      	cmp	r3, #46	; 0x2e
 8082830:	d107      	bne.n	8082842 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
 8082832:	45a8      	cmp	r8, r5
 8082834:	d012      	beq.n	808285c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
 8082836:	2000      	movs	r0, #0
  for (; si < len; si++) {
 8082838:	f108 0801 	add.w	r8, r8, #1
 808283c:	e7f1      	b.n	8082822 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808283e:	3d01      	subs	r5, #1
 8082840:	e7e3      	b.n	808280a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
 8082842:	2b22      	cmp	r3, #34	; 0x22
 8082844:	d008      	beq.n	8082858 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 8082846:	2b7c      	cmp	r3, #124	; 0x7c
 8082848:	d006      	beq.n	8082858 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 808284a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 808284e:	f1bc 0f05 	cmp.w	ip, #5
 8082852:	d80a      	bhi.n	808286a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
 8082854:	2b2d      	cmp	r3, #45	; 0x2d
 8082856:	d012      	beq.n	808287e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
 8082858:	45a8      	cmp	r8, r5
 808285a:	d15b      	bne.n	8082914 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
 808285c:	2f0a      	cmp	r7, #10
 808285e:	d04a      	beq.n	80828f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
 8082860:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 8082862:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8082864:	f04f 0e10 	mov.w	lr, #16
 8082868:	e7e6      	b.n	8082838 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
 808286a:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 808286e:	f1bc 0f05 	cmp.w	ip, #5
 8082872:	d9f1      	bls.n	8082858 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
 8082874:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 8082878:	f1bc 0f02 	cmp.w	ip, #2
 808287c:	d9ec      	bls.n	8082858 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
 808287e:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8082882:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8082886:	d8e7      	bhi.n	8082858 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
 8082888:	45a8      	cmp	r8, r5
 808288a:	d0e7      	beq.n	808285c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
 808288c:	42ba      	cmp	r2, r7
 808288e:	d830      	bhi.n	80828f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
 8082890:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8082894:	f1bc 0f19 	cmp.w	ip, #25
 8082898:	d81a      	bhi.n	80828d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
 808289a:	3b20      	subs	r3, #32
        lc |= bit;
 808289c:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
 80828a0:	b2db      	uxtb	r3, r3
        lc |= bit;
 80828a2:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
 80828a6:	f102 0c01 	add.w	ip, r2, #1
 80828aa:	fa5f fc8c 	uxtb.w	ip, ip
 80828ae:	440a      	add	r2, r1
      if (i < 7) {
 80828b0:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
 80828b4:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
 80828b6:	d801      	bhi.n	80828bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
 80828b8:	f881 c00c 	strb.w	ip, [r1, #12]
 80828bc:	4662      	mov	r2, ip
 80828be:	e7bb      	b.n	8082838 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
 80828c0:	45a8      	cmp	r8, r5
 80828c2:	dc18      	bgt.n	80828f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
 80828c4:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 80828c6:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 80828c8:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80828ca:	f04f 0e10 	mov.w	lr, #16
 80828ce:	e7b2      	b.n	8082836 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
 80828d0:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80828d4:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 80828d8:	bf98      	it	ls
 80828da:	ea4e 0a0a 	orrls.w	sl, lr, sl
 80828de:	e7e2      	b.n	80828a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80828e0:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
 80828e2:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80828e4:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 80828e6:	4419      	add	r1, r3
 80828e8:	237e      	movs	r3, #126	; 0x7e
 80828ea:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 80828ec:	2331      	movs	r3, #49	; 0x31
 80828ee:	738b      	strb	r3, [r1, #14]
 80828f0:	e74b      	b.n	808278a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
 80828f2:	2f0a      	cmp	r7, #10
 80828f4:	d1e4      	bne.n	80828c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
 80828f6:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
 80828f8:	7b4b      	ldrb	r3, [r1, #13]
 80828fa:	2b20      	cmp	r3, #32
 80828fc:	f43f af44 	beq.w	8082788 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
 8082900:	2800      	cmp	r0, #0
 8082902:	d0ed      	beq.n	80828e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8082904:	ea1a 0f09 	tst.w	sl, r9
 8082908:	bf18      	it	ne
 808290a:	f04f 0902 	movne.w	r9, #2
 808290e:	f881 9000 	strb.w	r9, [r1]
 8082912:	e73a      	b.n	808278a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
 8082914:	42ba      	cmp	r2, r7
 8082916:	d8ec      	bhi.n	80828f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
 8082918:	2000      	movs	r0, #0
      c = '_';
 808291a:	235f      	movs	r3, #95	; 0x5f
 808291c:	e7c3      	b.n	80828a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
 808291e:	bf00      	nop
 8082920:	31000101 	.word	0x31000101

08082924 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8082924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8082928:	4606      	mov	r6, r0
 808292a:	460c      	mov	r4, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 808292c:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 808292e:	277e      	movs	r7, #126	; 0x7e
  uint8_t pos = fname->seqPos;;
 8082930:	f891 900c 	ldrb.w	r9, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8082934:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8082938:	6861      	ldr	r1, [r4, #4]
 808293a:	68a2      	ldr	r2, [r4, #8]
 808293c:	186b      	adds	r3, r5, r1
 808293e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 8082940:	4411      	add	r1, r2
 8082942:	4291      	cmp	r1, r2
 8082944:	d006      	beq.n	8082954 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
 8082946:	f812 0b01 	ldrb.w	r0, [r2], #1
 808294a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 808294e:	4043      	eors	r3, r0
 8082950:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 8082952:	e7f6      	b.n	8082942 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
 8082954:	f1b9 0f03 	cmp.w	r9, #3
 8082958:	bf28      	it	cs
 808295a:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808295e:	f109 0204 	add.w	r2, r9, #4
 8082962:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8082964:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8082968:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808296a:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 808296c:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808296e:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8082970:	bf94      	ite	ls
 8082972:	3130      	addls	r1, #48	; 0x30
 8082974:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8082976:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8082978:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 808297a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808297e:	d1f1      	bne.n	8082964 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
 8082980:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
 8082984:	2100      	movs	r1, #0
 8082986:	4630      	mov	r0, r6
 8082988:	735f      	strb	r7, [r3, #13]
 808298a:	f000 fe8c 	bl	80836a6 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
 808298e:	2101      	movs	r1, #1
 8082990:	4630      	mov	r0, r6
 8082992:	f000 fe69 	bl	8083668 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 8082996:	4601      	mov	r1, r0
 8082998:	b928      	cbnz	r0, 80829a6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 808299a:	7870      	ldrb	r0, [r6, #1]
 808299c:	fab0 f080 	clz	r0, r0
 80829a0:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
 80829a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
 80829a6:	7803      	ldrb	r3, [r0, #0]
 80829a8:	b16b      	cbz	r3, 80829c6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80829aa:	7ac3      	ldrb	r3, [r0, #11]
 80829ac:	071b      	lsls	r3, r3, #28
 80829ae:	d4ee      	bmi.n	808298e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80829b0:	220b      	movs	r2, #11
 80829b2:	4640      	mov	r0, r8
 80829b4:	f003 fe42 	bl	808663c <memcmp>
 80829b8:	2800      	cmp	r0, #0
 80829ba:	d1e8      	bne.n	808298e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
 80829bc:	3501      	adds	r5, #1
 80829be:	b2ad      	uxth	r5, r5
 80829c0:	2d64      	cmp	r5, #100	; 0x64
 80829c2:	d1b9      	bne.n	8082938 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
 80829c4:	e7ed      	b.n	80829a2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
 80829c6:	2001      	movs	r0, #1
 80829c8:	e7eb      	b.n	80829a2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

080829cc <_ZN7FatFile4openEPS_P7fname_th>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80829cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80829d0:	b08b      	sub	sp, #44	; 0x2c
 80829d2:	9305      	str	r3, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
 80829d4:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80829d6:	460d      	mov	r5, r1
  if (!dirFile->isDir() || isOpen()) {
 80829d8:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80829dc:	4617      	mov	r7, r2
 80829de:	9006      	str	r0, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
 80829e0:	d103      	bne.n	80829ea <_ZN7FatFile4openEPS_P7fname_th+0x1e>
  return false;
 80829e2:	2000      	movs	r0, #0
}
 80829e4:	b00b      	add	sp, #44	; 0x2c
 80829e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
 80829ea:	9b06      	ldr	r3, [sp, #24]
 80829ec:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
 80829ee:	2b00      	cmp	r3, #0
 80829f0:	d1f7      	bne.n	80829e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  size_t len = fname->len;
 80829f2:	6853      	ldr	r3, [r2, #4]
  }
 80829f4:	f04f 0b00 	mov.w	fp, #0
 80829f8:	9304      	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 80829fa:	7813      	ldrb	r3, [r2, #0]
 80829fc:	46da      	mov	sl, fp
 80829fe:	0799      	lsls	r1, r3, #30
 8082a00:	bf1b      	ittet	ne
 8082a02:	220d      	movne	r2, #13
 8082a04:	9b04      	ldrne	r3, [sp, #16]
 8082a06:	2301      	moveq	r3, #1
 8082a08:	330c      	addne	r3, #12
 8082a0a:	bf18      	it	ne
 8082a0c:	fbb3 f3f2 	udivne	r3, r3, r2
 8082a10:	465c      	mov	r4, fp
 8082a12:	465e      	mov	r6, fp
 8082a14:	46d9      	mov	r9, fp
 8082a16:	bf1c      	itt	ne
 8082a18:	3301      	addne	r3, #1
 8082a1a:	b2db      	uxtbne	r3, r3
    seekSet(0);
 8082a1c:	2100      	movs	r1, #0
 8082a1e:	4628      	mov	r0, r5
 8082a20:	9302      	str	r3, [sp, #8]
 8082a22:	f000 fe40 	bl	80836a6 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8082a26:	f107 030d 	add.w	r3, r7, #13
  }
 8082a2a:	f8cd b00c 	str.w	fp, [sp, #12]
 8082a2e:	9309      	str	r3, [sp, #36]	; 0x24
    curIndex = dirFile->m_curPosition/32;
 8082a30:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
 8082a32:	2101      	movs	r1, #1
 8082a34:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
 8082a36:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
 8082a3a:	f000 fe15 	bl	8083668 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8082a3e:	4603      	mov	r3, r0
 8082a40:	2800      	cmp	r0, #0
 8082a42:	d16f      	bne.n	8082b24 <_ZN7FatFile4openEPS_P7fname_th+0x158>
      if (dirFile->getError()) {
 8082a44:	786b      	ldrb	r3, [r5, #1]
 8082a46:	2b00      	cmp	r3, #0
 8082a48:	d1cb      	bne.n	80829e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 8082a4a:	9b05      	ldr	r3, [sp, #20]
 8082a4c:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8082a50:	2b42      	cmp	r3, #66	; 0x42
 8082a52:	d1c6      	bne.n	80829e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (freeFound == 0) {
 8082a54:	9b03      	ldr	r3, [sp, #12]
 8082a56:	2c00      	cmp	r4, #0
 8082a58:	bf08      	it	eq
 8082a5a:	4643      	moveq	r3, r8
 8082a5c:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
 8082a5e:	9b02      	ldr	r3, [sp, #8]
 8082a60:	429c      	cmp	r4, r3
 8082a62:	f0c0 80f0 	bcc.w	8082c46 <_ZN7FatFile4openEPS_P7fname_th+0x27a>
  if (fnameFound) {
 8082a66:	f1b9 0f00 	cmp.w	r9, #0
 8082a6a:	f040 8109 	bne.w	8082c80 <_ZN7FatFile4openEPS_P7fname_th+0x2b4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8082a6e:	9b03      	ldr	r3, [sp, #12]
 8082a70:	4628      	mov	r0, r5
 8082a72:	0159      	lsls	r1, r3, #5
 8082a74:	f000 fe17 	bl	80836a6 <_ZN7FatFile7seekSetEm>
 8082a78:	2800      	cmp	r0, #0
 8082a7a:	d0b2      	beq.n	80829e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  lfnOrd = freeNeed - 1;
 8082a7c:	9b02      	ldr	r3, [sp, #8]
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8082a7e:	f04f 0a00 	mov.w	sl, #0
  lfnOrd = freeNeed - 1;
 8082a82:	f103 39ff 	add.w	r9, r3, #4294967295
 8082a86:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8082a8a:	464e      	mov	r6, r9
    ldir->attr = DIR_ATT_LONG_NAME;
 8082a8c:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8082a90:	2e00      	cmp	r6, #0
 8082a92:	f000 810c 	beq.w	8082cae <_ZN7FatFile4openEPS_P7fname_th+0x2e2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8082a96:	2100      	movs	r1, #0
 8082a98:	4628      	mov	r0, r5
 8082a9a:	f000 fde5 	bl	8083668 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8082a9e:	4604      	mov	r4, r0
 8082aa0:	2800      	cmp	r0, #0
 8082aa2:	d09e      	beq.n	80829e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8082aa4:	454e      	cmp	r6, r9
 8082aa6:	bf18      	it	ne
 8082aa8:	46b3      	movne	fp, r6
    dirFile->m_vol->cacheDirty();
 8082aaa:	68aa      	ldr	r2, [r5, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8082aac:	bf08      	it	eq
 8082aae:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
    m_status |= CACHE_STATUS_DIRTY;
 8082ab2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8082ab6:	f043 0301 	orr.w	r3, r3, #1
 8082aba:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8082abe:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8082ac2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8082ac6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 8082aca:	f107 000d 	add.w	r0, r7, #13
 8082ace:	f7ff fe3c 	bl	808274a <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8082ad2:	220d      	movs	r2, #13
 8082ad4:	f00b 031f 	and.w	r3, fp, #31
 8082ad8:	3b01      	subs	r3, #1
 8082ada:	4353      	muls	r3, r2
 8082adc:	2200      	movs	r2, #0
    ldir->chksum = lfnChecksum(fname->sfn);
 8082ade:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
 8082ae0:	f884 a01a 	strb.w	sl, [r4, #26]
 8082ae4:	f884 a01b 	strb.w	sl, [r4, #27]
    lfnPutName(ldir, fname->lfn, len);
 8082ae8:	f8d7 c008 	ldr.w	ip, [r7, #8]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8082aec:	9904      	ldr	r1, [sp, #16]
 8082aee:	4299      	cmp	r1, r3
 8082af0:	f240 80ce 	bls.w	8082c90 <_ZN7FatFile4openEPS_P7fname_th+0x2c4>
 8082af4:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
 8082af8:	2a04      	cmp	r2, #4
 8082afa:	fa5f fe82 	uxtb.w	lr, r2
 8082afe:	f102 0001 	add.w	r0, r2, #1
 8082b02:	f200 80cb 	bhi.w	8082c9c <_ZN7FatFile4openEPS_P7fname_th+0x2d0>
    ldir->name1[i] = c;
 8082b06:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8082b0a:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
 8082b0e:	280d      	cmp	r0, #13
 8082b10:	4602      	mov	r2, r0
 8082b12:	f103 0301 	add.w	r3, r3, #1
 8082b16:	d1e9      	bne.n	8082aec <_ZN7FatFile4openEPS_P7fname_th+0x120>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8082b18:	3e01      	subs	r6, #1
 8082b1a:	b2f6      	uxtb	r6, r6
 8082b1c:	e7b8      	b.n	8082a90 <_ZN7FatFile4openEPS_P7fname_th+0xc4>
        fnameFound = true;
 8082b1e:	f04f 0901 	mov.w	r9, #1
 8082b22:	e785      	b.n	8082a30 <_ZN7FatFile4openEPS_P7fname_th+0x64>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8082b24:	7802      	ldrb	r2, [r0, #0]
 8082b26:	2ae5      	cmp	r2, #229	; 0xe5
 8082b28:	d000      	beq.n	8082b2c <_ZN7FatFile4openEPS_P7fname_th+0x160>
 8082b2a:	b97a      	cbnz	r2, 8082b4c <_ZN7FatFile4openEPS_P7fname_th+0x180>
    curIndex = dirFile->m_curPosition/32;
 8082b2c:	9903      	ldr	r1, [sp, #12]
 8082b2e:	2c00      	cmp	r4, #0
 8082b30:	bf08      	it	eq
 8082b32:	4641      	moveq	r1, r8
 8082b34:	9103      	str	r1, [sp, #12]
      if (freeFound < freeNeed) {
 8082b36:	9902      	ldr	r1, [sp, #8]
 8082b38:	428c      	cmp	r4, r1
        freeFound++;
 8082b3a:	bf3c      	itt	cc
 8082b3c:	3401      	addcc	r4, #1
 8082b3e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
 8082b40:	2a00      	cmp	r2, #0
 8082b42:	d082      	beq.n	8082a4a <_ZN7FatFile4openEPS_P7fname_th+0x7e>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8082b44:	2ae5      	cmp	r2, #229	; 0xe5
 8082b46:	d105      	bne.n	8082b54 <_ZN7FatFile4openEPS_P7fname_th+0x188>
      lfnOrd = 0;
 8082b48:	2600      	movs	r6, #0
 8082b4a:	e771      	b.n	8082a30 <_ZN7FatFile4openEPS_P7fname_th+0x64>
        freeFound = 0;
 8082b4c:	9902      	ldr	r1, [sp, #8]
 8082b4e:	428c      	cmp	r4, r1
 8082b50:	bf38      	it	cc
 8082b52:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8082b54:	2a2e      	cmp	r2, #46	; 0x2e
 8082b56:	d0f7      	beq.n	8082b48 <_ZN7FatFile4openEPS_P7fname_th+0x17c>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
 8082b58:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
 8082b5a:	290f      	cmp	r1, #15
 8082b5c:	d149      	bne.n	8082bf2 <_ZN7FatFile4openEPS_P7fname_th+0x226>
      if (!lfnOrd) {
 8082b5e:	bb16      	cbnz	r6, 8082ba6 <_ZN7FatFile4openEPS_P7fname_th+0x1da>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8082b60:	f012 0640 	ands.w	r6, r2, #64	; 0x40
 8082b64:	f43f af64 	beq.w	8082a30 <_ZN7FatFile4openEPS_P7fname_th+0x64>
        lfnOrd = ord = ldir->ord & 0X1F;
 8082b68:	f002 061f 	and.w	r6, r2, #31
 8082b6c:	46b2      	mov	sl, r6
        chksum = ldir->chksum;
 8082b6e:	f893 b00d 	ldrb.w	fp, [r3, #13]
      size_t k = 13*(ord - 1);
 8082b72:	220d      	movs	r2, #13
 8082b74:	f10a 38ff 	add.w	r8, sl, #4294967295
 8082b78:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
 8082b7c:	9a04      	ldr	r2, [sp, #16]
 8082b7e:	4542      	cmp	r2, r8
 8082b80:	d9e2      	bls.n	8082b48 <_ZN7FatFile4openEPS_P7fname_th+0x17c>
 8082b82:	eba2 0208 	sub.w	r2, r2, r8
 8082b86:	9207      	str	r2, [sp, #28]
 8082b88:	2200      	movs	r2, #0
 8082b8a:	eb02 0108 	add.w	r1, r2, r8
 8082b8e:	9108      	str	r1, [sp, #32]
        uint16_t u = lfnGetChar(ldir, i);
 8082b90:	4618      	mov	r0, r3
 8082b92:	b2d1      	uxtb	r1, r2
 8082b94:	f7ff fdb8 	bl	8082708 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
 8082b98:	9907      	ldr	r1, [sp, #28]
 8082b9a:	428a      	cmp	r2, r1
 8082b9c:	d10d      	bne.n	8082bba <_ZN7FatFile4openEPS_P7fname_th+0x1ee>
            lfnOrd = 0;
 8082b9e:	2800      	cmp	r0, #0
 8082ba0:	bf18      	it	ne
 8082ba2:	2600      	movne	r6, #0
 8082ba4:	e744      	b.n	8082a30 <_ZN7FatFile4openEPS_P7fname_th+0x64>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8082ba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8082baa:	fa5f fa8a 	uxtb.w	sl, sl
 8082bae:	4552      	cmp	r2, sl
 8082bb0:	d1ca      	bne.n	8082b48 <_ZN7FatFile4openEPS_P7fname_th+0x17c>
 8082bb2:	7b5a      	ldrb	r2, [r3, #13]
 8082bb4:	455a      	cmp	r2, fp
 8082bb6:	d0dc      	beq.n	8082b72 <_ZN7FatFile4openEPS_P7fname_th+0x1a6>
 8082bb8:	e7c6      	b.n	8082b48 <_ZN7FatFile4openEPS_P7fname_th+0x17c>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8082bba:	28ff      	cmp	r0, #255	; 0xff
 8082bbc:	d8c4      	bhi.n	8082b48 <_ZN7FatFile4openEPS_P7fname_th+0x17c>
 8082bbe:	b2c0      	uxtb	r0, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8082bc0:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8082bc4:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8082bc6:	f8dd c020 	ldr.w	ip, [sp, #32]
 8082bca:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8082bcc:	bf98      	it	ls
 8082bce:	3020      	addls	r0, #32
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8082bd0:	f811 100c 	ldrb.w	r1, [r1, ip]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8082bd4:	bf98      	it	ls
 8082bd6:	b2c0      	uxtbls	r0, r0
 8082bd8:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8082bdc:	f1bc 0f19 	cmp.w	ip, #25
 8082be0:	bf9c      	itt	ls
 8082be2:	3120      	addls	r1, #32
 8082be4:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8082be6:	4281      	cmp	r1, r0
 8082be8:	d1ae      	bne.n	8082b48 <_ZN7FatFile4openEPS_P7fname_th+0x17c>
      for (uint8_t i = 0; i < 13; i++) {
 8082bea:	3201      	adds	r2, #1
 8082bec:	2a0d      	cmp	r2, #13
 8082bee:	d1cc      	bne.n	8082b8a <_ZN7FatFile4openEPS_P7fname_th+0x1be>
 8082bf0:	e71e      	b.n	8082a30 <_ZN7FatFile4openEPS_P7fname_th+0x64>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8082bf2:	070a      	lsls	r2, r1, #28
 8082bf4:	d4a8      	bmi.n	8082b48 <_ZN7FatFile4openEPS_P7fname_th+0x17c>
      if (lfnOrd) {
 8082bf6:	b15e      	cbz	r6, 8082c10 <_ZN7FatFile4openEPS_P7fname_th+0x244>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8082bf8:	f1ba 0f01 	cmp.w	sl, #1
 8082bfc:	f47f aef1 	bne.w	80829e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8082c00:	4618      	mov	r0, r3
 8082c02:	f7ff fda2 	bl	808274a <_ZN7FatFile11lfnChecksumEPh>
 8082c06:	4558      	cmp	r0, fp
 8082c08:	f47f aeeb 	bne.w	80829e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8082c0c:	46b1      	mov	r9, r6
 8082c0e:	e00d      	b.n	8082c2c <_ZN7FatFile4openEPS_P7fname_th+0x260>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8082c10:	220b      	movs	r2, #11
 8082c12:	4618      	mov	r0, r3
 8082c14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8082c16:	f003 fd11 	bl	808663c <memcmp>
 8082c1a:	2800      	cmp	r0, #0
 8082c1c:	f47f af08 	bne.w	8082a30 <_ZN7FatFile4openEPS_P7fname_th+0x64>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8082c20:	f897 9000 	ldrb.w	r9, [r7]
 8082c24:	f019 0901 	ands.w	r9, r9, #1
 8082c28:	f47f af79 	bne.w	8082b1e <_ZN7FatFile4openEPS_P7fname_th+0x152>
  if (oflag & O_EXCL) {
 8082c2c:	9b05      	ldr	r3, [sp, #20]
 8082c2e:	061b      	lsls	r3, r3, #24
 8082c30:	f53f aed7 	bmi.w	80829e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8082c34:	4642      	mov	r2, r8
 8082c36:	4629      	mov	r1, r5
 8082c38:	9b05      	ldr	r3, [sp, #20]
 8082c3a:	9806      	ldr	r0, [sp, #24]
 8082c3c:	f8cd 9000 	str.w	r9, [sp]
 8082c40:	f000 fd74 	bl	808372c <_ZN7FatFile15openCachedEntryEPS_thh>
 8082c44:	e6ce      	b.n	80829e4 <_ZN7FatFile4openEPS_P7fname_th+0x18>
    dir = dirFile->readDirCache();
 8082c46:	2100      	movs	r1, #0
 8082c48:	4628      	mov	r0, r5
 8082c4a:	f000 fd0d 	bl	8083668 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8082c4e:	b9a0      	cbnz	r0, 8082c7a <_ZN7FatFile4openEPS_P7fname_th+0x2ae>
      if (dirFile->getError()) {
 8082c50:	786b      	ldrb	r3, [r5, #1]
 8082c52:	2b00      	cmp	r3, #0
 8082c54:	f47f aec5 	bne.w	80829e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    if (!dirFile->addDirCluster()) {
 8082c58:	4628      	mov	r0, r5
 8082c5a:	f000 fc03 	bl	8083464 <_ZN7FatFile13addDirClusterEv>
 8082c5e:	2800      	cmp	r0, #0
 8082c60:	f43f aebf 	beq.w	80829e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    return m_blocksPerCluster;
 8082c64:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8082c66:	791b      	ldrb	r3, [r3, #4]
 8082c68:	2b01      	cmp	r3, #1
 8082c6a:	f63f aefc 	bhi.w	8082a66 <_ZN7FatFile4openEPS_P7fname_th+0x9a>
  while (freeFound < freeNeed) {
 8082c6e:	9b02      	ldr	r3, [sp, #8]
    freeFound += 16;
 8082c70:	3410      	adds	r4, #16
 8082c72:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 8082c74:	42a3      	cmp	r3, r4
 8082c76:	d8ef      	bhi.n	8082c58 <_ZN7FatFile4openEPS_P7fname_th+0x28c>
 8082c78:	e6f5      	b.n	8082a66 <_ZN7FatFile4openEPS_P7fname_th+0x9a>
    freeFound++;
 8082c7a:	3401      	adds	r4, #1
 8082c7c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 8082c7e:	e6ee      	b.n	8082a5e <_ZN7FatFile4openEPS_P7fname_th+0x92>
    if (!dirFile->lfnUniqueSfn(fname)) {
 8082c80:	4639      	mov	r1, r7
 8082c82:	4628      	mov	r0, r5
 8082c84:	f7ff fe4e 	bl	8082924 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8082c88:	2800      	cmp	r0, #0
 8082c8a:	f47f aef0 	bne.w	8082a6e <_ZN7FatFile4openEPS_P7fname_th+0xa2>
 8082c8e:	e6a8      	b.n	80829e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8082c90:	bf14      	ite	ne
 8082c92:	f04f 31ff 	movne.w	r1, #4294967295
 8082c96:	2100      	moveq	r1, #0
 8082c98:	b289      	uxth	r1, r1
 8082c9a:	e72d      	b.n	8082af8 <_ZN7FatFile4openEPS_P7fname_th+0x12c>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8082c9c:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8082ca0:	bf94      	ite	ls
 8082ca2:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8082ca6:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
 8082caa:	8091      	strh	r1, [r2, #4]
 8082cac:	e72f      	b.n	8082b0e <_ZN7FatFile4openEPS_P7fname_th+0x142>
  dir = dirFile->readDirCache();
 8082cae:	4631      	mov	r1, r6
 8082cb0:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
 8082cb2:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
 8082cb6:	f000 fcd7 	bl	8083668 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 8082cba:	4604      	mov	r4, r0
 8082cbc:	2800      	cmp	r0, #0
 8082cbe:	f43f ae90 	beq.w	80829e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  memset(dir, 0, sizeof(dir_t));
 8082cc2:	2220      	movs	r2, #32
 8082cc4:	4631      	mov	r1, r6
 8082cc6:	f003 fcd7 	bl	8086678 <memset>
  memcpy(dir->name, fname->sfn, 11);
 8082cca:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8082cce:	6023      	str	r3, [r4, #0]
 8082cd0:	f8d7 3011 	ldr.w	r3, [r7, #17]
 8082cd4:	6063      	str	r3, [r4, #4]
 8082cd6:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8082cda:	8123      	strh	r3, [r4, #8]
 8082cdc:	7dfb      	ldrb	r3, [r7, #23]
 8082cde:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8082ce0:	783b      	ldrb	r3, [r7, #0]
 8082ce2:	f003 0318 	and.w	r3, r3, #24
 8082ce6:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
 8082ce8:	4b0f      	ldr	r3, [pc, #60]	; (8082d28 <_ZN7FatFile4openEPS_P7fname_th+0x35c>)
 8082cea:	681b      	ldr	r3, [r3, #0]
 8082cec:	b19b      	cbz	r3, 8082d16 <_ZN7FatFile4openEPS_P7fname_th+0x34a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8082cee:	f104 010e 	add.w	r1, r4, #14
 8082cf2:	f104 0010 	add.w	r0, r4, #16
 8082cf6:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
 8082cf8:	8a23      	ldrh	r3, [r4, #16]
  curIndex = dirFile->m_curPosition/32;
 8082cfa:	f3c8 184f 	ubfx	r8, r8, #5, #16
  dir->lastAccessDate = dir->creationDate;
 8082cfe:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
 8082d00:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
 8082d02:	89e3      	ldrh	r3, [r4, #14]
 8082d04:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
 8082d06:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
 8082d08:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8082d0c:	f043 0301 	orr.w	r3, r3, #1
 8082d10:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
 8082d14:	e78e      	b.n	8082c34 <_ZN7FatFile4openEPS_P7fname_th+0x268>
    dir->creationDate = FAT_DEFAULT_DATE;
 8082d16:	2321      	movs	r3, #33	; 0x21
 8082d18:	7423      	strb	r3, [r4, #16]
 8082d1a:	2328      	movs	r3, #40	; 0x28
 8082d1c:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8082d1e:	2308      	movs	r3, #8
 8082d20:	73a6      	strb	r6, [r4, #14]
 8082d22:	73e3      	strb	r3, [r4, #15]
 8082d24:	e7e8      	b.n	8082cf8 <_ZN7FatFile4openEPS_P7fname_th+0x32c>
 8082d26:	bf00      	nop
 8082d28:	200006f0 	.word	0x200006f0

08082d2c <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8082d2c:	6803      	ldr	r3, [r0, #0]
 8082d2e:	695b      	ldr	r3, [r3, #20]
 8082d30:	4718      	bx	r3

08082d32 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spi->receive();
 8082d32:	6803      	ldr	r3, [r0, #0]
 8082d34:	68db      	ldr	r3, [r3, #12]
 8082d36:	4718      	bx	r3

08082d38 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8082d38:	b510      	push	{r4, lr}
  if (!m_selected) {
 8082d3a:	7903      	ldrb	r3, [r0, #4]
void SdSpiCard::chipSelectHigh() {
 8082d3c:	4604      	mov	r4, r0
  if (!m_selected) {
 8082d3e:	b16b      	cbz	r3, 8082d5c <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8082d40:	2101      	movs	r1, #1
 8082d42:	7940      	ldrb	r0, [r0, #5]
 8082d44:	f002 fbf1 	bl	808552a <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 8082d48:	21ff      	movs	r1, #255	; 0xff
 8082d4a:	6820      	ldr	r0, [r4, #0]
 8082d4c:	f7ff ffee 	bl	8082d2c <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiEndTransaction();
 8082d50:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 8082d52:	6803      	ldr	r3, [r0, #0]
 8082d54:	689b      	ldr	r3, [r3, #8]
 8082d56:	4798      	blx	r3
  m_selected = false;
 8082d58:	2300      	movs	r3, #0
 8082d5a:	7123      	strb	r3, [r4, #4]
}
 8082d5c:	bd10      	pop	{r4, pc}

08082d5e <_ZN9SdSpiCard13chipSelectLowEv>:
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8082d5e:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8082d60:	7905      	ldrb	r5, [r0, #4]
void SdSpiCard::chipSelectLow() {
 8082d62:	4604      	mov	r4, r0
  if (m_selected) {
 8082d64:	b955      	cbnz	r5, 8082d7c <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
 8082d66:	6800      	ldr	r0, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 8082d68:	79e1      	ldrb	r1, [r4, #7]
 8082d6a:	6803      	ldr	r3, [r0, #0]
 8082d6c:	685b      	ldr	r3, [r3, #4]
 8082d6e:	4798      	blx	r3
  digitalWrite(m_chipSelectPin, LOW);
 8082d70:	4629      	mov	r1, r5
 8082d72:	7960      	ldrb	r0, [r4, #5]
 8082d74:	f002 fbd9 	bl	808552a <digitalWrite>
  m_selected = true;
 8082d78:	2301      	movs	r3, #1
 8082d7a:	7123      	strb	r3, [r4, #4]
}
 8082d7c:	bd38      	pop	{r3, r4, r5, pc}

08082d7e <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8082d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082d80:	4604      	mov	r4, r0
 8082d82:	460d      	mov	r5, r1
 8082d84:	4616      	mov	r6, r2
 8082d86:	f001 f83b 	bl	8083e00 <HAL_Timer_Get_Milli_Seconds>
 8082d8a:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 8082d8c:	6820      	ldr	r0, [r4, #0]
 8082d8e:	f7ff ffd0 	bl	8082d32 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8082d92:	28ff      	cmp	r0, #255	; 0xff
 8082d94:	7220      	strb	r0, [r4, #8]
 8082d96:	d10c      	bne.n	8082db2 <_ZN9SdSpiCard8readDataEPhj+0x34>
 8082d98:	f001 f832 	bl	8083e00 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 8082d9c:	1bc3      	subs	r3, r0, r7
 8082d9e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8082da2:	d9f3      	bls.n	8082d8c <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
 8082da4:	2311      	movs	r3, #17
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 8082da6:	4620      	mov	r0, r4
 8082da8:	71a3      	strb	r3, [r4, #6]
 8082daa:	f7ff ffc5 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8082dae:	2000      	movs	r0, #0
}
 8082db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
 8082db2:	28fe      	cmp	r0, #254	; 0xfe
 8082db4:	d001      	beq.n	8082dba <_ZN9SdSpiCard8readDataEPhj+0x3c>
 8082db6:	230f      	movs	r3, #15
 8082db8:	e7f5      	b.n	8082da6 <_ZN9SdSpiCard8readDataEPhj+0x28>
  if ((m_status = spiReceive(dst, count))) {
 8082dba:	6820      	ldr	r0, [r4, #0]
    return m_spi->receive(buf, n);
 8082dbc:	4632      	mov	r2, r6
 8082dbe:	6803      	ldr	r3, [r0, #0]
 8082dc0:	4629      	mov	r1, r5
 8082dc2:	691b      	ldr	r3, [r3, #16]
 8082dc4:	4798      	blx	r3
 8082dc6:	7220      	strb	r0, [r4, #8]
 8082dc8:	b108      	cbz	r0, 8082dce <_ZN9SdSpiCard8readDataEPhj+0x50>
    m_errorCode = code;
 8082dca:	231c      	movs	r3, #28
 8082dcc:	e7eb      	b.n	8082da6 <_ZN9SdSpiCard8readDataEPhj+0x28>
  spiReceive();
 8082dce:	6820      	ldr	r0, [r4, #0]
 8082dd0:	f7ff ffaf 	bl	8082d32 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
 8082dd4:	6820      	ldr	r0, [r4, #0]
 8082dd6:	f7ff ffac 	bl	8082d32 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
 8082dda:	2001      	movs	r0, #1
 8082ddc:	e7e8      	b.n	8082db0 <_ZN9SdSpiCard8readDataEPhj+0x32>

08082dde <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8082dde:	b570      	push	{r4, r5, r6, lr}
 8082de0:	4606      	mov	r6, r0
 8082de2:	460c      	mov	r4, r1
 8082de4:	f001 f80c 	bl	8083e00 <HAL_Timer_Get_Milli_Seconds>
 8082de8:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 8082dea:	6830      	ldr	r0, [r6, #0]
 8082dec:	f7ff ffa1 	bl	8082d32 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8082df0:	28ff      	cmp	r0, #255	; 0xff
 8082df2:	d006      	beq.n	8082e02 <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8082df4:	f001 f804 	bl	8083e00 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8082df8:	1b43      	subs	r3, r0, r5
 8082dfa:	42a3      	cmp	r3, r4
 8082dfc:	d3f5      	bcc.n	8082dea <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8082dfe:	2000      	movs	r0, #0
}
 8082e00:	bd70      	pop	{r4, r5, r6, pc}
  return true;
 8082e02:	2001      	movs	r0, #1
 8082e04:	e7fc      	b.n	8082e00 <_ZN9SdSpiCard11waitNotBusyEt+0x22>

08082e06 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8082e06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_selected) {
 8082e08:	7903      	ldrb	r3, [r0, #4]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8082e0a:	4604      	mov	r4, r0
 8082e0c:	460d      	mov	r5, r1
 8082e0e:	9201      	str	r2, [sp, #4]
  if (!m_selected) {
 8082e10:	b90b      	cbnz	r3, 8082e16 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 8082e12:	f7ff ffa4 	bl	8082d5e <_ZN9SdSpiCard13chipSelectLowEv>
  waitNotBusy(SD_WRITE_TIMEOUT);
 8082e16:	f44f 7116 	mov.w	r1, #600	; 0x258
 8082e1a:	4620      	mov	r0, r4
 8082e1c:	f7ff ffdf 	bl	8082dde <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
 8082e20:	6820      	ldr	r0, [r4, #0]
 8082e22:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8082e26:	f7ff ff81 	bl	8082d2c <_ZN9SdSpiCard7spiSendEh.isra.0>
 8082e2a:	2603      	movs	r6, #3
    spiSend(pa[i]);
 8082e2c:	af01      	add	r7, sp, #4
 8082e2e:	5db9      	ldrb	r1, [r7, r6]
 8082e30:	6820      	ldr	r0, [r4, #0]
 8082e32:	f7ff ff7b 	bl	8082d2c <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
 8082e36:	3e01      	subs	r6, #1
 8082e38:	d2f9      	bcs.n	8082e2e <_ZN9SdSpiCard11cardCommandEhm+0x28>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8082e3a:	2d00      	cmp	r5, #0
 8082e3c:	bf0c      	ite	eq
 8082e3e:	2195      	moveq	r1, #149	; 0x95
 8082e40:	2187      	movne	r1, #135	; 0x87
 8082e42:	6820      	ldr	r0, [r4, #0]
 8082e44:	f7ff ff72 	bl	8082d2c <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (cmd == CMD12) {
 8082e48:	2d0c      	cmp	r5, #12
 8082e4a:	d102      	bne.n	8082e52 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
    spiReceive();
 8082e4c:	6820      	ldr	r0, [r4, #0]
 8082e4e:	f7ff ff70 	bl	8082d32 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8082e52:	2500      	movs	r5, #0
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8082e54:	6820      	ldr	r0, [r4, #0]
 8082e56:	f7ff ff6c 	bl	8082d32 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8082e5a:	0603      	lsls	r3, r0, #24
 8082e5c:	7220      	strb	r0, [r4, #8]
 8082e5e:	d503      	bpl.n	8082e68 <_ZN9SdSpiCard11cardCommandEhm+0x62>
 8082e60:	3501      	adds	r5, #1
 8082e62:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8082e66:	d1f5      	bne.n	8082e54 <_ZN9SdSpiCard11cardCommandEhm+0x4e>
}
 8082e68:	b003      	add	sp, #12
 8082e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082e6c <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8082e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082e6e:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 8082e70:	2300      	movs	r3, #0
  m_chipSelectPin = chipSelectPin;
 8082e72:	7142      	strb	r2, [r0, #5]
  m_errorCode = m_type = 0;
 8082e74:	7243      	strb	r3, [r0, #9]
 8082e76:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 8082e78:	6001      	str	r1, [r0, #0]
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8082e7a:	4604      	mov	r4, r0
 8082e7c:	f000 ffc0 	bl	8083e00 <HAL_Timer_Get_Milli_Seconds>
 8082e80:	4605      	mov	r5, r0
  spiBegin(m_chipSelectPin);
 8082e82:	6820      	ldr	r0, [r4, #0]
    m_spi->begin(chipSelectPin);
 8082e84:	7961      	ldrb	r1, [r4, #5]
 8082e86:	6803      	ldr	r3, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 8082e88:	260a      	movs	r6, #10
    m_spi->begin(chipSelectPin);
 8082e8a:	681b      	ldr	r3, [r3, #0]
 8082e8c:	4798      	blx	r3
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8082e8e:	2180      	movs	r1, #128	; 0x80
 8082e90:	6820      	ldr	r0, [r4, #0]
 8082e92:	71e1      	strb	r1, [r4, #7]
    m_spi->beginTransaction(spiDivisor);
 8082e94:	6803      	ldr	r3, [r0, #0]
 8082e96:	685b      	ldr	r3, [r3, #4]
 8082e98:	4798      	blx	r3
    spiSend(0XFF);
 8082e9a:	21ff      	movs	r1, #255	; 0xff
 8082e9c:	6820      	ldr	r0, [r4, #0]
  for (uint8_t i = 0; i < 10; i++) {
 8082e9e:	3e01      	subs	r6, #1
    spiSend(0XFF);
 8082ea0:	f7ff ff44 	bl	8082d2c <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
 8082ea4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8082ea8:	d1f7      	bne.n	8082e9a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
  spiEndTransaction();
 8082eaa:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 8082eac:	6803      	ldr	r3, [r0, #0]
 8082eae:	689b      	ldr	r3, [r3, #8]
 8082eb0:	4798      	blx	r3
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 8082eb2:	2200      	movs	r2, #0
 8082eb4:	4620      	mov	r0, r4
 8082eb6:	4611      	mov	r1, r2
 8082eb8:	f7ff ffa5 	bl	8082e06 <_ZN9SdSpiCard11cardCommandEhm>
 8082ebc:	2801      	cmp	r0, #1
 8082ebe:	d00c      	beq.n	8082eda <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
 8082ec0:	f000 ff9e 	bl	8083e00 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8082ec4:	1b40      	subs	r0, r0, r5
 8082ec6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8082eca:	d9f2      	bls.n	8082eb2 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
    m_errorCode = code;
 8082ecc:	2301      	movs	r3, #1
  chipSelectHigh();
 8082ece:	4620      	mov	r0, r4
 8082ed0:	71a3      	strb	r3, [r4, #6]
 8082ed2:	f7ff ff31 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8082ed6:	2000      	movs	r0, #0
}
 8082ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8082eda:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8082ede:	2108      	movs	r1, #8
 8082ee0:	4620      	mov	r0, r4
 8082ee2:	f7ff ff90 	bl	8082e06 <_ZN9SdSpiCard11cardCommandEhm>
 8082ee6:	2805      	cmp	r0, #5
 8082ee8:	d116      	bne.n	8082f18 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xac>
    m_type = value;
 8082eea:	2301      	movs	r3, #1
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8082eec:	2600      	movs	r6, #0
 8082eee:	7263      	strb	r3, [r4, #9]
    cardCommand(CMD55, 0);
 8082ef0:	2200      	movs	r2, #0
 8082ef2:	2137      	movs	r1, #55	; 0x37
 8082ef4:	4620      	mov	r0, r4
 8082ef6:	f7ff ff86 	bl	8082e06 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8082efa:	4632      	mov	r2, r6
 8082efc:	2129      	movs	r1, #41	; 0x29
 8082efe:	4620      	mov	r0, r4
 8082f00:	f7ff ff81 	bl	8082e06 <_ZN9SdSpiCard11cardCommandEhm>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8082f04:	4602      	mov	r2, r0
 8082f06:	b1f8      	cbz	r0, 8082f48 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xdc>
 8082f08:	f000 ff7a 	bl	8083e00 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8082f0c:	1b40      	subs	r0, r0, r5
 8082f0e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8082f12:	d9ed      	bls.n	8082ef0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
    m_errorCode = code;
 8082f14:	230a      	movs	r3, #10
 8082f16:	e7da      	b.n	8082ece <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
 8082f18:	2604      	movs	r6, #4
      m_status = spiReceive();
 8082f1a:	6820      	ldr	r0, [r4, #0]
 8082f1c:	f7ff ff09 	bl	8082d32 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
 8082f20:	3e01      	subs	r6, #1
 8082f22:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
      m_status = spiReceive();
 8082f26:	7220      	strb	r0, [r4, #8]
    for (uint8_t i = 0; i < 4; i++) {
 8082f28:	d1f7      	bne.n	8082f1a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xae>
    if (m_status == 0XAA) {
 8082f2a:	28aa      	cmp	r0, #170	; 0xaa
 8082f2c:	d104      	bne.n	8082f38 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xcc>
    m_type = value;
 8082f2e:	2302      	movs	r3, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8082f30:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8082f34:	7263      	strb	r3, [r4, #9]
    return m_type;
 8082f36:	e7db      	b.n	8082ef0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
 8082f38:	f000 ff62 	bl	8083e00 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8082f3c:	1b40      	subs	r0, r0, r5
 8082f3e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8082f42:	d9ca      	bls.n	8082eda <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
    m_errorCode = code;
 8082f44:	2302      	movs	r3, #2
 8082f46:	e7c2      	b.n	8082ece <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
  if (type() == SD_CARD_TYPE_SD2) {
 8082f48:	7a63      	ldrb	r3, [r4, #9]
 8082f4a:	2b02      	cmp	r3, #2
 8082f4c:	d119      	bne.n	8082f82 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x116>
    if (cardCommand(CMD58, 0)) {
 8082f4e:	213a      	movs	r1, #58	; 0x3a
 8082f50:	4620      	mov	r0, r4
 8082f52:	f7ff ff58 	bl	8082e06 <_ZN9SdSpiCard11cardCommandEhm>
 8082f56:	b108      	cbz	r0, 8082f5c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf0>
 8082f58:	2308      	movs	r3, #8
 8082f5a:	e7b8      	b.n	8082ece <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
    if ((spiReceive() & 0XC0) == 0XC0) {
 8082f5c:	6820      	ldr	r0, [r4, #0]
 8082f5e:	f7ff fee8 	bl	8082d32 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8082f62:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8082f66:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
 8082f68:	bf08      	it	eq
 8082f6a:	2303      	moveq	r3, #3
      spiReceive();
 8082f6c:	6820      	ldr	r0, [r4, #0]
 8082f6e:	bf08      	it	eq
 8082f70:	7263      	strbeq	r3, [r4, #9]
 8082f72:	f7ff fede 	bl	8082d32 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8082f76:	6820      	ldr	r0, [r4, #0]
 8082f78:	f7ff fedb 	bl	8082d32 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8082f7c:	6820      	ldr	r0, [r4, #0]
 8082f7e:	f7ff fed8 	bl	8082d32 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  chipSelectHigh();
 8082f82:	4620      	mov	r0, r4
 8082f84:	f7ff fed8 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8082f88:	2001      	movs	r0, #1
  m_sckDivisor = sckDivisor;
 8082f8a:	71e7      	strb	r7, [r4, #7]
  return true;
 8082f8c:	e7a4      	b.n	8082ed8 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6c>

08082f8e <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8082f8e:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8082f90:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8082f92:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 8082f94:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8082f96:	bf18      	it	ne
 8082f98:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD17, blockNumber)) {
 8082f9a:	460a      	mov	r2, r1
 8082f9c:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8082f9e:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
 8082fa0:	f7ff ff31 	bl	8082e06 <_ZN9SdSpiCard11cardCommandEhm>
 8082fa4:	b130      	cbz	r0, 8082fb4 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
 8082fa6:	2304      	movs	r3, #4
 8082fa8:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8082faa:	4620      	mov	r0, r4
 8082fac:	f7ff fec4 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8082fb0:	2500      	movs	r5, #0
 8082fb2:	e00b      	b.n	8082fcc <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
 8082fb4:	4629      	mov	r1, r5
 8082fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8082fba:	4620      	mov	r0, r4
 8082fbc:	f7ff fedf 	bl	8082d7e <_ZN9SdSpiCard8readDataEPhj>
 8082fc0:	4605      	mov	r5, r0
 8082fc2:	2800      	cmp	r0, #0
 8082fc4:	d0f1      	beq.n	8082faa <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  chipSelectHigh();
 8082fc6:	4620      	mov	r0, r4
 8082fc8:	f7ff feb6 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
}
 8082fcc:	4628      	mov	r0, r5
 8082fce:	bd38      	pop	{r3, r4, r5, pc}

08082fd0 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8082fd0:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8082fd2:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8082fd4:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 8082fd6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8082fd8:	bf18      	it	ne
 8082fda:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
 8082fdc:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8082fde:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
 8082fe0:	f7ff ff11 	bl	8082e06 <_ZN9SdSpiCard11cardCommandEhm>
 8082fe4:	b130      	cbz	r0, 8082ff4 <_ZN9SdSpiCard9readStartEm+0x24>
 8082fe6:	2305      	movs	r3, #5
  chipSelectHigh();
 8082fe8:	4620      	mov	r0, r4
 8082fea:	71a3      	strb	r3, [r4, #6]
 8082fec:	f7ff fea4 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8082ff0:	2000      	movs	r0, #0
}
 8082ff2:	bd10      	pop	{r4, pc}
  return true;
 8082ff4:	2001      	movs	r0, #1
 8082ff6:	e7fc      	b.n	8082ff2 <_ZN9SdSpiCard9readStartEm+0x22>

08082ff8 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
 8082ff8:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8082ffa:	2200      	movs	r2, #0
 8082ffc:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
 8082ffe:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8083000:	f7ff ff01 	bl	8082e06 <_ZN9SdSpiCard11cardCommandEhm>
 8083004:	b130      	cbz	r0, 8083014 <_ZN9SdSpiCard8readStopEv+0x1c>
 8083006:	2303      	movs	r3, #3
  chipSelectHigh();
 8083008:	4620      	mov	r0, r4
 808300a:	71a3      	strb	r3, [r4, #6]
 808300c:	f7ff fe94 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8083010:	2000      	movs	r0, #0
}
 8083012:	bd10      	pop	{r4, pc}
  chipSelectHigh();
 8083014:	4620      	mov	r0, r4
 8083016:	f7ff fe8f 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 808301a:	2001      	movs	r0, #1
 808301c:	e7f9      	b.n	8083012 <_ZN9SdSpiCard8readStopEv+0x1a>

0808301e <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 808301e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083020:	4604      	mov	r4, r0
 8083022:	4616      	mov	r6, r2
 8083024:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8083026:	f7ff ffd3 	bl	8082fd0 <_ZN9SdSpiCard9readStartEm>
 808302a:	b168      	cbz	r0, 8083048 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
 808302c:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 808302e:	b2ab      	uxth	r3, r5
 8083030:	429f      	cmp	r7, r3
 8083032:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 8083036:	d909      	bls.n	808304c <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
 8083038:	f44f 7200 	mov.w	r2, #512	; 0x200
 808303c:	4620      	mov	r0, r4
 808303e:	f7ff fe9e 	bl	8082d7e <_ZN9SdSpiCard8readDataEPhj>
 8083042:	3501      	adds	r5, #1
 8083044:	2800      	cmp	r0, #0
 8083046:	d1f2      	bne.n	808302e <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
 8083048:	2000      	movs	r0, #0
 808304a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
 808304c:	4620      	mov	r0, r4
}
 808304e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
 8083052:	f7ff bfd1 	b.w	8082ff8 <_ZN9SdSpiCard8readStopEv>

08083056 <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8083056:	b538      	push	{r3, r4, r5, lr}
 8083058:	4604      	mov	r4, r0
 808305a:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 808305c:	6800      	ldr	r0, [r0, #0]
 808305e:	f7ff fe65 	bl	8082d2c <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(src, 512);
 8083062:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 8083064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8083068:	6803      	ldr	r3, [r0, #0]
 808306a:	4629      	mov	r1, r5
 808306c:	699b      	ldr	r3, [r3, #24]
 808306e:	4798      	blx	r3
  spiSend(crc >> 8);
 8083070:	21ff      	movs	r1, #255	; 0xff
 8083072:	6820      	ldr	r0, [r4, #0]
 8083074:	f7ff fe5a 	bl	8082d2c <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
 8083078:	21ff      	movs	r1, #255	; 0xff
 808307a:	6820      	ldr	r0, [r4, #0]
 808307c:	f7ff fe56 	bl	8082d2c <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
 8083080:	6820      	ldr	r0, [r4, #0]
 8083082:	f7ff fe56 	bl	8082d32 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8083086:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8083088:	f000 001f 	and.w	r0, r0, #31
 808308c:	2805      	cmp	r0, #5
 808308e:	d006      	beq.n	808309e <_ZN9SdSpiCard9writeDataEhPKh+0x48>
    m_errorCode = code;
 8083090:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8083092:	4620      	mov	r0, r4
 8083094:	71a3      	strb	r3, [r4, #6]
 8083096:	f7ff fe4f 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808309a:	2000      	movs	r0, #0
}
 808309c:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 808309e:	2001      	movs	r0, #1
 80830a0:	e7fc      	b.n	808309c <_ZN9SdSpiCard9writeDataEhPKh+0x46>

080830a2 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80830a2:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 80830a4:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80830a6:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 80830a8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80830aa:	bf18      	it	ne
 80830ac:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD24, blockNumber)) {
 80830ae:	460a      	mov	r2, r1
 80830b0:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80830b2:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
 80830b4:	f7ff fea7 	bl	8082e06 <_ZN9SdSpiCard11cardCommandEhm>
 80830b8:	b130      	cbz	r0, 80830c8 <_ZN9SdSpiCard10writeBlockEmPKh+0x26>
 80830ba:	2306      	movs	r3, #6
 80830bc:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 80830be:	4620      	mov	r0, r4
 80830c0:	f7ff fe3a 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80830c4:	2500      	movs	r5, #0
 80830c6:	e00a      	b.n	80830de <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
  if (!writeData(DATA_START_BLOCK, src)) {
 80830c8:	462a      	mov	r2, r5
 80830ca:	21fe      	movs	r1, #254	; 0xfe
 80830cc:	4620      	mov	r0, r4
 80830ce:	f7ff ffc2 	bl	8083056 <_ZN9SdSpiCard9writeDataEhPKh>
 80830d2:	4605      	mov	r5, r0
 80830d4:	2800      	cmp	r0, #0
 80830d6:	d0f2      	beq.n	80830be <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  chipSelectHigh();
 80830d8:	4620      	mov	r0, r4
 80830da:	f7ff fe2d 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
}
 80830de:	4628      	mov	r0, r5
 80830e0:	bd38      	pop	{r3, r4, r5, pc}

080830e2 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
 80830e2:	b570      	push	{r4, r5, r6, lr}
 80830e4:	4604      	mov	r4, r0
 80830e6:	460e      	mov	r6, r1
  bool selected = m_selected;
 80830e8:	7905      	ldrb	r5, [r0, #4]
  chipSelectLow();
 80830ea:	f7ff fe38 	bl	8082d5e <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80830ee:	f44f 7116 	mov.w	r1, #600	; 0x258
 80830f2:	4620      	mov	r0, r4
 80830f4:	f7ff fe73 	bl	8082dde <_ZN9SdSpiCard11waitNotBusyEt>
 80830f8:	b930      	cbnz	r0, 8083108 <_ZN9SdSpiCard9writeDataEPKh+0x26>
 80830fa:	2317      	movs	r3, #23
 80830fc:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 80830fe:	4620      	mov	r0, r4
 8083100:	f7ff fe1a 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8083104:	2500      	movs	r5, #0
 8083106:	e00c      	b.n	8083122 <_ZN9SdSpiCard9writeDataEPKh+0x40>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8083108:	4632      	mov	r2, r6
 808310a:	21fc      	movs	r1, #252	; 0xfc
 808310c:	4620      	mov	r0, r4
 808310e:	f7ff ffa2 	bl	8083056 <_ZN9SdSpiCard9writeDataEhPKh>
 8083112:	4606      	mov	r6, r0
 8083114:	2800      	cmp	r0, #0
 8083116:	d0f2      	beq.n	80830fe <_ZN9SdSpiCard9writeDataEPKh+0x1c>
  if (!selected) {
 8083118:	b91d      	cbnz	r5, 8083122 <_ZN9SdSpiCard9writeDataEPKh+0x40>
    chipSelectHigh();
 808311a:	4620      	mov	r0, r4
 808311c:	f7ff fe0c 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8083120:	4635      	mov	r5, r6
}
 8083122:	4628      	mov	r0, r5
 8083124:	bd70      	pop	{r4, r5, r6, pc}

08083126 <_ZN9SdSpiCard10writeStartEmm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 8083126:	b570      	push	{r4, r5, r6, lr}
 8083128:	4604      	mov	r4, r0
 808312a:	4616      	mov	r6, r2
 808312c:	460d      	mov	r5, r1
    cardCommand(CMD55, 0);
 808312e:	2200      	movs	r2, #0
 8083130:	2137      	movs	r1, #55	; 0x37
 8083132:	f7ff fe68 	bl	8082e06 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8083136:	4632      	mov	r2, r6
 8083138:	2117      	movs	r1, #23
 808313a:	4620      	mov	r0, r4
 808313c:	f7ff fe63 	bl	8082e06 <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 8083140:	b130      	cbz	r0, 8083150 <_ZN9SdSpiCard10writeStartEmm+0x2a>
    m_errorCode = code;
 8083142:	2309      	movs	r3, #9
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8083144:	4620      	mov	r0, r4
 8083146:	71a3      	strb	r3, [r4, #6]
 8083148:	f7ff fdf6 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808314c:	2000      	movs	r0, #0
}
 808314e:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
 8083150:	7a63      	ldrb	r3, [r4, #9]
  if (cardCommand(CMD25, blockNumber)) {
 8083152:	2119      	movs	r1, #25
  if (type() != SD_CARD_TYPE_SDHC) {
 8083154:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8083156:	bf18      	it	ne
 8083158:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD25, blockNumber)) {
 808315a:	462a      	mov	r2, r5
 808315c:	4620      	mov	r0, r4
 808315e:	f7ff fe52 	bl	8082e06 <_ZN9SdSpiCard11cardCommandEhm>
 8083162:	b108      	cbz	r0, 8083168 <_ZN9SdSpiCard10writeStartEmm+0x42>
 8083164:	2307      	movs	r3, #7
 8083166:	e7ed      	b.n	8083144 <_ZN9SdSpiCard10writeStartEmm+0x1e>
  return true;
 8083168:	2001      	movs	r0, #1
 808316a:	e7f0      	b.n	808314e <_ZN9SdSpiCard10writeStartEmm+0x28>

0808316c <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 808316c:	b538      	push	{r3, r4, r5, lr}
 808316e:	4604      	mov	r4, r0
  chipSelectLow();
 8083170:	f7ff fdf5 	bl	8082d5e <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8083174:	f44f 7116 	mov.w	r1, #600	; 0x258
 8083178:	4620      	mov	r0, r4
 808317a:	f7ff fe30 	bl	8082dde <_ZN9SdSpiCard11waitNotBusyEt>
 808317e:	b178      	cbz	r0, 80831a0 <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 8083180:	21fd      	movs	r1, #253	; 0xfd
 8083182:	6820      	ldr	r0, [r4, #0]
 8083184:	f7ff fdd2 	bl	8082d2c <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8083188:	f44f 7116 	mov.w	r1, #600	; 0x258
 808318c:	4620      	mov	r0, r4
 808318e:	f7ff fe26 	bl	8082dde <_ZN9SdSpiCard11waitNotBusyEt>
 8083192:	4605      	mov	r5, r0
 8083194:	b120      	cbz	r0, 80831a0 <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  chipSelectHigh();
 8083196:	4620      	mov	r0, r4
 8083198:	f7ff fdce 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
 808319c:	4628      	mov	r0, r5
 808319e:	bd38      	pop	{r3, r4, r5, pc}
 80831a0:	2312      	movs	r3, #18
  chipSelectHigh();
 80831a2:	4620      	mov	r0, r4
 80831a4:	71a3      	strb	r3, [r4, #6]
 80831a6:	f7ff fdc7 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80831aa:	2500      	movs	r5, #0
 80831ac:	e7f6      	b.n	808319c <_ZN9SdSpiCard9writeStopEv+0x30>

080831ae <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 80831ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80831b0:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 80831b2:	461a      	mov	r2, r3
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 80831b4:	4604      	mov	r4, r0
 80831b6:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 80831b8:	f7ff ffb5 	bl	8083126 <_ZN9SdSpiCard10writeStartEmm>
 80831bc:	b170      	cbz	r0, 80831dc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 80831be:	2500      	movs	r5, #0
 80831c0:	42b5      	cmp	r5, r6
  return writeStop();
 80831c2:	4620      	mov	r0, r4
 80831c4:	eb07 2145 	add.w	r1, r7, r5, lsl #9
  for (size_t b = 0; b < count; b++, src += 512) {
 80831c8:	d004      	beq.n	80831d4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 80831ca:	f7ff ff8a 	bl	80830e2 <_ZN9SdSpiCard9writeDataEPKh>
 80831ce:	b128      	cbz	r0, 80831dc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 80831d0:	3501      	adds	r5, #1
 80831d2:	e7f5      	b.n	80831c0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
}
 80831d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
 80831d8:	f7ff bfc8 	b.w	808316c <_ZN9SdSpiCard9writeStopEv>
  chipSelectHigh();
 80831dc:	4620      	mov	r0, r4
 80831de:	f7ff fdab 	bl	8082d38 <_ZN9SdSpiCard14chipSelectHighEv>
}
 80831e2:	2000      	movs	r0, #0
 80831e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080831e8 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 80831e8:	2201      	movs	r2, #1
 80831ea:	4b01      	ldr	r3, [pc, #4]	; (80831f0 <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 80831ec:	701a      	strb	r2, [r3, #0]
}
 80831ee:	4770      	bx	lr
 80831f0:	200006dc 	.word	0x200006dc

080831f4 <_ZN5SdSpi14endTransactionEv>:
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
}
 80831f4:	4770      	bx	lr
	...

080831f8 <_ZN5SdSpi5beginEh>:
  spiPtr[m_spiIf]->begin(chipSelectPin);
 80831f8:	7902      	ldrb	r2, [r0, #4]
 80831fa:	4b02      	ldr	r3, [pc, #8]	; (8083204 <_ZN5SdSpi5beginEh+0xc>)
 80831fc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8083200:	f001 b874 	b.w	80842ec <_ZN8SPIClass5beginEt>
 8083204:	200006e0 	.word	0x200006e0

08083208 <_ZN5SdSpi16beginTransactionEh>:
void SdSpi::beginTransaction(uint8_t divisor) {
 8083208:	b570      	push	{r4, r5, r6, lr}
 808320a:	4605      	mov	r5, r0
 808320c:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 808320e:	7903      	ldrb	r3, [r0, #4]
 8083210:	4e19      	ldr	r6, [pc, #100]	; (8083278 <_ZN5SdSpi16beginTransactionEh+0x70>)
 8083212:	2101      	movs	r1, #1
 8083214:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8083218:	f001 f877 	bl	808430a <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 808321c:	792b      	ldrb	r3, [r5, #4]
 808321e:	2100      	movs	r1, #0
 8083220:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8083224:	f001 f880 	bl	8084328 <_ZN8SPIClass11setDataModeEh>
  if (divisor <= 2) {
 8083228:	2c02      	cmp	r4, #2
 808322a:	d91b      	bls.n	8083264 <_ZN5SdSpi16beginTransactionEh+0x5c>
  } else  if (divisor <= 4) {
 808322c:	2c04      	cmp	r4, #4
 808322e:	d91b      	bls.n	8083268 <_ZN5SdSpi16beginTransactionEh+0x60>
  } else  if (divisor <= 8) {
 8083230:	2c08      	cmp	r4, #8
 8083232:	d91b      	bls.n	808326c <_ZN5SdSpi16beginTransactionEh+0x64>
  } else  if (divisor <= 16) {
 8083234:	2c10      	cmp	r4, #16
 8083236:	d91b      	bls.n	8083270 <_ZN5SdSpi16beginTransactionEh+0x68>
  } else  if (divisor <= 32) {
 8083238:	2c20      	cmp	r4, #32
 808323a:	d91b      	bls.n	8083274 <_ZN5SdSpi16beginTransactionEh+0x6c>
    v = SPI_CLOCK_DIV128;
 808323c:	2c41      	cmp	r4, #65	; 0x41
 808323e:	bf34      	ite	cc
 8083240:	2128      	movcc	r1, #40	; 0x28
 8083242:	2130      	movcs	r1, #48	; 0x30
  spiPtr[m_spiIf]->setClockDivider(v);
 8083244:	792b      	ldrb	r3, [r5, #4]
 8083246:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 808324a:	f001 f92d 	bl	80844a8 <_ZN8SPIClass15setClockDividerEh>
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 808324e:	7929      	ldrb	r1, [r5, #4]
 8083250:	233c      	movs	r3, #60	; 0x3c
 8083252:	fb01 4404 	mla	r4, r1, r4, r4
 8083256:	2118      	movs	r1, #24
 8083258:	434c      	muls	r4, r1
 808325a:	fbb4 f4f3 	udiv	r4, r4, r3
 808325e:	4b07      	ldr	r3, [pc, #28]	; (808327c <_ZN5SdSpi16beginTransactionEh+0x74>)
 8083260:	601c      	str	r4, [r3, #0]
}
 8083262:	bd70      	pop	{r4, r5, r6, pc}
    v = SPI_CLOCK_DIV2;
 8083264:	2100      	movs	r1, #0
 8083266:	e7ed      	b.n	8083244 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV4;
 8083268:	2108      	movs	r1, #8
 808326a:	e7eb      	b.n	8083244 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV8;
 808326c:	2110      	movs	r1, #16
 808326e:	e7e9      	b.n	8083244 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV16;
 8083270:	2118      	movs	r1, #24
 8083272:	e7e7      	b.n	8083244 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV32;
 8083274:	2120      	movs	r1, #32
 8083276:	e7e5      	b.n	8083244 <_ZN5SdSpi16beginTransactionEh+0x3c>
 8083278:	200006e0 	.word	0x200006e0
 808327c:	200006ec 	.word	0x200006ec

08083280 <_ZN5SdSpi7receiveEv>:
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 8083280:	7902      	ldrb	r2, [r0, #4]
 8083282:	4b03      	ldr	r3, [pc, #12]	; (8083290 <_ZN5SdSpi7receiveEv+0x10>)
 8083284:	21ff      	movs	r1, #255	; 0xff
 8083286:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 808328a:	f001 b931 	b.w	80844f0 <_ZN8SPIClass8transferEh>
 808328e:	bf00      	nop
 8083290:	200006e0 	.word	0x200006e0

08083294 <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8083294:	7902      	ldrb	r2, [r0, #4]
 8083296:	4b02      	ldr	r3, [pc, #8]	; (80832a0 <_ZN5SdSpi4sendEh+0xc>)
 8083298:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 808329c:	f001 b928 	b.w	80844f0 <_ZN8SPIClass8transferEh>
 80832a0:	200006e0 	.word	0x200006e0

080832a4 <_ZN5SdSpi7receiveEPhj>:
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 80832a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80832a6:	460e      	mov	r6, r1
  SPI_DMA_TransferCompleted = false;
 80832a8:	2100      	movs	r1, #0
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 80832aa:	4613      	mov	r3, r2
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80832ac:	4a0a      	ldr	r2, [pc, #40]	; (80832d8 <_ZN5SdSpi7receiveEPhj+0x34>)
 80832ae:	7905      	ldrb	r5, [r0, #4]
 80832b0:	480a      	ldr	r0, [pc, #40]	; (80832dc <_ZN5SdSpi7receiveEPhj+0x38>)
 80832b2:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
 80832b4:	4c0a      	ldr	r4, [pc, #40]	; (80832e0 <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80832b6:	4632      	mov	r2, r6
 80832b8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  SPI_DMA_TransferCompleted = false;
 80832bc:	7021      	strb	r1, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80832be:	f001 f91d 	bl	80844fc <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 80832c2:	7823      	ldrb	r3, [r4, #0]
 80832c4:	2b00      	cmp	r3, #0
 80832c6:	d0fc      	beq.n	80832c2 <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 80832c8:	4b06      	ldr	r3, [pc, #24]	; (80832e4 <_ZN5SdSpi7receiveEPhj+0x40>)
 80832ca:	6818      	ldr	r0, [r3, #0]
 80832cc:	b108      	cbz	r0, 80832d2 <_ZN5SdSpi7receiveEPhj+0x2e>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80832ce:	f000 fd8f 	bl	8083df0 <HAL_Delay_Microseconds>
}
 80832d2:	2000      	movs	r0, #0
 80832d4:	b002      	add	sp, #8
 80832d6:	bd70      	pop	{r4, r5, r6, pc}
 80832d8:	080831e9 	.word	0x080831e9
 80832dc:	200006e0 	.word	0x200006e0
 80832e0:	200006dc 	.word	0x200006dc
 80832e4:	200006ec 	.word	0x200006ec

080832e8 <_ZN5SdSpi4sendEPKhj>:
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 80832e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80832ea:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
 80832ec:	2200      	movs	r2, #0

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 80832ee:	7905      	ldrb	r5, [r0, #4]
 80832f0:	480a      	ldr	r0, [pc, #40]	; (808331c <_ZN5SdSpi4sendEPKhj+0x34>)
  SPI_DMA_TransferCompleted = false;
 80832f2:	4c0b      	ldr	r4, [pc, #44]	; (8083320 <_ZN5SdSpi4sendEPKhj+0x38>)
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 80832f4:	9000      	str	r0, [sp, #0]
 80832f6:	480b      	ldr	r0, [pc, #44]	; (8083324 <_ZN5SdSpi4sendEPKhj+0x3c>)
  SPI_DMA_TransferCompleted = false;
 80832f8:	7022      	strb	r2, [r4, #0]
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 80832fa:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80832fe:	f001 f8fd 	bl	80844fc <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
 8083302:	7823      	ldrb	r3, [r4, #0]
 8083304:	2b00      	cmp	r3, #0
 8083306:	d0fc      	beq.n	8083302 <_ZN5SdSpi4sendEPKhj+0x1a>
  if (bugDelay) {
 8083308:	4b07      	ldr	r3, [pc, #28]	; (8083328 <_ZN5SdSpi4sendEPKhj+0x40>)
 808330a:	6818      	ldr	r0, [r3, #0]
 808330c:	b120      	cbz	r0, 8083318 <_ZN5SdSpi4sendEPKhj+0x30>
    delayMicroseconds(bugDelay);
  }
}
 808330e:	b003      	add	sp, #12
 8083310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8083314:	f000 bd6c 	b.w	8083df0 <HAL_Delay_Microseconds>
 8083318:	b003      	add	sp, #12
 808331a:	bd30      	pop	{r4, r5, pc}
 808331c:	080831e9 	.word	0x080831e9
 8083320:	200006dc 	.word	0x200006dc
 8083324:	200006e0 	.word	0x200006e0
 8083328:	200006ec 	.word	0x200006ec

0808332c <_ZN14RecursiveMutex7disposeEv>:

    ~RecursiveMutex() {
        dispose();
    }

    void dispose()
 808332c:	b510      	push	{r4, lr}
 808332e:	4604      	mov	r4, r0
    {
        if (handle_) {
 8083330:	6800      	ldr	r0, [r0, #0]
 8083332:	b118      	cbz	r0, 808333c <_ZN14RecursiveMutex7disposeEv+0x10>
            os_mutex_recursive_destroy(handle_);
 8083334:	f000 fd7c 	bl	8083e30 <os_mutex_recursive_destroy>
            handle_ = nullptr;
 8083338:	2300      	movs	r3, #0
 808333a:	6023      	str	r3, [r4, #0]
        }
    }
 808333c:	bd10      	pop	{r4, pc}
	...

08083340 <__tcf_0>:

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8083340:	b508      	push	{r3, lr}
        dispose();
 8083342:	4802      	ldr	r0, [pc, #8]	; (808334c <__tcf_0+0xc>)
 8083344:	f7ff fff2 	bl	808332c <_ZN14RecursiveMutex7disposeEv>
 8083348:	bd08      	pop	{r3, pc}
 808334a:	bf00      	nop
 808334c:	200006d8 	.word	0x200006d8

08083350 <__tcf_1>:
 8083350:	b508      	push	{r3, lr}
 8083352:	4802      	ldr	r0, [pc, #8]	; (808335c <__tcf_1+0xc>)
 8083354:	f7ff ffea 	bl	808332c <_ZN14RecursiveMutex7disposeEv>
 8083358:	bd08      	pop	{r3, pc}
 808335a:	bf00      	nop
 808335c:	200006c8 	.word	0x200006c8

08083360 <__tcf_2>:
 8083360:	b508      	push	{r3, lr}
 8083362:	4802      	ldr	r0, [pc, #8]	; (808336c <__tcf_2+0xc>)
 8083364:	f7ff ffe2 	bl	808332c <_ZN14RecursiveMutex7disposeEv>
 8083368:	bd08      	pop	{r3, pc}
 808336a:	bf00      	nop
 808336c:	200006b8 	.word	0x200006b8

08083370 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 8083370:	b538      	push	{r3, r4, r5, lr}
 8083372:	4d22      	ldr	r5, [pc, #136]	; (80833fc <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8c>)
 8083374:	7829      	ldrb	r1, [r5, #0]
 8083376:	f3bf 8f5b 	dmb	ish
 808337a:	f011 0401 	ands.w	r4, r1, #1
 808337e:	d10d      	bne.n	808339c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x2c>
 8083380:	4628      	mov	r0, r5
 8083382:	f7fc fe8e 	bl	80800a2 <__cxa_guard_acquire>
 8083386:	b148      	cbz	r0, 808339c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x2c>
 8083388:	4621      	mov	r1, r4
 808338a:	481d      	ldr	r0, [pc, #116]	; (8083400 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x90>)
 808338c:	f000 ff90 	bl	80842b0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8083390:	4628      	mov	r0, r5
 8083392:	f7fc fe8b 	bl	80800ac <__cxa_guard_release>
 8083396:	481b      	ldr	r0, [pc, #108]	; (8083404 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x94>)
 8083398:	f003 f94a 	bl	8086630 <atexit>
};
 808339c:	4b18      	ldr	r3, [pc, #96]	; (8083400 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x90>)
 808339e:	4c1a      	ldr	r4, [pc, #104]	; (8083408 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x98>)
 80833a0:	4d1a      	ldr	r5, [pc, #104]	; (808340c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 80833a2:	6023      	str	r3, [r4, #0]
 80833a4:	782b      	ldrb	r3, [r5, #0]
 80833a6:	f3bf 8f5b 	dmb	ish
 80833aa:	07da      	lsls	r2, r3, #31
 80833ac:	d40d      	bmi.n	80833ca <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x5a>
 80833ae:	4628      	mov	r0, r5
 80833b0:	f7fc fe77 	bl	80800a2 <__cxa_guard_acquire>
 80833b4:	b148      	cbz	r0, 80833ca <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x5a>
 80833b6:	2101      	movs	r1, #1
 80833b8:	4815      	ldr	r0, [pc, #84]	; (8083410 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 80833ba:	f000 ff79 	bl	80842b0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80833be:	4628      	mov	r0, r5
 80833c0:	f7fc fe74 	bl	80800ac <__cxa_guard_release>
 80833c4:	4813      	ldr	r0, [pc, #76]	; (8083414 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 80833c6:	f003 f933 	bl	8086630 <atexit>
 80833ca:	4b11      	ldr	r3, [pc, #68]	; (8083410 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 80833cc:	4d12      	ldr	r5, [pc, #72]	; (8083418 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa8>)
 80833ce:	6063      	str	r3, [r4, #4]
 80833d0:	782b      	ldrb	r3, [r5, #0]
 80833d2:	f3bf 8f5b 	dmb	ish
 80833d6:	07db      	lsls	r3, r3, #31
 80833d8:	d40d      	bmi.n	80833f6 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x86>
 80833da:	4628      	mov	r0, r5
 80833dc:	f7fc fe61 	bl	80800a2 <__cxa_guard_acquire>
 80833e0:	b148      	cbz	r0, 80833f6 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x86>
 80833e2:	2102      	movs	r1, #2
 80833e4:	480d      	ldr	r0, [pc, #52]	; (808341c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xac>)
 80833e6:	f000 ff63 	bl	80842b0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80833ea:	4628      	mov	r0, r5
 80833ec:	f7fc fe5e 	bl	80800ac <__cxa_guard_release>
 80833f0:	480b      	ldr	r0, [pc, #44]	; (8083420 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 80833f2:	f003 f91d 	bl	8086630 <atexit>
 80833f6:	4b09      	ldr	r3, [pc, #36]	; (808341c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xac>)
 80833f8:	60a3      	str	r3, [r4, #8]
}
 80833fa:	bd38      	pop	{r3, r4, r5, pc}
 80833fc:	200006cc 	.word	0x200006cc
 8083400:	200006d0 	.word	0x200006d0
 8083404:	08083341 	.word	0x08083341
 8083408:	200006e0 	.word	0x200006e0
 808340c:	200006bc 	.word	0x200006bc
 8083410:	200006c0 	.word	0x200006c0
 8083414:	08083351 	.word	0x08083351
 8083418:	200006ac 	.word	0x200006ac
 808341c:	200006b0 	.word	0x200006b0
 8083420:	08083361 	.word	0x08083361

08083424 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8083424:	b538      	push	{r3, r4, r5, lr}
 8083426:	460d      	mov	r5, r1
 8083428:	4604      	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 808342a:	2224      	movs	r2, #36	; 0x24
 808342c:	2100      	movs	r1, #0
 808342e:	f003 f923 	bl	8086678 <memset>

  m_vol = vol;
 8083432:	60a5      	str	r5, [r4, #8]
    return m_fatType;
 8083434:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
 8083436:	2b10      	cmp	r3, #16
 8083438:	d003      	beq.n	8083442 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
 808343a:	2b20      	cmp	r3, #32
 808343c:	d006      	beq.n	808344c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
 808343e:	2000      	movs	r0, #0
  m_flags = O_READ;
  return true;

fail:
  return false;
}
 8083440:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
 8083442:	2320      	movs	r3, #32
  m_flags = O_READ;
 8083444:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
 8083446:	7023      	strb	r3, [r4, #0]
  m_flags = O_READ;
 8083448:	70a0      	strb	r0, [r4, #2]
  return true;
 808344a:	e7f9      	b.n	8083440 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
 808344c:	2340      	movs	r3, #64	; 0x40
 808344e:	e7f9      	b.n	8083444 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

08083450 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
 8083450:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8083452:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
 8083454:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8083458:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 808345a:	f100 0210 	add.w	r2, r0, #16
 808345e:	6880      	ldr	r0, [r0, #8]
 8083460:	f000 bbc3 	b.w	8083bea <_ZN9FatVolume15allocateClusterEmPm>

08083464 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
 8083464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
 8083468:	7801      	ldrb	r1, [r0, #0]
bool FatFile::addDirCluster() {
 808346a:	4604      	mov	r4, r0
  if (isRootFixed()) {
 808346c:	f011 0520 	ands.w	r5, r1, #32
 8083470:	d003      	beq.n	808347a <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
 8083472:	2600      	movs	r6, #0
}
 8083474:	4630      	mov	r0, r6
 8083476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
 808347a:	6942      	ldr	r2, [r0, #20]
 808347c:	4b17      	ldr	r3, [pc, #92]	; (80834dc <_ZN7FatFile13addDirClusterEv+0x78>)
 808347e:	429a      	cmp	r2, r3
 8083480:	d2f7      	bcs.n	8083472 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
 8083482:	f7ff ffe5 	bl	8083450 <_ZN7FatFile10addClusterEv>
 8083486:	4606      	mov	r6, r0
 8083488:	2800      	cmp	r0, #0
 808348a:	d0f2      	beq.n	8083472 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterStartBlock(m_curCluster);
 808348c:	6921      	ldr	r1, [r4, #16]
 808348e:	68a0      	ldr	r0, [r4, #8]
 8083490:	f000 fb4c 	bl	8083b2c <_ZNK9FatVolume17clusterStartBlockEm>
 8083494:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
 8083496:	68a0      	ldr	r0, [r4, #8]
 8083498:	2205      	movs	r2, #5
 808349a:	4639      	mov	r1, r7
 808349c:	3028      	adds	r0, #40	; 0x28
 808349e:	f000 fb22 	bl	8083ae6 <_ZN8FatCache4readEmh>
  if (!pc) {
 80834a2:	4680      	mov	r8, r0
 80834a4:	2800      	cmp	r0, #0
 80834a6:	d0e4      	beq.n	8083472 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
 80834a8:	4629      	mov	r1, r5
 80834aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80834ae:	f003 f8e3 	bl	8086678 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80834b2:	2501      	movs	r5, #1
 80834b4:	68a0      	ldr	r0, [r4, #8]
    return m_blocksPerCluster;
 80834b6:	7902      	ldrb	r2, [r0, #4]
 80834b8:	42aa      	cmp	r2, r5
 80834ba:	d909      	bls.n	80834d0 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 80834bc:	6803      	ldr	r3, [r0, #0]
 80834be:	4642      	mov	r2, r8
 80834c0:	685b      	ldr	r3, [r3, #4]
 80834c2:	19e9      	adds	r1, r5, r7
 80834c4:	4798      	blx	r3
 80834c6:	2800      	cmp	r0, #0
 80834c8:	d0d3      	beq.n	8083472 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80834ca:	3501      	adds	r5, #1
 80834cc:	b2ed      	uxtb	r5, r5
 80834ce:	e7f1      	b.n	80834b4 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 80834d0:	6963      	ldr	r3, [r4, #20]
 80834d2:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 80834d6:	6163      	str	r3, [r4, #20]
  return true;
 80834d8:	e7cc      	b.n	8083474 <_ZN7FatFile13addDirClusterEv+0x10>
 80834da:	bf00      	nop
 80834dc:	001ffe00 	.word	0x001ffe00

080834e0 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 80834e0:	b510      	push	{r4, lr}
 80834e2:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
 80834e4:	6880      	ldr	r0, [r0, #8]
 80834e6:	460a      	mov	r2, r1
 80834e8:	3028      	adds	r0, #40	; 0x28
 80834ea:	69a1      	ldr	r1, [r4, #24]
 80834ec:	f000 fafb 	bl	8083ae6 <_ZN8FatCache4readEmh>
  if (!pc) {
 80834f0:	b120      	cbz	r0, 80834fc <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
 80834f2:	88a3      	ldrh	r3, [r4, #4]
 80834f4:	f003 030f 	and.w	r3, r3, #15
 80834f8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
 80834fc:	bd10      	pop	{r4, pc}

080834fe <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
 80834fe:	7803      	ldrb	r3, [r0, #0]
 8083500:	b90b      	cbnz	r3, 8083506 <_ZN7FatFile8openRootEP9FatVolume+0x8>
 8083502:	f7ff bf8f 	b.w	8083424 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
 8083506:	2000      	movs	r0, #0
 8083508:	4770      	bx	lr

0808350a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 808350a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
 808350e:	7803      	ldrb	r3, [r0, #0]
 8083510:	4604      	mov	r4, r0
 8083512:	4688      	mov	r8, r1
 8083514:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8083516:	2b00      	cmp	r3, #0
 8083518:	d05d      	beq.n	80835d6 <_ZN7FatFile4readEPvj+0xcc>
 808351a:	7882      	ldrb	r2, [r0, #2]
 808351c:	07d1      	lsls	r1, r2, #31
 808351e:	d55a      	bpl.n	80835d6 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8083520:	071a      	lsls	r2, r3, #28
 8083522:	d52d      	bpl.n	8083580 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 8083524:	69c3      	ldr	r3, [r0, #28]
 8083526:	6942      	ldr	r2, [r0, #20]
 8083528:	1a9b      	subs	r3, r3, r2
 808352a:	429d      	cmp	r5, r3
 808352c:	bf28      	it	cs
 808352e:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8083530:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
 8083532:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8083536:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
 808353a:	2e00      	cmp	r6, #0
 808353c:	f000 8090 	beq.w	8083660 <_ZN7FatFile4readEPvj+0x156>
    return m_attr & FILE_ATTR_ROOT_FIXED;
 8083540:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
 8083542:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 8083544:	0697      	lsls	r7, r2, #26
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8083546:	68a0      	ldr	r0, [r4, #8]
    offset = m_curPosition & 0X1FF;  // offset in block
 8083548:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 808354c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8083550:	d51f      	bpl.n	8083592 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8083552:	6a00      	ldr	r0, [r0, #32]
 8083554:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 8083556:	68a0      	ldr	r0, [r4, #8]
 8083558:	f1ba 0f00 	cmp.w	sl, #0
 808355c:	d142      	bne.n	80835e4 <_ZN7FatFile4readEPvj+0xda>
 808355e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083562:	d33f      	bcc.n	80835e4 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
 8083564:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8083566:	4291      	cmp	r1, r2
 8083568:	d03c      	beq.n	80835e4 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 808356a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 808356e:	d252      	bcs.n	8083616 <_ZN7FatFile4readEPvj+0x10c>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 8083570:	6803      	ldr	r3, [r0, #0]
 8083572:	4642      	mov	r2, r8
 8083574:	681b      	ldr	r3, [r3, #0]
 8083576:	4798      	blx	r3
 8083578:	b368      	cbz	r0, 80835d6 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
 808357a:	f44f 7700 	mov.w	r7, #512	; 0x200
 808357e:	e044      	b.n	808360a <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
 8083580:	069b      	lsls	r3, r3, #26
 8083582:	d5d5      	bpl.n	8083530 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8083584:	6883      	ldr	r3, [r0, #8]
 8083586:	891a      	ldrh	r2, [r3, #8]
 8083588:	6943      	ldr	r3, [r0, #20]
 808358a:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
 808358e:	b29b      	uxth	r3, r3
 8083590:	e7cb      	b.n	808352a <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8083592:	f890 9005 	ldrb.w	r9, [r0, #5]
 8083596:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
 808359a:	f1ba 0f00 	cmp.w	sl, #0
 808359e:	d108      	bne.n	80835b2 <_ZN7FatFile4readEPvj+0xa8>
 80835a0:	f1b9 0f00 	cmp.w	r9, #0
 80835a4:	d105      	bne.n	80835b2 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
 80835a6:	b95b      	cbnz	r3, 80835c0 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80835a8:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
 80835aa:	bf4c      	ite	mi
 80835ac:	6a03      	ldrmi	r3, [r0, #32]
 80835ae:	6a23      	ldrpl	r3, [r4, #32]
 80835b0:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80835b2:	6921      	ldr	r1, [r4, #16]
 80835b4:	68a0      	ldr	r0, [r4, #8]
 80835b6:	f000 fab9 	bl	8083b2c <_ZNK9FatVolume17clusterStartBlockEm>
 80835ba:	eb09 0100 	add.w	r1, r9, r0
 80835be:	e7ca      	b.n	8083556 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80835c0:	465a      	mov	r2, fp
 80835c2:	6921      	ldr	r1, [r4, #16]
 80835c4:	f000 fab8 	bl	8083b38 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 80835c8:	2800      	cmp	r0, #0
 80835ca:	db04      	blt.n	80835d6 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
 80835cc:	d1f1      	bne.n	80835b2 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
 80835ce:	7823      	ldrb	r3, [r4, #0]
 80835d0:	f013 0f70 	tst.w	r3, #112	; 0x70
 80835d4:	d144      	bne.n	8083660 <_ZN7FatFile4readEPvj+0x156>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80835d6:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80835d8:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
 80835dc:	f043 0302 	orr.w	r3, r3, #2
 80835e0:	7063      	strb	r3, [r4, #1]
  return -1;
 80835e2:	e03e      	b.n	8083662 <_ZN7FatFile4readEPvj+0x158>
      n = 512 - offset;
 80835e4:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
 80835e8:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
 80835ea:	f04f 0200 	mov.w	r2, #0
 80835ee:	f100 0028 	add.w	r0, r0, #40	; 0x28
 80835f2:	bf28      	it	cs
 80835f4:	4637      	movcs	r7, r6
 80835f6:	f000 fa76 	bl	8083ae6 <_ZN8FatCache4readEmh>
      if (!pc) {
 80835fa:	2800      	cmp	r0, #0
 80835fc:	d0eb      	beq.n	80835d6 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
 80835fe:	eb00 010a 	add.w	r1, r0, sl
 8083602:	463a      	mov	r2, r7
 8083604:	4640      	mov	r0, r8
 8083606:	f003 f829 	bl	808665c <memcpy>
    m_curPosition += n;
 808360a:	6963      	ldr	r3, [r4, #20]
    dst += n;
 808360c:	44b8      	add	r8, r7
    m_curPosition += n;
 808360e:	443b      	add	r3, r7
 8083610:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8083612:	1bf6      	subs	r6, r6, r7
  while (toRead) {
 8083614:	e791      	b.n	808353a <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
 8083616:	7827      	ldrb	r7, [r4, #0]
      uint8_t nb = toRead >> 9;
 8083618:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 808361c:	06bf      	lsls	r7, r7, #26
 808361e:	d406      	bmi.n	808362e <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 8083620:	7907      	ldrb	r7, [r0, #4]
 8083622:	eba7 0709 	sub.w	r7, r7, r9
 8083626:	b2ff      	uxtb	r7, r7
 8083628:	42bb      	cmp	r3, r7
 808362a:	bf28      	it	cs
 808362c:	463b      	movcs	r3, r7
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808362e:	4291      	cmp	r1, r2
      n = 512*nb;
 8083630:	ea4f 2743 	mov.w	r7, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8083634:	d208      	bcs.n	8083648 <_ZN7FatFile4readEPvj+0x13e>
      if (!m_vol->readBlocks(block, dst, nb)) {
 8083636:	68a0      	ldr	r0, [r4, #8]
 8083638:	6802      	ldr	r2, [r0, #0]
 808363a:	f8d2 a008 	ldr.w	sl, [r2, #8]
 808363e:	4642      	mov	r2, r8
 8083640:	47d0      	blx	sl
 8083642:	2800      	cmp	r0, #0
 8083644:	d1e1      	bne.n	808360a <_ZN7FatFile4readEPvj+0x100>
 8083646:	e7c6      	b.n	80835d6 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8083648:	441a      	add	r2, r3
 808364a:	428a      	cmp	r2, r1
 808364c:	d9f3      	bls.n	8083636 <_ZN7FatFile4readEPvj+0x12c>
 808364e:	e9cd 1300 	strd	r1, r3, [sp]
        if (!m_vol->cacheSync()) {
 8083652:	f7ff f86d 	bl	8082730 <_ZN9FatVolume9cacheSyncEv>
 8083656:	e9dd 1300 	ldrd	r1, r3, [sp]
 808365a:	2800      	cmp	r0, #0
 808365c:	d1eb      	bne.n	8083636 <_ZN7FatFile4readEPvj+0x12c>
 808365e:	e7ba      	b.n	80835d6 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
 8083660:	1ba8      	subs	r0, r5, r6
}
 8083662:	b003      	add	sp, #12
 8083664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08083668 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8083668:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 808366a:	6943      	ldr	r3, [r0, #20]
dir_t* FatFile::readDirCache(bool skipReadOk) {
 808366c:	4604      	mov	r4, r0

  if (i == 0 || !skipReadOk) {
 808366e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8083672:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
 8083676:	d000      	beq.n	808367a <_ZN7FatFile12readDirCacheEb+0x12>
 8083678:	b999      	cbnz	r1, 80836a2 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
 808367a:	2201      	movs	r2, #1
 808367c:	4620      	mov	r0, r4
 808367e:	f10d 0107 	add.w	r1, sp, #7
 8083682:	f7ff ff42 	bl	808350a <_ZN7FatFile4readEPvj>
    if  (n != 1) {
 8083686:	b240      	sxtb	r0, r0
 8083688:	2801      	cmp	r0, #1
 808368a:	d002      	beq.n	8083692 <_ZN7FatFile12readDirCacheEb+0x2a>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 808368c:	2000      	movs	r0, #0
}
 808368e:	b003      	add	sp, #12
 8083690:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
 8083692:	6963      	ldr	r3, [r4, #20]
 8083694:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
 8083696:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
 8083698:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
 808369a:	3034      	adds	r0, #52	; 0x34
 808369c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 80836a0:	e7f5      	b.n	808368e <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
 80836a2:	3320      	adds	r3, #32
 80836a4:	e7f7      	b.n	8083696 <_ZN7FatFile12readDirCacheEb+0x2e>

080836a6 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 80836a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
 80836aa:	7802      	ldrb	r2, [r0, #0]
 80836ac:	4604      	mov	r4, r0
 80836ae:	460d      	mov	r5, r1
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 80836b0:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 80836b2:	b162      	cbz	r2, 80836ce <_ZN7FatFile7seekSetEm+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 80836b4:	6940      	ldr	r0, [r0, #20]
 80836b6:	4288      	cmp	r0, r1
 80836b8:	d002      	beq.n	80836c0 <_ZN7FatFile7seekSetEm+0x1a>
    return true;
  }
  if (pos == 0) {
 80836ba:	b919      	cbnz	r1, 80836c4 <_ZN7FatFile7seekSetEm+0x1e>
    // set position to start of file
    m_curCluster = 0;
 80836bc:	6121      	str	r1, [r4, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 80836be:	6165      	str	r5, [r4, #20]
    return true;
 80836c0:	2001      	movs	r0, #1
 80836c2:	e006      	b.n	80836d2 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
 80836c4:	0716      	lsls	r6, r2, #28
 80836c6:	d506      	bpl.n	80836d6 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
 80836c8:	69e3      	ldr	r3, [r4, #28]
 80836ca:	428b      	cmp	r3, r1
 80836cc:	d20b      	bcs.n	80836e6 <_ZN7FatFile7seekSetEm+0x40>
  return true;

fail:
  m_curCluster = tmp;
  return false;
 80836ce:	2000      	movs	r0, #0
  m_curCluster = tmp;
 80836d0:	6127      	str	r7, [r4, #16]
}
 80836d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
 80836d6:	0691      	lsls	r1, r2, #26
 80836d8:	d505      	bpl.n	80836e6 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
 80836da:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 80836dc:	891b      	ldrh	r3, [r3, #8]
 80836de:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 80836e2:	d9ec      	bls.n	80836be <_ZN7FatFile7seekSetEm+0x18>
 80836e4:	e7f3      	b.n	80836ce <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80836e6:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80836ea:	1e43      	subs	r3, r0, #1
 80836ec:	f89c 6006 	ldrb.w	r6, [ip, #6]
 80836f0:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80836f4:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80836f6:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80836f8:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
 80836fa:	42b3      	cmp	r3, r6
 80836fc:	d800      	bhi.n	8083700 <_ZN7FatFile7seekSetEm+0x5a>
 80836fe:	b998      	cbnz	r0, 8083728 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8083700:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
 8083702:	bf4c      	ite	mi
 8083704:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 8083708:	6a23      	ldrpl	r3, [r4, #32]
 808370a:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 808370c:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
 8083710:	2e00      	cmp	r6, #0
 8083712:	d0d4      	beq.n	80836be <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8083714:	4642      	mov	r2, r8
 8083716:	6921      	ldr	r1, [r4, #16]
 8083718:	68a0      	ldr	r0, [r4, #8]
 808371a:	f000 fa0d 	bl	8083b38 <_ZN9FatVolume6fatGetEmPm>
 808371e:	2800      	cmp	r0, #0
 8083720:	f106 36ff 	add.w	r6, r6, #4294967295
 8083724:	dcf4      	bgt.n	8083710 <_ZN7FatFile7seekSetEm+0x6a>
 8083726:	e7d2      	b.n	80836ce <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
 8083728:	1af6      	subs	r6, r6, r3
 808372a:	e7ef      	b.n	808370c <_ZN7FatFile7seekSetEm+0x66>

0808372c <_ZN7FatFile15openCachedEntryEPS_thh>:
                              uint8_t oflag, uint8_t lfnOrd) {
 808372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808372e:	460f      	mov	r7, r1
 8083730:	4604      	mov	r4, r0
 8083732:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
 8083734:	2100      	movs	r1, #0
 8083736:	2224      	movs	r2, #36	; 0x24
                              uint8_t oflag, uint8_t lfnOrd) {
 8083738:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
 808373a:	f002 ff9d 	bl	8086678 <memset>
  m_vol = dirFile->m_vol;
 808373e:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8083740:	80a5      	strh	r5, [r4, #4]
  m_vol = dirFile->m_vol;
 8083742:	60a0      	str	r0, [r4, #8]
  m_dirCluster = dirFile->m_firstCluster;
 8083744:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8083746:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
 808374a:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
 808374c:	016b      	lsls	r3, r5, #5
 808374e:	eb00 1545 	add.w	r5, r0, r5, lsl #5
 8083752:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 8083756:	0717      	lsls	r7, r2, #28
 8083758:	d502      	bpl.n	8083760 <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
  m_attr = FILE_ATTR_CLOSED;
 808375a:	2000      	movs	r0, #0
 808375c:	7020      	strb	r0, [r4, #0]
}
 808375e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8083760:	f002 0217 	and.w	r2, r2, #23
 8083764:	7022      	strb	r2, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 8083766:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
 808376a:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
 808376e:	bf04      	itt	eq
 8083770:	f042 0208 	orreq.w	r2, r2, #8
 8083774:	7022      	strbeq	r2, [r4, #0]
  m_lfnOrd = lfnOrd;
 8083776:	f89d 2018 	ldrb.w	r2, [sp, #24]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 808377a:	f016 0f32 	tst.w	r6, #50	; 0x32
  m_lfnOrd = lfnOrd;
 808377e:	70e2      	strb	r2, [r4, #3]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8083780:	d004      	beq.n	808378c <_ZN7FatFile15openCachedEntryEPS_thh+0x60>
    return m_attr & FILE_ATTR_SUBDIR;
 8083782:	7822      	ldrb	r2, [r4, #0]
    if (isSubDir() || isReadOnly()) {
 8083784:	06d5      	lsls	r5, r2, #27
 8083786:	d4e8      	bmi.n	808375a <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
 8083788:	07d1      	lsls	r1, r2, #31
 808378a:	d4e6      	bmi.n	808375a <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
  m_flags = oflag & F_OFLAG;
 808378c:	f006 020f 	and.w	r2, r6, #15
 8083790:	70a2      	strb	r2, [r4, #2]
    return m_lbn;
 8083792:	6b02      	ldr	r2, [r0, #48]	; 0x30
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8083794:	4403      	add	r3, r0
  m_dirBlock = m_vol->cacheBlockNumber();
 8083796:	61a2      	str	r2, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8083798:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
                 | dir->firstClusterLow;
 808379c:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80837a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
 80837a4:	06f2      	lsls	r2, r6, #27
 80837a6:	d50d      	bpl.n	80837c4 <_ZN7FatFile15openCachedEntryEPS_thh+0x98>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 80837a8:	b939      	cbnz	r1, 80837ba <_ZN7FatFile15openCachedEntryEPS_thh+0x8e>
    m_flags |= F_FILE_DIR_DIRTY;
 80837aa:	78a3      	ldrb	r3, [r4, #2]
 80837ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80837b0:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 80837b2:	06b3      	lsls	r3, r6, #26
 80837b4:	d40a      	bmi.n	80837cc <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
  return true;
 80837b6:	2001      	movs	r0, #1
 80837b8:	e7d1      	b.n	808375e <_ZN7FatFile15openCachedEntryEPS_thh+0x32>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 80837ba:	f000 fa52 	bl	8083c62 <_ZN9FatVolume9freeChainEm>
 80837be:	2800      	cmp	r0, #0
 80837c0:	d1f3      	bne.n	80837aa <_ZN7FatFile15openCachedEntryEPS_thh+0x7e>
 80837c2:	e7ca      	b.n	808375a <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
    m_firstCluster = firstCluster;
 80837c4:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 80837c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80837c8:	61e3      	str	r3, [r4, #28]
 80837ca:	e7f2      	b.n	80837b2 <_ZN7FatFile15openCachedEntryEPS_thh+0x86>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 80837cc:	4620      	mov	r0, r4
 80837ce:	69e1      	ldr	r1, [r4, #28]
 80837d0:	f7ff ff69 	bl	80836a6 <_ZN7FatFile7seekSetEm>
 80837d4:	2800      	cmp	r0, #0
 80837d6:	d1ee      	bne.n	80837b6 <_ZN7FatFile15openCachedEntryEPS_thh+0x8a>
 80837d8:	e7bf      	b.n	808375a <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
	...

080837dc <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80837dc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 80837de:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 80837e0:	4604      	mov	r4, r0
  if (!isOpen()) {
 80837e2:	b90b      	cbnz	r3, 80837e8 <_ZN7FatFile4syncEv+0xc>
    return true;
 80837e4:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
 80837e6:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
 80837e8:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80837ec:	2b00      	cmp	r3, #0
 80837ee:	da23      	bge.n	8083838 <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80837f0:	2101      	movs	r1, #1
 80837f2:	f7ff fe75 	bl	80834e0 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80837f6:	4605      	mov	r5, r0
 80837f8:	b928      	cbnz	r0, 8083806 <_ZN7FatFile4syncEv+0x2a>
  m_error |= WRITE_ERROR;
 80837fa:	7863      	ldrb	r3, [r4, #1]
  return false;
 80837fc:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 80837fe:	f043 0301 	orr.w	r3, r3, #1
 8083802:	7063      	strb	r3, [r4, #1]
  return false;
 8083804:	e7ef      	b.n	80837e6 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8083806:	7803      	ldrb	r3, [r0, #0]
 8083808:	2be5      	cmp	r3, #229	; 0xe5
 808380a:	d0f6      	beq.n	80837fa <_ZN7FatFile4syncEv+0x1e>
    if (isFile()) {
 808380c:	7823      	ldrb	r3, [r4, #0]
 808380e:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8083810:	bf44      	itt	mi
 8083812:	69e3      	ldrmi	r3, [r4, #28]
 8083814:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8083816:	6a23      	ldr	r3, [r4, #32]
 8083818:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 808381a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 808381c:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
 808381e:	4b09      	ldr	r3, [pc, #36]	; (8083844 <_ZN7FatFile4syncEv+0x68>)
 8083820:	681b      	ldr	r3, [r3, #0]
 8083822:	b12b      	cbz	r3, 8083830 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8083824:	f100 0116 	add.w	r1, r0, #22
 8083828:	3018      	adds	r0, #24
 808382a:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 808382c:	8b2b      	ldrh	r3, [r5, #24]
 808382e:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
 8083830:	78a3      	ldrb	r3, [r4, #2]
 8083832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8083836:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 8083838:	68a0      	ldr	r0, [r4, #8]
 808383a:	f7fe ff79 	bl	8082730 <_ZN9FatVolume9cacheSyncEv>
 808383e:	2800      	cmp	r0, #0
 8083840:	d0db      	beq.n	80837fa <_ZN7FatFile4syncEv+0x1e>
 8083842:	e7cf      	b.n	80837e4 <_ZN7FatFile4syncEv+0x8>
 8083844:	200006f0 	.word	0x200006f0

08083848 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 8083848:	b510      	push	{r4, lr}
 808384a:	4604      	mov	r4, r0
  bool rtn = sync();
 808384c:	f7ff ffc6 	bl	80837dc <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8083850:	2300      	movs	r3, #0
 8083852:	7023      	strb	r3, [r4, #0]
}
 8083854:	bd10      	pop	{r4, pc}

08083856 <_ZN7FatFile4openEPS_PKch>:
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8083856:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083858:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 808385a:	2300      	movs	r3, #0
 808385c:	b093      	sub	sp, #76	; 0x4c
 808385e:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
 8083860:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8083862:	4606      	mov	r6, r0
 8083864:	460c      	mov	r4, r1
 8083866:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 8083868:	b113      	cbz	r3, 8083870 <_ZN7FatFile4openEPS_PKch+0x1a>
  return false;
 808386a:	2000      	movs	r0, #0
}
 808386c:	b013      	add	sp, #76	; 0x4c
 808386e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
 8083870:	780b      	ldrb	r3, [r1, #0]
 8083872:	f013 0f70 	tst.w	r3, #112	; 0x70
 8083876:	d0f8      	beq.n	808386a <_ZN7FatFile4openEPS_PKch+0x14>
  if (isDirSeparator(*path)) {
 8083878:	7813      	ldrb	r3, [r2, #0]
 808387a:	2b2f      	cmp	r3, #47	; 0x2f
 808387c:	d112      	bne.n	80838a4 <_ZN7FatFile4openEPS_PKch+0x4e>
    while (isDirSeparator(*path)) {
 808387e:	9a01      	ldr	r2, [sp, #4]
 8083880:	7813      	ldrb	r3, [r2, #0]
 8083882:	2b2f      	cmp	r3, #47	; 0x2f
 8083884:	d102      	bne.n	808388c <_ZN7FatFile4openEPS_PKch+0x36>
      path++;
 8083886:	3201      	adds	r2, #1
 8083888:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 808388a:	e7f8      	b.n	808387e <_ZN7FatFile4openEPS_PKch+0x28>
      return openRoot(dirFile->m_vol);
 808388c:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
 808388e:	b91b      	cbnz	r3, 8083898 <_ZN7FatFile4openEPS_PKch+0x42>
      return openRoot(dirFile->m_vol);
 8083890:	4630      	mov	r0, r6
 8083892:	f7ff fe34 	bl	80834fe <_ZN7FatFile8openRootEP9FatVolume>
 8083896:	e7e9      	b.n	808386c <_ZN7FatFile4openEPS_PKch+0x16>
    return m_attr;
 8083898:	a809      	add	r0, sp, #36	; 0x24
 808389a:	f7ff fdc3 	bl	8083424 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 808389e:	2800      	cmp	r0, #0
 80838a0:	d0e3      	beq.n	808386a <_ZN7FatFile4openEPS_PKch+0x14>
    dirFile = &tmpDir;
 80838a2:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
 80838a4:	9801      	ldr	r0, [sp, #4]
 80838a6:	aa01      	add	r2, sp, #4
 80838a8:	a903      	add	r1, sp, #12
 80838aa:	f7fe ff5d 	bl	8082768 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 80838ae:	2800      	cmp	r0, #0
 80838b0:	d0db      	beq.n	808386a <_ZN7FatFile4openEPS_PKch+0x14>
    if (*path == 0) {
 80838b2:	9b01      	ldr	r3, [sp, #4]
 80838b4:	781b      	ldrb	r3, [r3, #0]
 80838b6:	b19b      	cbz	r3, 80838e0 <_ZN7FatFile4openEPS_PKch+0x8a>
    if (!open(dirFile, &fname, O_READ)) {
 80838b8:	2301      	movs	r3, #1
 80838ba:	4621      	mov	r1, r4
 80838bc:	4630      	mov	r0, r6
 80838be:	aa03      	add	r2, sp, #12
 80838c0:	f7ff f884 	bl	80829cc <_ZN7FatFile4openEPS_P7fname_th>
 80838c4:	2800      	cmp	r0, #0
 80838c6:	d0d0      	beq.n	808386a <_ZN7FatFile4openEPS_PKch+0x14>
    tmpDir = *this;
 80838c8:	4635      	mov	r5, r6
 80838ca:	ac09      	add	r4, sp, #36	; 0x24
 80838cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80838ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80838d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80838d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80838d4:	682b      	ldr	r3, [r5, #0]
    close();
 80838d6:	4630      	mov	r0, r6
    tmpDir = *this;
 80838d8:	6023      	str	r3, [r4, #0]
    close();
 80838da:	f7ff ffb5 	bl	8083848 <_ZN7FatFile5closeEv>
  while (1) {
 80838de:	e7e0      	b.n	80838a2 <_ZN7FatFile4openEPS_PKch+0x4c>
  return open(dirFile, &fname, oflag);
 80838e0:	463b      	mov	r3, r7
 80838e2:	4621      	mov	r1, r4
 80838e4:	4630      	mov	r0, r6
 80838e6:	aa03      	add	r2, sp, #12
 80838e8:	f7ff f870 	bl	80829cc <_ZN7FatFile4openEPS_P7fname_th>
 80838ec:	e7be      	b.n	808386c <_ZN7FatFile4openEPS_PKch+0x16>
	...

080838f0 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80838f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 80838f4:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
 80838f6:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & O_WRITE)) {
 80838f8:	071d      	lsls	r5, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
 80838fa:	4689      	mov	r9, r1
 80838fc:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & O_WRITE)) {
 80838fe:	d55b      	bpl.n	80839b8 <_ZN7FatFile5writeEPKvj+0xc8>
 8083900:	7883      	ldrb	r3, [r0, #2]
 8083902:	0799      	lsls	r1, r3, #30
 8083904:	d558      	bpl.n	80839b8 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 8083906:	075a      	lsls	r2, r3, #29
 8083908:	d451      	bmi.n	80839ae <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 808390a:	6963      	ldr	r3, [r4, #20]
 808390c:	43db      	mvns	r3, r3
 808390e:	42bb      	cmp	r3, r7
 8083910:	d352      	bcc.n	80839b8 <_ZN7FatFile5writeEPKvj+0xc8>
 8083912:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8083914:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8083918:	6963      	ldr	r3, [r4, #20]
  while (nToWrite) {
 808391a:	f1b8 0f00 	cmp.w	r8, #0
 808391e:	f000 808f 	beq.w	8083a40 <_ZN7FatFile5writeEPKvj+0x150>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8083922:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8083924:	f3c3 0508 	ubfx	r5, r3, #0, #9
    return (position >> 9) & m_clusterBlockMask;
 8083928:	7946      	ldrb	r6, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 808392a:	ea16 2653 	ands.w	r6, r6, r3, lsr #9
 808392e:	d10e      	bne.n	808394e <_ZN7FatFile5writeEPKvj+0x5e>
 8083930:	b96d      	cbnz	r5, 808394e <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
 8083932:	6921      	ldr	r1, [r4, #16]
 8083934:	2900      	cmp	r1, #0
 8083936:	d046      	beq.n	80839c6 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8083938:	4652      	mov	r2, sl
 808393a:	f000 f8fd 	bl	8083b38 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 808393e:	2800      	cmp	r0, #0
 8083940:	db3a      	blt.n	80839b8 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 8083942:	d104      	bne.n	808394e <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
 8083944:	4620      	mov	r0, r4
 8083946:	f7ff fd83 	bl	8083450 <_ZN7FatFile10addClusterEv>
 808394a:	2800      	cmp	r0, #0
 808394c:	d034      	beq.n	80839b8 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 808394e:	6921      	ldr	r1, [r4, #16]
 8083950:	68a0      	ldr	r0, [r4, #8]
 8083952:	f000 f8eb 	bl	8083b2c <_ZNK9FatVolume17clusterStartBlockEm>
 8083956:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8083958:	68a0      	ldr	r0, [r4, #8]
 808395a:	b915      	cbnz	r5, 8083962 <_ZN7FatFile5writeEPKvj+0x72>
 808395c:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 8083960:	d23f      	bcs.n	80839e2 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8083962:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
 8083966:	4546      	cmp	r6, r8
 8083968:	bf28      	it	cs
 808396a:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 808396c:	2d00      	cmp	r5, #0
 808396e:	d136      	bne.n	80839de <_ZN7FatFile5writeEPKvj+0xee>
 8083970:	6962      	ldr	r2, [r4, #20]
 8083972:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8083974:	429a      	cmp	r2, r3
 8083976:	bf34      	ite	cc
 8083978:	2201      	movcc	r2, #1
 808397a:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
 808397c:	3028      	adds	r0, #40	; 0x28
 808397e:	f000 f8b2 	bl	8083ae6 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 8083982:	b1c8      	cbz	r0, 80839b8 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8083984:	4428      	add	r0, r5
 8083986:	4632      	mov	r2, r6
 8083988:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 808398a:	4435      	add	r5, r6
      memcpy(dst, src, n);
 808398c:	f002 fe66 	bl	808665c <memcpy>
      if (512 == (n + blockOffset)) {
 8083990:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8083994:	d104      	bne.n	80839a0 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
 8083996:	68a0      	ldr	r0, [r4, #8]
 8083998:	3028      	adds	r0, #40	; 0x28
 808399a:	f000 f87d 	bl	8083a98 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 808399e:	b158      	cbz	r0, 80839b8 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80839a0:	6963      	ldr	r3, [r4, #20]
    src += n;
 80839a2:	44b1      	add	r9, r6
    m_curPosition += n;
 80839a4:	4433      	add	r3, r6
 80839a6:	6163      	str	r3, [r4, #20]
    nToWrite -= n;
 80839a8:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
 80839ac:	e7b4      	b.n	8083918 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
 80839ae:	69c1      	ldr	r1, [r0, #28]
 80839b0:	f7ff fe79 	bl	80836a6 <_ZN7FatFile7seekSetEm>
 80839b4:	2800      	cmp	r0, #0
 80839b6:	d1a8      	bne.n	808390a <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80839b8:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80839ba:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= WRITE_ERROR;
 80839be:	f043 0301 	orr.w	r3, r3, #1
 80839c2:	7063      	strb	r3, [r4, #1]
  return -1;
 80839c4:	e04d      	b.n	8083a62 <_ZN7FatFile5writeEPKvj+0x172>
        if (m_firstCluster == 0) {
 80839c6:	6a23      	ldr	r3, [r4, #32]
 80839c8:	b93b      	cbnz	r3, 80839da <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
 80839ca:	4620      	mov	r0, r4
 80839cc:	f7ff fd40 	bl	8083450 <_ZN7FatFile10addClusterEv>
 80839d0:	2800      	cmp	r0, #0
 80839d2:	d0f1      	beq.n	80839b8 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
 80839d4:	6923      	ldr	r3, [r4, #16]
 80839d6:	6223      	str	r3, [r4, #32]
 80839d8:	e7b9      	b.n	808394e <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
 80839da:	6123      	str	r3, [r4, #16]
 80839dc:	e7b7      	b.n	808394e <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
 80839de:	2201      	movs	r2, #1
 80839e0:	e7cc      	b.n	808397c <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
 80839e2:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
 80839e6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80839e8:	d319      	bcc.n	8083a1e <_ZN7FatFile5writeEPKvj+0x12e>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 80839ea:	7903      	ldrb	r3, [r0, #4]
      uint8_t nBlock = nToWrite >> 9;
 80839ec:	f3c8 2c47 	ubfx	ip, r8, #9, #8
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 80839f0:	1b9b      	subs	r3, r3, r6
 80839f2:	b2db      	uxtb	r3, r3
 80839f4:	4563      	cmp	r3, ip
 80839f6:	bf28      	it	cs
 80839f8:	4663      	movcs	r3, ip
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80839fa:	4291      	cmp	r1, r2
      n = 512*nBlock;
 80839fc:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8083a00:	d307      	bcc.n	8083a12 <_ZN7FatFile5writeEPKvj+0x122>
 8083a02:	441a      	add	r2, r3
 8083a04:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
 8083a06:	bf82      	ittt	hi
 8083a08:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
 8083a0c:	f880 5028 	strbhi.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8083a10:	6302      	strhi	r2, [r0, #48]	; 0x30
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8083a12:	68a0      	ldr	r0, [r4, #8]
 8083a14:	6802      	ldr	r2, [r0, #0]
 8083a16:	68d5      	ldr	r5, [r2, #12]
 8083a18:	464a      	mov	r2, r9
 8083a1a:	47a8      	blx	r5
 8083a1c:	e7bf      	b.n	808399e <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
 8083a1e:	4291      	cmp	r1, r2
 8083a20:	bf02      	ittt	eq
 8083a22:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
 8083a26:	f880 5028 	strbeq.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8083a2a:	6303      	streq	r3, [r0, #48]	; 0x30
      if (!m_vol->writeBlock(block, src)) {
 8083a2c:	68a0      	ldr	r0, [r4, #8]
 8083a2e:	464a      	mov	r2, r9
 8083a30:	6803      	ldr	r3, [r0, #0]
 8083a32:	685b      	ldr	r3, [r3, #4]
 8083a34:	4798      	blx	r3
 8083a36:	2800      	cmp	r0, #0
 8083a38:	d0be      	beq.n	80839b8 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
 8083a3a:	f44f 7600 	mov.w	r6, #512	; 0x200
 8083a3e:	e7af      	b.n	80839a0 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
 8083a40:	69e1      	ldr	r1, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
 8083a42:	78a2      	ldrb	r2, [r4, #2]
  if (m_curPosition > m_fileSize) {
 8083a44:	4299      	cmp	r1, r3
 8083a46:	d204      	bcs.n	8083a52 <_ZN7FatFile5writeEPKvj+0x162>
    m_fileSize = m_curPosition;
 8083a48:	61e3      	str	r3, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
 8083a4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8083a4e:	70a2      	strb	r2, [r4, #2]
 8083a50:	e003      	b.n	8083a5a <_ZN7FatFile5writeEPKvj+0x16a>
  } else if (m_dateTime) {
 8083a52:	4b08      	ldr	r3, [pc, #32]	; (8083a74 <_ZN7FatFile5writeEPKvj+0x184>)
 8083a54:	681b      	ldr	r3, [r3, #0]
 8083a56:	2b00      	cmp	r3, #0
 8083a58:	d1f7      	bne.n	8083a4a <_ZN7FatFile5writeEPKvj+0x15a>
  if (m_flags & O_SYNC) {
 8083a5a:	78a3      	ldrb	r3, [r4, #2]
 8083a5c:	071b      	lsls	r3, r3, #28
 8083a5e:	d402      	bmi.n	8083a66 <_ZN7FatFile5writeEPKvj+0x176>
  return nbyte;
 8083a60:	4638      	mov	r0, r7
}
 8083a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
 8083a66:	4620      	mov	r0, r4
 8083a68:	f7ff feb8 	bl	80837dc <_ZN7FatFile4syncEv>
 8083a6c:	2800      	cmp	r0, #0
 8083a6e:	d1f7      	bne.n	8083a60 <_ZN7FatFile5writeEPKvj+0x170>
 8083a70:	e7a2      	b.n	80839b8 <_ZN7FatFile5writeEPKvj+0xc8>
 8083a72:	bf00      	nop
 8083a74:	200006f0 	.word	0x200006f0

08083a78 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 8083a78:	b570      	push	{r4, r5, r6, lr}
 8083a7a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8083a7c:	460c      	mov	r4, r1
    }
 8083a7e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8083a80:	b149      	cbz	r1, 8083a96 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8083a82:	f002 fe4a 	bl	808671a <strlen>
 8083a86:	682b      	ldr	r3, [r5, #0]
 8083a88:	4602      	mov	r2, r0
 8083a8a:	4621      	mov	r1, r4
 8083a8c:	4628      	mov	r0, r5
    }
 8083a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8083a92:	68db      	ldr	r3, [r3, #12]
 8083a94:	4718      	bx	r3
    }
 8083a96:	bd70      	pop	{r4, r5, r6, pc}

08083a98 <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8083a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8083a9a:	7803      	ldrb	r3, [r0, #0]
bool FatCache::sync() {
 8083a9c:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8083a9e:	07da      	lsls	r2, r3, #31
 8083aa0:	d51f      	bpl.n	8083ae2 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8083aa2:	6840      	ldr	r0, [r0, #4]
 8083aa4:	f104 060c 	add.w	r6, r4, #12
 8083aa8:	6803      	ldr	r3, [r0, #0]
 8083aaa:	4632      	mov	r2, r6
 8083aac:	685b      	ldr	r3, [r3, #4]
 8083aae:	68a1      	ldr	r1, [r4, #8]
 8083ab0:	4798      	blx	r3
 8083ab2:	4605      	mov	r5, r0
 8083ab4:	b910      	cbnz	r0, 8083abc <_ZN8FatCache4syncEv+0x24>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8083ab6:	2500      	movs	r5, #0
}
 8083ab8:	4628      	mov	r0, r5
 8083aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8083abc:	7823      	ldrb	r3, [r4, #0]
 8083abe:	079b      	lsls	r3, r3, #30
 8083ac0:	d404      	bmi.n	8083acc <_ZN8FatCache4syncEv+0x34>
    m_status &= ~CACHE_STATUS_DIRTY;
 8083ac2:	7823      	ldrb	r3, [r4, #0]
 8083ac4:	f023 0301 	bic.w	r3, r3, #1
 8083ac8:	7023      	strb	r3, [r4, #0]
 8083aca:	e7f5      	b.n	8083ab8 <_ZN8FatCache4syncEv+0x20>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8083acc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8083ad0:	6901      	ldr	r1, [r0, #16]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8083ad2:	6803      	ldr	r3, [r0, #0]
 8083ad4:	4632      	mov	r2, r6
 8083ad6:	685b      	ldr	r3, [r3, #4]
 8083ad8:	4439      	add	r1, r7
 8083ada:	4798      	blx	r3
 8083adc:	2800      	cmp	r0, #0
 8083ade:	d1f0      	bne.n	8083ac2 <_ZN8FatCache4syncEv+0x2a>
 8083ae0:	e7e9      	b.n	8083ab6 <_ZN8FatCache4syncEv+0x1e>
  return true;
 8083ae2:	2501      	movs	r5, #1
 8083ae4:	e7e8      	b.n	8083ab8 <_ZN8FatCache4syncEv+0x20>

08083ae6 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8083ae6:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8083ae8:	6883      	ldr	r3, [r0, #8]
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8083aea:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8083aec:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8083aee:	460e      	mov	r6, r1
 8083af0:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8083af2:	d009      	beq.n	8083b08 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
 8083af4:	f7ff ffd0 	bl	8083a98 <_ZN8FatCache4syncEv>
 8083af8:	b908      	cbnz	r0, 8083afe <_ZN8FatCache4readEmh+0x18>
  return 0;
 8083afa:	2000      	movs	r0, #0
}
 8083afc:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
 8083afe:	076b      	lsls	r3, r5, #29
 8083b00:	d50a      	bpl.n	8083b18 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
 8083b02:	2300      	movs	r3, #0
    m_lbn = lbn;
 8083b04:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 8083b06:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 8083b08:	4620      	mov	r0, r4
 8083b0a:	7822      	ldrb	r2, [r4, #0]
 8083b0c:	f005 0503 	and.w	r5, r5, #3
 8083b10:	4315      	orrs	r5, r2
 8083b12:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
 8083b16:	e7f1      	b.n	8083afc <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8083b18:	6860      	ldr	r0, [r4, #4]
 8083b1a:	4631      	mov	r1, r6
 8083b1c:	6803      	ldr	r3, [r0, #0]
 8083b1e:	f104 020c 	add.w	r2, r4, #12
 8083b22:	681b      	ldr	r3, [r3, #0]
 8083b24:	4798      	blx	r3
 8083b26:	2800      	cmp	r0, #0
 8083b28:	d1eb      	bne.n	8083b02 <_ZN8FatCache4readEmh+0x1c>
 8083b2a:	e7e6      	b.n	8083afa <_ZN8FatCache4readEmh+0x14>

08083b2c <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8083b2c:	7983      	ldrb	r3, [r0, #6]
 8083b2e:	3902      	subs	r1, #2
 8083b30:	6940      	ldr	r0, [r0, #20]
 8083b32:	4099      	lsls	r1, r3
}
 8083b34:	4408      	add	r0, r1
 8083b36:	4770      	bx	lr

08083b38 <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8083b38:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8083b3a:	79c3      	ldrb	r3, [r0, #7]
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8083b3c:	4605      	mov	r5, r0
  if (m_fatType == 32) {
 8083b3e:	2b20      	cmp	r3, #32
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8083b40:	460c      	mov	r4, r1
 8083b42:	4616      	mov	r6, r2
  if (m_fatType == 32) {
 8083b44:	d118      	bne.n	8083b78 <_ZN9FatVolume6fatGetEmPm+0x40>
    lba = m_fatStartBlock + (cluster >> 7);
 8083b46:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
 8083b48:	2202      	movs	r2, #2
 8083b4a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8083b4e:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8083b52:	f7ff ffc8 	bl	8083ae6 <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8083b56:	b910      	cbnz	r0, 8083b5e <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8083b58:	f04f 30ff 	mov.w	r0, #4294967295
}
 8083b5c:	bd70      	pop	{r4, r5, r6, pc}
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8083b5e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8083b62:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8083b66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
 8083b6a:	69ea      	ldr	r2, [r5, #28]
 8083b6c:	4293      	cmp	r3, r2
  return 1;
 8083b6e:	bf96      	itet	ls
 8083b70:	2001      	movls	r0, #1
    return 0;
 8083b72:	2000      	movhi	r0, #0
  *value = next;
 8083b74:	6033      	strls	r3, [r6, #0]
  return 1;
 8083b76:	e7f1      	b.n	8083b5c <_ZN9FatVolume6fatGetEmPm+0x24>
  if (m_fatType == 16) {
 8083b78:	2b10      	cmp	r3, #16
 8083b7a:	d1ed      	bne.n	8083b58 <_ZN9FatVolume6fatGetEmPm+0x20>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 8083b7c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8083b80:	6981      	ldr	r1, [r0, #24]
 8083b82:	2202      	movs	r2, #2
 8083b84:	4419      	add	r1, r3
 8083b86:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8083b8a:	f7ff ffac 	bl	8083ae6 <_ZN8FatCache4readEmh>
    if (!pc) {
 8083b8e:	2800      	cmp	r0, #0
 8083b90:	d0e2      	beq.n	8083b58 <_ZN9FatVolume6fatGetEmPm+0x20>
    next = pc->fat16[cluster & 0XFF];
 8083b92:	b2e4      	uxtb	r4, r4
 8083b94:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
 8083b98:	e7e7      	b.n	8083b6a <_ZN9FatVolume6fatGetEmPm+0x32>

08083b9a <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8083b9a:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8083b9c:	79c3      	ldrb	r3, [r0, #7]
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8083b9e:	460c      	mov	r4, r1
  if (m_fatType == 32) {
 8083ba0:	2b20      	cmp	r3, #32
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8083ba2:	4615      	mov	r5, r2
  if (m_fatType == 32) {
 8083ba4:	d110      	bne.n	8083bc8 <_ZN9FatVolume6fatPutEmm+0x2e>
    lba = m_fatStartBlock + (cluster >> 7);
 8083ba6:	6981      	ldr	r1, [r0, #24]
 8083ba8:	2203      	movs	r2, #3
 8083baa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8083bae:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8083bb2:	f7ff ff98 	bl	8083ae6 <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8083bb6:	b908      	cbnz	r0, 8083bbc <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8083bb8:	2000      	movs	r0, #0
}
 8083bba:	bd38      	pop	{r3, r4, r5, pc}
    pc->fat32[cluster & 0X7F] = value;
 8083bbc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8083bc0:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
 8083bc4:	2001      	movs	r0, #1
 8083bc6:	e7f8      	b.n	8083bba <_ZN9FatVolume6fatPutEmm+0x20>
  if (m_fatType == 16) {
 8083bc8:	2b10      	cmp	r3, #16
 8083bca:	d1f5      	bne.n	8083bb8 <_ZN9FatVolume6fatPutEmm+0x1e>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 8083bcc:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8083bd0:	6981      	ldr	r1, [r0, #24]
 8083bd2:	2203      	movs	r2, #3
 8083bd4:	4419      	add	r1, r3
 8083bd6:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8083bda:	f7ff ff84 	bl	8083ae6 <_ZN8FatCache4readEmh>
    if (!pc) {
 8083bde:	2800      	cmp	r0, #0
 8083be0:	d0ea      	beq.n	8083bb8 <_ZN9FatVolume6fatPutEmm+0x1e>
    pc->fat16[cluster & 0XFF] = value;
 8083be2:	b2e4      	uxtb	r4, r4
 8083be4:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
 8083be8:	e7ec      	b.n	8083bc4 <_ZN9FatVolume6fatPutEmm+0x2a>

08083bea <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8083bea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8083bee:	4605      	mov	r5, r0
 8083bf0:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 8083bf2:	460f      	mov	r7, r1
 8083bf4:	b9b9      	cbnz	r1, 8083c26 <_ZN9FatVolume15allocateClusterEmPm+0x3c>
 8083bf6:	68c6      	ldr	r6, [r0, #12]
 8083bf8:	4634      	mov	r4, r6
    if (find > m_lastCluster) {
 8083bfa:	69eb      	ldr	r3, [r5, #28]
    find++;
 8083bfc:	3401      	adds	r4, #1
      find = 2;
 8083bfe:	42a3      	cmp	r3, r4
 8083c00:	bf38      	it	cc
 8083c02:	2402      	movcc	r4, #2
    int8_t fg = fatGet(find, &f);
 8083c04:	4628      	mov	r0, r5
 8083c06:	4621      	mov	r1, r4
 8083c08:	aa01      	add	r2, sp, #4
 8083c0a:	f7ff ff95 	bl	8083b38 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8083c0e:	2800      	cmp	r0, #0
 8083c10:	db04      	blt.n	8083c1c <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (fg && f == 0) {
 8083c12:	d001      	beq.n	8083c18 <_ZN9FatVolume15allocateClusterEmPm+0x2e>
 8083c14:	9b01      	ldr	r3, [sp, #4]
 8083c16:	b143      	cbz	r3, 8083c2a <_ZN9FatVolume15allocateClusterEmPm+0x40>
    if (find == start) {
 8083c18:	42b4      	cmp	r4, r6
 8083c1a:	d1ee      	bne.n	8083bfa <_ZN9FatVolume15allocateClusterEmPm+0x10>
  return false;
 8083c1c:	2600      	movs	r6, #0
}
 8083c1e:	4630      	mov	r0, r6
 8083c20:	b002      	add	sp, #8
 8083c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083c26:	460e      	mov	r6, r1
 8083c28:	e7e6      	b.n	8083bf8 <_ZN9FatVolume15allocateClusterEmPm+0xe>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8083c2a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8083c2e:	4621      	mov	r1, r4
 8083c30:	4628      	mov	r0, r5
 8083c32:	f7ff ffb2 	bl	8083b9a <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
 8083c36:	4606      	mov	r6, r0
 8083c38:	2800      	cmp	r0, #0
 8083c3a:	d0ef      	beq.n	8083c1c <_ZN9FatVolume15allocateClusterEmPm+0x32>
  if (current) {
 8083c3c:	b17f      	cbz	r7, 8083c5e <_ZN9FatVolume15allocateClusterEmPm+0x74>
    if (!fatPut(current, find)) {
 8083c3e:	4622      	mov	r2, r4
 8083c40:	4639      	mov	r1, r7
 8083c42:	4628      	mov	r0, r5
 8083c44:	f7ff ffa9 	bl	8083b9a <_ZN9FatVolume6fatPutEmm>
 8083c48:	2800      	cmp	r0, #0
 8083c4a:	d0e7      	beq.n	8083c1c <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (m_freeClusterCount >= 0) {
 8083c4c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8083c4e:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8083c50:	bfa4      	itt	ge
 8083c52:	f103 33ff 	addge.w	r3, r3, #4294967295
 8083c56:	626b      	strge	r3, [r5, #36]	; 0x24
  *next = find;
 8083c58:	f8c8 4000 	str.w	r4, [r8]
  return true;
 8083c5c:	e7df      	b.n	8083c1e <_ZN9FatVolume15allocateClusterEmPm+0x34>
    m_allocSearchStart = find;
 8083c5e:	60ec      	str	r4, [r5, #12]
 8083c60:	e7f4      	b.n	8083c4c <_ZN9FatVolume15allocateClusterEmPm+0x62>

08083c62 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8083c62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8083c64:	4604      	mov	r4, r0
 8083c66:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8083c68:	4629      	mov	r1, r5
 8083c6a:	4620      	mov	r0, r4
 8083c6c:	aa01      	add	r2, sp, #4
 8083c6e:	f7ff ff63 	bl	8083b38 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8083c72:	1e06      	subs	r6, r0, #0
 8083c74:	db13      	blt.n	8083c9e <_ZN9FatVolume9freeChainEm+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8083c76:	2200      	movs	r2, #0
 8083c78:	4629      	mov	r1, r5
 8083c7a:	4620      	mov	r0, r4
 8083c7c:	f7ff ff8d 	bl	8083b9a <_ZN9FatVolume6fatPutEmm>
 8083c80:	b168      	cbz	r0, 8083c9e <_ZN9FatVolume9freeChainEm+0x3c>
    if (m_freeClusterCount >= 0) {
 8083c82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8083c84:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8083c86:	bfa4      	itt	ge
 8083c88:	3301      	addge	r3, #1
 8083c8a:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 8083c8c:	68e3      	ldr	r3, [r4, #12]
 8083c8e:	42ab      	cmp	r3, r5
      m_allocSearchStart = cluster;
 8083c90:	bf88      	it	hi
 8083c92:	60e5      	strhi	r5, [r4, #12]
    }
    cluster = next;
 8083c94:	9d01      	ldr	r5, [sp, #4]
  } while (fg);
 8083c96:	2e00      	cmp	r6, #0
 8083c98:	d1e6      	bne.n	8083c68 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8083c9a:	b002      	add	sp, #8
 8083c9c:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8083c9e:	2000      	movs	r0, #0
 8083ca0:	e7fb      	b.n	8083c9a <_ZN9FatVolume9freeChainEm+0x38>

08083ca2 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8083ca2:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
 8083ca4:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
 8083ca6:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8083ca8:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
 8083caa:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
 8083cae:	4604      	mov	r4, r0
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8083cb0:	460d      	mov	r5, r1
  m_fatType = 0;
 8083cb2:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
 8083cb4:	f100 0628 	add.w	r6, r0, #40	; 0x28
    m_vol = vol;
 8083cb8:	62c0      	str	r0, [r0, #44]	; 0x2c
    m_status = 0;
 8083cba:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8083cbe:	6303      	str	r3, [r0, #48]	; 0x30
    m_vol = vol;
 8083cc0:	f8c0 0238 	str.w	r0, [r0, #568]	; 0x238
    m_status = 0;
 8083cc4:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 8083cc8:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
  if (part) {
 8083ccc:	b1b9      	cbz	r1, 8083cfe <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
 8083cce:	2904      	cmp	r1, #4
 8083cd0:	d901      	bls.n	8083cd6 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8083cd2:	2000      	movs	r0, #0
}
 8083cd4:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
 8083cd6:	4611      	mov	r1, r2
 8083cd8:	4630      	mov	r0, r6
 8083cda:	f7ff ff04 	bl	8083ae6 <_ZN8FatCache4readEmh>
    if (!pc) {
 8083cde:	2800      	cmp	r0, #0
 8083ce0:	d0f7      	beq.n	8083cd2 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8083ce2:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8083ce6:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8083cea:	065b      	lsls	r3, r3, #25
 8083cec:	d1f1      	bne.n	8083cd2 <_ZN9FatVolume4initEh+0x30>
 8083cee:	f105 011b 	add.w	r1, r5, #27
 8083cf2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8083cf6:	f8d0 5006 	ldr.w	r5, [r0, #6]
 8083cfa:	2d00      	cmp	r5, #0
 8083cfc:	d0e9      	beq.n	8083cd2 <_ZN9FatVolume4initEh+0x30>
 8083cfe:	2200      	movs	r2, #0
 8083d00:	4629      	mov	r1, r5
 8083d02:	4630      	mov	r0, r6
 8083d04:	f7ff feef 	bl	8083ae6 <_ZN8FatCache4readEmh>
  if (!pc) {
 8083d08:	2800      	cmp	r0, #0
 8083d0a:	d0e2      	beq.n	8083cd2 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
 8083d0c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8083d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8083d14:	d1dd      	bne.n	8083cd2 <_ZN9FatVolume4initEh+0x30>
 8083d16:	7c03      	ldrb	r3, [r0, #16]
 8083d18:	2b02      	cmp	r3, #2
 8083d1a:	d1da      	bne.n	8083cd2 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
 8083d1c:	89c3      	ldrh	r3, [r0, #14]
 8083d1e:	2b00      	cmp	r3, #0
 8083d20:	d0d7      	beq.n	8083cd2 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8083d22:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSizeShift = 0;
 8083d24:	2609      	movs	r6, #9
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8083d26:	1e4b      	subs	r3, r1, #1
 8083d28:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
 8083d2a:	2300      	movs	r3, #0
 8083d2c:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8083d2e:	2301      	movs	r3, #1
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8083d30:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8083d32:	4299      	cmp	r1, r3
 8083d34:	d007      	beq.n	8083d46 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
 8083d36:	3e01      	subs	r6, #1
 8083d38:	d0cb      	beq.n	8083cd2 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8083d3a:	79a2      	ldrb	r2, [r4, #6]
 8083d3c:	005b      	lsls	r3, r3, #1
 8083d3e:	3201      	adds	r2, #1
 8083d40:	b2db      	uxtb	r3, r3
 8083d42:	71a2      	strb	r2, [r4, #6]
 8083d44:	e7f5      	b.n	8083d32 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8083d46:	8ac1      	ldrh	r1, [r0, #22]
 8083d48:	b901      	cbnz	r1, 8083d4c <_ZN9FatVolume4initEh+0xaa>
 8083d4a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8083d4c:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8083d4e:	89c3      	ldrh	r3, [r0, #14]
 8083d50:	442b      	add	r3, r5
 8083d52:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8083d54:	f8b0 2011 	ldrh.w	r2, [r0, #17]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8083d58:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8083d5c:	6223      	str	r3, [r4, #32]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8083d5e:	8122      	strh	r2, [r4, #8]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8083d60:	f8b0 1011 	ldrh.w	r1, [r0, #17]
 8083d64:	0149      	lsls	r1, r1, #5
 8083d66:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8083d6a:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 8083d6e:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
 8083d70:	f8b0 2013 	ldrh.w	r2, [r0, #19]
 8083d74:	b902      	cbnz	r2, 8083d78 <_ZN9FatVolume4initEh+0xd6>
 8083d76:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8083d78:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
 8083d7a:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8083d7c:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
 8083d7e:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
 8083d80:	1c4b      	adds	r3, r1, #1
 8083d82:	61e3      	str	r3, [r4, #28]
    m_freeClusterCount = value;
 8083d84:	f04f 33ff 	mov.w	r3, #4294967295
 8083d88:	6263      	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
 8083d8a:	f640 73f4 	movw	r3, #4084	; 0xff4
 8083d8e:	4299      	cmp	r1, r3
 8083d90:	d802      	bhi.n	8083d98 <_ZN9FatVolume4initEh+0xf6>
    m_fatType = 12;
 8083d92:	230c      	movs	r3, #12
 8083d94:	71e3      	strb	r3, [r4, #7]
 8083d96:	e79c      	b.n	8083cd2 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
 8083d98:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8083d9c:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
 8083d9e:	bf89      	itett	hi
 8083da0:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 8083da2:	2310      	movls	r3, #16
    m_rootDirStart = fbs->fat32RootCluster;
 8083da4:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8083da6:	2320      	movhi	r3, #32
  return true;
 8083da8:	2001      	movs	r0, #1
    m_fatType = 32;
 8083daa:	71e3      	strb	r3, [r4, #7]
 8083dac:	e792      	b.n	8083cd4 <_ZN9FatVolume4initEh+0x32>
	...

08083db0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8083db0:	b508      	push	{r3, lr}
 8083db2:	4b02      	ldr	r3, [pc, #8]	; (8083dbc <HAL_Pin_Mode+0xc>)
 8083db4:	681b      	ldr	r3, [r3, #0]
 8083db6:	689b      	ldr	r3, [r3, #8]
 8083db8:	9301      	str	r3, [sp, #4]
 8083dba:	bd08      	pop	{r3, pc}
 8083dbc:	080401b0 	.word	0x080401b0

08083dc0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8083dc0:	b508      	push	{r3, lr}
 8083dc2:	4b02      	ldr	r3, [pc, #8]	; (8083dcc <HAL_Get_Pin_Mode+0xc>)
 8083dc4:	681b      	ldr	r3, [r3, #0]
 8083dc6:	68db      	ldr	r3, [r3, #12]
 8083dc8:	9301      	str	r3, [sp, #4]
 8083dca:	bd08      	pop	{r3, pc}
 8083dcc:	080401b0 	.word	0x080401b0

08083dd0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8083dd0:	b508      	push	{r3, lr}
 8083dd2:	4b02      	ldr	r3, [pc, #8]	; (8083ddc <HAL_GPIO_Write+0xc>)
 8083dd4:	681b      	ldr	r3, [r3, #0]
 8083dd6:	691b      	ldr	r3, [r3, #16]
 8083dd8:	9301      	str	r3, [sp, #4]
 8083dda:	bd08      	pop	{r3, pc}
 8083ddc:	080401b0 	.word	0x080401b0

08083de0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8083de0:	b508      	push	{r3, lr}
 8083de2:	4b02      	ldr	r3, [pc, #8]	; (8083dec <HAL_RNG_GetRandomNumber+0xc>)
 8083de4:	681b      	ldr	r3, [r3, #0]
 8083de6:	685b      	ldr	r3, [r3, #4]
 8083de8:	9301      	str	r3, [sp, #4]
 8083dea:	bd08      	pop	{r3, pc}
 8083dec:	0804019c 	.word	0x0804019c

08083df0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8083df0:	b508      	push	{r3, lr}
 8083df2:	4b02      	ldr	r3, [pc, #8]	; (8083dfc <HAL_Delay_Microseconds+0xc>)
 8083df4:	681b      	ldr	r3, [r3, #0]
 8083df6:	68db      	ldr	r3, [r3, #12]
 8083df8:	9301      	str	r3, [sp, #4]
 8083dfa:	bd08      	pop	{r3, pc}
 8083dfc:	0804019c 	.word	0x0804019c

08083e00 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8083e00:	b508      	push	{r3, lr}
 8083e02:	4b02      	ldr	r3, [pc, #8]	; (8083e0c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8083e04:	681b      	ldr	r3, [r3, #0]
 8083e06:	695b      	ldr	r3, [r3, #20]
 8083e08:	9301      	str	r3, [sp, #4]
 8083e0a:	bd08      	pop	{r3, pc}
 8083e0c:	0804019c 	.word	0x0804019c

08083e10 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 8083e10:	b508      	push	{r3, lr}
 8083e12:	4b02      	ldr	r3, [pc, #8]	; (8083e1c <os_thread_yield+0xc>)
 8083e14:	681b      	ldr	r3, [r3, #0]
 8083e16:	68db      	ldr	r3, [r3, #12]
 8083e18:	9301      	str	r3, [sp, #4]
 8083e1a:	bd08      	pop	{r3, pc}
 8083e1c:	080401d0 	.word	0x080401d0

08083e20 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8083e20:	b508      	push	{r3, lr}
 8083e22:	4b02      	ldr	r3, [pc, #8]	; (8083e2c <os_mutex_recursive_create+0xc>)
 8083e24:	681b      	ldr	r3, [r3, #0]
 8083e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8083e28:	9301      	str	r3, [sp, #4]
 8083e2a:	bd08      	pop	{r3, pc}
 8083e2c:	080401d0 	.word	0x080401d0

08083e30 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8083e30:	b508      	push	{r3, lr}
 8083e32:	4b02      	ldr	r3, [pc, #8]	; (8083e3c <os_mutex_recursive_destroy+0xc>)
 8083e34:	681b      	ldr	r3, [r3, #0]
 8083e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8083e38:	9301      	str	r3, [sp, #4]
 8083e3a:	bd08      	pop	{r3, pc}
 8083e3c:	080401d0 	.word	0x080401d0

08083e40 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8083e40:	b508      	push	{r3, lr}
 8083e42:	4b02      	ldr	r3, [pc, #8]	; (8083e4c <os_mutex_recursive_lock+0xc>)
 8083e44:	681b      	ldr	r3, [r3, #0]
 8083e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8083e48:	9301      	str	r3, [sp, #4]
 8083e4a:	bd08      	pop	{r3, pc}
 8083e4c:	080401d0 	.word	0x080401d0

08083e50 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8083e50:	b508      	push	{r3, lr}
 8083e52:	4b02      	ldr	r3, [pc, #8]	; (8083e5c <os_mutex_recursive_unlock+0xc>)
 8083e54:	681b      	ldr	r3, [r3, #0]
 8083e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8083e58:	9301      	str	r3, [sp, #4]
 8083e5a:	bd08      	pop	{r3, pc}
 8083e5c:	080401d0 	.word	0x080401d0

08083e60 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8083e60:	b508      	push	{r3, lr}
 8083e62:	4b02      	ldr	r3, [pc, #8]	; (8083e6c <hal_usart_write+0xc>)
 8083e64:	681b      	ldr	r3, [r3, #0]
 8083e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8083e68:	9301      	str	r3, [sp, #4]
 8083e6a:	bd08      	pop	{r3, pc}
 8083e6c:	080401c4 	.word	0x080401c4

08083e70 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8083e70:	b508      	push	{r3, lr}
 8083e72:	4b02      	ldr	r3, [pc, #8]	; (8083e7c <hal_usart_available+0xc>)
 8083e74:	681b      	ldr	r3, [r3, #0]
 8083e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8083e78:	9301      	str	r3, [sp, #4]
 8083e7a:	bd08      	pop	{r3, pc}
 8083e7c:	080401c4 	.word	0x080401c4

08083e80 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8083e80:	b508      	push	{r3, lr}
 8083e82:	4b02      	ldr	r3, [pc, #8]	; (8083e8c <hal_usart_read+0xc>)
 8083e84:	681b      	ldr	r3, [r3, #0]
 8083e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8083e88:	9301      	str	r3, [sp, #4]
 8083e8a:	bd08      	pop	{r3, pc}
 8083e8c:	080401c4 	.word	0x080401c4

08083e90 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8083e90:	b508      	push	{r3, lr}
 8083e92:	4b02      	ldr	r3, [pc, #8]	; (8083e9c <hal_usart_peek+0xc>)
 8083e94:	681b      	ldr	r3, [r3, #0]
 8083e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083e98:	9301      	str	r3, [sp, #4]
 8083e9a:	bd08      	pop	{r3, pc}
 8083e9c:	080401c4 	.word	0x080401c4

08083ea0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8083ea0:	b508      	push	{r3, lr}
 8083ea2:	4b02      	ldr	r3, [pc, #8]	; (8083eac <hal_usart_flush+0xc>)
 8083ea4:	681b      	ldr	r3, [r3, #0]
 8083ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8083ea8:	9301      	str	r3, [sp, #4]
 8083eaa:	bd08      	pop	{r3, pc}
 8083eac:	080401c4 	.word	0x080401c4

08083eb0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8083eb0:	b508      	push	{r3, lr}
 8083eb2:	4b02      	ldr	r3, [pc, #8]	; (8083ebc <hal_usart_is_enabled+0xc>)
 8083eb4:	681b      	ldr	r3, [r3, #0]
 8083eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8083eb8:	9301      	str	r3, [sp, #4]
 8083eba:	bd08      	pop	{r3, pc}
 8083ebc:	080401c4 	.word	0x080401c4

08083ec0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8083ec0:	b508      	push	{r3, lr}
 8083ec2:	4b02      	ldr	r3, [pc, #8]	; (8083ecc <hal_usart_available_data_for_write+0xc>)
 8083ec4:	681b      	ldr	r3, [r3, #0]
 8083ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8083ec8:	9301      	str	r3, [sp, #4]
 8083eca:	bd08      	pop	{r3, pc}
 8083ecc:	080401c4 	.word	0x080401c4

08083ed0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 8083ed0:	b508      	push	{r3, lr}
 8083ed2:	4b02      	ldr	r3, [pc, #8]	; (8083edc <hal_usart_init_ex+0xc>)
 8083ed4:	681b      	ldr	r3, [r3, #0]
 8083ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8083ed8:	9301      	str	r3, [sp, #4]
 8083eda:	bd08      	pop	{r3, pc}
 8083edc:	080401c4 	.word	0x080401c4

08083ee0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 8083ee0:	b508      	push	{r3, lr}
 8083ee2:	4b02      	ldr	r3, [pc, #8]	; (8083eec <hal_i2c_begin+0xc>)
 8083ee4:	681b      	ldr	r3, [r3, #0]
 8083ee6:	68db      	ldr	r3, [r3, #12]
 8083ee8:	9301      	str	r3, [sp, #4]
 8083eea:	bd08      	pop	{r3, pc}
 8083eec:	080401ac 	.word	0x080401ac

08083ef0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 8083ef0:	b508      	push	{r3, lr}
 8083ef2:	4b02      	ldr	r3, [pc, #8]	; (8083efc <hal_i2c_begin_transmission+0xc>)
 8083ef4:	681b      	ldr	r3, [r3, #0]
 8083ef6:	699b      	ldr	r3, [r3, #24]
 8083ef8:	9301      	str	r3, [sp, #4]
 8083efa:	bd08      	pop	{r3, pc}
 8083efc:	080401ac 	.word	0x080401ac

08083f00 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 8083f00:	b508      	push	{r3, lr}
 8083f02:	4b02      	ldr	r3, [pc, #8]	; (8083f0c <hal_i2c_end_transmission+0xc>)
 8083f04:	681b      	ldr	r3, [r3, #0]
 8083f06:	69db      	ldr	r3, [r3, #28]
 8083f08:	9301      	str	r3, [sp, #4]
 8083f0a:	bd08      	pop	{r3, pc}
 8083f0c:	080401ac 	.word	0x080401ac

08083f10 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8083f10:	b508      	push	{r3, lr}
 8083f12:	4b02      	ldr	r3, [pc, #8]	; (8083f1c <hal_i2c_write+0xc>)
 8083f14:	681b      	ldr	r3, [r3, #0]
 8083f16:	6a1b      	ldr	r3, [r3, #32]
 8083f18:	9301      	str	r3, [sp, #4]
 8083f1a:	bd08      	pop	{r3, pc}
 8083f1c:	080401ac 	.word	0x080401ac

08083f20 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8083f20:	b508      	push	{r3, lr}
 8083f22:	4b02      	ldr	r3, [pc, #8]	; (8083f2c <hal_i2c_available+0xc>)
 8083f24:	681b      	ldr	r3, [r3, #0]
 8083f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8083f28:	9301      	str	r3, [sp, #4]
 8083f2a:	bd08      	pop	{r3, pc}
 8083f2c:	080401ac 	.word	0x080401ac

08083f30 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8083f30:	b508      	push	{r3, lr}
 8083f32:	4b02      	ldr	r3, [pc, #8]	; (8083f3c <hal_i2c_read+0xc>)
 8083f34:	681b      	ldr	r3, [r3, #0]
 8083f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8083f38:	9301      	str	r3, [sp, #4]
 8083f3a:	bd08      	pop	{r3, pc}
 8083f3c:	080401ac 	.word	0x080401ac

08083f40 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8083f40:	b508      	push	{r3, lr}
 8083f42:	4b02      	ldr	r3, [pc, #8]	; (8083f4c <hal_i2c_peek+0xc>)
 8083f44:	681b      	ldr	r3, [r3, #0]
 8083f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8083f48:	9301      	str	r3, [sp, #4]
 8083f4a:	bd08      	pop	{r3, pc}
 8083f4c:	080401ac 	.word	0x080401ac

08083f50 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8083f50:	b508      	push	{r3, lr}
 8083f52:	4b02      	ldr	r3, [pc, #8]	; (8083f5c <hal_i2c_flush+0xc>)
 8083f54:	681b      	ldr	r3, [r3, #0]
 8083f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083f58:	9301      	str	r3, [sp, #4]
 8083f5a:	bd08      	pop	{r3, pc}
 8083f5c:	080401ac 	.word	0x080401ac

08083f60 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8083f60:	b508      	push	{r3, lr}
 8083f62:	4b02      	ldr	r3, [pc, #8]	; (8083f6c <hal_i2c_is_enabled+0xc>)
 8083f64:	681b      	ldr	r3, [r3, #0]
 8083f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8083f68:	9301      	str	r3, [sp, #4]
 8083f6a:	bd08      	pop	{r3, pc}
 8083f6c:	080401ac 	.word	0x080401ac

08083f70 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8083f70:	b508      	push	{r3, lr}
 8083f72:	4b02      	ldr	r3, [pc, #8]	; (8083f7c <hal_i2c_init+0xc>)
 8083f74:	681b      	ldr	r3, [r3, #0]
 8083f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8083f78:	9301      	str	r3, [sp, #4]
 8083f7a:	bd08      	pop	{r3, pc}
 8083f7c:	080401ac 	.word	0x080401ac

08083f80 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8083f80:	b508      	push	{r3, lr}
 8083f82:	4b02      	ldr	r3, [pc, #8]	; (8083f8c <hal_i2c_request_ex+0xc>)
 8083f84:	681b      	ldr	r3, [r3, #0]
 8083f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8083f88:	9301      	str	r3, [sp, #4]
 8083f8a:	bd08      	pop	{r3, pc}
 8083f8c:	080401ac 	.word	0x080401ac

08083f90 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 8083f90:	b508      	push	{r3, lr}
 8083f92:	4b02      	ldr	r3, [pc, #8]	; (8083f9c <hal_spi_begin+0xc>)
 8083f94:	681b      	ldr	r3, [r3, #0]
 8083f96:	681b      	ldr	r3, [r3, #0]
 8083f98:	9301      	str	r3, [sp, #4]
 8083f9a:	bd08      	pop	{r3, pc}
 8083f9c:	080401b4 	.word	0x080401b4

08083fa0 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 8083fa0:	b508      	push	{r3, lr}
 8083fa2:	4b02      	ldr	r3, [pc, #8]	; (8083fac <hal_spi_set_bit_order+0xc>)
 8083fa4:	681b      	ldr	r3, [r3, #0]
 8083fa6:	689b      	ldr	r3, [r3, #8]
 8083fa8:	9301      	str	r3, [sp, #4]
 8083faa:	bd08      	pop	{r3, pc}
 8083fac:	080401b4 	.word	0x080401b4

08083fb0 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 8083fb0:	b508      	push	{r3, lr}
 8083fb2:	4b02      	ldr	r3, [pc, #8]	; (8083fbc <hal_spi_set_data_mode+0xc>)
 8083fb4:	681b      	ldr	r3, [r3, #0]
 8083fb6:	68db      	ldr	r3, [r3, #12]
 8083fb8:	9301      	str	r3, [sp, #4]
 8083fba:	bd08      	pop	{r3, pc}
 8083fbc:	080401b4 	.word	0x080401b4

08083fc0 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 8083fc0:	b508      	push	{r3, lr}
 8083fc2:	4b02      	ldr	r3, [pc, #8]	; (8083fcc <hal_spi_set_clock_divider+0xc>)
 8083fc4:	681b      	ldr	r3, [r3, #0]
 8083fc6:	691b      	ldr	r3, [r3, #16]
 8083fc8:	9301      	str	r3, [sp, #4]
 8083fca:	bd08      	pop	{r3, pc}
 8083fcc:	080401b4 	.word	0x080401b4

08083fd0 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 8083fd0:	b508      	push	{r3, lr}
 8083fd2:	4b02      	ldr	r3, [pc, #8]	; (8083fdc <hal_spi_transfer+0xc>)
 8083fd4:	681b      	ldr	r3, [r3, #0]
 8083fd6:	695b      	ldr	r3, [r3, #20]
 8083fd8:	9301      	str	r3, [sp, #4]
 8083fda:	bd08      	pop	{r3, pc}
 8083fdc:	080401b4 	.word	0x080401b4

08083fe0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8083fe0:	b508      	push	{r3, lr}
 8083fe2:	4b02      	ldr	r3, [pc, #8]	; (8083fec <hal_spi_init+0xc>)
 8083fe4:	681b      	ldr	r3, [r3, #0]
 8083fe6:	69db      	ldr	r3, [r3, #28]
 8083fe8:	9301      	str	r3, [sp, #4]
 8083fea:	bd08      	pop	{r3, pc}
 8083fec:	080401b4 	.word	0x080401b4

08083ff0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8083ff0:	b508      	push	{r3, lr}
 8083ff2:	4b02      	ldr	r3, [pc, #8]	; (8083ffc <hal_spi_is_enabled+0xc>)
 8083ff4:	681b      	ldr	r3, [r3, #0]
 8083ff6:	6a1b      	ldr	r3, [r3, #32]
 8083ff8:	9301      	str	r3, [sp, #4]
 8083ffa:	bd08      	pop	{r3, pc}
 8083ffc:	080401b4 	.word	0x080401b4

08084000 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 8084000:	b508      	push	{r3, lr}
 8084002:	4b02      	ldr	r3, [pc, #8]	; (808400c <hal_spi_info+0xc>)
 8084004:	681b      	ldr	r3, [r3, #0]
 8084006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084008:	9301      	str	r3, [sp, #4]
 808400a:	bd08      	pop	{r3, pc}
 808400c:	080401b4 	.word	0x080401b4

08084010 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 8084010:	b508      	push	{r3, lr}
 8084012:	4b02      	ldr	r3, [pc, #8]	; (808401c <hal_spi_transfer_dma+0xc>)
 8084014:	681b      	ldr	r3, [r3, #0]
 8084016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084018:	9301      	str	r3, [sp, #4]
 808401a:	bd08      	pop	{r3, pc}
 808401c:	080401b4 	.word	0x080401b4

08084020 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 8084020:	b508      	push	{r3, lr}
 8084022:	4b02      	ldr	r3, [pc, #8]	; (808402c <hal_spi_transfer_dma_status+0xc>)
 8084024:	681b      	ldr	r3, [r3, #0]
 8084026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084028:	9301      	str	r3, [sp, #4]
 808402a:	bd08      	pop	{r3, pc}
 808402c:	080401b4 	.word	0x080401b4

08084030 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 8084030:	b508      	push	{r3, lr}
 8084032:	4b02      	ldr	r3, [pc, #8]	; (808403c <hal_spi_set_settings+0xc>)
 8084034:	681b      	ldr	r3, [r3, #0]
 8084036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8084038:	9301      	str	r3, [sp, #4]
 808403a:	bd08      	pop	{r3, pc}
 808403c:	080401b4 	.word	0x080401b4

08084040 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8084040:	b508      	push	{r3, lr}
 8084042:	4b02      	ldr	r3, [pc, #8]	; (808404c <inet_gethostbyname+0xc>)
 8084044:	681b      	ldr	r3, [r3, #0]
 8084046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8084048:	9301      	str	r3, [sp, #4]
 808404a:	bd08      	pop	{r3, pc}
 808404c:	08060020 	.word	0x08060020

08084050 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8084050:	b508      	push	{r3, lr}
 8084052:	4b02      	ldr	r3, [pc, #8]	; (808405c <HAL_USB_USART_Init+0xc>)
 8084054:	681b      	ldr	r3, [r3, #0]
 8084056:	681b      	ldr	r3, [r3, #0]
 8084058:	9301      	str	r3, [sp, #4]
 808405a:	bd08      	pop	{r3, pc}
 808405c:	0806001c 	.word	0x0806001c

08084060 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8084060:	b508      	push	{r3, lr}
 8084062:	4b02      	ldr	r3, [pc, #8]	; (808406c <HAL_USB_USART_Begin+0xc>)
 8084064:	681b      	ldr	r3, [r3, #0]
 8084066:	685b      	ldr	r3, [r3, #4]
 8084068:	9301      	str	r3, [sp, #4]
 808406a:	bd08      	pop	{r3, pc}
 808406c:	0806001c 	.word	0x0806001c

08084070 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8084070:	b508      	push	{r3, lr}
 8084072:	4b02      	ldr	r3, [pc, #8]	; (808407c <HAL_USB_USART_Available_Data+0xc>)
 8084074:	681b      	ldr	r3, [r3, #0]
 8084076:	691b      	ldr	r3, [r3, #16]
 8084078:	9301      	str	r3, [sp, #4]
 808407a:	bd08      	pop	{r3, pc}
 808407c:	0806001c 	.word	0x0806001c

08084080 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8084080:	b508      	push	{r3, lr}
 8084082:	4b02      	ldr	r3, [pc, #8]	; (808408c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8084084:	681b      	ldr	r3, [r3, #0]
 8084086:	695b      	ldr	r3, [r3, #20]
 8084088:	9301      	str	r3, [sp, #4]
 808408a:	bd08      	pop	{r3, pc}
 808408c:	0806001c 	.word	0x0806001c

08084090 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8084090:	b508      	push	{r3, lr}
 8084092:	4b02      	ldr	r3, [pc, #8]	; (808409c <HAL_USB_USART_Receive_Data+0xc>)
 8084094:	681b      	ldr	r3, [r3, #0]
 8084096:	699b      	ldr	r3, [r3, #24]
 8084098:	9301      	str	r3, [sp, #4]
 808409a:	bd08      	pop	{r3, pc}
 808409c:	0806001c 	.word	0x0806001c

080840a0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80840a0:	b508      	push	{r3, lr}
 80840a2:	4b02      	ldr	r3, [pc, #8]	; (80840ac <HAL_USB_USART_Send_Data+0xc>)
 80840a4:	681b      	ldr	r3, [r3, #0]
 80840a6:	69db      	ldr	r3, [r3, #28]
 80840a8:	9301      	str	r3, [sp, #4]
 80840aa:	bd08      	pop	{r3, pc}
 80840ac:	0806001c 	.word	0x0806001c

080840b0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80840b0:	b508      	push	{r3, lr}
 80840b2:	4b02      	ldr	r3, [pc, #8]	; (80840bc <HAL_USB_USART_Flush_Data+0xc>)
 80840b4:	681b      	ldr	r3, [r3, #0]
 80840b6:	6a1b      	ldr	r3, [r3, #32]
 80840b8:	9301      	str	r3, [sp, #4]
 80840ba:	bd08      	pop	{r3, pc}
 80840bc:	0806001c 	.word	0x0806001c

080840c0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80840c0:	b508      	push	{r3, lr}
 80840c2:	4b02      	ldr	r3, [pc, #8]	; (80840cc <set_system_mode+0xc>)
 80840c4:	681b      	ldr	r3, [r3, #0]
 80840c6:	685b      	ldr	r3, [r3, #4]
 80840c8:	9301      	str	r3, [sp, #4]
 80840ca:	bd08      	pop	{r3, pc}
 80840cc:	080401a4 	.word	0x080401a4

080840d0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80840d0:	b508      	push	{r3, lr}
 80840d2:	4b02      	ldr	r3, [pc, #8]	; (80840dc <system_delay_ms+0xc>)
 80840d4:	681b      	ldr	r3, [r3, #0]
 80840d6:	695b      	ldr	r3, [r3, #20]
 80840d8:	9301      	str	r3, [sp, #4]
 80840da:	bd08      	pop	{r3, pc}
 80840dc:	080401a4 	.word	0x080401a4

080840e0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80840e0:	b508      	push	{r3, lr}
 80840e2:	4b02      	ldr	r3, [pc, #8]	; (80840ec <system_thread_set_state+0xc>)
 80840e4:	681b      	ldr	r3, [r3, #0]
 80840e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80840e8:	9301      	str	r3, [sp, #4]
 80840ea:	bd08      	pop	{r3, pc}
 80840ec:	080401a4 	.word	0x080401a4

080840f0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80840f0:	b508      	push	{r3, lr}
 80840f2:	4b02      	ldr	r3, [pc, #8]	; (80840fc <application_thread_current+0xc>)
 80840f4:	681b      	ldr	r3, [r3, #0]
 80840f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80840f8:	9301      	str	r3, [sp, #4]
 80840fa:	bd08      	pop	{r3, pc}
 80840fc:	080401a4 	.word	0x080401a4

08084100 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8084100:	b508      	push	{r3, lr}
 8084102:	4b02      	ldr	r3, [pc, #8]	; (808410c <application_thread_invoke+0xc>)
 8084104:	681b      	ldr	r3, [r3, #0]
 8084106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8084108:	9301      	str	r3, [sp, #4]
 808410a:	bd08      	pop	{r3, pc}
 808410c:	080401a4 	.word	0x080401a4

08084110 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8084110:	b508      	push	{r3, lr}
 8084112:	4b03      	ldr	r3, [pc, #12]	; (8084120 <system_ctrl_set_app_request_handler+0x10>)
 8084114:	681b      	ldr	r3, [r3, #0]
 8084116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808411a:	9301      	str	r3, [sp, #4]
 808411c:	bd08      	pop	{r3, pc}
 808411e:	0000      	.short	0x0000
 8084120:	080401a4 	.word	0x080401a4

08084124 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8084124:	b508      	push	{r3, lr}
 8084126:	4b03      	ldr	r3, [pc, #12]	; (8084134 <system_ctrl_set_result+0x10>)
 8084128:	681b      	ldr	r3, [r3, #0]
 808412a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808412e:	9301      	str	r3, [sp, #4]
 8084130:	bd08      	pop	{r3, pc}
 8084132:	0000      	.short	0x0000
 8084134:	080401a4 	.word	0x080401a4

08084138 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8084138:	b508      	push	{r3, lr}
 808413a:	4b02      	ldr	r3, [pc, #8]	; (8084144 <network_connect+0xc>)
 808413c:	681b      	ldr	r3, [r3, #0]
 808413e:	685b      	ldr	r3, [r3, #4]
 8084140:	9301      	str	r3, [sp, #4]
 8084142:	bd08      	pop	{r3, pc}
 8084144:	080401c8 	.word	0x080401c8

08084148 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8084148:	b508      	push	{r3, lr}
 808414a:	4b02      	ldr	r3, [pc, #8]	; (8084154 <network_connecting+0xc>)
 808414c:	681b      	ldr	r3, [r3, #0]
 808414e:	689b      	ldr	r3, [r3, #8]
 8084150:	9301      	str	r3, [sp, #4]
 8084152:	bd08      	pop	{r3, pc}
 8084154:	080401c8 	.word	0x080401c8

08084158 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8084158:	b508      	push	{r3, lr}
 808415a:	4b02      	ldr	r3, [pc, #8]	; (8084164 <network_disconnect+0xc>)
 808415c:	681b      	ldr	r3, [r3, #0]
 808415e:	68db      	ldr	r3, [r3, #12]
 8084160:	9301      	str	r3, [sp, #4]
 8084162:	bd08      	pop	{r3, pc}
 8084164:	080401c8 	.word	0x080401c8

08084168 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8084168:	b508      	push	{r3, lr}
 808416a:	4b02      	ldr	r3, [pc, #8]	; (8084174 <network_ready+0xc>)
 808416c:	681b      	ldr	r3, [r3, #0]
 808416e:	691b      	ldr	r3, [r3, #16]
 8084170:	9301      	str	r3, [sp, #4]
 8084172:	bd08      	pop	{r3, pc}
 8084174:	080401c8 	.word	0x080401c8

08084178 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8084178:	b508      	push	{r3, lr}
 808417a:	4b02      	ldr	r3, [pc, #8]	; (8084184 <network_on+0xc>)
 808417c:	681b      	ldr	r3, [r3, #0]
 808417e:	695b      	ldr	r3, [r3, #20]
 8084180:	9301      	str	r3, [sp, #4]
 8084182:	bd08      	pop	{r3, pc}
 8084184:	080401c8 	.word	0x080401c8

08084188 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8084188:	b508      	push	{r3, lr}
 808418a:	4b02      	ldr	r3, [pc, #8]	; (8084194 <network_off+0xc>)
 808418c:	681b      	ldr	r3, [r3, #0]
 808418e:	699b      	ldr	r3, [r3, #24]
 8084190:	9301      	str	r3, [sp, #4]
 8084192:	bd08      	pop	{r3, pc}
 8084194:	080401c8 	.word	0x080401c8

08084198 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8084198:	b508      	push	{r3, lr}
 808419a:	4b02      	ldr	r3, [pc, #8]	; (80841a4 <network_listen+0xc>)
 808419c:	681b      	ldr	r3, [r3, #0]
 808419e:	69db      	ldr	r3, [r3, #28]
 80841a0:	9301      	str	r3, [sp, #4]
 80841a2:	bd08      	pop	{r3, pc}
 80841a4:	080401c8 	.word	0x080401c8

080841a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80841a8:	b508      	push	{r3, lr}
 80841aa:	4b02      	ldr	r3, [pc, #8]	; (80841b4 <network_listening+0xc>)
 80841ac:	681b      	ldr	r3, [r3, #0]
 80841ae:	6a1b      	ldr	r3, [r3, #32]
 80841b0:	9301      	str	r3, [sp, #4]
 80841b2:	bd08      	pop	{r3, pc}
 80841b4:	080401c8 	.word	0x080401c8

080841b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80841b8:	b508      	push	{r3, lr}
 80841ba:	4b02      	ldr	r3, [pc, #8]	; (80841c4 <network_set_listen_timeout+0xc>)
 80841bc:	681b      	ldr	r3, [r3, #0]
 80841be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80841c0:	9301      	str	r3, [sp, #4]
 80841c2:	bd08      	pop	{r3, pc}
 80841c4:	080401c8 	.word	0x080401c8

080841c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80841c8:	b508      	push	{r3, lr}
 80841ca:	4b02      	ldr	r3, [pc, #8]	; (80841d4 <network_get_listen_timeout+0xc>)
 80841cc:	681b      	ldr	r3, [r3, #0]
 80841ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80841d0:	9301      	str	r3, [sp, #4]
 80841d2:	bd08      	pop	{r3, pc}
 80841d4:	080401c8 	.word	0x080401c8

080841d8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80841d8:	b508      	push	{r3, lr}
 80841da:	4b02      	ldr	r3, [pc, #8]	; (80841e4 <network_is_on+0xc>)
 80841dc:	681b      	ldr	r3, [r3, #0]
 80841de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80841e0:	9301      	str	r3, [sp, #4]
 80841e2:	bd08      	pop	{r3, pc}
 80841e4:	080401c8 	.word	0x080401c8

080841e8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80841e8:	b508      	push	{r3, lr}
 80841ea:	4b02      	ldr	r3, [pc, #8]	; (80841f4 <network_is_off+0xc>)
 80841ec:	681b      	ldr	r3, [r3, #0]
 80841ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80841f0:	9301      	str	r3, [sp, #4]
 80841f2:	bd08      	pop	{r3, pc}
 80841f4:	080401c8 	.word	0x080401c8

080841f8 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80841f8:	b508      	push	{r3, lr}
 80841fa:	4b02      	ldr	r3, [pc, #8]	; (8084204 <spark_cloud_flag_connected+0xc>)
 80841fc:	681b      	ldr	r3, [r3, #0]
 80841fe:	695b      	ldr	r3, [r3, #20]
 8084200:	9301      	str	r3, [sp, #4]
 8084202:	bd08      	pop	{r3, pc}
 8084204:	080401cc 	.word	0x080401cc

08084208 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8084208:	b508      	push	{r3, lr}
 808420a:	4b02      	ldr	r3, [pc, #8]	; (8084214 <spark_send_event+0xc>)
 808420c:	681b      	ldr	r3, [r3, #0]
 808420e:	6a1b      	ldr	r3, [r3, #32]
 8084210:	9301      	str	r3, [sp, #4]
 8084212:	bd08      	pop	{r3, pc}
 8084214:	080401cc 	.word	0x080401cc

08084218 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8084218:	b508      	push	{r3, lr}
 808421a:	4b02      	ldr	r3, [pc, #8]	; (8084224 <spark_set_random_seed_from_cloud_handler+0xc>)
 808421c:	681b      	ldr	r3, [r3, #0]
 808421e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8084220:	9301      	str	r3, [sp, #4]
 8084222:	bd08      	pop	{r3, pc}
 8084224:	080401cc 	.word	0x080401cc

08084228 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8084228:	b508      	push	{r3, lr}
 808422a:	4b02      	ldr	r3, [pc, #8]	; (8084234 <malloc+0xc>)
 808422c:	681b      	ldr	r3, [r3, #0]
 808422e:	681b      	ldr	r3, [r3, #0]
 8084230:	9301      	str	r3, [sp, #4]
 8084232:	bd08      	pop	{r3, pc}
 8084234:	080401a0 	.word	0x080401a0

08084238 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8084238:	b508      	push	{r3, lr}
 808423a:	4b02      	ldr	r3, [pc, #8]	; (8084244 <free+0xc>)
 808423c:	681b      	ldr	r3, [r3, #0]
 808423e:	685b      	ldr	r3, [r3, #4]
 8084240:	9301      	str	r3, [sp, #4]
 8084242:	bd08      	pop	{r3, pc}
 8084244:	080401a0 	.word	0x080401a0

08084248 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 8084248:	b508      	push	{r3, lr}
 808424a:	4b02      	ldr	r3, [pc, #8]	; (8084254 <sprintf+0xc>)
 808424c:	681b      	ldr	r3, [r3, #0]
 808424e:	68db      	ldr	r3, [r3, #12]
 8084250:	9301      	str	r3, [sp, #4]
 8084252:	bd08      	pop	{r3, pc}
 8084254:	080401a0 	.word	0x080401a0

08084258 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8084258:	b508      	push	{r3, lr}
 808425a:	4b02      	ldr	r3, [pc, #8]	; (8084264 <snprintf+0xc>)
 808425c:	681b      	ldr	r3, [r3, #0]
 808425e:	69db      	ldr	r3, [r3, #28]
 8084260:	9301      	str	r3, [sp, #4]
 8084262:	bd08      	pop	{r3, pc}
 8084264:	080401a0 	.word	0x080401a0

08084268 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8084268:	b508      	push	{r3, lr}
 808426a:	4b02      	ldr	r3, [pc, #8]	; (8084274 <abort+0xc>)
 808426c:	681b      	ldr	r3, [r3, #0]
 808426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084270:	9301      	str	r3, [sp, #4]
 8084272:	bd08      	pop	{r3, pc}
 8084274:	080401a0 	.word	0x080401a0

08084278 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8084278:	b508      	push	{r3, lr}
 808427a:	4b02      	ldr	r3, [pc, #8]	; (8084284 <_malloc_r+0xc>)
 808427c:	681b      	ldr	r3, [r3, #0]
 808427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084280:	9301      	str	r3, [sp, #4]
 8084282:	bd08      	pop	{r3, pc}
 8084284:	080401a0 	.word	0x080401a0

08084288 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 8084288:	b508      	push	{r3, lr}
 808428a:	4b02      	ldr	r3, [pc, #8]	; (8084294 <__assert_func+0xc>)
 808428c:	681b      	ldr	r3, [r3, #0]
 808428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8084290:	9301      	str	r3, [sp, #4]
 8084292:	bd08      	pop	{r3, pc}
 8084294:	080401a0 	.word	0x080401a0

08084298 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8084298:	b508      	push	{r3, lr}
 808429a:	4b02      	ldr	r3, [pc, #8]	; (80842a4 <newlib_impure_ptr_callback+0xc>)
 808429c:	681b      	ldr	r3, [r3, #0]
 808429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80842a0:	9301      	str	r3, [sp, #4]
 80842a2:	bd08      	pop	{r3, pc}
 80842a4:	080401a0 	.word	0x080401a0

080842a8 <_ZN14RecursiveMutex6unlockEv.isra.0>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80842a8:	f7ff bdd2 	b.w	8083e50 <os_mutex_recursive_unlock>

080842ac <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
 80842ac:	f7ff bdc8 	b.w	8083e40 <os_mutex_recursive_lock>

080842b0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80842b0:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80842b2:	2600      	movs	r6, #0
 80842b4:	4604      	mov	r4, r0
 80842b6:	460d      	mov	r5, r1
 80842b8:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80842bc:	f7ff fdb0 	bl	8083e20 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80842c0:	4628      	mov	r0, r5
    _spi = spi;
 80842c2:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80842c4:	f7ff fe8c 	bl	8083fe0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80842c8:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80842ca:	6066      	str	r6, [r4, #4]
}
 80842cc:	bd70      	pop	{r4, r5, r6, pc}

080842ce <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80842ce:	b510      	push	{r4, lr}
 80842d0:	4604      	mov	r4, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80842d2:	6880      	ldr	r0, [r0, #8]
 80842d4:	f7ff ffea 	bl	80842ac <_ZN14RecursiveMutex4lockEv.isra.0>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 80842d8:	7820      	ldrb	r0, [r4, #0]
 80842da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80842de:	f7ff fe57 	bl	8083f90 <hal_spi_begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80842e2:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 80842e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80842e8:	f7ff bfde 	b.w	80842a8 <_ZN14RecursiveMutex6unlockEv.isra.0>

080842ec <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
 80842ec:	b538      	push	{r3, r4, r5, lr}
 80842ee:	4604      	mov	r4, r0
 80842f0:	460d      	mov	r5, r1
    _mutex.lock();
 80842f2:	6880      	ldr	r0, [r0, #8]
 80842f4:	f7ff ffda 	bl	80842ac <_ZN14RecursiveMutex4lockEv.isra.0>
    if (!lock())
    {
        hal_spi_begin(_spi, ss_pin);
 80842f8:	7820      	ldrb	r0, [r4, #0]
 80842fa:	4629      	mov	r1, r5
 80842fc:	f7ff fe48 	bl	8083f90 <hal_spi_begin>
    _mutex.unlock();
 8084300:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 8084302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8084306:	f7ff bfcf 	b.w	80842a8 <_ZN14RecursiveMutex6unlockEv.isra.0>

0808430a <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 808430a:	b538      	push	{r3, r4, r5, lr}
 808430c:	4604      	mov	r4, r0
 808430e:	460d      	mov	r5, r1
    _mutex.lock();
 8084310:	6880      	ldr	r0, [r0, #8]
 8084312:	f7ff ffcb 	bl	80842ac <_ZN14RecursiveMutex4lockEv.isra.0>
    if (!lock())
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 8084316:	7820      	ldrb	r0, [r4, #0]
 8084318:	4629      	mov	r1, r5
 808431a:	f7ff fe41 	bl	8083fa0 <hal_spi_set_bit_order>
    _mutex.unlock();
 808431e:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 8084320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8084324:	f7ff bfc0 	b.w	80842a8 <_ZN14RecursiveMutex6unlockEv.isra.0>

08084328 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 8084328:	b538      	push	{r3, r4, r5, lr}
 808432a:	4604      	mov	r4, r0
 808432c:	460d      	mov	r5, r1
    _mutex.lock();
 808432e:	6880      	ldr	r0, [r0, #8]
 8084330:	f7ff ffbc 	bl	80842ac <_ZN14RecursiveMutex4lockEv.isra.0>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 8084334:	7820      	ldrb	r0, [r4, #0]
 8084336:	4629      	mov	r1, r5
 8084338:	f7ff fe3a 	bl	8083fb0 <hal_spi_set_data_mode>
    _mutex.unlock();
 808433c:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 808433e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8084342:	f7ff bfb1 	b.w	80842a8 <_ZN14RecursiveMutex6unlockEv.isra.0>

08084346 <_ZN8SPIClass14endTransactionEv>:
 8084346:	6880      	ldr	r0, [r0, #8]
 8084348:	f7ff bfae 	b.w	80842a8 <_ZN14RecursiveMutex6unlockEv.isra.0>

0808434c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 808434c:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 808434e:	2400      	movs	r4, #0
 8084350:	0840      	lsrs	r0, r0, #1
 8084352:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8084354:	6818      	ldr	r0, [r3, #0]
 8084356:	b2e5      	uxtb	r5, r4
 8084358:	4288      	cmp	r0, r1
 808435a:	d906      	bls.n	808436a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 808435c:	3401      	adds	r4, #1
 808435e:	2c08      	cmp	r4, #8
 8084360:	d002      	beq.n	8084368 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8084362:	0840      	lsrs	r0, r0, #1
 8084364:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8084366:	e7f5      	b.n	8084354 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8084368:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 808436a:	4b02      	ldr	r3, [pc, #8]	; (8084374 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 808436c:	5d5b      	ldrb	r3, [r3, r5]
 808436e:	7013      	strb	r3, [r2, #0]
}
 8084370:	bd30      	pop	{r4, r5, pc}
 8084372:	bf00      	nop
 8084374:	08086a0c 	.word	0x08086a0c

08084378 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 8084378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808437c:	4606      	mov	r6, r0
 808437e:	b08f      	sub	sp, #60	; 0x3c
    _mutex.lock();
 8084380:	6880      	ldr	r0, [r0, #8]
 8084382:	460c      	mov	r4, r1
 8084384:	f7ff ff92 	bl	80842ac <_ZN14RecursiveMutex4lockEv.isra.0>
    memset(info, 0, sizeof(hal_spi_info_t));
 8084388:	2214      	movs	r2, #20
 808438a:	2100      	movs	r1, #0
 808438c:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 808438e:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 8084390:	f002 f972 	bl	8086678 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 8084394:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 8084396:	2200      	movs	r2, #0
 8084398:	4628      	mov	r0, r5
 808439a:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 808439c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 80843a0:	f7ff fe2e 	bl	8084000 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 80843a4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80843a8:	b113      	cbz	r3, 80843b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x38>
 80843aa:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80843ae:	b155      	cbz	r5, 80843c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4e>
  {
 80843b0:	2700      	movs	r7, #0
 80843b2:	2501      	movs	r5, #1
 80843b4:	46b9      	mov	r9, r7
 80843b6:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 80843b8:	7923      	ldrb	r3, [r4, #4]
 80843ba:	b15d      	cbz	r5, 80843d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x5c>
 80843bc:	b1c3      	cbz	r3, 80843f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
}
 80843be:	2000      	movs	r0, #0
 80843c0:	b00f      	add	sp, #60	; 0x3c
 80843c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 80843c6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80843ca:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80843ce:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 80843d2:	e7f1      	b.n	80843b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x40>
    if (default_ == other.default_ &&
 80843d4:	2b00      	cmp	r3, #0
 80843d6:	d135      	bne.n	8084444 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xcc>
 80843d8:	68a3      	ldr	r3, [r4, #8]
 80843da:	4543      	cmp	r3, r8
 80843dc:	d108      	bne.n	80843f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x78>
        bitOrder_ == other.bitOrder_ &&
 80843de:	f88d 9020 	strb.w	r9, [sp, #32]
 80843e2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80843e6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80843ea:	89a3      	ldrh	r3, [r4, #12]
 80843ec:	429a      	cmp	r2, r3
 80843ee:	d0e6      	beq.n	80843be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            uint8_t divisor = 0;
 80843f0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80843f2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 80843f4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 80843f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80843fa:	ab04      	add	r3, sp, #16
 80843fc:	f10d 020f 	add.w	r2, sp, #15
 8084400:	f7ff ffa4 	bl	808434c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 8084404:	7921      	ldrb	r1, [r4, #4]
 8084406:	b985      	cbnz	r5, 808442a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb2>
    if (default_ == other.default_ &&
 8084408:	b989      	cbnz	r1, 808442e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 808440a:	68a3      	ldr	r3, [r4, #8]
 808440c:	4543      	cmp	r3, r8
 808440e:	d30e      	bcc.n	808442e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
        bitOrder_ == other.bitOrder_ &&
 8084410:	f88d 9020 	strb.w	r9, [sp, #32]
 8084414:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8084418:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 808441c:	89a3      	ldrh	r3, [r4, #12]
 808441e:	429a      	cmp	r2, r3
 8084420:	d105      	bne.n	808442e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 8084422:	9b04      	ldr	r3, [sp, #16]
 8084424:	4543      	cmp	r3, r8
 8084426:	d102      	bne.n	808442e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
 8084428:	e7c9      	b.n	80843be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
    if (default_ && other.default_)
 808442a:	2900      	cmp	r1, #0
 808442c:	d1f9      	bne.n	8084422 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xaa>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 808442e:	2300      	movs	r3, #0
 8084430:	9301      	str	r3, [sp, #4]
 8084432:	7b63      	ldrb	r3, [r4, #13]
 8084434:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8084438:	9300      	str	r3, [sp, #0]
 808443a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 808443c:	7830      	ldrb	r0, [r6, #0]
 808443e:	f7ff fdf7 	bl	8084030 <hal_spi_set_settings>
    return 0;
 8084442:	e7bc      	b.n	80843be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x46>
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 8084444:	462b      	mov	r3, r5
 8084446:	462a      	mov	r2, r5
 8084448:	2101      	movs	r1, #1
 808444a:	e9cd 5500 	strd	r5, r5, [sp]
 808444e:	e7f5      	b.n	808443c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc4>

08084450 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8084450:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned clock = 0;
 8084452:	2500      	movs	r5, #0
{
 8084454:	4604      	mov	r4, r0
 8084456:	b089      	sub	sp, #36	; 0x24
    _mutex.lock();
 8084458:	6880      	ldr	r0, [r0, #8]

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 808445a:	fb02 f601 	mul.w	r6, r2, r1
    unsigned clock = 0;
 808445e:	9502      	str	r5, [sp, #8]
 8084460:	f7ff ff24 	bl	80842ac <_ZN14RecursiveMutex4lockEv.isra.0>
    memset(info, 0, sizeof(hal_spi_info_t));
 8084464:	4629      	mov	r1, r5
 8084466:	2214      	movs	r2, #20
 8084468:	a803      	add	r0, sp, #12

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 808446a:	7827      	ldrb	r7, [r4, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 808446c:	f002 f904 	bl	8086678 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 8084470:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 8084472:	462a      	mov	r2, r5
 8084474:	4638      	mov	r0, r7
 8084476:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 8084478:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 808447c:	f7ff fdc0 	bl	8084000 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 8084480:	ab02      	add	r3, sp, #8
 8084482:	f10d 0207 	add.w	r2, sp, #7
 8084486:	4631      	mov	r1, r6
 8084488:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
 808448a:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 808448e:	f7ff ff5d 	bl	808434c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 8084492:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8084496:	7820      	ldrb	r0, [r4, #0]
 8084498:	f7ff fd92 	bl	8083fc0 <hal_spi_set_clock_divider>
    _mutex.unlock();
 808449c:	68a0      	ldr	r0, [r4, #8]
 808449e:	f7ff ff03 	bl	80842a8 <_ZN14RecursiveMutex6unlockEv.isra.0>
        unlock();
    }

    return clock;
}
 80844a2:	9802      	ldr	r0, [sp, #8]
 80844a4:	b009      	add	sp, #36	; 0x24
 80844a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080844a8 <_ZN8SPIClass15setClockDividerEh>:
{
 80844a8:	b538      	push	{r3, r4, r5, lr}
 80844aa:	4604      	mov	r4, r0
    _mutex.lock();
 80844ac:	6880      	ldr	r0, [r0, #8]
 80844ae:	460d      	mov	r5, r1
 80844b0:	f7ff fefc 	bl	80842ac <_ZN14RecursiveMutex4lockEv.isra.0>
        if (_dividerReference)
 80844b4:	6861      	ldr	r1, [r4, #4]
 80844b6:	b1a1      	cbz	r1, 80844e2 <_ZN8SPIClass15setClockDividerEh+0x3a>
    unsigned result = 0;
 80844b8:	2300      	movs	r3, #0
 80844ba:	4a0c      	ldr	r2, [pc, #48]	; (80844ec <_ZN8SPIClass15setClockDividerEh+0x44>)
        if (clock_divisors[result] == divider)
 80844bc:	f812 0b01 	ldrb.w	r0, [r2], #1
 80844c0:	4285      	cmp	r5, r0
 80844c2:	d002      	beq.n	80844ca <_ZN8SPIClass15setClockDividerEh+0x22>
    for (; result < arraySize(clock_divisors); result++)
 80844c4:	3301      	adds	r3, #1
 80844c6:	2b08      	cmp	r3, #8
 80844c8:	d1f8      	bne.n	80844bc <_ZN8SPIClass15setClockDividerEh+0x14>
    return result + 1;
 80844ca:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
 80844cc:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
 80844ce:	2201      	movs	r2, #1
 80844d0:	4620      	mov	r0, r4
 80844d2:	40d9      	lsrs	r1, r3
 80844d4:	f7ff ffbc 	bl	8084450 <_ZN8SPIClass13setClockSpeedEjj>
    _mutex.unlock();
 80844d8:	68a0      	ldr	r0, [r4, #8]
}
 80844da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80844de:	f7ff bee3 	b.w	80842a8 <_ZN14RecursiveMutex6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
 80844e2:	4629      	mov	r1, r5
 80844e4:	7820      	ldrb	r0, [r4, #0]
 80844e6:	f7ff fd6b 	bl	8083fc0 <hal_spi_set_clock_divider>
 80844ea:	e7f5      	b.n	80844d8 <_ZN8SPIClass15setClockDividerEh+0x30>
 80844ec:	08086a0c 	.word	0x08086a0c

080844f0 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 80844f0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80844f2:	7800      	ldrb	r0, [r0, #0]
 80844f4:	f7ff fd6c 	bl	8083fd0 <hal_spi_transfer>
}
 80844f8:	b2c0      	uxtb	r0, r0
 80844fa:	bd08      	pop	{r3, pc}

080844fc <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 80844fc:	b530      	push	{r4, r5, lr}
 80844fe:	b087      	sub	sp, #28
 8084500:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8084502:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 8084504:	9500      	str	r5, [sp, #0]
 8084506:	7800      	ldrb	r0, [r0, #0]
 8084508:	f7ff fd82 	bl	8084010 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 808450c:	b93d      	cbnz	r5, 808451e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 808450e:	7820      	ldrb	r0, [r4, #0]
 8084510:	a902      	add	r1, sp, #8
 8084512:	f7ff fd85 	bl	8084020 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 8084516:	f89d 3014 	ldrb.w	r3, [sp, #20]
 808451a:	07db      	lsls	r3, r3, #31
 808451c:	d4f7      	bmi.n	808450e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 808451e:	b007      	add	sp, #28
 8084520:	bd30      	pop	{r4, r5, pc}
	...

08084524 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8084524:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8084526:	2000      	movs	r0, #0
 8084528:	4b04      	ldr	r3, [pc, #16]	; (808453c <_GLOBAL__sub_I_System+0x18>)
 808452a:	601a      	str	r2, [r3, #0]
 808452c:	4b04      	ldr	r3, [pc, #16]	; (8084540 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 808452e:	4a05      	ldr	r2, [pc, #20]	; (8084544 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 8084530:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 8084534:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8084536:	f7ff bdc3 	b.w	80840c0 <set_system_mode>
 808453a:	bf00      	nop
 808453c:	20000704 	.word	0x20000704
 8084540:	200006f8 	.word	0x200006f8
 8084544:	ffff0000 	.word	0xffff0000

08084548 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8084548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808454a:	4606      	mov	r6, r0
 808454c:	460d      	mov	r5, r1
  size_t n = 0;
 808454e:	2400      	movs	r4, #0
 8084550:	188f      	adds	r7, r1, r2
  while (size--) {
 8084552:	42bd      	cmp	r5, r7
 8084554:	d00c      	beq.n	8084570 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8084556:	6833      	ldr	r3, [r6, #0]
 8084558:	4630      	mov	r0, r6
 808455a:	689b      	ldr	r3, [r3, #8]
 808455c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8084560:	4798      	blx	r3
     if (chunk>=0)
 8084562:	1e03      	subs	r3, r0, #0
 8084564:	db01      	blt.n	808456a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8084566:	441c      	add	r4, r3
  while (size--) {
 8084568:	e7f3      	b.n	8084552 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808456a:	2c00      	cmp	r4, #0
 808456c:	bf08      	it	eq
 808456e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8084570:	4620      	mov	r0, r4
 8084572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08084574 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 8084574:	b508      	push	{r3, lr}
  return write(str);
 8084576:	f7ff fa7f 	bl	8083a78 <_ZN5Print5writeEPKc>
}
 808457a:	bd08      	pop	{r3, pc}

0808457c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 808457c:	6803      	ldr	r3, [r0, #0]
 808457e:	689b      	ldr	r3, [r3, #8]
 8084580:	4718      	bx	r3

08084582 <_ZN5Print5printEPK19__FlashStringHelper>:
 8084582:	b508      	push	{r3, lr}
 8084584:	f7ff fa78 	bl	8083a78 <_ZN5Print5writeEPKc>
 8084588:	bd08      	pop	{r3, pc}

0808458a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808458a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808458c:	210d      	movs	r1, #13
{
 808458e:	4605      	mov	r5, r0
  size_t n = print('\r');
 8084590:	f7ff fff4 	bl	808457c <_ZN5Print5printEc>
  n += print('\n');
 8084594:	210a      	movs	r1, #10
  size_t n = print('\r');
 8084596:	4604      	mov	r4, r0
  n += print('\n');
 8084598:	4628      	mov	r0, r5
 808459a:	f7ff ffef 	bl	808457c <_ZN5Print5printEc>
  return n;
}
 808459e:	4420      	add	r0, r4
 80845a0:	bd38      	pop	{r3, r4, r5, pc}

080845a2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80845a2:	b538      	push	{r3, r4, r5, lr}
 80845a4:	4605      	mov	r5, r0
  return write(str);
 80845a6:	f7ff fa67 	bl	8083a78 <_ZN5Print5writeEPKc>
 80845aa:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80845ac:	4628      	mov	r0, r5
 80845ae:	f7ff ffec 	bl	808458a <_ZN5Print7printlnEv>
  return n;
}
 80845b2:	4420      	add	r0, r4
 80845b4:	bd38      	pop	{r3, r4, r5, pc}

080845b6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 80845b6:	f7ff bff4 	b.w	80845a2 <_ZN5Print7printlnEPKc>

080845ba <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80845ba:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80845bc:	2a01      	cmp	r2, #1
 80845be:	bf98      	it	ls
 80845c0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80845c2:	b530      	push	{r4, r5, lr}
 80845c4:	b08b      	sub	sp, #44	; 0x2c
 80845c6:	460c      	mov	r4, r1
  *str = '\0';
 80845c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80845cc:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80845ce:	4625      	mov	r5, r4
 80845d0:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80845d4:	fb04 5312 	mls	r3, r4, r2, r5
 80845d8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80845da:	2b09      	cmp	r3, #9
 80845dc:	bf94      	ite	ls
 80845de:	3330      	addls	r3, #48	; 0x30
 80845e0:	3337      	addhi	r3, #55	; 0x37
 80845e2:	b2db      	uxtb	r3, r3
  } while(n);
 80845e4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80845e6:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80845ea:	d9f0      	bls.n	80845ce <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80845ec:	f7ff fa44 	bl	8083a78 <_ZN5Print5writeEPKc>
}
 80845f0:	b00b      	add	sp, #44	; 0x2c
 80845f2:	bd30      	pop	{r4, r5, pc}

080845f4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80845f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80845f8:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80845fa:	4619      	mov	r1, r3
 80845fc:	4610      	mov	r0, r2
{
 80845fe:	4692      	mov	sl, r2
 8084600:	461f      	mov	r7, r3
 8084602:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 8084606:	f001 fc9b 	bl	8085f40 <__aeabi_dcmpun>
 808460a:	b140      	cbz	r0, 808461e <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 808460c:	4951      	ldr	r1, [pc, #324]	; (8084754 <_ZN5Print10printFloatEdh+0x160>)
 808460e:	4628      	mov	r0, r5
 8084610:	f7ff fa32 	bl	8083a78 <_ZN5Print5writeEPKc>
 8084614:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 8084616:	4620      	mov	r0, r4
 8084618:	b003      	add	sp, #12
 808461a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 808461e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 8084622:	f04f 32ff 	mov.w	r2, #4294967295
 8084626:	4650      	mov	r0, sl
 8084628:	4621      	mov	r1, r4
 808462a:	4b4b      	ldr	r3, [pc, #300]	; (8084758 <_ZN5Print10printFloatEdh+0x164>)
 808462c:	f001 fc88 	bl	8085f40 <__aeabi_dcmpun>
 8084630:	b948      	cbnz	r0, 8084646 <_ZN5Print10printFloatEdh+0x52>
 8084632:	f04f 32ff 	mov.w	r2, #4294967295
 8084636:	4650      	mov	r0, sl
 8084638:	4621      	mov	r1, r4
 808463a:	4b47      	ldr	r3, [pc, #284]	; (8084758 <_ZN5Print10printFloatEdh+0x164>)
 808463c:	f001 fc62 	bl	8085f04 <__aeabi_dcmple>
 8084640:	b908      	cbnz	r0, 8084646 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 8084642:	4946      	ldr	r1, [pc, #280]	; (808475c <_ZN5Print10printFloatEdh+0x168>)
 8084644:	e7e3      	b.n	808460e <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8084646:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808464a:	4650      	mov	r0, sl
 808464c:	4639      	mov	r1, r7
 808464e:	4b44      	ldr	r3, [pc, #272]	; (8084760 <_ZN5Print10printFloatEdh+0x16c>)
 8084650:	f001 fc6c 	bl	8085f2c <__aeabi_dcmpgt>
 8084654:	b108      	cbz	r0, 808465a <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 8084656:	4943      	ldr	r1, [pc, #268]	; (8084764 <_ZN5Print10printFloatEdh+0x170>)
 8084658:	e7d9      	b.n	808460e <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 808465a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808465e:	4650      	mov	r0, sl
 8084660:	4639      	mov	r1, r7
 8084662:	4b41      	ldr	r3, [pc, #260]	; (8084768 <_ZN5Print10printFloatEdh+0x174>)
 8084664:	f001 fc44 	bl	8085ef0 <__aeabi_dcmplt>
 8084668:	2800      	cmp	r0, #0
 808466a:	d1f4      	bne.n	8084656 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 808466c:	2200      	movs	r2, #0
 808466e:	2300      	movs	r3, #0
 8084670:	4650      	mov	r0, sl
 8084672:	4639      	mov	r1, r7
 8084674:	f001 fc3c 	bl	8085ef0 <__aeabi_dcmplt>
 8084678:	4604      	mov	r4, r0
 808467a:	b130      	cbz	r0, 808468a <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 808467c:	212d      	movs	r1, #45	; 0x2d
 808467e:	4628      	mov	r0, r5
 8084680:	f7ff ff7c 	bl	808457c <_ZN5Print5printEc>
 8084684:	4604      	mov	r4, r0
     number = -number;
 8084686:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 808468a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 808468e:	2000      	movs	r0, #0
    rounding /= 10.0;
 8084690:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 8084694:	4935      	ldr	r1, [pc, #212]	; (808476c <_ZN5Print10printFloatEdh+0x178>)
    rounding /= 10.0;
 8084696:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8084770 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 808469a:	fa5f f38b 	uxtb.w	r3, fp
 808469e:	429e      	cmp	r6, r3
 80846a0:	d906      	bls.n	80846b0 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80846a2:	4642      	mov	r2, r8
 80846a4:	464b      	mov	r3, r9
 80846a6:	f001 fadb 	bl	8085c60 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80846aa:	f10b 0b01 	add.w	fp, fp, #1
 80846ae:	e7f4      	b.n	808469a <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80846b0:	463b      	mov	r3, r7
 80846b2:	4652      	mov	r2, sl
 80846b4:	f000 fff4 	bl	80856a0 <__adddf3>
 80846b8:	4689      	mov	r9, r1
 80846ba:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80846bc:	f001 fc7e 	bl	8085fbc <__aeabi_d2uiz>
 80846c0:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80846c2:	f001 f929 	bl	8085918 <__aeabi_ui2d>
 80846c6:	4602      	mov	r2, r0
 80846c8:	460b      	mov	r3, r1
 80846ca:	4640      	mov	r0, r8
 80846cc:	4649      	mov	r1, r9
 80846ce:	f000 ffe5 	bl	808569c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80846d2:	220a      	movs	r2, #10
 80846d4:	4680      	mov	r8, r0
 80846d6:	4689      	mov	r9, r1
 80846d8:	4628      	mov	r0, r5
 80846da:	4639      	mov	r1, r7
 80846dc:	f7ff ff6d 	bl	80845ba <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80846e0:	4404      	add	r4, r0
  if (digits > 0) {
 80846e2:	2e00      	cmp	r6, #0
 80846e4:	d097      	beq.n	8084616 <_ZN5Print10printFloatEdh+0x22>
  return write(str);
 80846e6:	4628      	mov	r0, r5
 80846e8:	4922      	ldr	r1, [pc, #136]	; (8084774 <_ZN5Print10printFloatEdh+0x180>)
 80846ea:	f7ff f9c5 	bl	8083a78 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 80846ee:	f04f 0a00 	mov.w	sl, #0
 80846f2:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8084770 <_ZN5Print10printFloatEdh+0x17c>
    n += print(".");
 80846f6:	4404      	add	r4, r0
  while (digits-- > 0)
 80846f8:	2e00      	cmp	r6, #0
 80846fa:	d08c      	beq.n	8084616 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80846fc:	4652      	mov	r2, sl
 80846fe:	465b      	mov	r3, fp
 8084700:	4640      	mov	r0, r8
 8084702:	4649      	mov	r1, r9
 8084704:	f001 f982 	bl	8085a0c <__aeabi_dmul>
 8084708:	4680      	mov	r8, r0
 808470a:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 808470c:	f001 fc2e 	bl	8085f6c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 8084710:	1e07      	subs	r7, r0, #0
 8084712:	da1b      	bge.n	808474c <_ZN5Print10printFloatEdh+0x158>
            t = print('-');
 8084714:	212d      	movs	r1, #45	; 0x2d
 8084716:	4628      	mov	r0, r5
 8084718:	f7ff ff30 	bl	808457c <_ZN5Print5printEc>
 808471c:	4603      	mov	r3, r0
            val = -n;
 808471e:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 8084720:	220a      	movs	r2, #10
 8084722:	4628      	mov	r0, r5
 8084724:	9301      	str	r3, [sp, #4]
 8084726:	f7ff ff48 	bl	80845ba <_ZN5Print11printNumberEmh>
 808472a:	9b01      	ldr	r3, [sp, #4]
 808472c:	3e01      	subs	r6, #1
 808472e:	4403      	add	r3, r0
    remainder -= toPrint;
 8084730:	4638      	mov	r0, r7
    n += print(toPrint);
 8084732:	441c      	add	r4, r3
    remainder -= toPrint;
 8084734:	f001 f900 	bl	8085938 <__aeabi_i2d>
 8084738:	4602      	mov	r2, r0
 808473a:	460b      	mov	r3, r1
 808473c:	4640      	mov	r0, r8
 808473e:	4649      	mov	r1, r9
 8084740:	f000 ffac 	bl	808569c <__aeabi_dsub>
 8084744:	b2f6      	uxtb	r6, r6
 8084746:	4680      	mov	r8, r0
 8084748:	4689      	mov	r9, r1
  while (digits-- > 0)
 808474a:	e7d5      	b.n	80846f8 <_ZN5Print10printFloatEdh+0x104>
            val = n;
 808474c:	4639      	mov	r1, r7
        size_t t = 0;
 808474e:	2300      	movs	r3, #0
 8084750:	e7e6      	b.n	8084720 <_ZN5Print10printFloatEdh+0x12c>
 8084752:	bf00      	nop
 8084754:	08086a14 	.word	0x08086a14
 8084758:	7fefffff 	.word	0x7fefffff
 808475c:	08086a18 	.word	0x08086a18
 8084760:	41efffff 	.word	0x41efffff
 8084764:	08086a1c 	.word	0x08086a1c
 8084768:	c1efffff 	.word	0xc1efffff
 808476c:	3fe00000 	.word	0x3fe00000
 8084770:	40240000 	.word	0x40240000
 8084774:	08086a20 	.word	0x08086a20

08084778 <_ZN5Print5printEfi>:
{
 8084778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808477a:	4605      	mov	r5, r0
 808477c:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 808477e:	4608      	mov	r0, r1
 8084780:	f001 f8ec 	bl	808595c <__aeabi_f2d>
 8084784:	b2e4      	uxtb	r4, r4
 8084786:	4602      	mov	r2, r0
 8084788:	460b      	mov	r3, r1
 808478a:	4628      	mov	r0, r5
 808478c:	9400      	str	r4, [sp, #0]
 808478e:	f7ff ff31 	bl	80845f4 <_ZN5Print10printFloatEdh>
}
 8084792:	b003      	add	sp, #12
 8084794:	bd30      	pop	{r4, r5, pc}

08084796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8084796:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 8084798:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 808479a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 808479c:	b17c      	cbz	r4, 80847be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 808479e:	6863      	ldr	r3, [r4, #4]
 80847a0:	3b01      	subs	r3, #1
 80847a2:	6063      	str	r3, [r4, #4]
 80847a4:	b95b      	cbnz	r3, 80847be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80847a6:	6823      	ldr	r3, [r4, #0]
 80847a8:	4620      	mov	r0, r4
 80847aa:	689b      	ldr	r3, [r3, #8]
 80847ac:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80847ae:	68a3      	ldr	r3, [r4, #8]
 80847b0:	3b01      	subs	r3, #1
 80847b2:	60a3      	str	r3, [r4, #8]
 80847b4:	b91b      	cbnz	r3, 80847be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80847b6:	6823      	ldr	r3, [r4, #0]
 80847b8:	4620      	mov	r0, r4
 80847ba:	68db      	ldr	r3, [r3, #12]
 80847bc:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80847be:	4628      	mov	r0, r5
 80847c0:	bd38      	pop	{r3, r4, r5, pc}
	...

080847c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80847c4:	4b01      	ldr	r3, [pc, #4]	; (80847cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80847c6:	4a02      	ldr	r2, [pc, #8]	; (80847d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80847c8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80847ca:	4770      	bx	lr
 80847cc:	20000708 	.word	0x20000708
 80847d0:	08086a22 	.word	0x08086a22

080847d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80847d4:	4b02      	ldr	r3, [pc, #8]	; (80847e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80847d6:	681a      	ldr	r2, [r3, #0]
 80847d8:	4b02      	ldr	r3, [pc, #8]	; (80847e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80847da:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80847dc:	4770      	bx	lr
 80847de:	bf00      	nop
 80847e0:	20000030 	.word	0x20000030
 80847e4:	2000070c 	.word	0x2000070c

080847e8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80847e8:	2100      	movs	r1, #0
 80847ea:	f7ff bc71 	b.w	80840d0 <system_delay_ms>

080847ee <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80847ee:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80847f0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80847f2:	4604      	mov	r4, r0
      if (_M_manager)
 80847f4:	b113      	cbz	r3, 80847fc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80847f6:	2203      	movs	r2, #3
 80847f8:	4601      	mov	r1, r0
 80847fa:	4798      	blx	r3
    }
 80847fc:	4620      	mov	r0, r4
 80847fe:	bd10      	pop	{r4, pc}

08084800 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8084800:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084802:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 8084804:	460b      	mov	r3, r1
 8084806:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084808:	c803      	ldmia	r0, {r0, r1}
 808480a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808480e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8084812:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8084816:	e894 0003 	ldmia.w	r4, {r0, r1}
 808481a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808481e:	b002      	add	sp, #8
 8084820:	bd10      	pop	{r4, pc}
	...

08084824 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8084824:	2200      	movs	r2, #0
 8084826:	4b01      	ldr	r3, [pc, #4]	; (808482c <_GLOBAL__sub_I_RGB+0x8>)
 8084828:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 808482a:	4770      	bx	lr
 808482c:	20000710 	.word	0x20000710

08084830 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8084830:	4b01      	ldr	r3, [pc, #4]	; (8084838 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8084832:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8084834:	4770      	bx	lr
 8084836:	bf00      	nop
 8084838:	20000034 	.word	0x20000034

0808483c <serialEventRun>:
{
 808483c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808483e:	4b17      	ldr	r3, [pc, #92]	; (808489c <serialEventRun+0x60>)
 8084840:	b143      	cbz	r3, 8084854 <serialEventRun+0x18>
 8084842:	f000 fc09 	bl	8085058 <_Z16_fetch_usbserialv>
 8084846:	6803      	ldr	r3, [r0, #0]
 8084848:	691b      	ldr	r3, [r3, #16]
 808484a:	4798      	blx	r3
 808484c:	2800      	cmp	r0, #0
 808484e:	dd01      	ble.n	8084854 <serialEventRun+0x18>
        serialEvent();
 8084850:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8084854:	4b12      	ldr	r3, [pc, #72]	; (80848a0 <serialEventRun+0x64>)
 8084856:	b143      	cbz	r3, 808486a <serialEventRun+0x2e>
 8084858:	f000 fea2 	bl	80855a0 <_Z22__fetch_global_Serial1v>
 808485c:	6803      	ldr	r3, [r0, #0]
 808485e:	691b      	ldr	r3, [r3, #16]
 8084860:	4798      	blx	r3
 8084862:	2800      	cmp	r0, #0
 8084864:	dd01      	ble.n	808486a <serialEventRun+0x2e>
        serialEvent1();
 8084866:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 808486a:	4b0e      	ldr	r3, [pc, #56]	; (80848a4 <serialEventRun+0x68>)
 808486c:	b10b      	cbz	r3, 8084872 <serialEventRun+0x36>
 808486e:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8084872:	4b0d      	ldr	r3, [pc, #52]	; (80848a8 <serialEventRun+0x6c>)
 8084874:	b10b      	cbz	r3, 808487a <serialEventRun+0x3e>
 8084876:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 808487a:	4b0c      	ldr	r3, [pc, #48]	; (80848ac <serialEventRun+0x70>)
 808487c:	b10b      	cbz	r3, 8084882 <serialEventRun+0x46>
 808487e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8084882:	4b0b      	ldr	r3, [pc, #44]	; (80848b0 <serialEventRun+0x74>)
 8084884:	b143      	cbz	r3, 8084898 <serialEventRun+0x5c>
 8084886:	f000 fc21 	bl	80850cc <_Z17_fetch_usbserial1v>
 808488a:	6803      	ldr	r3, [r0, #0]
 808488c:	691b      	ldr	r3, [r3, #16]
 808488e:	4798      	blx	r3
 8084890:	2800      	cmp	r0, #0
 8084892:	dd01      	ble.n	8084898 <serialEventRun+0x5c>
        usbSerialEvent1();
 8084894:	f3af 8000 	nop.w
}
 8084898:	bd08      	pop	{r3, pc}
 808489a:	bf00      	nop
	...

080848b4 <_post_loop>:
{
 80848b4:	b508      	push	{r3, lr}
	serialEventRun();
 80848b6:	f7ff ffc1 	bl	808483c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80848ba:	f7ff faa1 	bl	8083e00 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80848be:	4b01      	ldr	r3, [pc, #4]	; (80848c4 <_post_loop+0x10>)
 80848c0:	6018      	str	r0, [r3, #0]
}
 80848c2:	bd08      	pop	{r3, pc}
 80848c4:	20000aac 	.word	0x20000aac

080848c8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80848c8:	4805      	ldr	r0, [pc, #20]	; (80848e0 <_Z33system_initialize_user_backup_ramv+0x18>)
 80848ca:	4a06      	ldr	r2, [pc, #24]	; (80848e4 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80848cc:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80848ce:	1a12      	subs	r2, r2, r0
 80848d0:	4905      	ldr	r1, [pc, #20]	; (80848e8 <_Z33system_initialize_user_backup_ramv+0x20>)
 80848d2:	f001 fec3 	bl	808665c <memcpy>
    __backup_sram_signature = signature;
 80848d6:	4b05      	ldr	r3, [pc, #20]	; (80848ec <_Z33system_initialize_user_backup_ramv+0x24>)
 80848d8:	4a05      	ldr	r2, [pc, #20]	; (80848f0 <_Z33system_initialize_user_backup_ramv+0x28>)
 80848da:	601a      	str	r2, [r3, #0]
}
 80848dc:	bd08      	pop	{r3, pc}
 80848de:	bf00      	nop
 80848e0:	40024000 	.word	0x40024000
 80848e4:	40024004 	.word	0x40024004
 80848e8:	08086c30 	.word	0x08086c30
 80848ec:	40024000 	.word	0x40024000
 80848f0:	9a271c1e 	.word	0x9a271c1e

080848f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80848f4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80848f6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80848f8:	461a      	mov	r2, r3
 80848fa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80848fe:	9300      	str	r3, [sp, #0]
 8084900:	f7ff fc10 	bl	8084124 <system_ctrl_set_result>
}
 8084904:	b003      	add	sp, #12
 8084906:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808490c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 808490c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808490e:	8843      	ldrh	r3, [r0, #2]
 8084910:	2b0a      	cmp	r3, #10
 8084912:	d008      	beq.n	8084926 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8084914:	2b50      	cmp	r3, #80	; 0x50
 8084916:	d10b      	bne.n	8084930 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8084918:	4b09      	ldr	r3, [pc, #36]	; (8084940 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808491a:	681b      	ldr	r3, [r3, #0]
 808491c:	b14b      	cbz	r3, 8084932 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 808491e:	b003      	add	sp, #12
 8084920:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8084924:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8084926:	f7ff ffe5 	bl	80848f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 808492a:	b003      	add	sp, #12
 808492c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8084930:	2300      	movs	r3, #0
 8084932:	461a      	mov	r2, r3
 8084934:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8084938:	9300      	str	r3, [sp, #0]
 808493a:	f7ff fbf3 	bl	8084124 <system_ctrl_set_result>
}
 808493e:	e7f4      	b.n	808492a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8084940:	20000724 	.word	0x20000724

08084944 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8084944:	2100      	movs	r1, #0
{
 8084946:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8084948:	4811      	ldr	r0, [pc, #68]	; (8084990 <module_user_init_hook+0x4c>)
 808494a:	f7ff fca5 	bl	8084298 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 808494e:	4b11      	ldr	r3, [pc, #68]	; (8084994 <module_user_init_hook+0x50>)
 8084950:	681a      	ldr	r2, [r3, #0]
 8084952:	4b11      	ldr	r3, [pc, #68]	; (8084998 <module_user_init_hook+0x54>)
 8084954:	429a      	cmp	r2, r3
 8084956:	bf0c      	ite	eq
 8084958:	2201      	moveq	r2, #1
 808495a:	2200      	movne	r2, #0
 808495c:	4b0f      	ldr	r3, [pc, #60]	; (808499c <module_user_init_hook+0x58>)
 808495e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8084960:	d001      	beq.n	8084966 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 8084962:	f7ff ffb1 	bl	80848c8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8084966:	f7ff fa3b 	bl	8083de0 <HAL_RNG_GetRandomNumber>
 808496a:	4604      	mov	r4, r0
    srand(seed);
 808496c:	f001 fe8c 	bl	8086688 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8084970:	4b0b      	ldr	r3, [pc, #44]	; (80849a0 <module_user_init_hook+0x5c>)
 8084972:	b113      	cbz	r3, 808497a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 8084974:	4620      	mov	r0, r4
 8084976:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808497a:	2100      	movs	r1, #0
 808497c:	4808      	ldr	r0, [pc, #32]	; (80849a0 <module_user_init_hook+0x5c>)
 808497e:	f7ff fc4b 	bl	8084218 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8084982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8084986:	2100      	movs	r1, #0
 8084988:	4806      	ldr	r0, [pc, #24]	; (80849a4 <module_user_init_hook+0x60>)
 808498a:	f7ff bbc1 	b.w	8084110 <system_ctrl_set_app_request_handler>
 808498e:	bf00      	nop
 8084990:	08084831 	.word	0x08084831
 8084994:	40024000 	.word	0x40024000
 8084998:	9a271c1e 	.word	0x9a271c1e
 808499c:	20000720 	.word	0x20000720
 80849a0:	00000000 	.word	0x00000000
 80849a4:	0808490d 	.word	0x0808490d

080849a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80849a8:	4770      	bx	lr

080849aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80849aa:	2000      	movs	r0, #0
 80849ac:	4770      	bx	lr

080849ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80849ae:	b510      	push	{r4, lr}
 80849b0:	4604      	mov	r4, r0
 80849b2:	2110      	movs	r1, #16
 80849b4:	f7fb fb73 	bl	808009e <_ZdlPvj>
 80849b8:	4620      	mov	r0, r4
 80849ba:	bd10      	pop	{r4, pc}

080849bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80849bc:	b508      	push	{r3, lr}
      { delete this; }
 80849be:	f7ff fff6 	bl	80849ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80849c2:	bd08      	pop	{r3, pc}

080849c4 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80849c4:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80849c6:	b530      	push	{r4, r5, lr}
        type_(type) {
 80849c8:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80849cc:	6002      	str	r2, [r0, #0]
 80849ce:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80849d0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80849d2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80849d4:	680c      	ldr	r4, [r1, #0]
 80849d6:	8085      	strh	r5, [r0, #4]
 80849d8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80849da:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80849dc:	bd30      	pop	{r4, r5, pc}

080849de <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80849de:	b510      	push	{r4, lr}
 80849e0:	4604      	mov	r4, r0
    free((void*)msg_);
 80849e2:	6800      	ldr	r0, [r0, #0]
 80849e4:	f7ff fc28 	bl	8084238 <free>
}
 80849e8:	4620      	mov	r0, r4
 80849ea:	bd10      	pop	{r4, pc}

080849ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80849ec:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80849ee:	68c4      	ldr	r4, [r0, #12]
 80849f0:	b1f4      	cbz	r4, 8084a30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80849f2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80849f4:	2b02      	cmp	r3, #2
 80849f6:	d103      	bne.n	8084a00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80849f8:	f104 000c 	add.w	r0, r4, #12
 80849fc:	f7ff ffef 	bl	80849de <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 8084a00:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 8084a02:	b135      	cbz	r5, 8084a12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8084a04:	4628      	mov	r0, r5
 8084a06:	f7ff fef2 	bl	80847ee <_ZNSt14_Function_baseD1Ev>
 8084a0a:	2110      	movs	r1, #16
 8084a0c:	4628      	mov	r0, r5
 8084a0e:	f7fb fb46 	bl	808009e <_ZdlPvj>
 8084a12:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8084a14:	b135      	cbz	r5, 8084a24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8084a16:	4628      	mov	r0, r5
 8084a18:	f7ff fee9 	bl	80847ee <_ZNSt14_Function_baseD1Ev>
 8084a1c:	2110      	movs	r1, #16
 8084a1e:	4628      	mov	r0, r5
 8084a20:	f7fb fb3d 	bl	808009e <_ZdlPvj>
 8084a24:	4620      	mov	r0, r4
 8084a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8084a2a:	2114      	movs	r1, #20
 8084a2c:	f7fb bb37 	b.w	808009e <_ZdlPvj>
 8084a30:	bd38      	pop	{r3, r4, r5, pc}

08084a32 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8084a32:	680b      	ldr	r3, [r1, #0]
 8084a34:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 8084a36:	684b      	ldr	r3, [r1, #4]
 8084a38:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 8084a3a:	b113      	cbz	r3, 8084a42 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 8084a3c:	685a      	ldr	r2, [r3, #4]
 8084a3e:	3201      	adds	r2, #1
 8084a40:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8084a42:	4770      	bx	lr

08084a44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8084a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8084a46:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8084a48:	4668      	mov	r0, sp
 8084a4a:	460d      	mov	r5, r1
 8084a4c:	f7ff fff1 	bl	8084a32 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8084a50:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8084a52:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8084a54:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 8084a56:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8084a58:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 8084a5a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 8084a5c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8084a5e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 8084a60:	f7ff fe99 	bl	8084796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 8084a64:	b135      	cbz	r5, 8084a74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 8084a66:	1d28      	adds	r0, r5, #4
 8084a68:	f7ff fe95 	bl	8084796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8084a6c:	2108      	movs	r1, #8
 8084a6e:	4628      	mov	r0, r5
 8084a70:	f7fb fb15 	bl	808009e <_ZdlPvj>
        return p;
    }
 8084a74:	4620      	mov	r0, r4
 8084a76:	b003      	add	sp, #12
 8084a78:	bd30      	pop	{r4, r5, pc}

08084a7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8084a7a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8084a7c:	b510      	push	{r4, lr}
      if (_M_empty())
 8084a7e:	b90a      	cbnz	r2, 8084a84 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8084a80:	f000 fe04 	bl	808568c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8084a84:	68c3      	ldr	r3, [r0, #12]
    }
 8084a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8084a8a:	4718      	bx	r3

08084a8c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8084a8c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8084a8e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8084a90:	f100 0110 	add.w	r1, r0, #16
 8084a94:	f7ff fff1 	bl	8084a7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8084a98:	bd08      	pop	{r3, pc}

08084a9a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 8084a9a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8084a9c:	b510      	push	{r4, lr}
      if (_M_empty())
 8084a9e:	b90a      	cbnz	r2, 8084aa4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8084aa0:	f000 fdf4 	bl	808568c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8084aa4:	68c3      	ldr	r3, [r0, #12]
    }
 8084aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8084aaa:	4718      	bx	r3

08084aac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8084aac:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8084aae:	6800      	ldr	r0, [r0, #0]
 8084ab0:	f100 0110 	add.w	r1, r0, #16
 8084ab4:	f7ff fff1 	bl	8084a9a <_ZNKSt8functionIFvRKbEEclES1_>
      }
 8084ab8:	bd08      	pop	{r3, pc}
	...

08084abc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8084abc:	b538      	push	{r3, r4, r5, lr}
 8084abe:	2300      	movs	r3, #0
 8084ac0:	4604      	mov	r4, r0
 8084ac2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8084ac4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8084ac6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8084ac8:	f7fb fae5 	bl	8080096 <_Znwj>
 8084acc:	b128      	cbz	r0, 8084ada <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 8084ace:	2301      	movs	r3, #1
 8084ad0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8084ad4:	4b02      	ldr	r3, [pc, #8]	; (8084ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8084ad6:	60c5      	str	r5, [r0, #12]
 8084ad8:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8084ada:	6020      	str	r0, [r4, #0]
	}
 8084adc:	4620      	mov	r0, r4
 8084ade:	bd38      	pop	{r3, r4, r5, pc}
 8084ae0:	08086a4c 	.word	0x08086a4c

08084ae4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8084ae4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8084ae6:	2300      	movs	r3, #0
 8084ae8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8084aea:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8084aec:	4604      	mov	r4, r0
 8084aee:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8084af0:	b12b      	cbz	r3, 8084afe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8084af2:	2202      	movs	r2, #2
 8084af4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8084af6:	68eb      	ldr	r3, [r5, #12]
 8084af8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8084afa:	68ab      	ldr	r3, [r5, #8]
 8084afc:	60a3      	str	r3, [r4, #8]
    }
 8084afe:	4620      	mov	r0, r4
 8084b00:	bd38      	pop	{r3, r4, r5, pc}
	...

08084b04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 8084b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084b06:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 8084b08:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8084b0a:	4668      	mov	r0, sp
 8084b0c:	f7ff ff5a 	bl	80849c4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8084b10:	f04f 0302 	mov.w	r3, #2
 8084b14:	e8d4 2f4f 	ldrexb	r2, [r4]
 8084b18:	2a00      	cmp	r2, #0
 8084b1a:	d103      	bne.n	8084b24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8084b1c:	e8c4 3f41 	strexb	r1, r3, [r4]
 8084b20:	2900      	cmp	r1, #0
 8084b22:	d1f7      	bne.n	8084b14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 8084b24:	d125      	bne.n	8084b72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 8084b26:	f104 050c 	add.w	r5, r4, #12
 8084b2a:	4669      	mov	r1, sp
 8084b2c:	4628      	mov	r0, r5
 8084b2e:	f7ff ff49 	bl	80849c4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 8084b32:	2301      	movs	r3, #1
 8084b34:	f3bf 8f5b 	dmb	ish
 8084b38:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8084b3a:	2000      	movs	r0, #0
 8084b3c:	f3bf 8f5b 	dmb	ish
 8084b40:	f104 0308 	add.w	r3, r4, #8
 8084b44:	e853 6f00 	ldrex	r6, [r3]
 8084b48:	e843 0200 	strex	r2, r0, [r3]
 8084b4c:	2a00      	cmp	r2, #0
 8084b4e:	d1f9      	bne.n	8084b44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 8084b50:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8084b54:	b16e      	cbz	r6, 8084b72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 8084b56:	f7ff facb 	bl	80840f0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8084b5a:	b178      	cbz	r0, 8084b7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8084b5c:	4629      	mov	r1, r5
 8084b5e:	4630      	mov	r0, r6
 8084b60:	f7ff ff8b 	bl	8084a7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 8084b64:	4630      	mov	r0, r6
 8084b66:	f7ff fe42 	bl	80847ee <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8084b6a:	2110      	movs	r1, #16
 8084b6c:	4630      	mov	r0, r6
 8084b6e:	f7fb fa96 	bl	808009e <_ZdlPvj>
        p_->setError(std::move(error));
 8084b72:	4668      	mov	r0, sp
 8084b74:	f7ff ff33 	bl	80849de <_ZN8particle5ErrorD1Ev>
    }
 8084b78:	b009      	add	sp, #36	; 0x24
 8084b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8084b7c:	4631      	mov	r1, r6
 8084b7e:	a802      	add	r0, sp, #8
 8084b80:	f7ff ffb0 	bl	8084ae4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8084b84:	68e0      	ldr	r0, [r4, #12]
 8084b86:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8084b8a:	b108      	cbz	r0, 8084b90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 8084b8c:	f001 fdaa 	bl	80866e4 <strdup>
        type_(type) {
 8084b90:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8084b92:	2010      	movs	r0, #16
 8084b94:	f8ad 501c 	strh.w	r5, [sp, #28]
 8084b98:	f7fb fa7d 	bl	8080096 <_Znwj>
 8084b9c:	4605      	mov	r5, r0
 8084b9e:	b1e8      	cbz	r0, 8084bdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8084ba0:	2700      	movs	r7, #0
 8084ba2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8084ba4:	2018      	movs	r0, #24
 8084ba6:	f7fb fa76 	bl	8080096 <_Znwj>
 8084baa:	4604      	mov	r4, r0
 8084bac:	b188      	cbz	r0, 8084bd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 8084bae:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8084bb0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8084bb2:	a802      	add	r0, sp, #8
 8084bb4:	f7ff fe24 	bl	8084800 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084bb8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8084bba:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8084bbc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084bbe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8084bc0:	9204      	str	r2, [sp, #16]
 8084bc2:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8084bc4:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8084bc6:	60e3      	str	r3, [r4, #12]
 8084bc8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 8084bcc:	9205      	str	r2, [sp, #20]
 8084bce:	f7ff fef9 	bl	80849c4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 8084bd2:	4b08      	ldr	r3, [pc, #32]	; (8084bf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8084bd4:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8084bd6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8084bd8:	4b07      	ldr	r3, [pc, #28]	; (8084bf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 8084bda:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 8084bdc:	a806      	add	r0, sp, #24
 8084bde:	f7ff fefe 	bl	80849de <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8084be2:	a802      	add	r0, sp, #8
 8084be4:	f7ff fe03 	bl	80847ee <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8084be8:	2200      	movs	r2, #0
 8084bea:	4629      	mov	r1, r5
 8084bec:	4803      	ldr	r0, [pc, #12]	; (8084bfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 8084bee:	f7ff fa87 	bl	8084100 <application_thread_invoke>
 8084bf2:	e7b7      	b.n	8084b64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 8084bf4:	08084a8d 	.word	0x08084a8d
 8084bf8:	08084d19 	.word	0x08084d19
 8084bfc:	08085289 	.word	0x08085289

08084c00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8084c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084c04:	b08a      	sub	sp, #40	; 0x28
 8084c06:	4605      	mov	r5, r0
 8084c08:	460c      	mov	r4, r1
 8084c0a:	4617      	mov	r7, r2
 8084c0c:	4698      	mov	r8, r3
 8084c0e:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8084c12:	f7ff faf1 	bl	80841f8 <spark_cloud_flag_connected>
 8084c16:	ae07      	add	r6, sp, #28
    if (!connected()) {
 8084c18:	4682      	mov	sl, r0
 8084c1a:	bb38      	cbnz	r0, 8084c6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 8084c1c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8084c20:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8084c22:	a905      	add	r1, sp, #20
 8084c24:	4630      	mov	r0, r6
 8084c26:	f8ad 3018 	strh.w	r3, [sp, #24]
 8084c2a:	f7ff fecb 	bl	80849c4 <_ZN8particle5ErrorC1EOS0_>
 8084c2e:	2014      	movs	r0, #20
 8084c30:	f7fb fa31 	bl	8080096 <_Znwj>
 8084c34:	4604      	mov	r4, r0
 8084c36:	b148      	cbz	r0, 8084c4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8084c38:	2302      	movs	r3, #2
 8084c3a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8084c3c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8084c3e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8084c42:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 8084c44:	4631      	mov	r1, r6
 8084c46:	300c      	adds	r0, #12
 8084c48:	f7ff febc 	bl	80849c4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8084c4c:	4628      	mov	r0, r5
	: __shared_count(__p)
 8084c4e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8084c50:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 8084c54:	f7ff ff32 	bl	8084abc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8084c58:	4630      	mov	r0, r6
 8084c5a:	f7ff fec0 	bl	80849de <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8084c5e:	a805      	add	r0, sp, #20
 8084c60:	f7ff febd 	bl	80849de <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 8084c64:	4628      	mov	r0, r5
 8084c66:	b00a      	add	sp, #40	; 0x28
 8084c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d.size = sizeof(spark_send_event_data);
 8084c6c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 8084c6e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8084c72:	2014      	movs	r0, #20
 8084c74:	e9cd aa08 	strd	sl, sl, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 8084c78:	9307      	str	r3, [sp, #28]
 8084c7a:	f7fb fa0c 	bl	8080096 <_Znwj>
 8084c7e:	4601      	mov	r1, r0
 8084c80:	b128      	cbz	r0, 8084c8e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8084c82:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 8084c86:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8084c8a:	f880 a001 	strb.w	sl, [r0, #1]
 8084c8e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8084c90:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 8084c92:	f7ff ff13 	bl	8084abc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 8084c96:	4b1f      	ldr	r3, [pc, #124]	; (8084d14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8084c98:	2008      	movs	r0, #8
 8084c9a:	9308      	str	r3, [sp, #32]
 8084c9c:	f7fb f9fb 	bl	8080096 <_Znwj>
 8084ca0:	4682      	mov	sl, r0
 8084ca2:	b110      	cbz	r0, 8084caa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 8084ca4:	a903      	add	r1, sp, #12
 8084ca6:	f7ff fec4 	bl	8084a32 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8084caa:	4642      	mov	r2, r8
 8084cac:	4639      	mov	r1, r7
 8084cae:	4620      	mov	r0, r4
 8084cb0:	9600      	str	r6, [sp, #0]
 8084cb2:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 8084cb6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8084cba:	f7ff faa5 	bl	8084208 <spark_send_event>
 8084cbe:	b9b8      	cbnz	r0, 8084cf0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 8084cc0:	9b03      	ldr	r3, [sp, #12]
 8084cc2:	785b      	ldrb	r3, [r3, #1]
 8084cc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8084cc8:	b993      	cbnz	r3, 8084cf0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 8084cca:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 8084cce:	a905      	add	r1, sp, #20
 8084cd0:	a803      	add	r0, sp, #12
 8084cd2:	9205      	str	r2, [sp, #20]
 8084cd4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8084cd8:	f7ff ff14 	bl	8084b04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8084cdc:	a805      	add	r0, sp, #20
 8084cde:	f7ff fe7e 	bl	80849de <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8084ce2:	a805      	add	r0, sp, #20
 8084ce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8084ce6:	f7ff fead 	bl	8084a44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 8084cea:	a806      	add	r0, sp, #24
 8084cec:	f7ff fd53 	bl	8084796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8084cf0:	a903      	add	r1, sp, #12
 8084cf2:	a805      	add	r0, sp, #20
 8084cf4:	f7ff fe9d 	bl	8084a32 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 8084cf8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8084cfa:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8084cfc:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 8084cfe:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8084d00:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 8084d02:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 8084d04:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 8084d06:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 8084d08:	f7ff fd45 	bl	8084796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8084d0c:	a804      	add	r0, sp, #16
 8084d0e:	f7ff fd42 	bl	8084796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 8084d12:	e7a7      	b.n	8084c64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 8084d14:	08084d95 	.word	0x08084d95

08084d18 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 8084d18:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8084d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084d1c:	4605      	mov	r5, r0
	switch (__op)
 8084d1e:	d103      	bne.n	8084d28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 8084d20:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8084d22:	6003      	str	r3, [r0, #0]
      }
 8084d24:	2000      	movs	r0, #0
 8084d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 8084d28:	2a02      	cmp	r2, #2
 8084d2a:	d010      	beq.n	8084d4e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 8084d2c:	2a03      	cmp	r2, #3
 8084d2e:	d1f9      	bne.n	8084d24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 8084d30:	6804      	ldr	r4, [r0, #0]
 8084d32:	2c00      	cmp	r4, #0
 8084d34:	d0f6      	beq.n	8084d24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 8084d36:	f104 0010 	add.w	r0, r4, #16
 8084d3a:	f7ff fe50 	bl	80849de <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8084d3e:	4620      	mov	r0, r4
 8084d40:	f7ff fd55 	bl	80847ee <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8084d44:	2118      	movs	r1, #24
 8084d46:	4620      	mov	r0, r4
 8084d48:	f7fb f9a9 	bl	808009e <_ZdlPvj>
 8084d4c:	e7ea      	b.n	8084d24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 8084d4e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 8084d50:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8084d52:	f7fb f9a0 	bl	8080096 <_Znwj>
 8084d56:	4604      	mov	r4, r0
 8084d58:	b150      	cbz	r0, 8084d70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8084d5a:	4631      	mov	r1, r6
 8084d5c:	f7ff fec2 	bl	8084ae4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8084d60:	6930      	ldr	r0, [r6, #16]
 8084d62:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8084d66:	b108      	cbz	r0, 8084d6c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 8084d68:	f001 fcbc 	bl	80866e4 <strdup>
        type_(type) {
 8084d6c:	6120      	str	r0, [r4, #16]
 8084d6e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 8084d70:	602c      	str	r4, [r5, #0]
	}
 8084d72:	e7d7      	b.n	8084d24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

08084d74 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8084d74:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8084d76:	2300      	movs	r3, #0
 8084d78:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8084d7a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8084d7c:	4604      	mov	r4, r0
 8084d7e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8084d80:	b12b      	cbz	r3, 8084d8e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8084d82:	2202      	movs	r2, #2
 8084d84:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8084d86:	68eb      	ldr	r3, [r5, #12]
 8084d88:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8084d8a:	68ab      	ldr	r3, [r5, #8]
 8084d8c:	60a3      	str	r3, [r4, #8]
    }
 8084d8e:	4620      	mov	r0, r4
 8084d90:	bd38      	pop	{r3, r4, r5, pc}
	...

08084d94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8084d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084d96:	4604      	mov	r4, r0
 8084d98:	b089      	sub	sp, #36	; 0x24
 8084d9a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8084d9c:	a801      	add	r0, sp, #4
 8084d9e:	4611      	mov	r1, r2
 8084da0:	f7ff fe50 	bl	8084a44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8084da4:	b1a4      	cbz	r4, 8084dd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 8084da6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8084da8:	b11d      	cbz	r5, 8084db2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 8084daa:	4628      	mov	r0, r5
 8084dac:	f001 fc9a 	bl	80866e4 <strdup>
 8084db0:	4605      	mov	r5, r0
 8084db2:	a801      	add	r0, sp, #4
 8084db4:	a903      	add	r1, sp, #12
        type_(type) {
 8084db6:	9503      	str	r5, [sp, #12]
 8084db8:	f8ad 4010 	strh.w	r4, [sp, #16]
 8084dbc:	f7ff fea2 	bl	8084b04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8084dc0:	a803      	add	r0, sp, #12
 8084dc2:	f7ff fe0c 	bl	80849de <_ZN8particle5ErrorD1Ev>
 8084dc6:	a802      	add	r0, sp, #8
 8084dc8:	f7ff fce5 	bl	8084796 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8084dcc:	b009      	add	sp, #36	; 0x24
 8084dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8084dd0:	2301      	movs	r3, #1
      { return _M_ptr; }
 8084dd2:	9d01      	ldr	r5, [sp, #4]
 8084dd4:	e8d5 2f4f 	ldrexb	r2, [r5]
 8084dd8:	2a00      	cmp	r2, #0
 8084dda:	d103      	bne.n	8084de4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 8084ddc:	e8c5 3f41 	strexb	r1, r3, [r5]
 8084de0:	2900      	cmp	r1, #0
 8084de2:	d1f7      	bne.n	8084dd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 8084de4:	d1ef      	bne.n	8084dc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 8084de6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8084de8:	f3bf 8f5b 	dmb	ish
 8084dec:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8084dee:	f3bf 8f5b 	dmb	ish
 8084df2:	1d2b      	adds	r3, r5, #4
 8084df4:	e853 6f00 	ldrex	r6, [r3]
 8084df8:	e843 4200 	strex	r2, r4, [r3]
 8084dfc:	2a00      	cmp	r2, #0
 8084dfe:	d1f9      	bne.n	8084df4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 8084e00:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8084e04:	2e00      	cmp	r6, #0
 8084e06:	d0de      	beq.n	8084dc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 8084e08:	4620      	mov	r0, r4
 8084e0a:	f7ff f971 	bl	80840f0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8084e0e:	4607      	mov	r7, r0
 8084e10:	b160      	cbz	r0, 8084e2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8084e12:	4630      	mov	r0, r6
 8084e14:	f105 010c 	add.w	r1, r5, #12
 8084e18:	f7ff fe3f 	bl	8084a9a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 8084e1c:	4630      	mov	r0, r6
 8084e1e:	f7ff fce6 	bl	80847ee <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8084e22:	2110      	movs	r1, #16
 8084e24:	4630      	mov	r0, r6
 8084e26:	f7fb f93a 	bl	808009e <_ZdlPvj>
 8084e2a:	e7cc      	b.n	8084dc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8084e2c:	4631      	mov	r1, r6
 8084e2e:	a803      	add	r0, sp, #12
 8084e30:	f7ff ffa0 	bl	8084d74 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8084e34:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8084e36:	2010      	movs	r0, #16
 8084e38:	f88d 301c 	strb.w	r3, [sp, #28]
 8084e3c:	f7fb f92b 	bl	8080096 <_Znwj>
 8084e40:	4605      	mov	r5, r0
 8084e42:	b1d0      	cbz	r0, 8084e7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 8084e44:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8084e46:	2014      	movs	r0, #20
 8084e48:	f7fb f925 	bl	8080096 <_Znwj>
 8084e4c:	4604      	mov	r4, r0
 8084e4e:	b178      	cbz	r0, 8084e70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 8084e50:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8084e52:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8084e54:	a803      	add	r0, sp, #12
 8084e56:	f7ff fcd3 	bl	8084800 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084e5a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8084e5c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8084e5e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084e60:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8084e62:	9205      	str	r2, [sp, #20]
 8084e64:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8084e66:	60e3      	str	r3, [r4, #12]
 8084e68:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8084e6c:	9206      	str	r2, [sp, #24]
 8084e6e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 8084e70:	4b06      	ldr	r3, [pc, #24]	; (8084e8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8084e72:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8084e74:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8084e76:	4b06      	ldr	r3, [pc, #24]	; (8084e90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 8084e78:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 8084e7a:	a803      	add	r0, sp, #12
 8084e7c:	f7ff fcb7 	bl	80847ee <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8084e80:	2200      	movs	r2, #0
 8084e82:	4629      	mov	r1, r5
 8084e84:	4803      	ldr	r0, [pc, #12]	; (8084e94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 8084e86:	f7ff f93b 	bl	8084100 <application_thread_invoke>
 8084e8a:	e7c7      	b.n	8084e1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 8084e8c:	08084aad 	.word	0x08084aad
 8084e90:	08084e99 	.word	0x08084e99
 8084e94:	08085289 	.word	0x08085289

08084e98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 8084e98:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8084e9a:	b570      	push	{r4, r5, r6, lr}
 8084e9c:	4604      	mov	r4, r0
	switch (__op)
 8084e9e:	d103      	bne.n	8084ea8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 8084ea0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8084ea2:	6003      	str	r3, [r0, #0]
      }
 8084ea4:	2000      	movs	r0, #0
 8084ea6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 8084ea8:	2a02      	cmp	r2, #2
 8084eaa:	d00c      	beq.n	8084ec6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 8084eac:	2a03      	cmp	r2, #3
 8084eae:	d1f9      	bne.n	8084ea4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 8084eb0:	6804      	ldr	r4, [r0, #0]
 8084eb2:	2c00      	cmp	r4, #0
 8084eb4:	d0f6      	beq.n	8084ea4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 8084eb6:	4620      	mov	r0, r4
 8084eb8:	f7ff fc99 	bl	80847ee <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8084ebc:	2114      	movs	r1, #20
 8084ebe:	4620      	mov	r0, r4
 8084ec0:	f7fb f8ed 	bl	808009e <_ZdlPvj>
 8084ec4:	e7ee      	b.n	8084ea4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 8084ec6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8084ec8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8084eca:	f7fb f8e4 	bl	8080096 <_Znwj>
 8084ece:	4605      	mov	r5, r0
 8084ed0:	b120      	cbz	r0, 8084edc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 8084ed2:	4631      	mov	r1, r6
 8084ed4:	f7ff ff4e 	bl	8084d74 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8084ed8:	7c33      	ldrb	r3, [r6, #16]
 8084eda:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 8084edc:	6025      	str	r5, [r4, #0]
	}
 8084ede:	e7e1      	b.n	8084ea4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

08084ee0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8084ee0:	4770      	bx	lr

08084ee2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8084ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084ee4:	460e      	mov	r6, r1
 8084ee6:	2400      	movs	r4, #0
 8084ee8:	f100 0708 	add.w	r7, r0, #8
 8084eec:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 8084eee:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8084ef2:	220a      	movs	r2, #10
 8084ef4:	4630      	mov	r0, r6
 8084ef6:	f7ff fb60 	bl	80845ba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8084efa:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8084efc:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8084efe:	d101      	bne.n	8084f04 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8084f00:	4620      	mov	r0, r4
 8084f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8084f04:	2c00      	cmp	r4, #0
 8084f06:	d0f2      	beq.n	8084eee <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8084f08:	212e      	movs	r1, #46	; 0x2e
 8084f0a:	4630      	mov	r0, r6
 8084f0c:	f7ff fb36 	bl	808457c <_ZN5Print5printEc>
 8084f10:	4404      	add	r4, r0
 8084f12:	e7ec      	b.n	8084eee <_ZNK9IPAddress7printToER5Print+0xc>

08084f14 <_ZN9IPAddressD0Ev>:
 8084f14:	b510      	push	{r4, lr}
 8084f16:	4604      	mov	r4, r0
 8084f18:	2108      	movs	r1, #8
 8084f1a:	f7fb f8c0 	bl	808009e <_ZdlPvj>
 8084f1e:	4620      	mov	r0, r4
 8084f20:	bd10      	pop	{r4, pc}
	...

08084f24 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8084f24:	4a02      	ldr	r2, [pc, #8]	; (8084f30 <_ZN9IPAddressC1Ev+0xc>)
 8084f26:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8084f28:	2200      	movs	r2, #0
 8084f2a:	6042      	str	r2, [r0, #4]
}
 8084f2c:	4770      	bx	lr
 8084f2e:	bf00      	nop
 8084f30:	08086a68 	.word	0x08086a68

08084f34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8084f34:	4a02      	ldr	r2, [pc, #8]	; (8084f40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8084f36:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8084f38:	680a      	ldr	r2, [r1, #0]
 8084f3a:	6042      	str	r2, [r0, #4]
}
 8084f3c:	4770      	bx	lr
 8084f3e:	bf00      	nop
 8084f40:	08086a68 	.word	0x08086a68

08084f44 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 8084f44:	4a01      	ldr	r2, [pc, #4]	; (8084f4c <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = addr;
 8084f46:	e9c0 2100 	strd	r2, r1, [r0]
}
 8084f4a:	4770      	bx	lr
 8084f4c:	08086a68 	.word	0x08086a68

08084f50 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8084f50:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8084f52:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8084f56:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8084f5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8084f5e:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8084f62:	6044      	str	r4, [r0, #4]
}
 8084f64:	bd10      	pop	{r4, pc}
	...

08084f68 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8084f68:	b513      	push	{r0, r1, r4, lr}
 8084f6a:	4c04      	ldr	r4, [pc, #16]	; (8084f7c <_ZN9IPAddressC1Ehhhh+0x14>)
 8084f6c:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8084f6e:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8084f72:	9400      	str	r4, [sp, #0]
 8084f74:	f7ff ffec 	bl	8084f50 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8084f78:	b002      	add	sp, #8
 8084f7a:	bd10      	pop	{r4, pc}
 8084f7c:	08086a68 	.word	0x08086a68

08084f80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8084f80:	7441      	strb	r1, [r0, #17]
}
 8084f82:	4770      	bx	lr

08084f84 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8084f84:	4770      	bx	lr

08084f86 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8084f86:	4770      	bx	lr

08084f88 <_ZN9USBSerial4readEv>:
{
 8084f88:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8084f8a:	2100      	movs	r1, #0
 8084f8c:	7c00      	ldrb	r0, [r0, #16]
 8084f8e:	f7ff f87f 	bl	8084090 <HAL_USB_USART_Receive_Data>
}
 8084f92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8084f96:	bd08      	pop	{r3, pc}

08084f98 <_ZN9USBSerial4peekEv>:
{
 8084f98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8084f9a:	2101      	movs	r1, #1
 8084f9c:	7c00      	ldrb	r0, [r0, #16]
 8084f9e:	f7ff f877 	bl	8084090 <HAL_USB_USART_Receive_Data>
}
 8084fa2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8084fa6:	bd08      	pop	{r3, pc}

08084fa8 <_ZN9USBSerial17availableForWriteEv>:
{
 8084fa8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8084faa:	7c00      	ldrb	r0, [r0, #16]
 8084fac:	f7ff f868 	bl	8084080 <HAL_USB_USART_Available_Data_For_Write>
}
 8084fb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8084fb4:	bd08      	pop	{r3, pc}

08084fb6 <_ZN9USBSerial9availableEv>:
{
 8084fb6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8084fb8:	7c00      	ldrb	r0, [r0, #16]
 8084fba:	f7ff f859 	bl	8084070 <HAL_USB_USART_Available_Data>
}
 8084fbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8084fc2:	bd08      	pop	{r3, pc}

08084fc4 <_ZN9USBSerial5writeEh>:
{
 8084fc4:	b538      	push	{r3, r4, r5, lr}
 8084fc6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8084fc8:	7c00      	ldrb	r0, [r0, #16]
{
 8084fca:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8084fcc:	f7ff f858 	bl	8084080 <HAL_USB_USART_Available_Data_For_Write>
 8084fd0:	2800      	cmp	r0, #0
 8084fd2:	dc01      	bgt.n	8084fd8 <_ZN9USBSerial5writeEh+0x14>
 8084fd4:	7c60      	ldrb	r0, [r4, #17]
 8084fd6:	b128      	cbz	r0, 8084fe4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8084fd8:	4629      	mov	r1, r5
 8084fda:	7c20      	ldrb	r0, [r4, #16]
 8084fdc:	f7ff f860 	bl	80840a0 <HAL_USB_USART_Send_Data>
 8084fe0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8084fe4:	bd38      	pop	{r3, r4, r5, pc}

08084fe6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8084fe6:	7c00      	ldrb	r0, [r0, #16]
 8084fe8:	f7ff b862 	b.w	80840b0 <HAL_USB_USART_Flush_Data>

08084fec <_ZN9USBSerialD0Ev>:
 8084fec:	b510      	push	{r4, lr}
 8084fee:	4604      	mov	r4, r0
 8084ff0:	2114      	movs	r1, #20
 8084ff2:	f7fb f854 	bl	808009e <_ZdlPvj>
 8084ff6:	4620      	mov	r0, r4
 8084ff8:	bd10      	pop	{r4, pc}

08084ffa <__tcf_1>:
 8084ffa:	4770      	bx	lr

08084ffc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8084ffc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8084ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8085002:	4604      	mov	r4, r0
 8085004:	4608      	mov	r0, r1
 8085006:	2100      	movs	r1, #0
 8085008:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808500c:	4b04      	ldr	r3, [pc, #16]	; (8085020 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 808500e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8085010:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8085012:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8085014:	4611      	mov	r1, r2
  _blocking = true;
 8085016:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8085018:	f7ff f81a 	bl	8084050 <HAL_USB_USART_Init>
}
 808501c:	4620      	mov	r0, r4
 808501e:	bd10      	pop	{r4, pc}
 8085020:	08086a7c 	.word	0x08086a7c

08085024 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8085024:	2200      	movs	r2, #0
 8085026:	7c00      	ldrb	r0, [r0, #16]
 8085028:	f7ff b81a 	b.w	8084060 <HAL_USB_USART_Begin>

0808502c <_Z19acquireSerialBufferv>:
{
 808502c:	b510      	push	{r4, lr}
 808502e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 8085030:	2214      	movs	r2, #20
 8085032:	2100      	movs	r1, #0
 8085034:	f001 fb20 	bl	8086678 <memset>
  conf.rx_buffer = serial_rx_buffer;
 8085038:	4b05      	ldr	r3, [pc, #20]	; (8085050 <_Z19acquireSerialBufferv+0x24>)
}
 808503a:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 808503c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808503e:	4b05      	ldr	r3, [pc, #20]	; (8085054 <_Z19acquireSerialBufferv+0x28>)
 8085040:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8085042:	f240 1301 	movw	r3, #257	; 0x101
 8085046:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8085048:	2381      	movs	r3, #129	; 0x81
 808504a:	8223      	strh	r3, [r4, #16]
}
 808504c:	bd10      	pop	{r4, pc}
 808504e:	bf00      	nop
 8085050:	20000758 	.word	0x20000758
 8085054:	20000859 	.word	0x20000859

08085058 <_Z16_fetch_usbserialv>:
{
 8085058:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808505a:	4d0e      	ldr	r5, [pc, #56]	; (8085094 <_Z16_fetch_usbserialv+0x3c>)
{
 808505c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808505e:	a801      	add	r0, sp, #4
 8085060:	f7ff ffe4 	bl	808502c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8085064:	7829      	ldrb	r1, [r5, #0]
 8085066:	f3bf 8f5b 	dmb	ish
 808506a:	f011 0401 	ands.w	r4, r1, #1
 808506e:	d10e      	bne.n	808508e <_Z16_fetch_usbserialv+0x36>
 8085070:	4628      	mov	r0, r5
 8085072:	f7fb f816 	bl	80800a2 <__cxa_guard_acquire>
 8085076:	b150      	cbz	r0, 808508e <_Z16_fetch_usbserialv+0x36>
 8085078:	4621      	mov	r1, r4
 808507a:	aa01      	add	r2, sp, #4
 808507c:	4806      	ldr	r0, [pc, #24]	; (8085098 <_Z16_fetch_usbserialv+0x40>)
 808507e:	f7ff ffbd 	bl	8084ffc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8085082:	4628      	mov	r0, r5
 8085084:	f7fb f812 	bl	80800ac <__cxa_guard_release>
 8085088:	4804      	ldr	r0, [pc, #16]	; (808509c <_Z16_fetch_usbserialv+0x44>)
 808508a:	f001 fad1 	bl	8086630 <atexit>
	return _usbserial;
}
 808508e:	4802      	ldr	r0, [pc, #8]	; (8085098 <_Z16_fetch_usbserialv+0x40>)
 8085090:	b007      	add	sp, #28
 8085092:	bd30      	pop	{r4, r5, pc}
 8085094:	20000728 	.word	0x20000728
 8085098:	20000730 	.word	0x20000730
 808509c:	08084f85 	.word	0x08084f85

080850a0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80850a0:	b510      	push	{r4, lr}
 80850a2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80850a4:	2214      	movs	r2, #20
 80850a6:	2100      	movs	r1, #0
 80850a8:	f001 fae6 	bl	8086678 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80850ac:	4b05      	ldr	r3, [pc, #20]	; (80850c4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80850ae:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80850b0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80850b2:	4b05      	ldr	r3, [pc, #20]	; (80850c8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80850b4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80850b6:	f240 1301 	movw	r3, #257	; 0x101
 80850ba:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80850bc:	2381      	movs	r3, #129	; 0x81
 80850be:	8223      	strh	r3, [r4, #16]
}
 80850c0:	bd10      	pop	{r4, pc}
 80850c2:	bf00      	nop
 80850c4:	200008da 	.word	0x200008da
 80850c8:	200009db 	.word	0x200009db

080850cc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80850cc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80850ce:	4c0e      	ldr	r4, [pc, #56]	; (8085108 <_Z17_fetch_usbserial1v+0x3c>)
{
 80850d0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80850d2:	a801      	add	r0, sp, #4
 80850d4:	f7ff ffe4 	bl	80850a0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80850d8:	7823      	ldrb	r3, [r4, #0]
 80850da:	f3bf 8f5b 	dmb	ish
 80850de:	07db      	lsls	r3, r3, #31
 80850e0:	d40e      	bmi.n	8085100 <_Z17_fetch_usbserial1v+0x34>
 80850e2:	4620      	mov	r0, r4
 80850e4:	f7fa ffdd 	bl	80800a2 <__cxa_guard_acquire>
 80850e8:	b150      	cbz	r0, 8085100 <_Z17_fetch_usbserial1v+0x34>
 80850ea:	2101      	movs	r1, #1
 80850ec:	aa01      	add	r2, sp, #4
 80850ee:	4807      	ldr	r0, [pc, #28]	; (808510c <_Z17_fetch_usbserial1v+0x40>)
 80850f0:	f7ff ff84 	bl	8084ffc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80850f4:	4620      	mov	r0, r4
 80850f6:	f7fa ffd9 	bl	80800ac <__cxa_guard_release>
 80850fa:	4805      	ldr	r0, [pc, #20]	; (8085110 <_Z17_fetch_usbserial1v+0x44>)
 80850fc:	f001 fa98 	bl	8086630 <atexit>
  return _usbserial1;
}
 8085100:	4802      	ldr	r0, [pc, #8]	; (808510c <_Z17_fetch_usbserial1v+0x40>)
 8085102:	b006      	add	sp, #24
 8085104:	bd10      	pop	{r4, pc}
 8085106:	bf00      	nop
 8085108:	2000072c 	.word	0x2000072c
 808510c:	20000744 	.word	0x20000744
 8085110:	08084ffb 	.word	0x08084ffb

08085114 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8085114:	2200      	movs	r2, #0
 8085116:	6840      	ldr	r0, [r0, #4]
 8085118:	4611      	mov	r1, r2
 808511a:	f7ff b825 	b.w	8084168 <network_ready>

0808511e <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808511e:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8085120:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8085122:	b085      	sub	sp, #20
 8085124:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8085126:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8085128:	460f      	mov	r7, r1
 808512a:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808512c:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808512e:	f001 faf4 	bl	808671a <strlen>
 8085132:	687b      	ldr	r3, [r7, #4]
 8085134:	b281      	uxth	r1, r0
 8085136:	9600      	str	r6, [sp, #0]
 8085138:	4628      	mov	r0, r5
 808513a:	aa03      	add	r2, sp, #12
 808513c:	f7fe ff80 	bl	8084040 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8085140:	b130      	cbz	r0, 8085150 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8085142:	4631      	mov	r1, r6
 8085144:	4620      	mov	r0, r4
 8085146:	f7ff fefd 	bl	8084f44 <_ZN9IPAddressC1Em>
    }
 808514a:	4620      	mov	r0, r4
 808514c:	b005      	add	sp, #20
 808514e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8085150:	4620      	mov	r0, r4
 8085152:	a903      	add	r1, sp, #12
 8085154:	f7ff feee 	bl	8084f34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8085158:	e7f7      	b.n	808514a <_ZN5spark13CellularClass7resolveEPKc+0x2c>

0808515a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 808515a:	2200      	movs	r2, #0
 808515c:	6840      	ldr	r0, [r0, #4]
 808515e:	4611      	mov	r1, r2
 8085160:	f7ff b822 	b.w	80841a8 <network_listening>

08085164 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8085164:	2200      	movs	r2, #0
 8085166:	6840      	ldr	r0, [r0, #4]
 8085168:	4611      	mov	r1, r2
 808516a:	f7ff b82d 	b.w	80841c8 <network_get_listen_timeout>

0808516e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 808516e:	2200      	movs	r2, #0
 8085170:	6840      	ldr	r0, [r0, #4]
 8085172:	f7ff b821 	b.w	80841b8 <network_set_listen_timeout>

08085176 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 8085176:	2200      	movs	r2, #0
 8085178:	6840      	ldr	r0, [r0, #4]
 808517a:	f081 0101 	eor.w	r1, r1, #1
 808517e:	f7ff b80b 	b.w	8084198 <network_listen>

08085182 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 8085182:	2300      	movs	r3, #0
 8085184:	6840      	ldr	r0, [r0, #4]
 8085186:	461a      	mov	r2, r3
 8085188:	4619      	mov	r1, r3
 808518a:	f7fe bffd 	b.w	8084188 <network_off>

0808518e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 808518e:	2300      	movs	r3, #0
 8085190:	6840      	ldr	r0, [r0, #4]
 8085192:	461a      	mov	r2, r3
 8085194:	4619      	mov	r1, r3
 8085196:	f7fe bfef 	b.w	8084178 <network_on>

0808519a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 808519a:	2200      	movs	r2, #0
 808519c:	6840      	ldr	r0, [r0, #4]
 808519e:	4611      	mov	r1, r2
 80851a0:	f7fe bfd2 	b.w	8084148 <network_connecting>

080851a4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80851a4:	2200      	movs	r2, #0
 80851a6:	2102      	movs	r1, #2
 80851a8:	6840      	ldr	r0, [r0, #4]
 80851aa:	f7fe bfd5 	b.w	8084158 <network_disconnect>

080851ae <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80851ae:	2300      	movs	r3, #0
 80851b0:	6840      	ldr	r0, [r0, #4]
 80851b2:	461a      	mov	r2, r3
 80851b4:	f7fe bfc0 	b.w	8084138 <network_connect>

080851b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80851b8:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80851ba:	2428      	movs	r4, #40	; 0x28
 80851bc:	4b07      	ldr	r3, [pc, #28]	; (80851dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 80851be:	4622      	mov	r2, r4
 80851c0:	4618      	mov	r0, r3
 80851c2:	2100      	movs	r1, #0
 80851c4:	f001 fa58 	bl	8086678 <memset>
        cid = -1;
 80851c8:	f04f 32ff 	mov.w	r2, #4294967295
 80851cc:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80851ce:	2204      	movs	r2, #4
 80851d0:	4b03      	ldr	r3, [pc, #12]	; (80851e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 80851d2:	8004      	strh	r4, [r0, #0]
 80851d4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 80851d6:	4a03      	ldr	r2, [pc, #12]	; (80851e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 80851d8:	601a      	str	r2, [r3, #0]
 80851da:	bd10      	pop	{r4, pc}
 80851dc:	20000a64 	.word	0x20000a64
 80851e0:	20000a5c 	.word	0x20000a5c
 80851e4:	08086aac 	.word	0x08086aac

080851e8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80851e8:	4770      	bx	lr

080851ea <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80851ea:	7441      	strb	r1, [r0, #17]
}
 80851ec:	4770      	bx	lr

080851ee <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80851ee:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80851f0:	7c00      	ldrb	r0, [r0, #16]
 80851f2:	f7fe fe65 	bl	8083ec0 <hal_usart_available_data_for_write>
}
 80851f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80851fa:	bd08      	pop	{r3, pc}

080851fc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80851fc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80851fe:	7c00      	ldrb	r0, [r0, #16]
 8085200:	f7fe fe36 	bl	8083e70 <hal_usart_available>
}
 8085204:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8085208:	bd08      	pop	{r3, pc}

0808520a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808520a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 808520c:	7c00      	ldrb	r0, [r0, #16]
 808520e:	f7fe fe3f 	bl	8083e90 <hal_usart_peek>
}
 8085212:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8085216:	bd08      	pop	{r3, pc}

08085218 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8085218:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 808521a:	7c00      	ldrb	r0, [r0, #16]
 808521c:	f7fe fe30 	bl	8083e80 <hal_usart_read>
}
 8085220:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8085224:	bd08      	pop	{r3, pc}

08085226 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 8085226:	7c00      	ldrb	r0, [r0, #16]
 8085228:	f7fe be3a 	b.w	8083ea0 <hal_usart_flush>

0808522c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808522c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808522e:	7c46      	ldrb	r6, [r0, #17]
{
 8085230:	4604      	mov	r4, r0
 8085232:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8085234:	b12e      	cbz	r6, 8085242 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 8085236:	4629      	mov	r1, r5
 8085238:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808523a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 808523e:	f7fe be0f 	b.w	8083e60 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8085242:	7c00      	ldrb	r0, [r0, #16]
 8085244:	f7fe fe3c 	bl	8083ec0 <hal_usart_available_data_for_write>
 8085248:	2800      	cmp	r0, #0
 808524a:	dcf4      	bgt.n	8085236 <_ZN11USARTSerial5writeEh+0xa>
}
 808524c:	4630      	mov	r0, r6
 808524e:	bd70      	pop	{r4, r5, r6, pc}

08085250 <_ZN11USARTSerialD0Ev>:
 8085250:	b510      	push	{r4, lr}
 8085252:	4604      	mov	r4, r0
 8085254:	2114      	movs	r1, #20
 8085256:	f7fa ff22 	bl	808009e <_ZdlPvj>
 808525a:	4620      	mov	r0, r4
 808525c:	bd10      	pop	{r4, pc}
	...

08085260 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 8085260:	b510      	push	{r4, lr}
 8085262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8085266:	4604      	mov	r4, r0
 8085268:	4608      	mov	r0, r1
 808526a:	4611      	mov	r1, r2
 808526c:	2200      	movs	r2, #0
 808526e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8085272:	4b04      	ldr	r3, [pc, #16]	; (8085284 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 8085274:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 8085276:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8085278:	2301      	movs	r3, #1
 808527a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 808527c:	f7fe fe28 	bl	8083ed0 <hal_usart_init_ex>
}
 8085280:	4620      	mov	r0, r4
 8085282:	bd10      	pop	{r4, pc}
 8085284:	08086ae8 	.word	0x08086ae8

08085288 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8085288:	b510      	push	{r4, lr}
      if (_M_empty())
 808528a:	6883      	ldr	r3, [r0, #8]
 808528c:	4604      	mov	r4, r0
 808528e:	b90b      	cbnz	r3, 8085294 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8085290:	f000 f9fc 	bl	808568c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8085294:	68c3      	ldr	r3, [r0, #12]
 8085296:	4798      	blx	r3
      if (_M_manager)
 8085298:	68a3      	ldr	r3, [r4, #8]
 808529a:	b11b      	cbz	r3, 80852a4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808529c:	2203      	movs	r2, #3
 808529e:	4621      	mov	r1, r4
 80852a0:	4620      	mov	r0, r4
 80852a2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80852a4:	4620      	mov	r0, r4
}
 80852a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80852aa:	2110      	movs	r1, #16
 80852ac:	f7fa bef7 	b.w	808009e <_ZdlPvj>

080852b0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80852b0:	4770      	bx	lr

080852b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80852b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80852b4:	4606      	mov	r6, r0
 80852b6:	4615      	mov	r5, r2
 80852b8:	460c      	mov	r4, r1
 80852ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80852bc:	42bc      	cmp	r4, r7
 80852be:	d006      	beq.n	80852ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80852c0:	6833      	ldr	r3, [r6, #0]
 80852c2:	4630      	mov	r0, r6
 80852c4:	689b      	ldr	r3, [r3, #8]
 80852c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80852ca:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80852cc:	e7f6      	b.n	80852bc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80852ce:	4628      	mov	r0, r5
 80852d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080852d2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80852d2:	2200      	movs	r2, #0
 80852d4:	7c00      	ldrb	r0, [r0, #16]
 80852d6:	f7fe be1b 	b.w	8083f10 <hal_i2c_write>

080852da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80852da:	2100      	movs	r1, #0
 80852dc:	7c00      	ldrb	r0, [r0, #16]
 80852de:	f7fe be1f 	b.w	8083f20 <hal_i2c_available>

080852e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80852e2:	2100      	movs	r1, #0
 80852e4:	7c00      	ldrb	r0, [r0, #16]
 80852e6:	f7fe be23 	b.w	8083f30 <hal_i2c_read>

080852ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80852ea:	2100      	movs	r1, #0
 80852ec:	7c00      	ldrb	r0, [r0, #16]
 80852ee:	f7fe be27 	b.w	8083f40 <hal_i2c_peek>

080852f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80852f2:	2100      	movs	r1, #0
 80852f4:	7c00      	ldrb	r0, [r0, #16]
 80852f6:	f7fe be2b 	b.w	8083f50 <hal_i2c_flush>

080852fa <_ZN7TwoWireD0Ev>:
 80852fa:	b510      	push	{r4, lr}
 80852fc:	4604      	mov	r4, r0
 80852fe:	2114      	movs	r1, #20
 8085300:	f7fa fecd 	bl	808009e <_ZdlPvj>
 8085304:	4620      	mov	r0, r4
 8085306:	bd10      	pop	{r4, pc}

08085308 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8085308:	b510      	push	{r4, lr}
 808530a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808530e:	4604      	mov	r4, r0
 8085310:	4608      	mov	r0, r1
 8085312:	2100      	movs	r1, #0
 8085314:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8085318:	4b03      	ldr	r3, [pc, #12]	; (8085328 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 808531a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808531c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 808531e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 8085320:	f7fe fe26 	bl	8083f70 <hal_i2c_init>
}
 8085324:	4620      	mov	r0, r4
 8085326:	bd10      	pop	{r4, pc}
 8085328:	08086b18 	.word	0x08086b18

0808532c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808532c:	2300      	movs	r3, #0
 808532e:	7c00      	ldrb	r0, [r0, #16]
 8085330:	461a      	mov	r2, r3
 8085332:	4619      	mov	r1, r3
 8085334:	f7fe bdd4 	b.w	8083ee0 <hal_i2c_begin>

08085338 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8085338:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808533a:	2200      	movs	r2, #0
 808533c:	2314      	movs	r3, #20
 808533e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8085342:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 8085346:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 8085348:	7c00      	ldrb	r0, [r0, #16]
 808534a:	f88d 3008 	strb.w	r3, [sp, #8]
 808534e:	684b      	ldr	r3, [r1, #4]
 8085350:	9303      	str	r3, [sp, #12]
 8085352:	68cb      	ldr	r3, [r1, #12]
 8085354:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8085356:	7a0b      	ldrb	r3, [r1, #8]
 8085358:	a901      	add	r1, sp, #4
 808535a:	9305      	str	r3, [sp, #20]
 808535c:	f7fe fe10 	bl	8083f80 <hal_i2c_request_ex>
}
 8085360:	b007      	add	sp, #28
 8085362:	f85d fb04 	ldr.w	pc, [sp], #4

08085366 <_ZN7TwoWire11requestFromEhjh>:
{
 8085366:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8085368:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808536a:	f88d 1000 	strb.w	r1, [sp]
 808536e:	f04f 0164 	mov.w	r1, #100	; 0x64
 8085372:	bf18      	it	ne
 8085374:	2301      	movne	r3, #1
 8085376:	9103      	str	r1, [sp, #12]
 8085378:	4669      	mov	r1, sp
    size_ = size;
 808537a:	9201      	str	r2, [sp, #4]
 808537c:	f88d 3008 	strb.w	r3, [sp, #8]
 8085380:	f7ff ffda 	bl	8085338 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8085384:	b005      	add	sp, #20
 8085386:	f85d fb04 	ldr.w	pc, [sp], #4

0808538a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 808538a:	2200      	movs	r2, #0
 808538c:	7c00      	ldrb	r0, [r0, #16]
 808538e:	f7fe bdaf 	b.w	8083ef0 <hal_i2c_begin_transmission>

08085392 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 8085392:	2200      	movs	r2, #0
 8085394:	7c00      	ldrb	r0, [r0, #16]
 8085396:	f7fe bdb3 	b.w	8083f00 <hal_i2c_end_transmission>

0808539a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 808539a:	2101      	movs	r1, #1
 808539c:	f7ff bff9 	b.w	8085392 <_ZN7TwoWire15endTransmissionEh>

080853a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80853a0:	2300      	movs	r3, #0
 80853a2:	6840      	ldr	r0, [r0, #4]
 80853a4:	461a      	mov	r2, r3
 80853a6:	f7fe bec7 	b.w	8084138 <network_connect>

080853aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80853aa:	2200      	movs	r2, #0
 80853ac:	2102      	movs	r1, #2
 80853ae:	6840      	ldr	r0, [r0, #4]
 80853b0:	f7fe bed2 	b.w	8084158 <network_disconnect>

080853b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80853b4:	2200      	movs	r2, #0
 80853b6:	6840      	ldr	r0, [r0, #4]
 80853b8:	4611      	mov	r1, r2
 80853ba:	f7fe bec5 	b.w	8084148 <network_connecting>

080853be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80853be:	2200      	movs	r2, #0
 80853c0:	6840      	ldr	r0, [r0, #4]
 80853c2:	4611      	mov	r1, r2
 80853c4:	f7fe bed0 	b.w	8084168 <network_ready>

080853c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80853c8:	2300      	movs	r3, #0
 80853ca:	6840      	ldr	r0, [r0, #4]
 80853cc:	461a      	mov	r2, r3
 80853ce:	4619      	mov	r1, r3
 80853d0:	f7fe bed2 	b.w	8084178 <network_on>

080853d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80853d4:	2300      	movs	r3, #0
 80853d6:	6840      	ldr	r0, [r0, #4]
 80853d8:	461a      	mov	r2, r3
 80853da:	4619      	mov	r1, r3
 80853dc:	f7fe bed4 	b.w	8084188 <network_off>

080853e0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80853e0:	2100      	movs	r1, #0
 80853e2:	6840      	ldr	r0, [r0, #4]
 80853e4:	f7fe bef8 	b.w	80841d8 <network_is_on>

080853e8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80853e8:	2100      	movs	r1, #0
 80853ea:	6840      	ldr	r0, [r0, #4]
 80853ec:	f7fe befc 	b.w	80841e8 <network_is_off>

080853f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80853f0:	2200      	movs	r2, #0
 80853f2:	6840      	ldr	r0, [r0, #4]
 80853f4:	f081 0101 	eor.w	r1, r1, #1
 80853f8:	f7fe bece 	b.w	8084198 <network_listen>

080853fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80853fc:	2200      	movs	r2, #0
 80853fe:	6840      	ldr	r0, [r0, #4]
 8085400:	f7fe beda 	b.w	80841b8 <network_set_listen_timeout>

08085404 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8085404:	2200      	movs	r2, #0
 8085406:	6840      	ldr	r0, [r0, #4]
 8085408:	4611      	mov	r1, r2
 808540a:	f7fe bedd 	b.w	80841c8 <network_get_listen_timeout>

0808540e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808540e:	2200      	movs	r2, #0
 8085410:	6840      	ldr	r0, [r0, #4]
 8085412:	4611      	mov	r1, r2
 8085414:	f7fe bec8 	b.w	80841a8 <network_listening>

08085418 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8085418:	b570      	push	{r4, r5, r6, lr}
 808541a:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808541c:	2600      	movs	r6, #0
 808541e:	b086      	sub	sp, #24
 8085420:	4604      	mov	r4, r0
    IPAddress addr;
 8085422:	a804      	add	r0, sp, #16
 8085424:	f7ff fd7e 	bl	8084f24 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8085428:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 808542a:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808542c:	f001 f975 	bl	808671a <strlen>
 8085430:	4b0a      	ldr	r3, [pc, #40]	; (808545c <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8085432:	9600      	str	r6, [sp, #0]
 8085434:	b281      	uxth	r1, r0
 8085436:	685b      	ldr	r3, [r3, #4]
 8085438:	4628      	mov	r0, r5
 808543a:	aa03      	add	r2, sp, #12
 808543c:	f7fe fe00 	bl	8084040 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8085440:	b130      	cbz	r0, 8085450 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8085442:	4631      	mov	r1, r6
 8085444:	4620      	mov	r0, r4
 8085446:	f7ff fd7d 	bl	8084f44 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808544a:	4620      	mov	r0, r4
 808544c:	b006      	add	sp, #24
 808544e:	bd70      	pop	{r4, r5, r6, pc}
 8085450:	4620      	mov	r0, r4
 8085452:	a903      	add	r1, sp, #12
 8085454:	f7ff fd6e 	bl	8084f34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8085458:	e7f7      	b.n	808544a <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 808545a:	bf00      	nop
 808545c:	20000a5c 	.word	0x20000a5c

08085460 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8085460:	4b02      	ldr	r3, [pc, #8]	; (808546c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8085462:	4a03      	ldr	r2, [pc, #12]	; (8085470 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8085464:	601a      	str	r2, [r3, #0]
 8085466:	2200      	movs	r2, #0
 8085468:	605a      	str	r2, [r3, #4]

} // spark
 808546a:	4770      	bx	lr
 808546c:	20000a8c 	.word	0x20000a8c
 8085470:	08086b40 	.word	0x08086b40

08085474 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8085474:	4b02      	ldr	r3, [pc, #8]	; (8085480 <__tcf_0+0xc>)
 8085476:	6898      	ldr	r0, [r3, #8]
 8085478:	b108      	cbz	r0, 808547e <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 808547a:	f7fe bcd9 	b.w	8083e30 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 808547e:	4770      	bx	lr
 8085480:	200006d0 	.word	0x200006d0

08085484 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 8085484:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 8085486:	b570      	push	{r4, r5, r6, lr}
 8085488:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 808548a:	d901      	bls.n	8085490 <pinAvailable+0xc>
    return false;
 808548c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 808548e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8085490:	f1a0 030d 	sub.w	r3, r0, #13
 8085494:	2b02      	cmp	r3, #2
 8085496:	d90b      	bls.n	80854b0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 8085498:	2801      	cmp	r0, #1
 808549a:	d824      	bhi.n	80854e6 <pinAvailable+0x62>
 808549c:	f000 f8d0 	bl	8085640 <_Z19__fetch_global_Wirev>
 80854a0:	2100      	movs	r1, #0
 80854a2:	7c00      	ldrb	r0, [r0, #16]
 80854a4:	f7fe fd5c 	bl	8083f60 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80854a8:	f080 0001 	eor.w	r0, r0, #1
 80854ac:	b2c0      	uxtb	r0, r0
 80854ae:	e7ee      	b.n	808548e <pinAvailable+0xa>
 80854b0:	4e12      	ldr	r6, [pc, #72]	; (80854fc <pinAvailable+0x78>)
 80854b2:	7831      	ldrb	r1, [r6, #0]
 80854b4:	f3bf 8f5b 	dmb	ish
 80854b8:	f011 0501 	ands.w	r5, r1, #1
 80854bc:	d10d      	bne.n	80854da <pinAvailable+0x56>
 80854be:	4630      	mov	r0, r6
 80854c0:	f7fa fdef 	bl	80800a2 <__cxa_guard_acquire>
 80854c4:	b148      	cbz	r0, 80854da <pinAvailable+0x56>
 80854c6:	4629      	mov	r1, r5
 80854c8:	480d      	ldr	r0, [pc, #52]	; (8085500 <pinAvailable+0x7c>)
 80854ca:	f7fe fef1 	bl	80842b0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80854ce:	4630      	mov	r0, r6
 80854d0:	f7fa fdec 	bl	80800ac <__cxa_guard_release>
 80854d4:	480b      	ldr	r0, [pc, #44]	; (8085504 <pinAvailable+0x80>)
 80854d6:	f001 f8ab 	bl	8086630 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80854da:	4b09      	ldr	r3, [pc, #36]	; (8085500 <pinAvailable+0x7c>)
 80854dc:	7818      	ldrb	r0, [r3, #0]
 80854de:	f7fe fd87 	bl	8083ff0 <hal_spi_is_enabled>
 80854e2:	2800      	cmp	r0, #0
 80854e4:	d1d2      	bne.n	808548c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80854e6:	3c12      	subs	r4, #18
 80854e8:	2c01      	cmp	r4, #1
 80854ea:	d805      	bhi.n	80854f8 <pinAvailable+0x74>
 80854ec:	f000 f858 	bl	80855a0 <_Z22__fetch_global_Serial1v>
 80854f0:	7c00      	ldrb	r0, [r0, #16]
 80854f2:	f7fe fcdd 	bl	8083eb0 <hal_usart_is_enabled>
 80854f6:	e7d7      	b.n	80854a8 <pinAvailable+0x24>
  return true; // 'pin' is available
 80854f8:	2001      	movs	r0, #1
 80854fa:	e7c8      	b.n	808548e <pinAvailable+0xa>
 80854fc:	200006cc 	.word	0x200006cc
 8085500:	200006d0 	.word	0x200006d0
 8085504:	08085475 	.word	0x08085475

08085508 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8085508:	282e      	cmp	r0, #46	; 0x2e
{
 808550a:	b538      	push	{r3, r4, r5, lr}
 808550c:	4604      	mov	r4, r0
 808550e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8085510:	d80a      	bhi.n	8085528 <pinMode+0x20>
 8085512:	29ff      	cmp	r1, #255	; 0xff
 8085514:	d008      	beq.n	8085528 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8085516:	f7ff ffb5 	bl	8085484 <pinAvailable>
 808551a:	b128      	cbz	r0, 8085528 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 808551c:	4629      	mov	r1, r5
 808551e:	4620      	mov	r0, r4
}
 8085520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8085524:	f7fe bc44 	b.w	8083db0 <HAL_Pin_Mode>
}
 8085528:	bd38      	pop	{r3, r4, r5, pc}

0808552a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808552a:	b538      	push	{r3, r4, r5, lr}
 808552c:	4604      	mov	r4, r0
 808552e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8085530:	f7fe fc46 	bl	8083dc0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8085534:	28ff      	cmp	r0, #255	; 0xff
 8085536:	d010      	beq.n	808555a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 8085538:	2806      	cmp	r0, #6
 808553a:	d804      	bhi.n	8085546 <digitalWrite+0x1c>
 808553c:	234d      	movs	r3, #77	; 0x4d
 808553e:	fa23 f000 	lsr.w	r0, r3, r0
 8085542:	07c3      	lsls	r3, r0, #31
 8085544:	d409      	bmi.n	808555a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8085546:	4620      	mov	r0, r4
 8085548:	f7ff ff9c 	bl	8085484 <pinAvailable>
 808554c:	b128      	cbz	r0, 808555a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808554e:	4629      	mov	r1, r5
 8085550:	4620      	mov	r0, r4
}
 8085552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 8085556:	f7fe bc3b 	b.w	8083dd0 <HAL_GPIO_Write>
}
 808555a:	bd38      	pop	{r3, r4, r5, pc}

0808555c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 808555c:	4770      	bx	lr
	...

08085560 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 8085560:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 8085562:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 8085564:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 8085566:	462a      	mov	r2, r5
 8085568:	2100      	movs	r1, #0
 808556a:	f001 f885 	bl	8086678 <memset>
 808556e:	8025      	strh	r5, [r4, #0]
 8085570:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 8085572:	4e07      	ldr	r6, [pc, #28]	; (8085590 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 8085574:	4628      	mov	r0, r5
 8085576:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 8085578:	8125      	strh	r5, [r4, #8]
 808557a:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 808557c:	f000 f884 	bl	8085688 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 8085580:	4631      	mov	r1, r6
    };
 8085582:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 8085584:	4628      	mov	r0, r5
 8085586:	f000 f87f 	bl	8085688 <_ZnajRKSt9nothrow_t>
    };
 808558a:	60e0      	str	r0, [r4, #12]
}
 808558c:	4620      	mov	r0, r4
 808558e:	bd70      	pop	{r4, r5, r6, pc}
 8085590:	08086b74 	.word	0x08086b74

08085594 <_Z20acquireSerial1Bufferv>:
{
 8085594:	b510      	push	{r4, lr}
 8085596:	4604      	mov	r4, r0
    return defaultUsartConfig();
 8085598:	f7ff ffe2 	bl	8085560 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 808559c:	4620      	mov	r0, r4
 808559e:	bd10      	pop	{r4, pc}

080855a0 <_Z22__fetch_global_Serial1v>:
{
 80855a0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80855a2:	4d0e      	ldr	r5, [pc, #56]	; (80855dc <_Z22__fetch_global_Serial1v+0x3c>)
{
 80855a4:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80855a6:	7829      	ldrb	r1, [r5, #0]
 80855a8:	f3bf 8f5b 	dmb	ish
 80855ac:	f011 0401 	ands.w	r4, r1, #1
 80855b0:	d111      	bne.n	80855d6 <_Z22__fetch_global_Serial1v+0x36>
 80855b2:	4628      	mov	r0, r5
 80855b4:	f7fa fd75 	bl	80800a2 <__cxa_guard_acquire>
 80855b8:	b168      	cbz	r0, 80855d6 <_Z22__fetch_global_Serial1v+0x36>
 80855ba:	a801      	add	r0, sp, #4
 80855bc:	f7ff ffea 	bl	8085594 <_Z20acquireSerial1Bufferv>
 80855c0:	4621      	mov	r1, r4
 80855c2:	aa01      	add	r2, sp, #4
 80855c4:	4806      	ldr	r0, [pc, #24]	; (80855e0 <_Z22__fetch_global_Serial1v+0x40>)
 80855c6:	f7ff fe4b 	bl	8085260 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80855ca:	4628      	mov	r0, r5
 80855cc:	f7fa fd6e 	bl	80800ac <__cxa_guard_release>
 80855d0:	4804      	ldr	r0, [pc, #16]	; (80855e4 <_Z22__fetch_global_Serial1v+0x44>)
 80855d2:	f001 f82d 	bl	8086630 <atexit>
    return serial1;
}
 80855d6:	4802      	ldr	r0, [pc, #8]	; (80855e0 <_Z22__fetch_global_Serial1v+0x40>)
 80855d8:	b007      	add	sp, #28
 80855da:	bd30      	pop	{r4, r5, pc}
 80855dc:	20000a94 	.word	0x20000a94
 80855e0:	20000a98 	.word	0x20000a98
 80855e4:	0808555d 	.word	0x0808555d

080855e8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80855e8:	2300      	movs	r3, #0
 80855ea:	b507      	push	{r0, r1, r2, lr}
 80855ec:	461a      	mov	r2, r3
 80855ee:	4619      	mov	r1, r3
 80855f0:	9300      	str	r3, [sp, #0]
 80855f2:	4803      	ldr	r0, [pc, #12]	; (8085600 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80855f4:	f7ff fcb8 	bl	8084f68 <_ZN9IPAddressC1Ehhhh>
 80855f8:	b003      	add	sp, #12
 80855fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80855fe:	bf00      	nop
 8085600:	20000ab0 	.word	0x20000ab0

08085604 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8085604:	4770      	bx	lr
	...

08085608 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
hal_i2c_config_t defaultWireConfig() {
 8085608:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 808560a:	2314      	movs	r3, #20
 808560c:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808560e:	4e08      	ldr	r6, [pc, #32]	; (8085630 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x28>)
hal_i2c_config_t defaultWireConfig() {
 8085610:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 8085612:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8085614:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 8085616:	6085      	str	r5, [r0, #8]
 8085618:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808561a:	4628      	mov	r0, r5
 808561c:	f000 f834 	bl	8085688 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8085620:	4631      	mov	r1, r6
	};
 8085622:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8085624:	4628      	mov	r0, r5
 8085626:	f000 f82f 	bl	8085688 <_ZnajRKSt9nothrow_t>
	};
 808562a:	60e0      	str	r0, [r4, #12]
}
 808562c:	4620      	mov	r0, r4
 808562e:	bd70      	pop	{r4, r5, r6, pc}
 8085630:	08086b74 	.word	0x08086b74

08085634 <_Z17acquireWireBufferv>:
{
 8085634:	b510      	push	{r4, lr}
 8085636:	4604      	mov	r4, r0
	return defaultWireConfig();
 8085638:	f7ff ffe6 	bl	8085608 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 808563c:	4620      	mov	r0, r4
 808563e:	bd10      	pop	{r4, pc}

08085640 <_Z19__fetch_global_Wirev>:
{
 8085640:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8085642:	4d0e      	ldr	r5, [pc, #56]	; (808567c <_Z19__fetch_global_Wirev+0x3c>)
{
 8085644:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8085646:	7829      	ldrb	r1, [r5, #0]
 8085648:	f3bf 8f5b 	dmb	ish
 808564c:	f011 0401 	ands.w	r4, r1, #1
 8085650:	d111      	bne.n	8085676 <_Z19__fetch_global_Wirev+0x36>
 8085652:	4628      	mov	r0, r5
 8085654:	f7fa fd25 	bl	80800a2 <__cxa_guard_acquire>
 8085658:	b168      	cbz	r0, 8085676 <_Z19__fetch_global_Wirev+0x36>
 808565a:	a801      	add	r0, sp, #4
 808565c:	f7ff ffea 	bl	8085634 <_Z17acquireWireBufferv>
 8085660:	4621      	mov	r1, r4
 8085662:	aa01      	add	r2, sp, #4
 8085664:	4806      	ldr	r0, [pc, #24]	; (8085680 <_Z19__fetch_global_Wirev+0x40>)
 8085666:	f7ff fe4f 	bl	8085308 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808566a:	4628      	mov	r0, r5
 808566c:	f7fa fd1e 	bl	80800ac <__cxa_guard_release>
 8085670:	4804      	ldr	r0, [pc, #16]	; (8085684 <_Z19__fetch_global_Wirev+0x44>)
 8085672:	f000 ffdd 	bl	8086630 <atexit>
	return wire;
}
 8085676:	4802      	ldr	r0, [pc, #8]	; (8085680 <_Z19__fetch_global_Wirev+0x40>)
 8085678:	b007      	add	sp, #28
 808567a:	bd30      	pop	{r4, r5, pc}
 808567c:	20000ab8 	.word	0x20000ab8
 8085680:	20000abc 	.word	0x20000abc
 8085684:	08085605 	.word	0x08085605

08085688 <_ZnajRKSt9nothrow_t>:
 8085688:	f7fa bd07 	b.w	808009a <_Znaj>

0808568c <_ZSt25__throw_bad_function_callv>:
 808568c:	b508      	push	{r3, lr}
 808568e:	f7fe fdeb 	bl	8084268 <abort>
	...

08085694 <__aeabi_drsub>:
 8085694:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8085698:	e002      	b.n	80856a0 <__adddf3>
 808569a:	bf00      	nop

0808569c <__aeabi_dsub>:
 808569c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080856a0 <__adddf3>:
 80856a0:	b530      	push	{r4, r5, lr}
 80856a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80856a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80856aa:	ea94 0f05 	teq	r4, r5
 80856ae:	bf08      	it	eq
 80856b0:	ea90 0f02 	teqeq	r0, r2
 80856b4:	bf1f      	itttt	ne
 80856b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80856ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80856be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80856c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80856c6:	f000 80e2 	beq.w	808588e <__adddf3+0x1ee>
 80856ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80856ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80856d2:	bfb8      	it	lt
 80856d4:	426d      	neglt	r5, r5
 80856d6:	dd0c      	ble.n	80856f2 <__adddf3+0x52>
 80856d8:	442c      	add	r4, r5
 80856da:	ea80 0202 	eor.w	r2, r0, r2
 80856de:	ea81 0303 	eor.w	r3, r1, r3
 80856e2:	ea82 0000 	eor.w	r0, r2, r0
 80856e6:	ea83 0101 	eor.w	r1, r3, r1
 80856ea:	ea80 0202 	eor.w	r2, r0, r2
 80856ee:	ea81 0303 	eor.w	r3, r1, r3
 80856f2:	2d36      	cmp	r5, #54	; 0x36
 80856f4:	bf88      	it	hi
 80856f6:	bd30      	pophi	{r4, r5, pc}
 80856f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80856fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8085700:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8085704:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8085708:	d002      	beq.n	8085710 <__adddf3+0x70>
 808570a:	4240      	negs	r0, r0
 808570c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8085710:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8085714:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8085718:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808571c:	d002      	beq.n	8085724 <__adddf3+0x84>
 808571e:	4252      	negs	r2, r2
 8085720:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8085724:	ea94 0f05 	teq	r4, r5
 8085728:	f000 80a7 	beq.w	808587a <__adddf3+0x1da>
 808572c:	f1a4 0401 	sub.w	r4, r4, #1
 8085730:	f1d5 0e20 	rsbs	lr, r5, #32
 8085734:	db0d      	blt.n	8085752 <__adddf3+0xb2>
 8085736:	fa02 fc0e 	lsl.w	ip, r2, lr
 808573a:	fa22 f205 	lsr.w	r2, r2, r5
 808573e:	1880      	adds	r0, r0, r2
 8085740:	f141 0100 	adc.w	r1, r1, #0
 8085744:	fa03 f20e 	lsl.w	r2, r3, lr
 8085748:	1880      	adds	r0, r0, r2
 808574a:	fa43 f305 	asr.w	r3, r3, r5
 808574e:	4159      	adcs	r1, r3
 8085750:	e00e      	b.n	8085770 <__adddf3+0xd0>
 8085752:	f1a5 0520 	sub.w	r5, r5, #32
 8085756:	f10e 0e20 	add.w	lr, lr, #32
 808575a:	2a01      	cmp	r2, #1
 808575c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8085760:	bf28      	it	cs
 8085762:	f04c 0c02 	orrcs.w	ip, ip, #2
 8085766:	fa43 f305 	asr.w	r3, r3, r5
 808576a:	18c0      	adds	r0, r0, r3
 808576c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8085770:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8085774:	d507      	bpl.n	8085786 <__adddf3+0xe6>
 8085776:	f04f 0e00 	mov.w	lr, #0
 808577a:	f1dc 0c00 	rsbs	ip, ip, #0
 808577e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8085782:	eb6e 0101 	sbc.w	r1, lr, r1
 8085786:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808578a:	d31b      	bcc.n	80857c4 <__adddf3+0x124>
 808578c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8085790:	d30c      	bcc.n	80857ac <__adddf3+0x10c>
 8085792:	0849      	lsrs	r1, r1, #1
 8085794:	ea5f 0030 	movs.w	r0, r0, rrx
 8085798:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808579c:	f104 0401 	add.w	r4, r4, #1
 80857a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80857a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80857a8:	f080 809a 	bcs.w	80858e0 <__adddf3+0x240>
 80857ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80857b0:	bf08      	it	eq
 80857b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80857b6:	f150 0000 	adcs.w	r0, r0, #0
 80857ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80857be:	ea41 0105 	orr.w	r1, r1, r5
 80857c2:	bd30      	pop	{r4, r5, pc}
 80857c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80857c8:	4140      	adcs	r0, r0
 80857ca:	eb41 0101 	adc.w	r1, r1, r1
 80857ce:	3c01      	subs	r4, #1
 80857d0:	bf28      	it	cs
 80857d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80857d6:	d2e9      	bcs.n	80857ac <__adddf3+0x10c>
 80857d8:	f091 0f00 	teq	r1, #0
 80857dc:	bf04      	itt	eq
 80857de:	4601      	moveq	r1, r0
 80857e0:	2000      	moveq	r0, #0
 80857e2:	fab1 f381 	clz	r3, r1
 80857e6:	bf08      	it	eq
 80857e8:	3320      	addeq	r3, #32
 80857ea:	f1a3 030b 	sub.w	r3, r3, #11
 80857ee:	f1b3 0220 	subs.w	r2, r3, #32
 80857f2:	da0c      	bge.n	808580e <__adddf3+0x16e>
 80857f4:	320c      	adds	r2, #12
 80857f6:	dd08      	ble.n	808580a <__adddf3+0x16a>
 80857f8:	f102 0c14 	add.w	ip, r2, #20
 80857fc:	f1c2 020c 	rsb	r2, r2, #12
 8085800:	fa01 f00c 	lsl.w	r0, r1, ip
 8085804:	fa21 f102 	lsr.w	r1, r1, r2
 8085808:	e00c      	b.n	8085824 <__adddf3+0x184>
 808580a:	f102 0214 	add.w	r2, r2, #20
 808580e:	bfd8      	it	le
 8085810:	f1c2 0c20 	rsble	ip, r2, #32
 8085814:	fa01 f102 	lsl.w	r1, r1, r2
 8085818:	fa20 fc0c 	lsr.w	ip, r0, ip
 808581c:	bfdc      	itt	le
 808581e:	ea41 010c 	orrle.w	r1, r1, ip
 8085822:	4090      	lslle	r0, r2
 8085824:	1ae4      	subs	r4, r4, r3
 8085826:	bfa2      	ittt	ge
 8085828:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808582c:	4329      	orrge	r1, r5
 808582e:	bd30      	popge	{r4, r5, pc}
 8085830:	ea6f 0404 	mvn.w	r4, r4
 8085834:	3c1f      	subs	r4, #31
 8085836:	da1c      	bge.n	8085872 <__adddf3+0x1d2>
 8085838:	340c      	adds	r4, #12
 808583a:	dc0e      	bgt.n	808585a <__adddf3+0x1ba>
 808583c:	f104 0414 	add.w	r4, r4, #20
 8085840:	f1c4 0220 	rsb	r2, r4, #32
 8085844:	fa20 f004 	lsr.w	r0, r0, r4
 8085848:	fa01 f302 	lsl.w	r3, r1, r2
 808584c:	ea40 0003 	orr.w	r0, r0, r3
 8085850:	fa21 f304 	lsr.w	r3, r1, r4
 8085854:	ea45 0103 	orr.w	r1, r5, r3
 8085858:	bd30      	pop	{r4, r5, pc}
 808585a:	f1c4 040c 	rsb	r4, r4, #12
 808585e:	f1c4 0220 	rsb	r2, r4, #32
 8085862:	fa20 f002 	lsr.w	r0, r0, r2
 8085866:	fa01 f304 	lsl.w	r3, r1, r4
 808586a:	ea40 0003 	orr.w	r0, r0, r3
 808586e:	4629      	mov	r1, r5
 8085870:	bd30      	pop	{r4, r5, pc}
 8085872:	fa21 f004 	lsr.w	r0, r1, r4
 8085876:	4629      	mov	r1, r5
 8085878:	bd30      	pop	{r4, r5, pc}
 808587a:	f094 0f00 	teq	r4, #0
 808587e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8085882:	bf06      	itte	eq
 8085884:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8085888:	3401      	addeq	r4, #1
 808588a:	3d01      	subne	r5, #1
 808588c:	e74e      	b.n	808572c <__adddf3+0x8c>
 808588e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8085892:	bf18      	it	ne
 8085894:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8085898:	d029      	beq.n	80858ee <__adddf3+0x24e>
 808589a:	ea94 0f05 	teq	r4, r5
 808589e:	bf08      	it	eq
 80858a0:	ea90 0f02 	teqeq	r0, r2
 80858a4:	d005      	beq.n	80858b2 <__adddf3+0x212>
 80858a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80858aa:	bf04      	itt	eq
 80858ac:	4619      	moveq	r1, r3
 80858ae:	4610      	moveq	r0, r2
 80858b0:	bd30      	pop	{r4, r5, pc}
 80858b2:	ea91 0f03 	teq	r1, r3
 80858b6:	bf1e      	ittt	ne
 80858b8:	2100      	movne	r1, #0
 80858ba:	2000      	movne	r0, #0
 80858bc:	bd30      	popne	{r4, r5, pc}
 80858be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80858c2:	d105      	bne.n	80858d0 <__adddf3+0x230>
 80858c4:	0040      	lsls	r0, r0, #1
 80858c6:	4149      	adcs	r1, r1
 80858c8:	bf28      	it	cs
 80858ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80858ce:	bd30      	pop	{r4, r5, pc}
 80858d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80858d4:	bf3c      	itt	cc
 80858d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80858da:	bd30      	popcc	{r4, r5, pc}
 80858dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80858e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80858e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80858e8:	f04f 0000 	mov.w	r0, #0
 80858ec:	bd30      	pop	{r4, r5, pc}
 80858ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80858f2:	bf1a      	itte	ne
 80858f4:	4619      	movne	r1, r3
 80858f6:	4610      	movne	r0, r2
 80858f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80858fc:	bf1c      	itt	ne
 80858fe:	460b      	movne	r3, r1
 8085900:	4602      	movne	r2, r0
 8085902:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8085906:	bf06      	itte	eq
 8085908:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808590c:	ea91 0f03 	teqeq	r1, r3
 8085910:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8085914:	bd30      	pop	{r4, r5, pc}
 8085916:	bf00      	nop

08085918 <__aeabi_ui2d>:
 8085918:	f090 0f00 	teq	r0, #0
 808591c:	bf04      	itt	eq
 808591e:	2100      	moveq	r1, #0
 8085920:	4770      	bxeq	lr
 8085922:	b530      	push	{r4, r5, lr}
 8085924:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8085928:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808592c:	f04f 0500 	mov.w	r5, #0
 8085930:	f04f 0100 	mov.w	r1, #0
 8085934:	e750      	b.n	80857d8 <__adddf3+0x138>
 8085936:	bf00      	nop

08085938 <__aeabi_i2d>:
 8085938:	f090 0f00 	teq	r0, #0
 808593c:	bf04      	itt	eq
 808593e:	2100      	moveq	r1, #0
 8085940:	4770      	bxeq	lr
 8085942:	b530      	push	{r4, r5, lr}
 8085944:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8085948:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808594c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8085950:	bf48      	it	mi
 8085952:	4240      	negmi	r0, r0
 8085954:	f04f 0100 	mov.w	r1, #0
 8085958:	e73e      	b.n	80857d8 <__adddf3+0x138>
 808595a:	bf00      	nop

0808595c <__aeabi_f2d>:
 808595c:	0042      	lsls	r2, r0, #1
 808595e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8085962:	ea4f 0131 	mov.w	r1, r1, rrx
 8085966:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808596a:	bf1f      	itttt	ne
 808596c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8085970:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8085974:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8085978:	4770      	bxne	lr
 808597a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808597e:	bf08      	it	eq
 8085980:	4770      	bxeq	lr
 8085982:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8085986:	bf04      	itt	eq
 8085988:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 808598c:	4770      	bxeq	lr
 808598e:	b530      	push	{r4, r5, lr}
 8085990:	f44f 7460 	mov.w	r4, #896	; 0x380
 8085994:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8085998:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808599c:	e71c      	b.n	80857d8 <__adddf3+0x138>
 808599e:	bf00      	nop

080859a0 <__aeabi_ul2d>:
 80859a0:	ea50 0201 	orrs.w	r2, r0, r1
 80859a4:	bf08      	it	eq
 80859a6:	4770      	bxeq	lr
 80859a8:	b530      	push	{r4, r5, lr}
 80859aa:	f04f 0500 	mov.w	r5, #0
 80859ae:	e00a      	b.n	80859c6 <__aeabi_l2d+0x16>

080859b0 <__aeabi_l2d>:
 80859b0:	ea50 0201 	orrs.w	r2, r0, r1
 80859b4:	bf08      	it	eq
 80859b6:	4770      	bxeq	lr
 80859b8:	b530      	push	{r4, r5, lr}
 80859ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80859be:	d502      	bpl.n	80859c6 <__aeabi_l2d+0x16>
 80859c0:	4240      	negs	r0, r0
 80859c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80859c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80859ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80859ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80859d2:	f43f aed8 	beq.w	8085786 <__adddf3+0xe6>
 80859d6:	f04f 0203 	mov.w	r2, #3
 80859da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80859de:	bf18      	it	ne
 80859e0:	3203      	addne	r2, #3
 80859e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80859e6:	bf18      	it	ne
 80859e8:	3203      	addne	r2, #3
 80859ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80859ee:	f1c2 0320 	rsb	r3, r2, #32
 80859f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80859f6:	fa20 f002 	lsr.w	r0, r0, r2
 80859fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80859fe:	ea40 000e 	orr.w	r0, r0, lr
 8085a02:	fa21 f102 	lsr.w	r1, r1, r2
 8085a06:	4414      	add	r4, r2
 8085a08:	e6bd      	b.n	8085786 <__adddf3+0xe6>
 8085a0a:	bf00      	nop

08085a0c <__aeabi_dmul>:
 8085a0c:	b570      	push	{r4, r5, r6, lr}
 8085a0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8085a12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8085a16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8085a1a:	bf1d      	ittte	ne
 8085a1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8085a20:	ea94 0f0c 	teqne	r4, ip
 8085a24:	ea95 0f0c 	teqne	r5, ip
 8085a28:	f000 f8de 	bleq	8085be8 <__aeabi_dmul+0x1dc>
 8085a2c:	442c      	add	r4, r5
 8085a2e:	ea81 0603 	eor.w	r6, r1, r3
 8085a32:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8085a36:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8085a3a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8085a3e:	bf18      	it	ne
 8085a40:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8085a44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8085a48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8085a4c:	d038      	beq.n	8085ac0 <__aeabi_dmul+0xb4>
 8085a4e:	fba0 ce02 	umull	ip, lr, r0, r2
 8085a52:	f04f 0500 	mov.w	r5, #0
 8085a56:	fbe1 e502 	umlal	lr, r5, r1, r2
 8085a5a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8085a5e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8085a62:	f04f 0600 	mov.w	r6, #0
 8085a66:	fbe1 5603 	umlal	r5, r6, r1, r3
 8085a6a:	f09c 0f00 	teq	ip, #0
 8085a6e:	bf18      	it	ne
 8085a70:	f04e 0e01 	orrne.w	lr, lr, #1
 8085a74:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8085a78:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8085a7c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8085a80:	d204      	bcs.n	8085a8c <__aeabi_dmul+0x80>
 8085a82:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8085a86:	416d      	adcs	r5, r5
 8085a88:	eb46 0606 	adc.w	r6, r6, r6
 8085a8c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8085a90:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8085a94:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8085a98:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8085a9c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8085aa0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8085aa4:	bf88      	it	hi
 8085aa6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8085aaa:	d81e      	bhi.n	8085aea <__aeabi_dmul+0xde>
 8085aac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8085ab0:	bf08      	it	eq
 8085ab2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8085ab6:	f150 0000 	adcs.w	r0, r0, #0
 8085aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8085abe:	bd70      	pop	{r4, r5, r6, pc}
 8085ac0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8085ac4:	ea46 0101 	orr.w	r1, r6, r1
 8085ac8:	ea40 0002 	orr.w	r0, r0, r2
 8085acc:	ea81 0103 	eor.w	r1, r1, r3
 8085ad0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8085ad4:	bfc2      	ittt	gt
 8085ad6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8085ada:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8085ade:	bd70      	popgt	{r4, r5, r6, pc}
 8085ae0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8085ae4:	f04f 0e00 	mov.w	lr, #0
 8085ae8:	3c01      	subs	r4, #1
 8085aea:	f300 80ab 	bgt.w	8085c44 <__aeabi_dmul+0x238>
 8085aee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8085af2:	bfde      	ittt	le
 8085af4:	2000      	movle	r0, #0
 8085af6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8085afa:	bd70      	pople	{r4, r5, r6, pc}
 8085afc:	f1c4 0400 	rsb	r4, r4, #0
 8085b00:	3c20      	subs	r4, #32
 8085b02:	da35      	bge.n	8085b70 <__aeabi_dmul+0x164>
 8085b04:	340c      	adds	r4, #12
 8085b06:	dc1b      	bgt.n	8085b40 <__aeabi_dmul+0x134>
 8085b08:	f104 0414 	add.w	r4, r4, #20
 8085b0c:	f1c4 0520 	rsb	r5, r4, #32
 8085b10:	fa00 f305 	lsl.w	r3, r0, r5
 8085b14:	fa20 f004 	lsr.w	r0, r0, r4
 8085b18:	fa01 f205 	lsl.w	r2, r1, r5
 8085b1c:	ea40 0002 	orr.w	r0, r0, r2
 8085b20:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8085b24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8085b28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8085b2c:	fa21 f604 	lsr.w	r6, r1, r4
 8085b30:	eb42 0106 	adc.w	r1, r2, r6
 8085b34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8085b38:	bf08      	it	eq
 8085b3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8085b3e:	bd70      	pop	{r4, r5, r6, pc}
 8085b40:	f1c4 040c 	rsb	r4, r4, #12
 8085b44:	f1c4 0520 	rsb	r5, r4, #32
 8085b48:	fa00 f304 	lsl.w	r3, r0, r4
 8085b4c:	fa20 f005 	lsr.w	r0, r0, r5
 8085b50:	fa01 f204 	lsl.w	r2, r1, r4
 8085b54:	ea40 0002 	orr.w	r0, r0, r2
 8085b58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8085b5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8085b60:	f141 0100 	adc.w	r1, r1, #0
 8085b64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8085b68:	bf08      	it	eq
 8085b6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8085b6e:	bd70      	pop	{r4, r5, r6, pc}
 8085b70:	f1c4 0520 	rsb	r5, r4, #32
 8085b74:	fa00 f205 	lsl.w	r2, r0, r5
 8085b78:	ea4e 0e02 	orr.w	lr, lr, r2
 8085b7c:	fa20 f304 	lsr.w	r3, r0, r4
 8085b80:	fa01 f205 	lsl.w	r2, r1, r5
 8085b84:	ea43 0302 	orr.w	r3, r3, r2
 8085b88:	fa21 f004 	lsr.w	r0, r1, r4
 8085b8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8085b90:	fa21 f204 	lsr.w	r2, r1, r4
 8085b94:	ea20 0002 	bic.w	r0, r0, r2
 8085b98:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8085b9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8085ba0:	bf08      	it	eq
 8085ba2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8085ba6:	bd70      	pop	{r4, r5, r6, pc}
 8085ba8:	f094 0f00 	teq	r4, #0
 8085bac:	d10f      	bne.n	8085bce <__aeabi_dmul+0x1c2>
 8085bae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8085bb2:	0040      	lsls	r0, r0, #1
 8085bb4:	eb41 0101 	adc.w	r1, r1, r1
 8085bb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8085bbc:	bf08      	it	eq
 8085bbe:	3c01      	subeq	r4, #1
 8085bc0:	d0f7      	beq.n	8085bb2 <__aeabi_dmul+0x1a6>
 8085bc2:	ea41 0106 	orr.w	r1, r1, r6
 8085bc6:	f095 0f00 	teq	r5, #0
 8085bca:	bf18      	it	ne
 8085bcc:	4770      	bxne	lr
 8085bce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8085bd2:	0052      	lsls	r2, r2, #1
 8085bd4:	eb43 0303 	adc.w	r3, r3, r3
 8085bd8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8085bdc:	bf08      	it	eq
 8085bde:	3d01      	subeq	r5, #1
 8085be0:	d0f7      	beq.n	8085bd2 <__aeabi_dmul+0x1c6>
 8085be2:	ea43 0306 	orr.w	r3, r3, r6
 8085be6:	4770      	bx	lr
 8085be8:	ea94 0f0c 	teq	r4, ip
 8085bec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8085bf0:	bf18      	it	ne
 8085bf2:	ea95 0f0c 	teqne	r5, ip
 8085bf6:	d00c      	beq.n	8085c12 <__aeabi_dmul+0x206>
 8085bf8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8085bfc:	bf18      	it	ne
 8085bfe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8085c02:	d1d1      	bne.n	8085ba8 <__aeabi_dmul+0x19c>
 8085c04:	ea81 0103 	eor.w	r1, r1, r3
 8085c08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8085c0c:	f04f 0000 	mov.w	r0, #0
 8085c10:	bd70      	pop	{r4, r5, r6, pc}
 8085c12:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8085c16:	bf06      	itte	eq
 8085c18:	4610      	moveq	r0, r2
 8085c1a:	4619      	moveq	r1, r3
 8085c1c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8085c20:	d019      	beq.n	8085c56 <__aeabi_dmul+0x24a>
 8085c22:	ea94 0f0c 	teq	r4, ip
 8085c26:	d102      	bne.n	8085c2e <__aeabi_dmul+0x222>
 8085c28:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8085c2c:	d113      	bne.n	8085c56 <__aeabi_dmul+0x24a>
 8085c2e:	ea95 0f0c 	teq	r5, ip
 8085c32:	d105      	bne.n	8085c40 <__aeabi_dmul+0x234>
 8085c34:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8085c38:	bf1c      	itt	ne
 8085c3a:	4610      	movne	r0, r2
 8085c3c:	4619      	movne	r1, r3
 8085c3e:	d10a      	bne.n	8085c56 <__aeabi_dmul+0x24a>
 8085c40:	ea81 0103 	eor.w	r1, r1, r3
 8085c44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8085c48:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8085c4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8085c50:	f04f 0000 	mov.w	r0, #0
 8085c54:	bd70      	pop	{r4, r5, r6, pc}
 8085c56:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8085c5a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8085c5e:	bd70      	pop	{r4, r5, r6, pc}

08085c60 <__aeabi_ddiv>:
 8085c60:	b570      	push	{r4, r5, r6, lr}
 8085c62:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8085c66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8085c6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8085c6e:	bf1d      	ittte	ne
 8085c70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8085c74:	ea94 0f0c 	teqne	r4, ip
 8085c78:	ea95 0f0c 	teqne	r5, ip
 8085c7c:	f000 f8a7 	bleq	8085dce <__aeabi_ddiv+0x16e>
 8085c80:	eba4 0405 	sub.w	r4, r4, r5
 8085c84:	ea81 0e03 	eor.w	lr, r1, r3
 8085c88:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8085c8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8085c90:	f000 8088 	beq.w	8085da4 <__aeabi_ddiv+0x144>
 8085c94:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8085c98:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8085c9c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8085ca0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8085ca4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8085ca8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8085cac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8085cb0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8085cb4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8085cb8:	429d      	cmp	r5, r3
 8085cba:	bf08      	it	eq
 8085cbc:	4296      	cmpeq	r6, r2
 8085cbe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8085cc2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8085cc6:	d202      	bcs.n	8085cce <__aeabi_ddiv+0x6e>
 8085cc8:	085b      	lsrs	r3, r3, #1
 8085cca:	ea4f 0232 	mov.w	r2, r2, rrx
 8085cce:	1ab6      	subs	r6, r6, r2
 8085cd0:	eb65 0503 	sbc.w	r5, r5, r3
 8085cd4:	085b      	lsrs	r3, r3, #1
 8085cd6:	ea4f 0232 	mov.w	r2, r2, rrx
 8085cda:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8085cde:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8085ce2:	ebb6 0e02 	subs.w	lr, r6, r2
 8085ce6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8085cea:	bf22      	ittt	cs
 8085cec:	1ab6      	subcs	r6, r6, r2
 8085cee:	4675      	movcs	r5, lr
 8085cf0:	ea40 000c 	orrcs.w	r0, r0, ip
 8085cf4:	085b      	lsrs	r3, r3, #1
 8085cf6:	ea4f 0232 	mov.w	r2, r2, rrx
 8085cfa:	ebb6 0e02 	subs.w	lr, r6, r2
 8085cfe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8085d02:	bf22      	ittt	cs
 8085d04:	1ab6      	subcs	r6, r6, r2
 8085d06:	4675      	movcs	r5, lr
 8085d08:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8085d0c:	085b      	lsrs	r3, r3, #1
 8085d0e:	ea4f 0232 	mov.w	r2, r2, rrx
 8085d12:	ebb6 0e02 	subs.w	lr, r6, r2
 8085d16:	eb75 0e03 	sbcs.w	lr, r5, r3
 8085d1a:	bf22      	ittt	cs
 8085d1c:	1ab6      	subcs	r6, r6, r2
 8085d1e:	4675      	movcs	r5, lr
 8085d20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8085d24:	085b      	lsrs	r3, r3, #1
 8085d26:	ea4f 0232 	mov.w	r2, r2, rrx
 8085d2a:	ebb6 0e02 	subs.w	lr, r6, r2
 8085d2e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8085d32:	bf22      	ittt	cs
 8085d34:	1ab6      	subcs	r6, r6, r2
 8085d36:	4675      	movcs	r5, lr
 8085d38:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8085d3c:	ea55 0e06 	orrs.w	lr, r5, r6
 8085d40:	d018      	beq.n	8085d74 <__aeabi_ddiv+0x114>
 8085d42:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8085d46:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8085d4a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8085d4e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8085d52:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8085d56:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8085d5a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8085d5e:	d1c0      	bne.n	8085ce2 <__aeabi_ddiv+0x82>
 8085d60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8085d64:	d10b      	bne.n	8085d7e <__aeabi_ddiv+0x11e>
 8085d66:	ea41 0100 	orr.w	r1, r1, r0
 8085d6a:	f04f 0000 	mov.w	r0, #0
 8085d6e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8085d72:	e7b6      	b.n	8085ce2 <__aeabi_ddiv+0x82>
 8085d74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8085d78:	bf04      	itt	eq
 8085d7a:	4301      	orreq	r1, r0
 8085d7c:	2000      	moveq	r0, #0
 8085d7e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8085d82:	bf88      	it	hi
 8085d84:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8085d88:	f63f aeaf 	bhi.w	8085aea <__aeabi_dmul+0xde>
 8085d8c:	ebb5 0c03 	subs.w	ip, r5, r3
 8085d90:	bf04      	itt	eq
 8085d92:	ebb6 0c02 	subseq.w	ip, r6, r2
 8085d96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8085d9a:	f150 0000 	adcs.w	r0, r0, #0
 8085d9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8085da2:	bd70      	pop	{r4, r5, r6, pc}
 8085da4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8085da8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8085dac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8085db0:	bfc2      	ittt	gt
 8085db2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8085db6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8085dba:	bd70      	popgt	{r4, r5, r6, pc}
 8085dbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8085dc0:	f04f 0e00 	mov.w	lr, #0
 8085dc4:	3c01      	subs	r4, #1
 8085dc6:	e690      	b.n	8085aea <__aeabi_dmul+0xde>
 8085dc8:	ea45 0e06 	orr.w	lr, r5, r6
 8085dcc:	e68d      	b.n	8085aea <__aeabi_dmul+0xde>
 8085dce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8085dd2:	ea94 0f0c 	teq	r4, ip
 8085dd6:	bf08      	it	eq
 8085dd8:	ea95 0f0c 	teqeq	r5, ip
 8085ddc:	f43f af3b 	beq.w	8085c56 <__aeabi_dmul+0x24a>
 8085de0:	ea94 0f0c 	teq	r4, ip
 8085de4:	d10a      	bne.n	8085dfc <__aeabi_ddiv+0x19c>
 8085de6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8085dea:	f47f af34 	bne.w	8085c56 <__aeabi_dmul+0x24a>
 8085dee:	ea95 0f0c 	teq	r5, ip
 8085df2:	f47f af25 	bne.w	8085c40 <__aeabi_dmul+0x234>
 8085df6:	4610      	mov	r0, r2
 8085df8:	4619      	mov	r1, r3
 8085dfa:	e72c      	b.n	8085c56 <__aeabi_dmul+0x24a>
 8085dfc:	ea95 0f0c 	teq	r5, ip
 8085e00:	d106      	bne.n	8085e10 <__aeabi_ddiv+0x1b0>
 8085e02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8085e06:	f43f aefd 	beq.w	8085c04 <__aeabi_dmul+0x1f8>
 8085e0a:	4610      	mov	r0, r2
 8085e0c:	4619      	mov	r1, r3
 8085e0e:	e722      	b.n	8085c56 <__aeabi_dmul+0x24a>
 8085e10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8085e14:	bf18      	it	ne
 8085e16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8085e1a:	f47f aec5 	bne.w	8085ba8 <__aeabi_dmul+0x19c>
 8085e1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8085e22:	f47f af0d 	bne.w	8085c40 <__aeabi_dmul+0x234>
 8085e26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8085e2a:	f47f aeeb 	bne.w	8085c04 <__aeabi_dmul+0x1f8>
 8085e2e:	e712      	b.n	8085c56 <__aeabi_dmul+0x24a>

08085e30 <__gedf2>:
 8085e30:	f04f 3cff 	mov.w	ip, #4294967295
 8085e34:	e006      	b.n	8085e44 <__cmpdf2+0x4>
 8085e36:	bf00      	nop

08085e38 <__ledf2>:
 8085e38:	f04f 0c01 	mov.w	ip, #1
 8085e3c:	e002      	b.n	8085e44 <__cmpdf2+0x4>
 8085e3e:	bf00      	nop

08085e40 <__cmpdf2>:
 8085e40:	f04f 0c01 	mov.w	ip, #1
 8085e44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8085e48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8085e4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8085e50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8085e54:	bf18      	it	ne
 8085e56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8085e5a:	d01b      	beq.n	8085e94 <__cmpdf2+0x54>
 8085e5c:	b001      	add	sp, #4
 8085e5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8085e62:	bf0c      	ite	eq
 8085e64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8085e68:	ea91 0f03 	teqne	r1, r3
 8085e6c:	bf02      	ittt	eq
 8085e6e:	ea90 0f02 	teqeq	r0, r2
 8085e72:	2000      	moveq	r0, #0
 8085e74:	4770      	bxeq	lr
 8085e76:	f110 0f00 	cmn.w	r0, #0
 8085e7a:	ea91 0f03 	teq	r1, r3
 8085e7e:	bf58      	it	pl
 8085e80:	4299      	cmppl	r1, r3
 8085e82:	bf08      	it	eq
 8085e84:	4290      	cmpeq	r0, r2
 8085e86:	bf2c      	ite	cs
 8085e88:	17d8      	asrcs	r0, r3, #31
 8085e8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8085e8e:	f040 0001 	orr.w	r0, r0, #1
 8085e92:	4770      	bx	lr
 8085e94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8085e98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8085e9c:	d102      	bne.n	8085ea4 <__cmpdf2+0x64>
 8085e9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8085ea2:	d107      	bne.n	8085eb4 <__cmpdf2+0x74>
 8085ea4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8085ea8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8085eac:	d1d6      	bne.n	8085e5c <__cmpdf2+0x1c>
 8085eae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8085eb2:	d0d3      	beq.n	8085e5c <__cmpdf2+0x1c>
 8085eb4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8085eb8:	4770      	bx	lr
 8085eba:	bf00      	nop

08085ebc <__aeabi_cdrcmple>:
 8085ebc:	4684      	mov	ip, r0
 8085ebe:	4610      	mov	r0, r2
 8085ec0:	4662      	mov	r2, ip
 8085ec2:	468c      	mov	ip, r1
 8085ec4:	4619      	mov	r1, r3
 8085ec6:	4663      	mov	r3, ip
 8085ec8:	e000      	b.n	8085ecc <__aeabi_cdcmpeq>
 8085eca:	bf00      	nop

08085ecc <__aeabi_cdcmpeq>:
 8085ecc:	b501      	push	{r0, lr}
 8085ece:	f7ff ffb7 	bl	8085e40 <__cmpdf2>
 8085ed2:	2800      	cmp	r0, #0
 8085ed4:	bf48      	it	mi
 8085ed6:	f110 0f00 	cmnmi.w	r0, #0
 8085eda:	bd01      	pop	{r0, pc}

08085edc <__aeabi_dcmpeq>:
 8085edc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085ee0:	f7ff fff4 	bl	8085ecc <__aeabi_cdcmpeq>
 8085ee4:	bf0c      	ite	eq
 8085ee6:	2001      	moveq	r0, #1
 8085ee8:	2000      	movne	r0, #0
 8085eea:	f85d fb08 	ldr.w	pc, [sp], #8
 8085eee:	bf00      	nop

08085ef0 <__aeabi_dcmplt>:
 8085ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085ef4:	f7ff ffea 	bl	8085ecc <__aeabi_cdcmpeq>
 8085ef8:	bf34      	ite	cc
 8085efa:	2001      	movcc	r0, #1
 8085efc:	2000      	movcs	r0, #0
 8085efe:	f85d fb08 	ldr.w	pc, [sp], #8
 8085f02:	bf00      	nop

08085f04 <__aeabi_dcmple>:
 8085f04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085f08:	f7ff ffe0 	bl	8085ecc <__aeabi_cdcmpeq>
 8085f0c:	bf94      	ite	ls
 8085f0e:	2001      	movls	r0, #1
 8085f10:	2000      	movhi	r0, #0
 8085f12:	f85d fb08 	ldr.w	pc, [sp], #8
 8085f16:	bf00      	nop

08085f18 <__aeabi_dcmpge>:
 8085f18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085f1c:	f7ff ffce 	bl	8085ebc <__aeabi_cdrcmple>
 8085f20:	bf94      	ite	ls
 8085f22:	2001      	movls	r0, #1
 8085f24:	2000      	movhi	r0, #0
 8085f26:	f85d fb08 	ldr.w	pc, [sp], #8
 8085f2a:	bf00      	nop

08085f2c <__aeabi_dcmpgt>:
 8085f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085f30:	f7ff ffc4 	bl	8085ebc <__aeabi_cdrcmple>
 8085f34:	bf34      	ite	cc
 8085f36:	2001      	movcc	r0, #1
 8085f38:	2000      	movcs	r0, #0
 8085f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8085f3e:	bf00      	nop

08085f40 <__aeabi_dcmpun>:
 8085f40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8085f44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8085f48:	d102      	bne.n	8085f50 <__aeabi_dcmpun+0x10>
 8085f4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8085f4e:	d10a      	bne.n	8085f66 <__aeabi_dcmpun+0x26>
 8085f50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8085f54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8085f58:	d102      	bne.n	8085f60 <__aeabi_dcmpun+0x20>
 8085f5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8085f5e:	d102      	bne.n	8085f66 <__aeabi_dcmpun+0x26>
 8085f60:	f04f 0000 	mov.w	r0, #0
 8085f64:	4770      	bx	lr
 8085f66:	f04f 0001 	mov.w	r0, #1
 8085f6a:	4770      	bx	lr

08085f6c <__aeabi_d2iz>:
 8085f6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8085f70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8085f74:	d215      	bcs.n	8085fa2 <__aeabi_d2iz+0x36>
 8085f76:	d511      	bpl.n	8085f9c <__aeabi_d2iz+0x30>
 8085f78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8085f7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8085f80:	d912      	bls.n	8085fa8 <__aeabi_d2iz+0x3c>
 8085f82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8085f86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8085f8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8085f8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8085f92:	fa23 f002 	lsr.w	r0, r3, r2
 8085f96:	bf18      	it	ne
 8085f98:	4240      	negne	r0, r0
 8085f9a:	4770      	bx	lr
 8085f9c:	f04f 0000 	mov.w	r0, #0
 8085fa0:	4770      	bx	lr
 8085fa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8085fa6:	d105      	bne.n	8085fb4 <__aeabi_d2iz+0x48>
 8085fa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8085fac:	bf08      	it	eq
 8085fae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8085fb2:	4770      	bx	lr
 8085fb4:	f04f 0000 	mov.w	r0, #0
 8085fb8:	4770      	bx	lr
 8085fba:	bf00      	nop

08085fbc <__aeabi_d2uiz>:
 8085fbc:	004a      	lsls	r2, r1, #1
 8085fbe:	d211      	bcs.n	8085fe4 <__aeabi_d2uiz+0x28>
 8085fc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8085fc4:	d211      	bcs.n	8085fea <__aeabi_d2uiz+0x2e>
 8085fc6:	d50d      	bpl.n	8085fe4 <__aeabi_d2uiz+0x28>
 8085fc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8085fcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8085fd0:	d40e      	bmi.n	8085ff0 <__aeabi_d2uiz+0x34>
 8085fd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8085fd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8085fda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8085fde:	fa23 f002 	lsr.w	r0, r3, r2
 8085fe2:	4770      	bx	lr
 8085fe4:	f04f 0000 	mov.w	r0, #0
 8085fe8:	4770      	bx	lr
 8085fea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8085fee:	d102      	bne.n	8085ff6 <__aeabi_d2uiz+0x3a>
 8085ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8085ff4:	4770      	bx	lr
 8085ff6:	f04f 0000 	mov.w	r0, #0
 8085ffa:	4770      	bx	lr

08085ffc <__aeabi_frsub>:
 8085ffc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8086000:	e002      	b.n	8086008 <__addsf3>
 8086002:	bf00      	nop

08086004 <__aeabi_fsub>:
 8086004:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08086008 <__addsf3>:
 8086008:	0042      	lsls	r2, r0, #1
 808600a:	bf1f      	itttt	ne
 808600c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8086010:	ea92 0f03 	teqne	r2, r3
 8086014:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8086018:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808601c:	d06a      	beq.n	80860f4 <__addsf3+0xec>
 808601e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8086022:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8086026:	bfc1      	itttt	gt
 8086028:	18d2      	addgt	r2, r2, r3
 808602a:	4041      	eorgt	r1, r0
 808602c:	4048      	eorgt	r0, r1
 808602e:	4041      	eorgt	r1, r0
 8086030:	bfb8      	it	lt
 8086032:	425b      	neglt	r3, r3
 8086034:	2b19      	cmp	r3, #25
 8086036:	bf88      	it	hi
 8086038:	4770      	bxhi	lr
 808603a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808603e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086042:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8086046:	bf18      	it	ne
 8086048:	4240      	negne	r0, r0
 808604a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808604e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8086052:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8086056:	bf18      	it	ne
 8086058:	4249      	negne	r1, r1
 808605a:	ea92 0f03 	teq	r2, r3
 808605e:	d03f      	beq.n	80860e0 <__addsf3+0xd8>
 8086060:	f1a2 0201 	sub.w	r2, r2, #1
 8086064:	fa41 fc03 	asr.w	ip, r1, r3
 8086068:	eb10 000c 	adds.w	r0, r0, ip
 808606c:	f1c3 0320 	rsb	r3, r3, #32
 8086070:	fa01 f103 	lsl.w	r1, r1, r3
 8086074:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8086078:	d502      	bpl.n	8086080 <__addsf3+0x78>
 808607a:	4249      	negs	r1, r1
 808607c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8086080:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8086084:	d313      	bcc.n	80860ae <__addsf3+0xa6>
 8086086:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808608a:	d306      	bcc.n	808609a <__addsf3+0x92>
 808608c:	0840      	lsrs	r0, r0, #1
 808608e:	ea4f 0131 	mov.w	r1, r1, rrx
 8086092:	f102 0201 	add.w	r2, r2, #1
 8086096:	2afe      	cmp	r2, #254	; 0xfe
 8086098:	d251      	bcs.n	808613e <__addsf3+0x136>
 808609a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808609e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80860a2:	bf08      	it	eq
 80860a4:	f020 0001 	biceq.w	r0, r0, #1
 80860a8:	ea40 0003 	orr.w	r0, r0, r3
 80860ac:	4770      	bx	lr
 80860ae:	0049      	lsls	r1, r1, #1
 80860b0:	eb40 0000 	adc.w	r0, r0, r0
 80860b4:	3a01      	subs	r2, #1
 80860b6:	bf28      	it	cs
 80860b8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80860bc:	d2ed      	bcs.n	808609a <__addsf3+0x92>
 80860be:	fab0 fc80 	clz	ip, r0
 80860c2:	f1ac 0c08 	sub.w	ip, ip, #8
 80860c6:	ebb2 020c 	subs.w	r2, r2, ip
 80860ca:	fa00 f00c 	lsl.w	r0, r0, ip
 80860ce:	bfaa      	itet	ge
 80860d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80860d4:	4252      	neglt	r2, r2
 80860d6:	4318      	orrge	r0, r3
 80860d8:	bfbc      	itt	lt
 80860da:	40d0      	lsrlt	r0, r2
 80860dc:	4318      	orrlt	r0, r3
 80860de:	4770      	bx	lr
 80860e0:	f092 0f00 	teq	r2, #0
 80860e4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80860e8:	bf06      	itte	eq
 80860ea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80860ee:	3201      	addeq	r2, #1
 80860f0:	3b01      	subne	r3, #1
 80860f2:	e7b5      	b.n	8086060 <__addsf3+0x58>
 80860f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80860f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80860fc:	bf18      	it	ne
 80860fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8086102:	d021      	beq.n	8086148 <__addsf3+0x140>
 8086104:	ea92 0f03 	teq	r2, r3
 8086108:	d004      	beq.n	8086114 <__addsf3+0x10c>
 808610a:	f092 0f00 	teq	r2, #0
 808610e:	bf08      	it	eq
 8086110:	4608      	moveq	r0, r1
 8086112:	4770      	bx	lr
 8086114:	ea90 0f01 	teq	r0, r1
 8086118:	bf1c      	itt	ne
 808611a:	2000      	movne	r0, #0
 808611c:	4770      	bxne	lr
 808611e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8086122:	d104      	bne.n	808612e <__addsf3+0x126>
 8086124:	0040      	lsls	r0, r0, #1
 8086126:	bf28      	it	cs
 8086128:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808612c:	4770      	bx	lr
 808612e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8086132:	bf3c      	itt	cc
 8086134:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8086138:	4770      	bxcc	lr
 808613a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808613e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8086142:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086146:	4770      	bx	lr
 8086148:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808614c:	bf16      	itet	ne
 808614e:	4608      	movne	r0, r1
 8086150:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8086154:	4601      	movne	r1, r0
 8086156:	0242      	lsls	r2, r0, #9
 8086158:	bf06      	itte	eq
 808615a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808615e:	ea90 0f01 	teqeq	r0, r1
 8086162:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8086166:	4770      	bx	lr

08086168 <__aeabi_ui2f>:
 8086168:	f04f 0300 	mov.w	r3, #0
 808616c:	e004      	b.n	8086178 <__aeabi_i2f+0x8>
 808616e:	bf00      	nop

08086170 <__aeabi_i2f>:
 8086170:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8086174:	bf48      	it	mi
 8086176:	4240      	negmi	r0, r0
 8086178:	ea5f 0c00 	movs.w	ip, r0
 808617c:	bf08      	it	eq
 808617e:	4770      	bxeq	lr
 8086180:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8086184:	4601      	mov	r1, r0
 8086186:	f04f 0000 	mov.w	r0, #0
 808618a:	e01c      	b.n	80861c6 <__aeabi_l2f+0x2a>

0808618c <__aeabi_ul2f>:
 808618c:	ea50 0201 	orrs.w	r2, r0, r1
 8086190:	bf08      	it	eq
 8086192:	4770      	bxeq	lr
 8086194:	f04f 0300 	mov.w	r3, #0
 8086198:	e00a      	b.n	80861b0 <__aeabi_l2f+0x14>
 808619a:	bf00      	nop

0808619c <__aeabi_l2f>:
 808619c:	ea50 0201 	orrs.w	r2, r0, r1
 80861a0:	bf08      	it	eq
 80861a2:	4770      	bxeq	lr
 80861a4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80861a8:	d502      	bpl.n	80861b0 <__aeabi_l2f+0x14>
 80861aa:	4240      	negs	r0, r0
 80861ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80861b0:	ea5f 0c01 	movs.w	ip, r1
 80861b4:	bf02      	ittt	eq
 80861b6:	4684      	moveq	ip, r0
 80861b8:	4601      	moveq	r1, r0
 80861ba:	2000      	moveq	r0, #0
 80861bc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80861c0:	bf08      	it	eq
 80861c2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80861c6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80861ca:	fabc f28c 	clz	r2, ip
 80861ce:	3a08      	subs	r2, #8
 80861d0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80861d4:	db10      	blt.n	80861f8 <__aeabi_l2f+0x5c>
 80861d6:	fa01 fc02 	lsl.w	ip, r1, r2
 80861da:	4463      	add	r3, ip
 80861dc:	fa00 fc02 	lsl.w	ip, r0, r2
 80861e0:	f1c2 0220 	rsb	r2, r2, #32
 80861e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80861e8:	fa20 f202 	lsr.w	r2, r0, r2
 80861ec:	eb43 0002 	adc.w	r0, r3, r2
 80861f0:	bf08      	it	eq
 80861f2:	f020 0001 	biceq.w	r0, r0, #1
 80861f6:	4770      	bx	lr
 80861f8:	f102 0220 	add.w	r2, r2, #32
 80861fc:	fa01 fc02 	lsl.w	ip, r1, r2
 8086200:	f1c2 0220 	rsb	r2, r2, #32
 8086204:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8086208:	fa21 f202 	lsr.w	r2, r1, r2
 808620c:	eb43 0002 	adc.w	r0, r3, r2
 8086210:	bf08      	it	eq
 8086212:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8086216:	4770      	bx	lr

08086218 <__aeabi_fmul>:
 8086218:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808621c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8086220:	bf1e      	ittt	ne
 8086222:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8086226:	ea92 0f0c 	teqne	r2, ip
 808622a:	ea93 0f0c 	teqne	r3, ip
 808622e:	d06f      	beq.n	8086310 <__aeabi_fmul+0xf8>
 8086230:	441a      	add	r2, r3
 8086232:	ea80 0c01 	eor.w	ip, r0, r1
 8086236:	0240      	lsls	r0, r0, #9
 8086238:	bf18      	it	ne
 808623a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808623e:	d01e      	beq.n	808627e <__aeabi_fmul+0x66>
 8086240:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8086244:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8086248:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808624c:	fba0 3101 	umull	r3, r1, r0, r1
 8086250:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8086254:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8086258:	bf3e      	ittt	cc
 808625a:	0049      	lslcc	r1, r1, #1
 808625c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8086260:	005b      	lslcc	r3, r3, #1
 8086262:	ea40 0001 	orr.w	r0, r0, r1
 8086266:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808626a:	2afd      	cmp	r2, #253	; 0xfd
 808626c:	d81d      	bhi.n	80862aa <__aeabi_fmul+0x92>
 808626e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8086272:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8086276:	bf08      	it	eq
 8086278:	f020 0001 	biceq.w	r0, r0, #1
 808627c:	4770      	bx	lr
 808627e:	f090 0f00 	teq	r0, #0
 8086282:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8086286:	bf08      	it	eq
 8086288:	0249      	lsleq	r1, r1, #9
 808628a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808628e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8086292:	3a7f      	subs	r2, #127	; 0x7f
 8086294:	bfc2      	ittt	gt
 8086296:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808629a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808629e:	4770      	bxgt	lr
 80862a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80862a4:	f04f 0300 	mov.w	r3, #0
 80862a8:	3a01      	subs	r2, #1
 80862aa:	dc5d      	bgt.n	8086368 <__aeabi_fmul+0x150>
 80862ac:	f112 0f19 	cmn.w	r2, #25
 80862b0:	bfdc      	itt	le
 80862b2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80862b6:	4770      	bxle	lr
 80862b8:	f1c2 0200 	rsb	r2, r2, #0
 80862bc:	0041      	lsls	r1, r0, #1
 80862be:	fa21 f102 	lsr.w	r1, r1, r2
 80862c2:	f1c2 0220 	rsb	r2, r2, #32
 80862c6:	fa00 fc02 	lsl.w	ip, r0, r2
 80862ca:	ea5f 0031 	movs.w	r0, r1, rrx
 80862ce:	f140 0000 	adc.w	r0, r0, #0
 80862d2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80862d6:	bf08      	it	eq
 80862d8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80862dc:	4770      	bx	lr
 80862de:	f092 0f00 	teq	r2, #0
 80862e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80862e6:	bf02      	ittt	eq
 80862e8:	0040      	lsleq	r0, r0, #1
 80862ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80862ee:	3a01      	subeq	r2, #1
 80862f0:	d0f9      	beq.n	80862e6 <__aeabi_fmul+0xce>
 80862f2:	ea40 000c 	orr.w	r0, r0, ip
 80862f6:	f093 0f00 	teq	r3, #0
 80862fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80862fe:	bf02      	ittt	eq
 8086300:	0049      	lsleq	r1, r1, #1
 8086302:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8086306:	3b01      	subeq	r3, #1
 8086308:	d0f9      	beq.n	80862fe <__aeabi_fmul+0xe6>
 808630a:	ea41 010c 	orr.w	r1, r1, ip
 808630e:	e78f      	b.n	8086230 <__aeabi_fmul+0x18>
 8086310:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8086314:	ea92 0f0c 	teq	r2, ip
 8086318:	bf18      	it	ne
 808631a:	ea93 0f0c 	teqne	r3, ip
 808631e:	d00a      	beq.n	8086336 <__aeabi_fmul+0x11e>
 8086320:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8086324:	bf18      	it	ne
 8086326:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808632a:	d1d8      	bne.n	80862de <__aeabi_fmul+0xc6>
 808632c:	ea80 0001 	eor.w	r0, r0, r1
 8086330:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8086334:	4770      	bx	lr
 8086336:	f090 0f00 	teq	r0, #0
 808633a:	bf17      	itett	ne
 808633c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8086340:	4608      	moveq	r0, r1
 8086342:	f091 0f00 	teqne	r1, #0
 8086346:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808634a:	d014      	beq.n	8086376 <__aeabi_fmul+0x15e>
 808634c:	ea92 0f0c 	teq	r2, ip
 8086350:	d101      	bne.n	8086356 <__aeabi_fmul+0x13e>
 8086352:	0242      	lsls	r2, r0, #9
 8086354:	d10f      	bne.n	8086376 <__aeabi_fmul+0x15e>
 8086356:	ea93 0f0c 	teq	r3, ip
 808635a:	d103      	bne.n	8086364 <__aeabi_fmul+0x14c>
 808635c:	024b      	lsls	r3, r1, #9
 808635e:	bf18      	it	ne
 8086360:	4608      	movne	r0, r1
 8086362:	d108      	bne.n	8086376 <__aeabi_fmul+0x15e>
 8086364:	ea80 0001 	eor.w	r0, r0, r1
 8086368:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808636c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8086370:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086374:	4770      	bx	lr
 8086376:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808637a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808637e:	4770      	bx	lr

08086380 <__aeabi_fdiv>:
 8086380:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8086384:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8086388:	bf1e      	ittt	ne
 808638a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808638e:	ea92 0f0c 	teqne	r2, ip
 8086392:	ea93 0f0c 	teqne	r3, ip
 8086396:	d069      	beq.n	808646c <__aeabi_fdiv+0xec>
 8086398:	eba2 0203 	sub.w	r2, r2, r3
 808639c:	ea80 0c01 	eor.w	ip, r0, r1
 80863a0:	0249      	lsls	r1, r1, #9
 80863a2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80863a6:	d037      	beq.n	8086418 <__aeabi_fdiv+0x98>
 80863a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80863ac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80863b0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80863b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80863b8:	428b      	cmp	r3, r1
 80863ba:	bf38      	it	cc
 80863bc:	005b      	lslcc	r3, r3, #1
 80863be:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80863c2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80863c6:	428b      	cmp	r3, r1
 80863c8:	bf24      	itt	cs
 80863ca:	1a5b      	subcs	r3, r3, r1
 80863cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80863d0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80863d4:	bf24      	itt	cs
 80863d6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80863da:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80863de:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80863e2:	bf24      	itt	cs
 80863e4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80863e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80863ec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80863f0:	bf24      	itt	cs
 80863f2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80863f6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80863fa:	011b      	lsls	r3, r3, #4
 80863fc:	bf18      	it	ne
 80863fe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8086402:	d1e0      	bne.n	80863c6 <__aeabi_fdiv+0x46>
 8086404:	2afd      	cmp	r2, #253	; 0xfd
 8086406:	f63f af50 	bhi.w	80862aa <__aeabi_fmul+0x92>
 808640a:	428b      	cmp	r3, r1
 808640c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8086410:	bf08      	it	eq
 8086412:	f020 0001 	biceq.w	r0, r0, #1
 8086416:	4770      	bx	lr
 8086418:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808641c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8086420:	327f      	adds	r2, #127	; 0x7f
 8086422:	bfc2      	ittt	gt
 8086424:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8086428:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808642c:	4770      	bxgt	lr
 808642e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086432:	f04f 0300 	mov.w	r3, #0
 8086436:	3a01      	subs	r2, #1
 8086438:	e737      	b.n	80862aa <__aeabi_fmul+0x92>
 808643a:	f092 0f00 	teq	r2, #0
 808643e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8086442:	bf02      	ittt	eq
 8086444:	0040      	lsleq	r0, r0, #1
 8086446:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808644a:	3a01      	subeq	r2, #1
 808644c:	d0f9      	beq.n	8086442 <__aeabi_fdiv+0xc2>
 808644e:	ea40 000c 	orr.w	r0, r0, ip
 8086452:	f093 0f00 	teq	r3, #0
 8086456:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808645a:	bf02      	ittt	eq
 808645c:	0049      	lsleq	r1, r1, #1
 808645e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8086462:	3b01      	subeq	r3, #1
 8086464:	d0f9      	beq.n	808645a <__aeabi_fdiv+0xda>
 8086466:	ea41 010c 	orr.w	r1, r1, ip
 808646a:	e795      	b.n	8086398 <__aeabi_fdiv+0x18>
 808646c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8086470:	ea92 0f0c 	teq	r2, ip
 8086474:	d108      	bne.n	8086488 <__aeabi_fdiv+0x108>
 8086476:	0242      	lsls	r2, r0, #9
 8086478:	f47f af7d 	bne.w	8086376 <__aeabi_fmul+0x15e>
 808647c:	ea93 0f0c 	teq	r3, ip
 8086480:	f47f af70 	bne.w	8086364 <__aeabi_fmul+0x14c>
 8086484:	4608      	mov	r0, r1
 8086486:	e776      	b.n	8086376 <__aeabi_fmul+0x15e>
 8086488:	ea93 0f0c 	teq	r3, ip
 808648c:	d104      	bne.n	8086498 <__aeabi_fdiv+0x118>
 808648e:	024b      	lsls	r3, r1, #9
 8086490:	f43f af4c 	beq.w	808632c <__aeabi_fmul+0x114>
 8086494:	4608      	mov	r0, r1
 8086496:	e76e      	b.n	8086376 <__aeabi_fmul+0x15e>
 8086498:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808649c:	bf18      	it	ne
 808649e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80864a2:	d1ca      	bne.n	808643a <__aeabi_fdiv+0xba>
 80864a4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80864a8:	f47f af5c 	bne.w	8086364 <__aeabi_fmul+0x14c>
 80864ac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80864b0:	f47f af3c 	bne.w	808632c <__aeabi_fmul+0x114>
 80864b4:	e75f      	b.n	8086376 <__aeabi_fmul+0x15e>
 80864b6:	bf00      	nop

080864b8 <__gesf2>:
 80864b8:	f04f 3cff 	mov.w	ip, #4294967295
 80864bc:	e006      	b.n	80864cc <__cmpsf2+0x4>
 80864be:	bf00      	nop

080864c0 <__lesf2>:
 80864c0:	f04f 0c01 	mov.w	ip, #1
 80864c4:	e002      	b.n	80864cc <__cmpsf2+0x4>
 80864c6:	bf00      	nop

080864c8 <__cmpsf2>:
 80864c8:	f04f 0c01 	mov.w	ip, #1
 80864cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80864d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80864d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80864d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80864dc:	bf18      	it	ne
 80864de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80864e2:	d011      	beq.n	8086508 <__cmpsf2+0x40>
 80864e4:	b001      	add	sp, #4
 80864e6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80864ea:	bf18      	it	ne
 80864ec:	ea90 0f01 	teqne	r0, r1
 80864f0:	bf58      	it	pl
 80864f2:	ebb2 0003 	subspl.w	r0, r2, r3
 80864f6:	bf88      	it	hi
 80864f8:	17c8      	asrhi	r0, r1, #31
 80864fa:	bf38      	it	cc
 80864fc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8086500:	bf18      	it	ne
 8086502:	f040 0001 	orrne.w	r0, r0, #1
 8086506:	4770      	bx	lr
 8086508:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808650c:	d102      	bne.n	8086514 <__cmpsf2+0x4c>
 808650e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8086512:	d105      	bne.n	8086520 <__cmpsf2+0x58>
 8086514:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8086518:	d1e4      	bne.n	80864e4 <__cmpsf2+0x1c>
 808651a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808651e:	d0e1      	beq.n	80864e4 <__cmpsf2+0x1c>
 8086520:	f85d 0b04 	ldr.w	r0, [sp], #4
 8086524:	4770      	bx	lr
 8086526:	bf00      	nop

08086528 <__aeabi_cfrcmple>:
 8086528:	4684      	mov	ip, r0
 808652a:	4608      	mov	r0, r1
 808652c:	4661      	mov	r1, ip
 808652e:	e7ff      	b.n	8086530 <__aeabi_cfcmpeq>

08086530 <__aeabi_cfcmpeq>:
 8086530:	b50f      	push	{r0, r1, r2, r3, lr}
 8086532:	f7ff ffc9 	bl	80864c8 <__cmpsf2>
 8086536:	2800      	cmp	r0, #0
 8086538:	bf48      	it	mi
 808653a:	f110 0f00 	cmnmi.w	r0, #0
 808653e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08086540 <__aeabi_fcmpeq>:
 8086540:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086544:	f7ff fff4 	bl	8086530 <__aeabi_cfcmpeq>
 8086548:	bf0c      	ite	eq
 808654a:	2001      	moveq	r0, #1
 808654c:	2000      	movne	r0, #0
 808654e:	f85d fb08 	ldr.w	pc, [sp], #8
 8086552:	bf00      	nop

08086554 <__aeabi_fcmplt>:
 8086554:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086558:	f7ff ffea 	bl	8086530 <__aeabi_cfcmpeq>
 808655c:	bf34      	ite	cc
 808655e:	2001      	movcc	r0, #1
 8086560:	2000      	movcs	r0, #0
 8086562:	f85d fb08 	ldr.w	pc, [sp], #8
 8086566:	bf00      	nop

08086568 <__aeabi_fcmple>:
 8086568:	f84d ed08 	str.w	lr, [sp, #-8]!
 808656c:	f7ff ffe0 	bl	8086530 <__aeabi_cfcmpeq>
 8086570:	bf94      	ite	ls
 8086572:	2001      	movls	r0, #1
 8086574:	2000      	movhi	r0, #0
 8086576:	f85d fb08 	ldr.w	pc, [sp], #8
 808657a:	bf00      	nop

0808657c <__aeabi_fcmpge>:
 808657c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086580:	f7ff ffd2 	bl	8086528 <__aeabi_cfrcmple>
 8086584:	bf94      	ite	ls
 8086586:	2001      	movls	r0, #1
 8086588:	2000      	movhi	r0, #0
 808658a:	f85d fb08 	ldr.w	pc, [sp], #8
 808658e:	bf00      	nop

08086590 <__aeabi_fcmpgt>:
 8086590:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086594:	f7ff ffc8 	bl	8086528 <__aeabi_cfrcmple>
 8086598:	bf34      	ite	cc
 808659a:	2001      	movcc	r0, #1
 808659c:	2000      	movcs	r0, #0
 808659e:	f85d fb08 	ldr.w	pc, [sp], #8
 80865a2:	bf00      	nop

080865a4 <__aeabi_f2iz>:
 80865a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80865a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80865ac:	d30f      	bcc.n	80865ce <__aeabi_f2iz+0x2a>
 80865ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80865b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80865b6:	d90d      	bls.n	80865d4 <__aeabi_f2iz+0x30>
 80865b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80865bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80865c0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80865c4:	fa23 f002 	lsr.w	r0, r3, r2
 80865c8:	bf18      	it	ne
 80865ca:	4240      	negne	r0, r0
 80865cc:	4770      	bx	lr
 80865ce:	f04f 0000 	mov.w	r0, #0
 80865d2:	4770      	bx	lr
 80865d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80865d8:	d101      	bne.n	80865de <__aeabi_f2iz+0x3a>
 80865da:	0242      	lsls	r2, r0, #9
 80865dc:	d105      	bne.n	80865ea <__aeabi_f2iz+0x46>
 80865de:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80865e2:	bf08      	it	eq
 80865e4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80865e8:	4770      	bx	lr
 80865ea:	f04f 0000 	mov.w	r0, #0
 80865ee:	4770      	bx	lr

080865f0 <__aeabi_f2uiz>:
 80865f0:	0042      	lsls	r2, r0, #1
 80865f2:	d20e      	bcs.n	8086612 <__aeabi_f2uiz+0x22>
 80865f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80865f8:	d30b      	bcc.n	8086612 <__aeabi_f2uiz+0x22>
 80865fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80865fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8086602:	d409      	bmi.n	8086618 <__aeabi_f2uiz+0x28>
 8086604:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8086608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808660c:	fa23 f002 	lsr.w	r0, r3, r2
 8086610:	4770      	bx	lr
 8086612:	f04f 0000 	mov.w	r0, #0
 8086616:	4770      	bx	lr
 8086618:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808661c:	d101      	bne.n	8086622 <__aeabi_f2uiz+0x32>
 808661e:	0242      	lsls	r2, r0, #9
 8086620:	d102      	bne.n	8086628 <__aeabi_f2uiz+0x38>
 8086622:	f04f 30ff 	mov.w	r0, #4294967295
 8086626:	4770      	bx	lr
 8086628:	f04f 0000 	mov.w	r0, #0
 808662c:	4770      	bx	lr
 808662e:	bf00      	nop

08086630 <atexit>:
 8086630:	2300      	movs	r3, #0
 8086632:	4601      	mov	r1, r0
 8086634:	461a      	mov	r2, r3
 8086636:	4618      	mov	r0, r3
 8086638:	f000 b878 	b.w	808672c <__register_exitproc>

0808663c <memcmp>:
 808663c:	b510      	push	{r4, lr}
 808663e:	3901      	subs	r1, #1
 8086640:	4402      	add	r2, r0
 8086642:	4290      	cmp	r0, r2
 8086644:	d101      	bne.n	808664a <memcmp+0xe>
 8086646:	2000      	movs	r0, #0
 8086648:	e005      	b.n	8086656 <memcmp+0x1a>
 808664a:	7803      	ldrb	r3, [r0, #0]
 808664c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8086650:	42a3      	cmp	r3, r4
 8086652:	d001      	beq.n	8086658 <memcmp+0x1c>
 8086654:	1b18      	subs	r0, r3, r4
 8086656:	bd10      	pop	{r4, pc}
 8086658:	3001      	adds	r0, #1
 808665a:	e7f2      	b.n	8086642 <memcmp+0x6>

0808665c <memcpy>:
 808665c:	440a      	add	r2, r1
 808665e:	4291      	cmp	r1, r2
 8086660:	f100 33ff 	add.w	r3, r0, #4294967295
 8086664:	d100      	bne.n	8086668 <memcpy+0xc>
 8086666:	4770      	bx	lr
 8086668:	b510      	push	{r4, lr}
 808666a:	f811 4b01 	ldrb.w	r4, [r1], #1
 808666e:	4291      	cmp	r1, r2
 8086670:	f803 4f01 	strb.w	r4, [r3, #1]!
 8086674:	d1f9      	bne.n	808666a <memcpy+0xe>
 8086676:	bd10      	pop	{r4, pc}

08086678 <memset>:
 8086678:	4603      	mov	r3, r0
 808667a:	4402      	add	r2, r0
 808667c:	4293      	cmp	r3, r2
 808667e:	d100      	bne.n	8086682 <memset+0xa>
 8086680:	4770      	bx	lr
 8086682:	f803 1b01 	strb.w	r1, [r3], #1
 8086686:	e7f9      	b.n	808667c <memset+0x4>

08086688 <srand>:
 8086688:	b538      	push	{r3, r4, r5, lr}
 808668a:	4b10      	ldr	r3, [pc, #64]	; (80866cc <srand+0x44>)
 808668c:	4604      	mov	r4, r0
 808668e:	681d      	ldr	r5, [r3, #0]
 8086690:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8086692:	b9b3      	cbnz	r3, 80866c2 <srand+0x3a>
 8086694:	2018      	movs	r0, #24
 8086696:	f7fd fdc7 	bl	8084228 <malloc>
 808669a:	4602      	mov	r2, r0
 808669c:	63a8      	str	r0, [r5, #56]	; 0x38
 808669e:	b920      	cbnz	r0, 80866aa <srand+0x22>
 80866a0:	2142      	movs	r1, #66	; 0x42
 80866a2:	4b0b      	ldr	r3, [pc, #44]	; (80866d0 <srand+0x48>)
 80866a4:	480b      	ldr	r0, [pc, #44]	; (80866d4 <srand+0x4c>)
 80866a6:	f7fd fdef 	bl	8084288 <__assert_func>
 80866aa:	490b      	ldr	r1, [pc, #44]	; (80866d8 <srand+0x50>)
 80866ac:	4b0b      	ldr	r3, [pc, #44]	; (80866dc <srand+0x54>)
 80866ae:	e9c0 1300 	strd	r1, r3, [r0]
 80866b2:	4b0b      	ldr	r3, [pc, #44]	; (80866e0 <srand+0x58>)
 80866b4:	2100      	movs	r1, #0
 80866b6:	6083      	str	r3, [r0, #8]
 80866b8:	230b      	movs	r3, #11
 80866ba:	8183      	strh	r3, [r0, #12]
 80866bc:	2001      	movs	r0, #1
 80866be:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80866c2:	2200      	movs	r2, #0
 80866c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80866c6:	611c      	str	r4, [r3, #16]
 80866c8:	615a      	str	r2, [r3, #20]
 80866ca:	bd38      	pop	{r3, r4, r5, pc}
 80866cc:	20000034 	.word	0x20000034
 80866d0:	08086b75 	.word	0x08086b75
 80866d4:	08086b8c 	.word	0x08086b8c
 80866d8:	abcd330e 	.word	0xabcd330e
 80866dc:	e66d1234 	.word	0xe66d1234
 80866e0:	0005deec 	.word	0x0005deec

080866e4 <strdup>:
 80866e4:	4b02      	ldr	r3, [pc, #8]	; (80866f0 <strdup+0xc>)
 80866e6:	4601      	mov	r1, r0
 80866e8:	6818      	ldr	r0, [r3, #0]
 80866ea:	f000 b803 	b.w	80866f4 <_strdup_r>
 80866ee:	bf00      	nop
 80866f0:	20000034 	.word	0x20000034

080866f4 <_strdup_r>:
 80866f4:	b570      	push	{r4, r5, r6, lr}
 80866f6:	4604      	mov	r4, r0
 80866f8:	4608      	mov	r0, r1
 80866fa:	460d      	mov	r5, r1
 80866fc:	f000 f80d 	bl	808671a <strlen>
 8086700:	1c46      	adds	r6, r0, #1
 8086702:	4631      	mov	r1, r6
 8086704:	4620      	mov	r0, r4
 8086706:	f7fd fdb7 	bl	8084278 <_malloc_r>
 808670a:	4604      	mov	r4, r0
 808670c:	b118      	cbz	r0, 8086716 <_strdup_r+0x22>
 808670e:	4632      	mov	r2, r6
 8086710:	4629      	mov	r1, r5
 8086712:	f7ff ffa3 	bl	808665c <memcpy>
 8086716:	4620      	mov	r0, r4
 8086718:	bd70      	pop	{r4, r5, r6, pc}

0808671a <strlen>:
 808671a:	4603      	mov	r3, r0
 808671c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8086720:	2a00      	cmp	r2, #0
 8086722:	d1fb      	bne.n	808671c <strlen+0x2>
 8086724:	1a18      	subs	r0, r3, r0
 8086726:	3801      	subs	r0, #1
 8086728:	4770      	bx	lr
	...

0808672c <__register_exitproc>:
 808672c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8086730:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80867e0 <__register_exitproc+0xb4>
 8086734:	4606      	mov	r6, r0
 8086736:	f8d8 0000 	ldr.w	r0, [r8]
 808673a:	461f      	mov	r7, r3
 808673c:	460d      	mov	r5, r1
 808673e:	4691      	mov	r9, r2
 8086740:	f000 f858 	bl	80867f4 <__retarget_lock_acquire_recursive>
 8086744:	4b27      	ldr	r3, [pc, #156]	; (80867e4 <__register_exitproc+0xb8>)
 8086746:	681c      	ldr	r4, [r3, #0]
 8086748:	b934      	cbnz	r4, 8086758 <__register_exitproc+0x2c>
 808674a:	4c27      	ldr	r4, [pc, #156]	; (80867e8 <__register_exitproc+0xbc>)
 808674c:	601c      	str	r4, [r3, #0]
 808674e:	4b27      	ldr	r3, [pc, #156]	; (80867ec <__register_exitproc+0xc0>)
 8086750:	b113      	cbz	r3, 8086758 <__register_exitproc+0x2c>
 8086752:	681b      	ldr	r3, [r3, #0]
 8086754:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8086758:	6863      	ldr	r3, [r4, #4]
 808675a:	2b1f      	cmp	r3, #31
 808675c:	dd07      	ble.n	808676e <__register_exitproc+0x42>
 808675e:	f8d8 0000 	ldr.w	r0, [r8]
 8086762:	f000 f849 	bl	80867f8 <__retarget_lock_release_recursive>
 8086766:	f04f 30ff 	mov.w	r0, #4294967295
 808676a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808676e:	b35e      	cbz	r6, 80867c8 <__register_exitproc+0x9c>
 8086770:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8086774:	b988      	cbnz	r0, 808679a <__register_exitproc+0x6e>
 8086776:	4b1e      	ldr	r3, [pc, #120]	; (80867f0 <__register_exitproc+0xc4>)
 8086778:	b923      	cbnz	r3, 8086784 <__register_exitproc+0x58>
 808677a:	f8d8 0000 	ldr.w	r0, [r8]
 808677e:	f000 f83a 	bl	80867f6 <__retarget_lock_release>
 8086782:	e7f0      	b.n	8086766 <__register_exitproc+0x3a>
 8086784:	f44f 7084 	mov.w	r0, #264	; 0x108
 8086788:	f7fd fd4e 	bl	8084228 <malloc>
 808678c:	2800      	cmp	r0, #0
 808678e:	d0f4      	beq.n	808677a <__register_exitproc+0x4e>
 8086790:	2300      	movs	r3, #0
 8086792:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8086796:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 808679a:	2201      	movs	r2, #1
 808679c:	6863      	ldr	r3, [r4, #4]
 808679e:	2e02      	cmp	r6, #2
 80867a0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80867a4:	fa02 f203 	lsl.w	r2, r2, r3
 80867a8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80867ac:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80867b0:	ea43 0302 	orr.w	r3, r3, r2
 80867b4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80867b8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80867bc:	bf02      	ittt	eq
 80867be:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80867c2:	4313      	orreq	r3, r2
 80867c4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80867c8:	6863      	ldr	r3, [r4, #4]
 80867ca:	f8d8 0000 	ldr.w	r0, [r8]
 80867ce:	1c5a      	adds	r2, r3, #1
 80867d0:	3302      	adds	r3, #2
 80867d2:	6062      	str	r2, [r4, #4]
 80867d4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80867d8:	f000 f80e 	bl	80867f8 <__retarget_lock_release_recursive>
 80867dc:	2000      	movs	r0, #0
 80867de:	e7c4      	b.n	808676a <__register_exitproc+0x3e>
 80867e0:	20000098 	.word	0x20000098
 80867e4:	20000b5c 	.word	0x20000b5c
 80867e8:	20000ad0 	.word	0x20000ad0
 80867ec:	00000000 	.word	0x00000000
 80867f0:	08084229 	.word	0x08084229

080867f4 <__retarget_lock_acquire_recursive>:
 80867f4:	4770      	bx	lr

080867f6 <__retarget_lock_release>:
 80867f6:	4770      	bx	lr

080867f8 <__retarget_lock_release_recursive>:
 80867f8:	4770      	bx	lr

080867fa <link_code_end>:
	...

080867fc <dynalib_user>:
 80867fc:	001d 0808 005d 0808 0085 0808 0089 0808     ....]...........
 808680c:	0000 0000 7271 7473 0075 0000 0000 0000     ....qrstu.......
	...
 808682c:	0000 bf80 0000 0000 cccd bf4c 0000 0000     ..........L.....
 808683c:	0000 0000 cccd be4c 0000 bf00 0000 0000     ......L.........
 808684c:	0000 bf80 0000 0000 0000 0000 0000 0000     ................
	...
 8086868:	cccd 3dcc 3333 3f33 0000 0000 cccd bf4c     ...=333?......L.
 8086878:	cccd bdcc 0000 0000 0000 0000 0000 0000     ................
	...
 8086898:	0100 0402 1008 0000 0000 0000 0000 0000     ................

080868a8 <_ZL14MUX_BY_CHANNEL>:
 80868a8:	4000 5000 6000 7000                         .@.P.`.p

080868b0 <_ZL11daysInMonth>:
 80868b0:	1c1f 1e1f 1e1f 1f1f 1f1e 301e 3a38 3033     ...........08:30
 80868c0:	303a 0033 7541 2067 3332 3220 3230 0034     :03.Aug 23 2024.
 80868d0:	6f43 6c75 2064 6f6e 2074 6966 646e 6120     Could not find a
 80868e0:	7620 6c61 6469 4220 454d 3836 2030 6573      valid BME680 se
 80868f0:	736e 726f 202c 6863 6365 206b 6977 6972     nsor, check wiri
 8086900:	676e 0021 6e49 6573 7472 5320 2044 6143     ng!.Insert SD Ca
 8086910:	6472 7420 206f 6562 6967 216e 2500 5f73     rd to begin!.%s_
 8086920:	3025 7534 255f 3230 5f75 3025 7532 432e     %04u_%02u_%02u.C
 8086930:	5653 2500 3430 2d75 3025 7532 252d 3230     SV.%04u-%02u-%02
 8086940:	5475 3025 7532 253a 3230 3a75 3025 7532     uT%02u:%02u:%02u
 8086950:	4600 6961 656c 2064 6f74 7020 7265 6f66     .Failed to perfo
 8086960:	6d72 7220 6165 6964 676e 3a20 0028 6143     rm reading :(.Ca
 8086970:	6e6e 746f 6620 6e69 2064 4453 4320 7261     nnot find SD Car
 8086980:	2164 2c00 5b00 7525 252c 2c75 7525 252c     d!.,.[%u,%u,%u,%
 8086990:	2c75 7525 252c 2e30 6632 252c 2e30 6632     u,%u,%0.2f,%0.2f
 80869a0:	252c 2c66 7525 005d                         ,%f,%u].

080869a8 <_ZTV6SdFile>:
	...
 80869b0:	1ea1 0808 1ec9 0808 1ed7 0808 1ea3 0808     ................

080869c0 <_ZTV5SdFat>:
	...
 80869c8:	1ec1 0808 1eb9 0808 1eb1 0808 1ea9 0808     ................
 80869d8:	504c 444f 3241                               LPODA2.

080869df <_ZL6lpodID>:
 80869df:	504c 444f 3241 0000                          LPODA2...

080869e8 <_ZTV5SdSpi>:
	...
 80869f0:	31f9 0808 3209 0808 31f5 0808 3281 0808     .1...2...1...2..
 8086a00:	32a5 0808 3295 0808 32e9 0808               .2...2...2..

08086a0c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 8086a0c:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
 8086a1c:	766f 0066 002e 7061 0070 5925 252d 2d6d     ovf...app.%Y-%m-
 8086a2c:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
 8086a3c:	7463 6d69 0065 0000                         ctime...

08086a44 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8086a4c:	49a9 0808 49af 0808 49ed 0808 49bd 0808     .I...I...I...I..
 8086a5c:	49ab 0808                                   .I..

08086a60 <_ZTV9IPAddress>:
	...
 8086a68:	4ee3 0808 4ee1 0808 4f15 0808               .N...N...O..

08086a74 <_ZTV9USBSerial>:
	...
 8086a7c:	4f87 0808 4fed 0808 4fc5 0808 4549 0808     .O...O...O..IE..
 8086a8c:	4fb7 0808 4f89 0808 4f99 0808 4fe7 0808     .O...O...O...O..
 8086a9c:	4fa9 0808 4f81 0808                         .O...O..

08086aa4 <_ZTVN5spark13CellularClassE>:
	...
 8086aac:	51af 0808 51a5 0808 519b 0808 5115 0808     .Q...Q...Q...Q..
 8086abc:	518f 0808 5183 0808 53e1 0808 53e9 0808     .Q...Q...S...S..
 8086acc:	5177 0808 516f 0808 5165 0808 515b 0808     wQ..oQ..eQ..[Q..
 8086adc:	511f 0808                                   .Q..

08086ae0 <_ZTV11USARTSerial>:
	...
 8086ae8:	51e9 0808 5251 0808 522d 0808 4549 0808     .Q..QR..-R..IE..
 8086af8:	51fd 0808 5219 0808 520b 0808 5227 0808     .Q...R...R..'R..
 8086b08:	51eb 0808 51ef 0808                         .Q...Q..

08086b10 <_ZTV7TwoWire>:
	...
 8086b18:	52b1 0808 52fb 0808 52d3 0808 52b3 0808     .R...R...R...R..
 8086b28:	52db 0808 52e3 0808 52eb 0808 52f3 0808     .R...R...R...R..

08086b38 <_ZTVN5spark12NetworkClassE>:
	...
 8086b40:	53a1 0808 53ab 0808 53b5 0808 53bf 0808     .S...S...S...S..
 8086b50:	53c9 0808 53d5 0808 53e1 0808 53e9 0808     .S...S...S...S..
 8086b60:	53f1 0808 53fd 0808 5405 0808 540f 0808     .S...S...T...T..
 8086b70:	5419 0808                                   .T..

08086b74 <_ZSt7nothrow>:
 8086b74:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 8086b84:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 8086b94:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 8086ba4:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 8086bb4:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 8086bc4:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 8086bd4:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 8086be4:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 8086bf4:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 8086c04:	646e 632e                                    nd.c.

08086c09 <link_const_variable_data_end>:
 8086c09:	00          	.byte	0x00
	...

08086c0c <link_constructors_location>:
 8086c0c:	0808251d 	.word	0x0808251d
 8086c10:	08083371 	.word	0x08083371
 8086c14:	08084525 	.word	0x08084525
 8086c18:	080847c5 	.word	0x080847c5
 8086c1c:	080847d5 	.word	0x080847d5
 8086c20:	08084825 	.word	0x08084825
 8086c24:	080851b9 	.word	0x080851b9
 8086c28:	08085461 	.word	0x08085461
 8086c2c:	080855e9 	.word	0x080855e9
